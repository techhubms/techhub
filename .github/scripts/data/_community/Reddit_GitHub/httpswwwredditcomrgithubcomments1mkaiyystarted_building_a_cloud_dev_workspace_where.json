{
  "FeedUrl": "https://www.reddit.com/r/github/.rss",
  "Link": "https://www.reddit.com/r/github/comments/1mkaiyy/started_building_a_cloud_dev_workspace_where/",
  "Tags": [
    "github"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit GitHub",
  "ProcessedDate": "2025-08-08 16:18:53",
  "Title": "Started building a cloud dev workspace where contributors don’t see the whole repo",
  "FeedLevelAuthor": "Github: social coding",
  "EnhancedContent": "One of the things that’s always felt risky to me is how much access we give devs—especially when they’re external or temporary. Just to fix a small bug or add a feature, they often get access to the *entire* codebase, configs, and infra. Not ideal.\n\nSo we’ve been experimenting with a system where:\n\n- The **main repo stays private**—nobody clones it directly\n- Devs work in a **browser-based IDE** with only the files/services they need\n- The platform **auto-documents** the relevant parts and generates context\n- Access is scoped by default, but still flexible\n\nBasically, it’s like a zero-trust model for dev workspaces—faster onboarding, but tighter control.\n\nCurious if anyone else has tried building or using setups like this? Or run into similar access issues while scaling dev teams?\n\nYou’re mentioning repo, but I don’t think you mean VCS repo do you.\n\nI am impressed, not trusting the devs even to clone the repository is strange in my point of view. I agree to not allow devs to deploy to production without checks or to merge to the master branch , but not allowing to see the repositories ?\n\nAre these devs paid? Unless the project is really cool, people won't work on some random web-based ide.\n\nAh yes, don't look at the code while contributing. Also work in this shitty web based IDE because fuck your own work environment with all your plugins and hotkeys and workflows. Sounds swell.",
  "Author": "Amazing-Run5944",
  "PubDate": "2025-08-07T20:06:42+00:00",
  "Description": "One of the things that’s always felt risky to me is how much access we give devs—especially when they’re external or temporary. Just to fix a small bug or add a feature, they often get access to the *entire* codebase, configs, and infra. Not ideal.\n\nSo we’ve been experimenting with a system where:\n\n- The **main repo stays private**—nobody clones it directly\n- Devs work in a **browser-based IDE** with only the files/services they need\n- The platform **auto-documents** the relevant parts and generates context\n- Access is scoped by default, but still flexible\n\nBasically, it’s like a zero-trust model for dev workspaces—faster onboarding, but tighter control.\n\nCurious if anyone else has tried building or using setups like this? Or run into similar access issues while scaling dev teams?"
}
