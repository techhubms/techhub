{
  "Title": "Promote your projects here – Self-Promotion Megathread",
  "FeedName": "Reddit GitHub",
  "OutputDir": "_community",
  "Tags": [
    "github"
  ],
  "ProcessedDate": "2025-08-05 18:22:28",
  "Description": "Whether it's a tool, library or something you've been building in your free time, this is the place to share it with the community.\n\nTo keep the subreddit focused and avoid cluttering the main feed with individual promotion posts, we use this recurring megathread for self-promo. Whether it’s a tool, library, side project, or anything hosted on GitHub, feel free to drop it here.\n\nPlease include:\n\n- A short description of the project\n- A link to the GitHub repo\n- Tech stack or main features (optional)\n- Any context that might help others understand or get involved",
  "Author": "Menox_",
  "Link": "https://www.reddit.com/r/github/comments/1jy8rea/promote_your_projects_here_selfpromotion/",
  "PubDate": "2025-04-13T14:21:49+00:00",
  "EnhancedContent": "Whether it's a tool, library or something you've been building in your free time, this is the place to share it with the community.\n\nTo keep the subreddit focused and avoid cluttering the main feed with individual promotion posts, we use this recurring megathread for self-promo. Whether it’s a tool, library, side project, or anything hosted on GitHub, feel free to drop it here.\n\nPlease include:\n\n- A short description of the project\n- A link to the GitHub repo\n- Tech stack or main features (optional)\n- Any context that might help others understand or get involved\n\nHey everyone,\n\nWorking on a tool (called ActionMonitor right now) to address GitHub Actions alert fatigue and missed failures. It focuses on more granular, per-repo alerting rules (based on workflow name, branch, status, etc.) to reduce noise.\n\nLooking for feedback from regular GitHub Actions users on an early version.\n\nIf you're interested in testing it out and sharing your thoughts, please comment below, and I'll follow up with details. Thanks.\n\n# Proton - a GitHub app that turns PR reviews into actual fixes\n\nI built Proton to solve a simple problem: AI review bots are useful for point out issues in PRs, but they can't really fix them for you.\n\nProton listens to review comments, generates code changes in an isolated container, and pushes the changes to a new branch based on top of your branch and creates a new PR. You can simply review the new PR and merge it.\n\nProton has full repo context, so it can handle real-world reviews that often involve changes across multiple files, such as “Let’s extract this to a separate component”, or “We should follow the same pattern of doing things in file X, Y and Z”.\n\nHere's a quick demo: [https://youtu.be/zDEfw-R2jWc](https://youtu.be/zDEfw-R2jWc)\n\nTry it out yourself by simply installing the free app: [https://github.com/apps/proton-app](https://github.com/apps/proton-app)\n\n**Hi there!**\n\nAs OpenAI rolls out the updated image generation capabilities in their GPT-4o model, I’ve seen so many incredible AI-generated images being shared—along with the creative prompts behind them. However, these posts are scattered across different platforms, making it hard to track and revisit them.\n\nTo solve this, I started a project to collect and showcase some of the best examples I’ve come across. My goal is to create a central place where we can preserve these creative prompts and hopefully inspire even more imaginative ideas.\n\nSince there are so many amazing examples out there—and the number keeps growing—any help is greatly appreciated! If you’ve seen (or created) something awesome, feel free to contribute it to the project.\n\nThe project is written entirely in Markdown, so it’s easy to browse and contribute to.\n\nCheck it out here: [https://github.com/StevenSong-sTs/gpt4o-image-examples](https://github.com/StevenSong-sTs/gpt4o-image-examples)\n\nHi everyone, I've been working on [byte-knight](https://github.com/DeveloperPaul123/byte-knight), a chess engine (program that plays chess) built in Rust. It's currently moderately strong but is nearing super-human playing levels. I'm hoping to get to ~3000 Elo in the near future :) It will also be available to play against on Lichess soon™️\n\nHi everyone! I recently worked on a Spotify Ad Skipper project. The requirements are that you have to use a Mac with the Spotify app for this to work.\n\nThis is aimed for people who don't have Spotify Premium, but love to listen to music on their laptop for many hours without interruption.\n\nPlease provide feedback! Thank you :D\n\nThis is also an easy set up for people who are beginners or aren't very familiar in cs yet.\n\nDemo here: [https://www.youtube.com/watch?v=VZwXlkJedtg&themeRefresh=1](https://www.youtube.com/watch?v=VZwXlkJedtg&amp;themeRefresh=1)\n\nRepo here: [https://github.com/soramicha/spotify-ad-skipper](https://github.com/soramicha/spotify-ad-skipper)\n\nThanks!\n\nHi everyone,\n\nI introduce you Toutui: a TUI audiobookshelf client to listen your audiobooks and podcasts from your terminal.\n\nEnyoy ! :)\n\n[https://github.com/AlbanDAVID/Toutui](https://github.com/AlbanDAVID/Toutui)\n\nDiscord Botstrap: [https://github.com/steph-lion/discord-botstrap](https://github.com/steph-lion/discord-botstrap)\n\n**discord-botstrap** is a TypeScript template project designed to serve as a launchpad for a customizable and scalable discord bot. It removes all scaffolding concerns and implements best coding practices. It contains a modular structure for commands and events, making it easy to add new features and maintain the codebase. This template is built on top of [discord.js](https://discord.js.org/) and uses TypeScript for type safety and better development experience. It also includes ESLint and Prettier for code quality and formatting. Tests and dockerization also included for a faster release\n\nThe stack involves **Node.js**, **Typescript** and **discord.js** framefork.\n\nThe repository uses Github Actions for automatic build, tests and linting before merging a PR. Also includes some rulesets and dependabots for dependencies updates.\n\nFeel free to try the template, leave a star and suggestions for the template\n\nHello guys, I build this project for lung cancer for analysis & prediction pipeline process. The system predict the symptoms, smoking habits, age & gender for low cost only. The model accuracy was 93%, and the model used was gradient boosting.\n\n**Small benefits:** healthcare assistance, decision making, health awareness\n\n**Source:** [https://github.com/nordszamora/lung-cancer-detection](https://github.com/nordszamora/lung-cancer-detection)\n\n**Note:** Always seek for real healthcare professional regarding about in health topics.\n\n- suggestions and feedback.\n\nLink: [https://github.com/gamer2810/miniprofile-builder](https://github.com/gamer2810/miniprofile-builder)\n\nThis is a tool designed to help build iframe embeddable Steam miniprofiles.\n\nAny feedback or showcase is welcome in the Github Discussion.\n\nMade using [SvelteKit and their static adapter](https://svelte.dev/docs/kit/adapter-static).\n\nTheme used is [Fennec](https://www.skeleton.dev/docs/design/themes).\n\nHi everyone,I'm a developer from the ChatPods team. Over the past year working on audio applications, we often ran into the same issue: open-source TTS models were either low quality or not fully open, making it hard to retrain and adapt. So we built Muyan-TTS, a fully open-source, low-cost model designed for easy fine-tuning and secondary development.The current version works best for English, as the public training data is still relatively small. But we have open-sourced the full training and data processing pipelines, so teams can easily adapt or expand it based on their needs. We welcome feedback, discussions, and contributions.\n\n# You can find the project here:\n\n- GitHub: [https://github.com/MYZY-AI/Muyan-TTS](https://github.com/MYZY-AI/Muyan-TTS)\n\nMuyan-TTS gives full access to model weights, training scripts, and data workflows. There are two model versions:\n\n- **Base model**, trained on multi-speaker audio data for zero-shot TTS.\n- **SFT model**, fine-tuned on single-speaker data for better voice cloning and personalization.\n\nWe also release the training code from the base model to the SFT model for speaker adaptation. It runs efficiently, generating one second of audio in about 0.33 seconds on standard GPUs and supports lightweight fine-tuning without large hardware requirements.We focused on solving a few real-world issues:\n\n- **Long-form audio stability**: Designed for podcast-length coherence.\n- **Retrainability**: Modular pipeline, easy to fine-tune on new voices.\n- **Efficiency**: Low compute cost during inference.\n\nThe model uses a fine-tuned LLaMA-3.2-3B as the semantic encoder and an optimized SoVITS-based [decoder.Training](http://decoder.Training) and data cleaning pipelines are fully open, built with Whisper, FunASR, MSS, and NISQA filtering.\n\n# Why Open Source This\n\nWe believe that, just like Samantha in *Her*, voice will become a core way for humans to interact with AI — making it possible for everyone to have an AI companion they can talk to anytime. Muyan-TTS is only a small step in that direction. There's still a lot of room for improvement in model design, data preparation, and training methods. We hope that others who are passionate about speech technology, TTS, or real-time voice interaction will join us on this journey.We’re looking forward to your feedback, ideas, and contributions. Feel free to open an issue, send a PR, or simply leave a comment.",
  "FeedLevelAuthor": "Github: social coding",
  "FeedUrl": "https://www.reddit.com/r/github/.rss"
}
