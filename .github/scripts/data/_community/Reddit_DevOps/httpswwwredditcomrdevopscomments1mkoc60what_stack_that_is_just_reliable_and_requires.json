{
  "FeedUrl": "https://www.reddit.com/r/devops/.rss",
  "Link": "https://www.reddit.com/r/devops/comments/1mkoc60/what_stack_that_is_just_reliable_and_requires/",
  "Tags": [
    "devops"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit DevOps",
  "ProcessedDate": "2025-08-08 15:55:47",
  "Title": "What stack that is just reliable and requires minimal ops?",
  "FeedLevelAuthor": "Everything DevOps",
  "EnhancedContent": "Hi everyone\n\nI am curious. What's a stack that requires minimal devops and hand holding and yak shaving?\n\nIs it php?\n\nCan I just set unattended upgrades and leave a site running for years ?\n\n- Choose boring technology ( [https://boringtechnology.club/](https://boringtechnology.club/) )\n\n- Choose a boring stable operating system with long term support such as Debian.\n\n- Stick to operating system packages as they are maintained, vetted and gets security updates without breaking.\n\nSo a stack could be linux, apache, mysql and php. Not fashionable but works.\n\nI use linux, nginx, postgresql and python (django).\n\nBoth stacks can be installed on Debian using only Debian maintained packages.\n\n> > >\n> what stack is reliable\n> > > >\n\nTo do what? Service HTTP requests?\n\n> > >\n> What's a stack that requires minimal devops and hand holding and yak shaving?\n> > > >\n\nIt's called \"you pay for it\", where cost typically negatively correlates with overhead.\n\nPersonal computer &lt; Data Center &lt; AWS &lt; Heroku\n\nEverything requires attention.\n\nOS version charges for pipelines and runtime. Pipeline tasks change. Libraries are updated, runtime getting obsolete.\n\nAdditionally, pipelines should provide various possibilities like running tests, injecting runtime configuration, smoke test after deployment, support for different deployment strategies.\n\nWhether you deploy infrastructure or an application, it's all the same.\n\nTech stacks shouldn't matter much. Whatever pipelines or automations should be done in maintainable and compostable way. In that case, amount of redundant work will be minimum. But there is always work.\n\nWhich method for running infra in a pipeline work nicely?\n\nDepends, how fond of being hacked are you?\n\nMore seriously though, in theory assuming that your code is simple and secure, most common languages (PHP, python, go etc) are likely to be fine if you run them on a stable OS that's kept up to date. It does depend heavily on a number of factors though, like how much of a target you're going to be, how motivated attackers would be to get in etc.\n\nSimple site with basic generic info, fine. 100k copies of identity documents, probably a different story...\n\nDefinitely not php as it is not designed to be cloud native, there's a lot of things to be tuned unlike some languages that horizontally scales well\n\nI don't think you find anything with years of support and having no breaking changes over the time. Except static sites i guess.\n\nSomething like AWS Lambda is very reduced in terms of devops and highly reliable. You don't have to consider hardware failures, you don't have to consider operating system updates, you don't have to deal with container image updates. All of that is handled for you, so they take away 90% of the burden from you. You are still responsible for deploy pipelines and there should be a security check for the libraries in use.\n\nOne that does a fixed thing with fixed load and doesn't change much. Change = ops things",
  "Author": "plentifulfuture",
  "PubDate": "2025-08-08T06:59:36+00:00",
  "Description": "Hi everyone\n\nI am curious. What's a stack that requires minimal devops and hand holding and yak shaving?\n\nIs it php?\n\nCan I just set unattended upgrades and leave a site running for years ?"
}
