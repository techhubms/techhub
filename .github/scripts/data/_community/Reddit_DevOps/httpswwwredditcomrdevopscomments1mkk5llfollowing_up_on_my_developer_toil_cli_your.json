{
  "FeedUrl": "https://www.reddit.com/r/devops/.rss",
  "Link": "https://www.reddit.com/r/devops/comments/1mkk5ll/following_up_on_my_developer_toil_cli_your/",
  "Tags": [
    "devops"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit DevOps",
  "ProcessedDate": "2025-08-08 15:55:47",
  "Title": "Following up on my 'Developer Toil' CLI: Your feedback helped shape v0.6.0, now with multi-service local envs.",
  "FeedLevelAuthor": "Everything DevOps",
  "EnhancedContent": "Hey [r/devops](/r/devops/),\n\nThanks to everyone who weighed in on my post about tackling developer toil last week. Your real-world insights were invaluable.\n\nTwo main themes emerged from your feedback:\n\n1. **Validation:** Yes, this is a real problem, and many of you have built similar, complex in-house solutions.\n2. **The Challenge:** The hardest part isn't generating config; it's defining the \"best practices\" that go into it.\n\nI took that to heart. While defining universal best practices is impossible, I realized I could build a flexible framework to help teams apply *their own*.\n\nWith that, I've just released **v0.6.0 of Open Workbench.** This update focuses on solving the local development piece of the puzzle for multi-service applications.\n\n**Here’s how it addresses the workflow:**\n\n- **Declarative Local Environments:** The new `workbench.yaml`\nacts as a single source of truth for defining all the services, components (e.g., gateways), and resources (DBs, caches) that make up your local development environment.\n- **Automated Orchestration:** The `om compose`\ncommand reads the manifest and generates a full `docker-compose.yml` on the fly. This eliminates manual configuration and ensures consistency for every developer on the team.\n- **Abstracted Dependencies:** The \"Resource Blueprint\" system allows developers to attach common infrastructure dependencies like PostgreSQL or Redis locally, with the system designed to target Terraform modules in the future.\n\n**I'm looking for your operational insights on these changes:**\n\n- Does this `workbench.yaml`\napproach seem like a scalable way to manage local environments?\n- What operational blind spots or potential \"gotchas\" do you see in this workflow?\n- How can this model better pave the way for a smooth transition to cloud deployments (e.g., Terraform generation)?\n\n**Call for Contributors:**\n\nYour feedback confirmed that many companies are solving this same problem internally. My goal is to build a robust, open-source alternative we can all share and improve. I'm looking for contributors interested in:\n\n- **Platform Engineering:** Helping to shape the vision and architecture.\n- **Infrastructure as Code:** Building out the Terraform generation capabilities.\n- **Extensibility:** Defining more resource blueprints for tools like Kafka, RabbitMQ, or specific databases.\n\nLet's build the tool we've all had to build in-house, but do it once, in the open.\n\n**GitHub Repo:** [`https://github.com/jashkahar/open-workbench-platform`](https://github.com/jashkahar/open-workbench-platform)\n\nThanks for helping guide this project!\n\nUse the GitHub wiki instead of forwarding to various .md files.",
  "Author": "JashKahar",
  "PubDate": "2025-08-08T03:06:30+00:00",
  "Description": "Hey [r/devops](/r/devops),\n\nThanks to everyone who weighed in on my post about tackling developer toil last week. Your real-world insights were invaluable.\n\nTwo main themes emerged from your feedback:\n\n1. **Validation:** Yes, this is a real problem, and many of you have built similar, complex in-house solutions.\n2. **The Challenge:** The hardest part isn't generating config; it's defining the \"best practices\" that go into it.\n\nI took that to heart. While defining universal best practices is impossible, I realized I could build a flexible framework to help teams apply *their own*.\n\nWith that, I've just released **v0.6.0 of Open Workbench.** This update focuses on solving the local development piece of the puzzle for multi-service applications.\n\n**Here’s how it addresses the workflow:**\n\n- **Declarative Local Environments:** The new `workbench.yaml`\nacts as a single source of truth for defining all the services, components (e.g., gateways), and resources (DBs, caches) that make up your local development environment.\n- **Automated Orchestration:** The `om compose`\ncommand reads the manifest and generates a full `docker-compose.yml` on the fly. This eliminates manual configuration and ensures consistency for every developer on the team.\n- **Abstracted Dependencies:** The \"Resource Blueprint\" system allows developers to attach common infrastructure dependencies like PostgreSQL or Redis locally, with the system designed to target Terraform modules in the future.\n\n**I'm looking for your operational insights on these changes:**\n\n- Does this `workbench.yaml`\napproach seem like a scalable way to manage local environments?\n- What operational blind spots or potential \"gotchas\" do you see in this workflow?\n- How can this model better pave the way for a smooth transition to cloud deployments (e.g., Terraform generation)?\n\n**Call for Contributors:**\n\nYour feedback confirmed that many companies are solving this same problem internally. My goal is to build a robust, open-source alternative we can all share and improve. I'm looking for contributors interested in:\n\n- **Platform Engineering:** Helping to shape the vision and architecture.\n- **Infrastructure as Code:** Building out the Terraform generation capabilities.\n- **Extensibility:** Defining more resource blueprints for tools like Kafka, RabbitMQ, or specific databases.\n\nLet's build the tool we've all had to build in-house, but do it once, in the open.\n\n**GitHub Repo:** [`https://github.com/jashkahar/open-workbench-platform`](https://github.com/jashkahar/open-workbench-platform)\n\nThanks for helping guide this project!"
}
