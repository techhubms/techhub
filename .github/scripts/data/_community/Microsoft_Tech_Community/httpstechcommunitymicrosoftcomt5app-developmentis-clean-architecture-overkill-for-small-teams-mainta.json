{
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=dotnet",
  "Link": "https://techcommunity.microsoft.com/t5/app-development/is-clean-architecture-overkill-for-small-teams-maintaining-a/m-p/4441078#M1265",
  "Tags": [],
  "OutputDir": "_community",
  "FeedName": "Microsoft Tech Community",
  "ProcessedDate": "2025-08-08 15:42:09",
  "Title": "Is clean architecture overkill for small teams maintaining a single web app ?",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "EnhancedContent": "I've been exploring clean architecture and while I appreciate its separation of concerns and testability, I can't help but wonder, it is over for small teams ( say 2-4 devs) maintaining a single, relatively stable web application ?\n\nImplementing clean architecture means more layers, more interfaces, and potenitally more ceremony, which might slow things down, especially if the team is trying to move quickly or lacks deep experience with the pattern.\n\nAt the same time, I get the value of long-term maintainability and scalability, even for small projects that could grow. What pain points or benefits did you encounter ? Did it help or hinder onboarding, testing or refactoring ?",
  "Author": "JohnDobbins",
  "PubDate": "2025-08-07T12:36:44+00:00",
  "Description": "I've been exploring clean architecture and while I appreciate its separation of concerns and testability, I can't help but wonder, it is over for small teams ( say 2-4 devs) maintaining a single, relatively stable web application ?\n\nImplementing clean architecture means more layers, more interfaces, and potenitally more ceremony, which might slow things down, especially if the team is trying to move quickly or lacks deep experience with the pattern.\n\nAt the same time, I get the value of long-term maintainability and scalability, even for small projects that could grow. What pain points or benefits did you encounter ? Did it help or hinder onboarding, testing or refactoring ?"
}
