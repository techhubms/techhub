{
  "FeedName": "Microsoft Tech Community",
  "Tags": [],
  "OutputDir": "_community",
  "Author": "farhanhussain",
  "PubDate": "2025-08-27T22:49:57+00:00",
  "Description": "In this tutorial, you'll learn how to create an AI agent that can send emails on your behalf. We'll use Microsoft Copilot Studio and the robust infrastructure of Azure Communication Services to create the AI agent that can be published on M365 Copilot, Teams, the web and many more.\n\nYou can view the [video tutorial](https://www.youtube.com/watch?v=3OEnY7S8YPY) for creating your AI agent below:\n\n### Prerequisites:\n\n- **Microsoft Copilot Studio Access**: You will need a license to use the platform.\n\n- **Azure Subscription**: An active Azure account is required to set up the email sending service.\n\n### Step 1: Create Your First Agent in Copilot Studio\n\nFirst, we'll create the basic framework for our AI assistant.\n\n1. **Navigate to Copilot Studio**: Open your web browser and go to [copilotstudio.microsoft.com](http://copilotstudio.microsoft.com).\n2. **Describe Your Agent**: On the homepage, you'll see a prompt that says, \"Describe your agent to create it.\" In the text box, type a simple description of what you want your agent to do. For this tutorial, use: \"*I want to create an agent that can send out emails using Azure communication services.*\"\n3. **Configure the Agent:** Copilot Studio will generate a basic agent for you.\n- You'll be taken to a configuration page. Give your agent a descriptive name, such as \"AI Email Agent.\"\n- Review the auto-generated description and instructions. You can modify these later if needed.\n4. **Create the Agent**: Click the Create button. Copilot Studio will now set up your agent's environment.\n\n### Step 2: Set Up Your Email Service in Azure\n\nTo give your agent the ability to send emails, we need to configure a backend service in Microsoft Azure.\n\n1. **Go to the Azure Portal**: Log in to your account at [portal.azure.com](http://portal.azure.com/).\n2. **Create Resources**: You will need to create two services:\n- Communication Services: Search for \"Communication Services\" in the marketplace and create a new resource. This will serve as the main hub. More details can be found here: [Create a communication service resource](https://learn.microsoft.com/en-us/azure/communication-services/quickstarts/create-communication-resource?tabs=unix&pivots=platform-azp).\n- Email Communication Services: Search for \"Email Communication Services\" and create this resource. This service is specifically for adding email capabilities. More details can be found here: [Send email via azure communication services email](https://www.youtube.com/watch?v=Q2RRqgy_G9g)\n3. **Get Your Sender Address**: Once these resources are created, you will have a sender address (e.g., DoNotReply@...). This is the email address your AI agent will use.\n\n### Step 3: Connect Your Services with an Azure Function\n\nWe need a way for Copilot Studio to communicate with Azure Communication Services to send the email. An Azure Function is the perfect tool to act as this bridge.\n\n1. **Create a Function App**: In the Azure portal, create a new Function App. This app will host our code. When setting it up, select Python as the runtime stack.\n2. **Develop the Function**: You'll write a simple Python script that acts as a web API. This script will:\n1. Receive data (recipient, subject, body) from Copilot Studio.\n2. Connect to your Azure Communication Services resource.\n3. Send the emai\n4. The code for the Azure Function app can be [found on our Github page](https://github.com/farhanhussainleo/ai-email-agent)\n\n1. **Deploy the Function**: Once your code is ready, deploy it to the Function App you created. After deployment, make sure to get the Function URL, as you'll need it in the next step.\n2. In the Azure portal head over to your Function App. Go to Settings > Environment Variables, click Add. Add the following:\n- Name: ACS\\_CONNECTION\\_STRING\n- Value:\n- Name: ACS\\_SENDER\\_EMAIL\n- Value: (e.g. “DoNotReply@...)\n3. Make sure to click Apply, so your settings are applied.\n\n![]()\n\n**Note**: For this tutorial, you can use Visual Studio Code with the \"Azure Functions\" and \"Azure Resources\" extensions installed to write and deploy your code efficiently.\n\n### Step 4: Design the Conversation Flow in Copilot Studio\n\nNow, let's teach our agent how to interact with users to gather the necessary email details. We'll do this using a \"Topic.\"\n\n1. **Go to the Topics Tab**: In your Copilot Studio agent, navigate to the Topics tab on the menu.\n2. **Create a New Topic**: Click + Add a topic and select From blank. You can ask Copilot to create a topic for you but for this tutorial we are going to create from scratch.\n3. **Set the Trigger**: The first node is the Trigger. This is what starts the conversation.\n- Click on it and under \"Phrases,\" add phrases like \"send an email.\" This means whenever a user types this phrase, this topic will activate.\n4. **Ask for the Recipient**:\n- Click the + icon below the trigger and select Ask a question.\n- In the text box, type: \"What's the recipient email?\"\n- Under \"Identify,\" choose User's entire response.\n- Save the response in a new variable called varRecipient.\n5. **Ask for Subject and Body**: Repeat the process above to ask for the *Subject and Message body*. Save the responses in variables named *varSubject* and *varBody*, respectively.\n6. **Ask for Personalization** **(Optional)**: You can also ask for the Recipient's name for a personalized greeting and save it in a variable called *varName*.\n\n![]()\n\n### Step 5: Call the Azure Function to Send the Email\n\nWith all the information gathered, it's time to send it to our Azure Function.\n\n1. **Add an HTTP Request Node**: Click the + icon below your last question. Go to Advanced > Send HTTP request.\n2. **Configure the Request**:\n- URL: Paste the Function URL you copied from your Azure Function.\n- Method: Select POST.\n- Headers and body: Click Edit.\n- For the body, select JSON content and use the formula editor to structure your data, mapping your topic variables (e.g., Topic.varSubject, Topic.varBody) to the JSON fields your function expects.\n3. **Save the Response**: The result from the Azure Function can be saved to a variable, such as varSendResult. This allows you to check if the email was sent successfully.\n\n![]()\n\n### Step 6: Test and Publish Your Agent\n\nYour AI email assistant is now fully configured! Let's test it out.\n\n1. **Open the Test Panel:** On the right side of the screen, open the Test your agent panel.\n2. **Start a Conversation**: Type your trigger phrase, \"send an email,\" and press Enter.\n3. **Follow the Prompts**: The agent will ask you for the recipient, subject, and body. Provide the information as requested.\n4. **Check Your Inbox**: The agent will process the request and send the email. Check the recipient's inbox to confirm it has arrived!\n5. **Publish**: Once you are satisfied with the agent's performance, click the Publish button at the top of the page. You can then go to the Channels tab to deploy your agent to various platforms like Microsoft Teams, a demo website, or even Facebook.\n\nCongratulations! You have successfully built and deployed a functional AI email agent.\n\n#### *Debugging and Troubleshooting*\n\n**Agent asking unnecessary information**: If you want the agent to only ask the question that you have input and to not add anything extra. In your agent settings in Copilot Studio, turn off ***generative AI orchestration***. This will force the AI agent to only asks questions\n\n**Agent stuck in a loop**: If, after sending, the agent jumps back to “What’s the recipient email?”, explicitly end the topic. ***Add*** ***+ → Topic management → End*** current topic immediately after your success message. If you want branching, remember the HTTP Request action has no built-in success check, you can save the response (e.g., varSendResult), add a Condition that tests varSendResult.ok == true, and on success send a confirmation and End current topic to prevent loops.",
  "Link": "https://techcommunity.microsoft.com/t5/azure-communication-services/build-your-ai-email-agent-with-microsoft-copilot-studio/ba-p/4448724",
  "Title": "Build Your AI Email Agent with Microsoft Copilot Studio",
  "ProcessedDate": "2025-08-27 23:11:29",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "EnhancedContent": "In this tutorial, you'll learn how to create an AI agent that can send emails on your behalf. We'll use Microsoft Copilot Studio and the robust infrastructure of Azure Communication Services to create the AI agent that can be published on M365 Copilot, Teams, the web and many more.\n\nYou can view the [video tutorial](https://www.youtube.com/watch?v=3OEnY7S8YPY) for creating your AI agent below:\n\n### Prerequisites:\n\n- **Microsoft Copilot Studio Access**: You will need a license to use the platform.\n\n- **Azure Subscription**: An active Azure account is required to set up the email sending service.\n\n### Step 1: Create Your First Agent in Copilot Studio\n\nFirst, we'll create the basic framework for our AI assistant.\n\n1. **Navigate to Copilot Studio**: Open your web browser and go to [copilotstudio.microsoft.com](http://copilotstudio.microsoft.com).\n2. **Describe Your Agent**: On the homepage, you'll see a prompt that says, \"Describe your agent to create it.\" In the text box, type a simple description of what you want your agent to do. For this tutorial, use: \"*I want to create an agent that can send out emails using Azure communication services.*\"\n3. **Configure the Agent:** Copilot Studio will generate a basic agent for you.\n- You'll be taken to a configuration page. Give your agent a descriptive name, such as \"AI Email Agent.\"\n- Review the auto-generated description and instructions. You can modify these later if needed.\n4. **Create the Agent**: Click the Create button. Copilot Studio will now set up your agent's environment.\n\n### Step 2: Set Up Your Email Service in Azure\n\nTo give your agent the ability to send emails, we need to configure a backend service in Microsoft Azure.\n\n1. **Go to the Azure Portal**: Log in to your account at [portal.azure.com](http://portal.azure.com/).\n2. **Create Resources**: You will need to create two services:\n- Communication Services: Search for \"Communication Services\" in the marketplace and create a new resource. This will serve as the main hub. More details can be found here: [Create a communication service resource](https://learn.microsoft.com/en-us/azure/communication-services/quickstarts/create-communication-resource?tabs=unix&amp;pivots=platform-azp).\n- Email Communication Services: Search for \"Email Communication Services\" and create this resource. This service is specifically for adding email capabilities. More details can be found here: [Send email via azure communication services email](https://www.youtube.com/watch?v=Q2RRqgy_G9g)\n3. **Get Your Sender Address**: Once these resources are created, you will have a sender address (e.g., DoNotReply@...). This is the email address your AI agent will use.\n\n### Step 3: Connect Your Services with an Azure Function\n\nWe need a way for Copilot Studio to communicate with Azure Communication Services to send the email. An Azure Function is the perfect tool to act as this bridge.\n\n1. **Create a Function App**: In the Azure portal, create a new Function App. This app will host our code. When setting it up, select Python as the runtime stack.\n2. **Develop the Function**: You'll write a simple Python script that acts as a web API. This script will:\n1. Receive data (recipient, subject, body) from Copilot Studio.\n2. Connect to your Azure Communication Services resource.\n3. Send the emai\n4. The code for the Azure Function app can be [found on our Github page](https://github.com/farhanhussainleo/ai-email-agent)\n\n1. **Deploy the Function**: Once your code is ready, deploy it to the Function App you created. After deployment, make sure to get the Function URL, as you'll need it in the next step.\n2. In the Azure portal head over to your Function App. Go to Settings &gt; Environment Variables, click Add. Add the following:\n- Name: ACS\\_CONNECTION\\_STRING\n- Value: &lt;insert your connection string&gt;\n- Name: ACS\\_SENDER\\_EMAIL\n- Value: &lt;insert your send email address&gt; (e.g. “DoNotReply@...)\n3. Make sure to click Apply, so your settings are applied.\n\n**Note**: For this tutorial, you can use Visual Studio Code with the \"Azure Functions\" and \"Azure Resources\" extensions installed to write and deploy your code efficiently.\n\n### Step 4: Design the Conversation Flow in Copilot Studio\n\nNow, let's teach our agent how to interact with users to gather the necessary email details. We'll do this using a \"Topic.\"\n\n1. **Go to the Topics Tab**: In your Copilot Studio agent, navigate to the Topics tab on the menu.\n2. **Create a New Topic**: Click + Add a topic and select From blank. You can ask Copilot to create a topic for you but for this tutorial we are going to create from scratch.\n3. **Set the Trigger**: The first node is the Trigger. This is what starts the conversation.\n- Click on it and under \"Phrases,\" add phrases like \"send an email.\" This means whenever a user types this phrase, this topic will activate.\n4. **Ask for the Recipient**:\n- Click the + icon below the trigger and select Ask a question.\n- In the text box, type: \"What's the recipient email?\"\n- Under \"Identify,\" choose User's entire response.\n- Save the response in a new variable called varRecipient.\n5. **Ask for Subject and Body**: Repeat the process above to ask for the *Subject and Message body*. Save the responses in variables named *varSubject* and *varBody*, respectively.\n6. **Ask for Personalization** **(Optional)**: You can also ask for the Recipient's name for a personalized greeting and save it in a variable called *varName*.\n\n### Step 5: Call the Azure Function to Send the Email\n\nWith all the information gathered, it's time to send it to our Azure Function.\n\n1. **Add an HTTP Request Node**: Click the + icon below your last question. Go to Advanced &gt; Send HTTP request.\n2. **Configure the Request**:\n- URL: Paste the Function URL you copied from your Azure Function.\n- Method: Select POST.\n- Headers and body: Click Edit.\n- For the body, select JSON content and use the formula editor to structure your data, mapping your topic variables (e.g., Topic.varSubject, Topic.varBody) to the JSON fields your function expects.\n3. **Save the Response**: The result from the Azure Function can be saved to a variable, such as varSendResult. This allows you to check if the email was sent successfully.\n\n### Step 6: Test and Publish Your Agent\n\nYour AI email assistant is now fully configured! Let's test it out.\n\n1. **Open the Test Panel:** On the right side of the screen, open the Test your agent panel.\n2. **Start a Conversation**: Type your trigger phrase, \"send an email,\" and press Enter.\n3. **Follow the Prompts**: The agent will ask you for the recipient, subject, and body. Provide the information as requested.\n4. **Check Your Inbox**: The agent will process the request and send the email. Check the recipient's inbox to confirm it has arrived!\n5. **Publish**: Once you are satisfied with the agent's performance, click the Publish button at the top of the page. You can then go to the Channels tab to deploy your agent to various platforms like Microsoft Teams, a demo website, or even Facebook.\n\nCongratulations! You have successfully built and deployed a functional AI email agent.\n\n#### *Debugging and Troubleshooting*\n\n**Agent asking unnecessary information**: If you want the agent to only ask the question that you have input and to not add anything extra. In your agent settings in Copilot Studio, turn off ***generative AI orchestration***. This will force the AI agent to only asks questions\n\n**Agent stuck in a loop**: If, after sending, the agent jumps back to “What’s the recipient email?”, explicitly end the topic. ***Add******+ → Topic management → End*** current topic immediately after your success message. If you want branching, remember the HTTP Request action has no built-in success check, you can save the response (e.g., varSendResult), add a Condition that tests varSendResult.ok == true, and on success send a confirmation and End current topic to prevent loops.\n\nUpdated Aug 27, 2025\n\nVersion 2.0\n\n[ai](/tag/ai?nodeId=board%3AAzureCommunicationServicesBlog)\n\n[email](/tag/email?nodeId=board%3AAzureCommunicationServicesBlog)\n\n[!\\[farhanhussain&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yOTU0NDM3LWZQclM3Zw?image-coordinates=0%2C0%2C576%2C576&amp;image-dimensions=50x50)](/users/farhanhussain/2954437) [farhanhussain](/users/farhanhussain/2954437) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined March 14, 2025\n\n[View Profile](/users/farhanhussain/2954437)\n\n/category/azure/blog/azurecommunicationservicesblog [Azure Communication Services Blog](/category/azure/blog/azurecommunicationservicesblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure"
}
