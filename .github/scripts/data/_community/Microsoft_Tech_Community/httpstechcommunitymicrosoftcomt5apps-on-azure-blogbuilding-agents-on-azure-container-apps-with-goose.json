{
  "Description": "[Azure Container Apps (ACA)](http://aka.ms/aca/docs) is redefining how developers build and deploy intelligent agents. With serverless scale, GPU-on-demand, and enterprise-grade isolation, ACA provides the ideal foundation for hosting AI agents securely and cost-effectively.\n\nLast month we highlighted how you can [deploy n8n on Azure Container Apps](https://techcommunity.microsoft.com/blog/appsonazureblog/building-agentic-workflows-with-n8n-and-azure-container-apps/4452362) to go from click-to-build to a running AI based automation platform in minutes, with no complex setup or infrastructure management overhead. In this post, we’re extending that same simplicity to AI agents, where we’ll show why Azure Container Apps is the best platform for running open-source agentic frameworks like **Goose**. Whether you’re experimenting with open-source models or building enterprise-grade automation, ACA gives you the flexibility and security you need.\n\n## Challenges when building and hosting AI agents\n\nBuilding and running AI agents in production presents its own set of challenges. These systems often need access to proprietary data and internal APIs, making security and data governance critical, especially when agents interact dynamically with multiple tools and models. At the same time, developers need flexibility to experiment with different frameworks without introducing operational overhead or losing isolation.\n\nSimplicity and performance are also key. Managing scale, networking, and infrastructure can slow down iteration, while separating the agent’s reasoning layer from its inference backend can introduce latency and added complexity from managing multiple services. In short, AI agent development requires security, simplicity, and flexibility to ensure reliability and speed at scale.\n\n## Why ACA and serverless GPUs for hosting AI agents\n\nAzure Container Apps provide a secure, flexible, and developer-friendly platform for hosting AI agents and inference workloads side by side within the same ACA environment. This unified setup gives you centralized control over network policies, RBAC, observability, and more, while ensuring that both your agentic logic and model inference run securely within one managed boundary.\n\nACA also provides the following key benefits:\n\n- **Security and data governance**: Your agent runs in your private, fully isolated environment, with complete control over identity, networking, and compliance. Your data never leaves the boundaries of your container\n- **Serverless economics**: Scale automatically to zero when idle, pay only for what you use — no overprovisioning, no wasted resources.\n- **Developer simplicity**: One-command deployment, integrated with Azure identity and networking. No extra keys, infrastructure management, or manual setup are required.\n- **Inferencing flexibility with serverless GPUs:** Bring any open-source, community, or custom model. Run your inferencing apps on [serverless GPUs](https://learn.microsoft.com/azure/container-apps/gpu-serverless-overview) alongside your agentic applications within the same environment. For example, running **gpt-oss models via Ollama inside ACA containers** avoids costly hosted inference APIs and keeps sensitive data private.\n\nThese capabilities let teams focus on innovation, not infrastructure, making ACA a natural choice for building intelligent agents.\n\n## Deploy the Goose AI Agent to ACA\n\nThe [Goose AI Agent](https://block.github.io/goose/), developed by Block, is an open source, general-purpose agent framework designed for quick deployment and easy customization. Out of the box, it supports many features like email integration, github interactions, and local CLI and system tool access.\n\nIt’s great for building ready-to-run AI assistants that can connect to other systems while having a modular design that makes customization simple on top of supporting great defaults out the box. By deploying Goose on ACA, you gain all the benefits of serverless scale, secure isolation, GPU-on-demand, while maintaining the ability to customize and iterate quickly.\n\n**Get started:** [Deploy Goose on Azure Container Apps using this open-source starter template.](http://github.com/simonjj/goose-on-aca)\n\nIn just a few minutes, you’ll have a **private, self-contained AI agent** running securely on **Azure Container Apps**, ready to handle real-world workloads without compromise.\n\n![]()\n\n*Goose running on Azure Container Apps adding some content to a README, submitting a PR and sending a summary email to the team.*\n\nAdditional Benefits of running Goose on ACA\n\nRunning the **Goose AI Agent** on Azure Container Apps (ACA) showcases how simple and powerful hosting AI agents can be.\n\n- **Always available:** Goose can run continuously—handling long-lived or asynchronous workloads for hours or days—without tying up your local machine.\n- **Cost efficiency:** ACA’s pay-per-use, serverless GPU model eliminates high per-call inference costs, making it ideal for sustained or compute-intensive workloads.\n- **Seamless developer experience:** The [Goose-on-ACA starter template](http://github.com/simonjj/goose-on-aca) sets up everything for you—model server, web UI, and CLI endpoints—with no manual configuration required.\n\nWith ACA, you can go from concept to a fully running agent in minutes, without compromising on **security, scalability, or cost efficiency**.\n\n## Part of a Growing Ecosystem of Agentic frameworks on ACA\n\nACA is quickly becoming the go-to platform for containerized AI and Agentic workloads. From **n8n**, **Goose** to other emerging open-source and commercial agent frameworks, developers can use ACA to experiment, scale, and secure their agents - all while taking advantage of **serverless scale**, **GPU-on-demand**, and **complete network isolation**.\n\nIt’s the same developer-first workflow that powers modern applications, now extended to intelligent agents. Whether you’re building a single agent or an entire automation ecosystem, ACA provides the flexibility and reliability you need to innovate faster.",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "OutputDir": "_community",
  "PubDate": "2025-10-14T18:16:13+00:00",
  "EnhancedContent": "[Azure Container Apps (ACA)](http://aka.ms/aca/docs) is redefining how developers build and deploy intelligent agents. With serverless scale, GPU-on-demand, and enterprise-grade isolation, ACA provides the ideal foundation for hosting AI agents securely and cost-effectively.\n\nLast month we highlighted how you can [deploy n8n on Azure Container Apps](https://techcommunity.microsoft.com/blog/appsonazureblog/building-agentic-workflows-with-n8n-and-azure-container-apps/4452362) to go from click-to-build to a running AI based automation platform in minutes, with no complex setup or infrastructure management overhead. In this post, we’re extending that same simplicity to AI agents, where we’ll show why Azure Container Apps is the best platform for running open-source agentic frameworks like **Goose**. Whether you’re experimenting with open-source models or building enterprise-grade automation, ACA gives you the flexibility and security you need.\n\n## Challenges when building and hosting AI agents\n\nBuilding and running AI agents in production presents its own set of challenges. These systems often need access to proprietary data and internal APIs, making security and data governance critical, especially when agents interact dynamically with multiple tools and models. At the same time, developers need flexibility to experiment with different frameworks without introducing operational overhead or losing isolation.\n\nSimplicity and performance are also key. Managing scale, networking, and infrastructure can slow down iteration, while separating the agent’s reasoning layer from its inference backend can introduce latency and added complexity from managing multiple services. In short, AI agent development requires security, simplicity, and flexibility to ensure reliability and speed at scale.\n\n## Why ACA and serverless GPUs for hosting AI agents\n\nAzure Container Apps provide a secure, flexible, and developer-friendly platform for hosting AI agents and inference workloads side by side within the same ACA environment. This unified setup gives you centralized control over network policies, RBAC, observability, and more, while ensuring that both your agentic logic and model inference run securely within one managed boundary.\n\nACA also provides the following key benefits:\n\n- **Security and data governance**: Your agent runs in your private, fully isolated environment, with complete control over identity, networking, and compliance. Your data never leaves the boundaries of your container\n- **Serverless economics**: Scale automatically to zero when idle, pay only for what you use — no overprovisioning, no wasted resources.\n- **Developer simplicity**: One-command deployment, integrated with Azure identity and networking. No extra keys, infrastructure management, or manual setup are required.\n- **Inferencing flexibility with serverless GPUs:** Bring any open-source, community, or custom model. Run your inferencing apps on [serverless GPUs](https://learn.microsoft.com/azure/container-apps/gpu-serverless-overview) alongside your agentic applications within the same environment. For example, running **gpt-oss models via Ollama inside ACA containers** avoids costly hosted inference APIs and keeps sensitive data private.\n\nThese capabilities let teams focus on innovation, not infrastructure, making ACA a natural choice for building intelligent agents.\n\n## Deploy the Goose AI Agent to ACA\n\nThe [Goose AI Agent](https://block.github.io/goose/), developed by Block, is an open source, general-purpose agent framework designed for quick deployment and easy customization. Out of the box, it supports many features like email integration, github interactions, and local CLI and system tool access.\n\nIt’s great for building ready-to-run AI assistants that can connect to other systems while having a modular design that makes customization simple on top of supporting great defaults out the box. By deploying Goose on ACA, you gain all the benefits of serverless scale, secure isolation, GPU-on-demand, while maintaining the ability to customize and iterate quickly.\n\n**Get started:** [Deploy Goose on Azure Container Apps using this open-source starter template.](http://github.com/simonjj/goose-on-aca)\n\nIn just a few minutes, you’ll have a **private, self-contained AI agent** running securely on **Azure Container Apps**, ready to handle real-world workloads without compromise.\n\n*Goose running on Azure Container Apps adding some content to a README, submitting a PR and sending a summary email to the team.*\n\nAdditional Benefits of running Goose on ACA\n\nRunning the **Goose AI Agent** on Azure Container Apps (ACA) showcases how simple and powerful hosting AI agents can be.\n\n- **Always available:** Goose can run continuously—handling long-lived or asynchronous workloads for hours or days—without tying up your local machine.\n- **Cost efficiency:** ACA’s pay-per-use, serverless GPU model eliminates high per-call inference costs, making it ideal for sustained or compute-intensive workloads.\n- **Seamless developer experience:** The [Goose-on-ACA starter template](http://github.com/simonjj/goose-on-aca) sets up everything for you—model server, web UI, and CLI endpoints—with no manual configuration required.\n\nWith ACA, you can go from concept to a fully running agent in minutes, without compromising on **security, scalability, or cost efficiency**.\n\n## Part of a Growing Ecosystem of Agentic frameworks on ACA\n\nACA is quickly becoming the go-to platform for containerized AI and Agentic workloads. From **n8n**, **Goose** to other emerging open-source and commercial agent frameworks, developers can use ACA to experiment, scale, and secure their agents - all while taking advantage of **serverless scale**, **GPU-on-demand**, and **complete network isolation**.\n\nIt’s the same developer-first workflow that powers modern applications, now extended to intelligent agents.  Whether you’re building a single agent or an entire automation ecosystem, ACA provides the flexibility and reliability you need to innovate faster.\n\nUpdated Oct 14, 2025\n\nVersion 3.0\n\n[azure container apps](/tag/azure%20container%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[azure paas](/tag/azure%20paas?nodeId=board%3AAppsonAzureBlog)\n\n[containers](/tag/containers?nodeId=board%3AAppsonAzureBlog)\n\n[microservices](/tag/microservices?nodeId=board%3AAppsonAzureBlog)\n\n[serverless](/tag/serverless?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[simonjj&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xODQxMzYxLTQ3MjUxOWk1Nzk1MTRDNDI4OEUxRkZD?image-dimensions=50x50)](/users/simonjj/1841361) [simonjj](/users/simonjj/1841361) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined April 26, 2023\n\n[View Profile](/users/simonjj/1841361)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "Title": "Building Agents on Azure Container Apps with Goose AI Agent, Ollama and gpt-oss",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/building-agents-on-azure-container-apps-with-goose-ai-agent/ba-p/4460215",
  "FeedName": "Microsoft Tech Community",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Tags": [],
  "Author": "simonjj",
  "ProcessedDate": "2025-10-14 19:04:13"
}
