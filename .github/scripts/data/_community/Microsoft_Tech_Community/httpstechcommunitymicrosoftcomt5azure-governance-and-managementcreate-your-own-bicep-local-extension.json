{
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Link": "https://techcommunity.microsoft.com/t5/azure-governance-and-management/create-your-own-bicep-local-extension-using-net/ba-p/4439967",
  "Tags": [],
  "OutputDir": "_community",
  "FeedName": "Microsoft Tech Community",
  "ProcessedDate": "2025-08-08 15:46:11",
  "Title": "Create your own Bicep Local Extension using .NET",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "EnhancedContent": "## Bicep Local has an extensible interface for using Bicep syntax to manage resources beyond ARM.\nThis blog explores how to create your own extension for Bicep Local.\n\nBicep Local Deploy can be used to author Bicep files which use Bicep extensions that are designed to run fully locally, without the need for an Azure connection. This quick start guide provides guidance for creating your own Bicep Local Extension using .NET.\n\nFor more information on Bicep Local please check out[this doc](https://github.com/Azure/bicep/blob/main/docs/experimental/local-deploy.md) and [this demo](https://www.youtube.com/watch?v=CiKgf7Tp9Cc).\n\nThis guide assumes you have the [.NET 9 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/9.0) installed locally, and the Bicep [0.37.4](https://github.com/Azure/bicep/releases/tag/v0.37.4) (or higher) CLI and VSCode extension installed.\n\n## Project Scaffolding\n\n1. Create a project file named MyExtension.csproj with the following contents:\n\n``` <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <OutputType>Exe</OutputType> <RootNamespace>MyExtension</RootNamespace> <AssemblyName>my-extension</AssemblyName> <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract> <PublishSingleFile>true</PublishSingleFile> <SelfContained>true</SelfContained> <InvariantGlobalization>true</InvariantGlobalization> <TargetFramework>net9.0</TargetFramework> <Nullable>enable</Nullable> <ImplicitUsings>enable</ImplicitUsings> <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath> <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath> </PropertyGroup>\n\n<ItemGroup> <PackageReference Include=\"Azure.Bicep.Local.Extension\" Version=\"0.37.4\" /> </ItemGroup> </Project> ```\n2. Create a file named Program.cs with the following contents:\n\n``` using Microsoft.AspNetCore.Builder; using Bicep.Local.Extension.Host.Extensions; using Microsoft.Extensions.DependencyInjection;\n\nvar builder = WebApplication.CreateBuilder();\n\nbuilder.AddBicepExtensionHost(args); builder.Services .AddBicepExtension( name: \"MyExtension\", version: \"0.0.1\", isSingleton: true, typeAssembly: typeof(Program).Assembly) .WithResourceHandler<MyResourceHandler>();\n\nvar app = builder.Build();\n\napp.MapBicepExtension();\n\nawait app.RunAsync(); ```\n\n3. Create a file named Models.cs with the following contents:\n\n``` using System.Text.Json.Serialization; using Azure.Bicep.Types.Concrete; using Bicep.Local.Extension.Types.Attributes;\n\npublic enum OperationType { Uppercase, Lowercase, Reverse, }\n\npublic class MyResourceIdentifiers { [TypeProperty(\"The resource name\", ObjectTypePropertyFlags.Identifier | ObjectTypePropertyFlags.Required)] public required string Name { get; set; } }\n\n[ResourceType(\"MyResource\")] public class MyResource : MyResourceIdentifiers { [TypeProperty(\"The resource operation type\", ObjectTypePropertyFlags.Required)] [JsonConverter(typeof(JsonStringEnumConverter))] public OperationType? Operation { get; set; }\n\n[TypeProperty(\"The text output\")] public string? Output { get; set; } } ```\n\n4. Create a file under Handlers/MyResourceHandler.cs with the following contents:\n\n``` using Bicep.Local.Extension.Host.Handlers;\n\npublic class MyResourceHandler : TypedResourceHandler<MyResource, MyResourceIdentifiers> { protected override async Task<ResourceResponse> Preview(ResourceRequest request, CancellationToken cancellationToken) { await Task.CompletedTask;\n\nreturn GetResponse(request); }\n\nprotected override async Task<ResourceResponse> CreateOrUpdate(ResourceRequest request, CancellationToken cancellationToken) { await Task.CompletedTask; request.Properties.Output = request.Properties.Operation switch { OperationType.Uppercase => request.Properties.Name.ToUpperInvariant(), OperationType.Lowercase => request.Properties.Name.ToLowerInvariant(), OperationType.Reverse => new([.. request.Properties.Name.Reverse()]), _ => throw new InvalidOperationException(), };\n\nreturn GetResponse(request); }\n\nprotected override MyResourceIdentifiers GetIdentifiers(MyResource properties) => new() { Name = properties.Name, }; } ```\n\n## Publishing your extension locally\n\n1. Run the following to in the project directory to publish your extension to your local filesystem:\n\n``` dotnet publish --configuration release -r osx-arm64 . dotnet publish --configuration release -r linux-x64 . dotnet publish --configuration release -r win-x64 .\n\nbicep publish-extension --bin-osx-arm64 ./bin/release/osx-arm64/publish/my-extension --bin-linux-x64 ./bin/release/linux-x64/publish/my-extension --bin-win-x64 ./bin/release/win-x64/publish/my-extension.exe --target ./bin/my-extension --force ```\n\n## Running your extension\n\n1. Create a file named bicepconfig.json with the following contents:\n\n``` { \"experimentalFeaturesEnabled\": { \"localDeploy\": true }, \"extensions\": { \"myextension\": \"./bin/my-extension\" }, \"implicitExtensions\": [] } ```\n\n2. Create a file named main.bicep with the following contents:\n\n``` targetScope = 'local' extension myextension param inputText string resource foo 'MyResource' = { name: inputText operation: 'Reverse' } output outputText string = foo.output ```\n\n3. Create a file named main.bicepparam with the following contents:\n\n``` using 'main.bicep' param inputText = 'Please reverse me!' ```\n\n4. Run the following:\n\n``` bicep local-deploy main.bicepparam ```\n\nYou should see the following output in your terminal:\n\n``` % bicep local-deploy main.bicepparam Output outputText: \"!em esrever esaelP\" Resource foo (Create): Succeeded Result: Succeeded ```\n\n## Giving feedback and getting help\n\nBicep Local is still under development and your feedback is critical to shaping the feature.\n\nPlease use [our GitHub Repo](https://github.com/Azure/bicep) to get support for give feedback.\n\nUpdated Aug 07, 2025\n\nVersion 1.0\n\n[!\\[Sydney Smith&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/m_assets/avatars/default/avatar-12.svg?image-dimensions=50x50)](/users/sydney%20smith/208674) [Sydney Smith](/users/sydney%20smith/208674) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined September 24, 2018\n\n[View Profile](/users/sydney%20smith/208674)\n\n/category/azure/blog/azuregovernanceandmanagementblog [Azure Governance and Management Blog](/category/azure/blog/azuregovernanceandmanagementblog) Follow this blog board to get notified when there's new activity",
  "Author": "Sydney Smith",
  "PubDate": "2025-08-07T14:50:37+00:00",
  "Description": "Bicep Local Deploy can be used to author Bicep files which use Bicep extensions that are designed to run fully locally, without the need for an Azure connection. This quick start guide provides guidance for creating your own Bicep Local Extension using .NET.\n\nFor more information on Bicep Local please check out[this doc](https://github.com/Azure/bicep/blob/main/docs/experimental/local-deploy.md) and [this demo](https://www.youtube.com/watch?v=CiKgf7Tp9Cc).\n\nThis guide assumes you have the [.NET 9 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/9.0) installed locally, and the Bicep [0.37.4](https://github.com/Azure/bicep/releases/tag/v0.37.4) (or higher) CLI and VSCode extension installed.\n\n## Project Scaffolding\n\n1. Create a project file named MyExtension.csproj with the following contents:\n2. Exe\nMyExtension my-extension true true true true net9.0 enable enable false false\n3. Create a file named Program.cs with the following contents:\n\n- using Microsoft.AspNetCore.Builder;\nusing Bicep.Local.Extension.Host.Extensions; using Microsoft.Extensions.DependencyInjection;\n\nvar builder = WebApplication.CreateBuilder();\n\nbuilder.AddBicepExtensionHost(args); builder.Services .AddBicepExtension( name: \"MyExtension\", version: \"0.0.1\", isSingleton: true, typeAssembly: typeof(Program).Assembly) .WithResourceHandler();\n\nvar app = builder.Build();\n\napp.MapBicepExtension();\n\nawait app.RunAsync();\n\n3. Create a file named Models.cs with the following contents:\n- using System.Text.Json.Serialization;\nusing Azure.Bicep.Types.Concrete; using Bicep.Local.Extension.Types.Attributes;\n\npublic enum OperationType { Uppercase, Lowercase, Reverse, }\n\npublic class MyResourceIdentifiers { [TypeProperty(\"The resource name\", ObjectTypePropertyFlags.Identifier | ObjectTypePropertyFlags.Required)] public required string Name { get; set; } }\n\n[ResourceType(\"MyResource\")] public class MyResource : MyResourceIdentifiers { [TypeProperty(\"The resource operation type\", ObjectTypePropertyFlags.Required)] [JsonConverter(typeof(JsonStringEnumConverter))] public OperationType? Operation { get; set; }\n\n[TypeProperty(\"The text output\")] public string? Output { get; set; } }\n\n4. Create a file under Handlers/MyResourceHandler.cs with the following contents:\n- using Bicep.Local.Extension.Host.Handlers;\n\npublic class MyResourceHandler : TypedResourceHandler { protected override async Task Preview(ResourceRequest request, CancellationToken cancellationToken) { await Task.CompletedTask;\n\nreturn GetResponse(request); }\n\nprotected override async Task CreateOrUpdate(ResourceRequest request, CancellationToken cancellationToken) { await Task.CompletedTask; request.Properties.Output = request.Properties.Operation switch { OperationType.Uppercase => request.Properties.Name.ToUpperInvariant(), OperationType.Lowercase => request.Properties.Name.ToLowerInvariant(), OperationType.Reverse => new([.. request.Properties.Name.Reverse()]), \\_ => throw new InvalidOperationException(), };\n\nreturn GetResponse(request); }\n\nprotected override MyResourceIdentifiers GetIdentifiers(MyResource properties) => new() { Name = properties.Name, }; }\n\n## Publishing your extension locally\n\n1. Run the following to in the project directory to publish your extension to your local filesystem:\n- dotnet publish --configuration release -r osx-arm64 .\ndotnet publish --configuration release -r linux-x64 . dotnet publish --configuration release -r win-x64 .\n\nbicep publish-extension --bin-osx-arm64 ./bin/release/osx-arm64/publish/my-extension --bin-linux-x64 ./bin/release/linux-x64/publish/my-extension --bin-win-x64 ./bin/release/win-x64/publish/my-extension.exe --target ./bin/my-extension --force\n\n## Running your extension\n\n1. Create a file named bicepconfig.json with the following contents:\n- {\n\"experimentalFeaturesEnabled\": { \"localDeploy\": true }, \"extensions\": { \"myextension\": \"./bin/my-extension\" }, \"implicitExtensions\": [] }\n\n2. Create a file named main.bicep with the following contents:\n- targetScope = 'local' extension myextension param inputText string resource foo 'MyResource' = { name: inputText operation: 'Reverse' } output outputText string = foo.output\n\n3. Create a file named main.bicepparam with the following contents:\n- using 'main.bicep' param inputText = 'Please reverse me!'\n\n4. Run the following:\n- bicep local-deploy main.bicepparam\n\nYou should see the following output in your terminal:\n- % bicep local-deploy main.bicepparam\nOutput outputText: \"!em esrever esaelP\" Resource foo (Create): Succeeded Result: Succeeded\n\n## Giving feedback and getting help\n\nBicep Local is still under development and your feedback is critical to shaping the feature.\n\nPlease use [our GitHub Repo](https://github.com/Azure/bicep) to get support for give feedback."
}
