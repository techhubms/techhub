{
  "ProcessedDate": "2025-08-15 14:40:33",
  "PubDate": "2025-08-15T08:02:40+00:00",
  "Link": "https://techcommunity.microsoft.com/t5/microsoft-developer-community/one-mcp-server-two-transports-stdio-and-http/ba-p/4443915",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Author": "justinyoo",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "## This post shows how to build a single MCP server that supports both transports, selected at runtime with a \"--http\" switch, using the .NET builder pattern.\n\nLet's think about a situation for using MCP servers. Most MCP servers run on a local machine – either directly or in a container. But with other integration scenarios like using [Copilot Studio](https://learn.microsoft.com/microsoft-copilot-studio/agent-extend-action-mcp), enterprise-wide MCP servers or need more secure environments, those MCP server should run remotely through HTTP.\n\nAs long as the core logic lives in a shared layer, wrapping it in a console (STDIO) or web (HTTP) host is straightforward. However, maintaining two hosts can duplicate code. What if a single MCP server supports both STDIO and HTTP, controlled by a simple switch? It will be reducing significant amount of management overhead.\n\nThis post shows how to build a single MCP server that supports both transports, selected at runtime with a `--http` switch, using the .NET builder pattern.\n\n## .NET Builder Pattern\n\nA .NET console app starts the builder pattern using `Host.CreateApplicationBuilder(args)` .\n\n```csharp var builder = Host.CreateApplicationBuilder(args);\n\n```\n\nThe builder instance is the type of `HostApplicationBuilder` implementing the `IHostApplicationBuilder` interface. On the other hand, an ASP.NET web app starts the builder pattern using `WebApplication.CreateBuilder(args)` .\n\n```csharp var builder = WebApplication.CreateBuilder(args);\n\n```\n\nThis `builder` instance is the type of `WebApplicationBuilder` also implementing the `IHostApplicationBuilder` interface. Now, both `builder` instances have `IHostApplicationBuilder` in common, and this is the key of this post today.\n\nIf we decide the hosting mode before creating the builder instance, the server can run as either STDIO or HTTP.\n\n## The `--http`\nSwitch as an Argument\n\nAs you can see, both `Host.CreateApplicationBuilder(args)` and `WebApplication.CreateBuilder(args)` take the list of arguments that are passed from the command-line. Therefore, before initializing the builder instance, we can identify the server type. Let's use a `--http` switch as the selector. Then pass `--http` when running the server.\n\n```bash dotnet run --project MyMcpServer -- --http\n\n```\n\nThen, before creating the `builder` instance, check whether the switch is present. It looks for the environment variables first, then checks the arguments passed.\n\n```csharp public static bool UseStreamableHttp(IDictionary env, string[] args) { var useHttp = env.Contains(\"UseHttp\") && bool.TryParse(env[\"UseHttp\"]?.ToString()?.ToLowerInvariant(), out var result) && result; if (args.Length == 0) { return useHttp; }\n\nuseHttp = args.Contains(\"--http\", StringComparer.InvariantCultureIgnoreCase);\n\nreturn useHttp; }\n\n```\n\nHere's the usage:\n\n```csharp var useStreamableHttp = UseStreamableHttp(Environment.GetEnvironmentVariables(), args);\n\n```\n\nWe've identified whether to use HTTP or not. Therefore, the `builder` instance is built in this way:\n\n```csharp IHostApplicationBuilder builder = useStreamableHttp ? WebApplication.CreateBuilder(args) : Host.CreateApplicationBuilder(args);\n\n```\n\nWith this `builder` instance, we can add more dependencies specific to web app or console app depending on the scenario.\n\n## The Transport Type\n\nLet's add the MCP server to the `builder` instance.\n\n```csharp var mcpServerBuilder = builder.Services.AddMcpServer() .WithPromptsFromAssembly() .WithResourcesFromAssembly() .WithToolsFromAssembly();\n\n```\n\nWe haven’t told `mcpServerBuilder` which transport to use yet. Use `useStreamableHttp` to select the transport.\n\n```csharp if (useStreamableHttp) { mcpServerBuilder.WithHttpTransport(o => o.Stateless = true); } else { mcpServerBuilder.WithStdioServerTransport(); }\n\n```\n\n## Type Casting to Run Server\n\nWhile configuring an ASP.NET web app, middlewares are added. The HTTP host also needs middleware, and the builder must be cast. After the `builder` instance is built, the `webApp` instance adds middleware including the endpoint mapping.\n\n```csharp IHost app; if (useStreamableHttp) { var webApp = (builder as WebApplicationBuilder)!.Build(); webApp.UseHttpsRedirection(); webApp.MapMcp(\"/mcp\");\n\napp = webApp; } else { var consoleApp = (builder as HostApplicationBuilder)!.Build();\n\napp = consoleApp; }\n\n```\n\nNote that WebApplication implements IHost, so you can assign it to an IHost variable. The console host built from HostApplicationBuilder is already an IHost.\n\nUse this `app` instance to run the MCP server.\n\n```csharp await app.RunAsync();\n\n```\n\nThat's it! Now you can run the MCP server with the STDIO transport or the HTTP transport by providing a single switch, `--http` .\n\n## Sample apps\n\nSample apps are available for you to check out. Visit the [MCP Samples in .NET](https://aka.ms/mcp/dotnet/samples) repository, and you'll find MCP server apps. All server apps in the repo support both STDIO and HTTP via the switch.\n\n## More resources\n\nIf you'd like to learn more about MCP in .NET, here are some additional resources worth exploring:\n\n- [Let's Learn MCP](https://aka.ms/letslearnmcp)\n- [MCP Workshop in .NET](https://aka.ms/mcp-workshop/dotnet)\n- [MCP Samples in .NET](https://aka.ms/mcp/dotnet/samples)\n- [MCP Samples](https://github.com/modelcontextprotocol/csharp-sdk/tree/main/samples)\n- [MCP for Beginners](https://aka.ms/mcp-for-beginners)\n\nUpdated Aug 15, 2025\n\nVersion 1.0\n\n[agents](/tag/agents?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai](/tag/ai?nodeId=board%3AAzureDevCommunityBlog)\n\n[copilot](/tag/copilot?nodeId=board%3AAzureDevCommunityBlog)\n\n[github](/tag/github?nodeId=board%3AAzureDevCommunityBlog)\n\n[vs code](/tag/vs%20code?nodeId=board%3AAzureDevCommunityBlog)\n\n[!\\[justinyoo&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS03MTQyNTYtMjAyMTUwaTE1NkNDOTBBMDc5NUIxQzc?image-dimensions=50x50)](/users/justinyoo/714256) [justinyoo](/users/justinyoo/714256) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined June 30, 2020\n\n[View Profile](/users/justinyoo/714256)\n\n/category/azure/blog/azuredevcommunityblog [Microsoft Developer Community Blog](/category/azure/blog/azuredevcommunityblog) Follow this blog board to get notified when there's new activity",
  "Title": "One MCP Server, Two Transports: STDIO and HTTP",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Description": "Let's think about a situation for using MCP servers. Most MCP servers run on a local machine – either directly or in a container. But with other integration scenarios like using [Copilot Studio](https://learn.microsoft.com/microsoft-copilot-studio/agent-extend-action-mcp), enterprise-wide MCP servers or need more secure environments, those MCP server should run remotely through HTTP.\n\nAs long as the core logic lives in a shared layer, wrapping it in a console (STDIO) or web (HTTP) host is straightforward. However, maintaining two hosts can duplicate code. What if a single MCP server supports both STDIO and HTTP, controlled by a simple switch? It will be reducing significant amount of management overhead.\n\nThis post shows how to build a single MCP server that supports both transports, selected at runtime with a `--http` switch, using the .NET builder pattern.\n\n## .NET Builder Pattern\n\nA .NET console app starts the builder pattern using `Host.CreateApplicationBuilder(args)` .\n\n```csharp var builder = Host.CreateApplicationBuilder(args);\n\n```\n\nThe builder instance is the type of `HostApplicationBuilder` implementing the `IHostApplicationBuilder` interface. On the other hand, an ASP.NET web app starts the builder pattern using `WebApplication.CreateBuilder(args)` .\n\n```csharp var builder = WebApplication.CreateBuilder(args);\n\n```\n\nThis `builder` instance is the type of `WebApplicationBuilder` also implementing the `IHostApplicationBuilder` interface. Now, both `builder` instances have `IHostApplicationBuilder` in common, and this is the key of this post today.\n\nIf we decide the hosting mode before creating the builder instance, the server can run as either STDIO or HTTP.\n\n## The `--http`\nSwitch as an Argument\n\nAs you can see, both `Host.CreateApplicationBuilder(args)` and `WebApplication.CreateBuilder(args)` take the list of arguments that are passed from the command-line. Therefore, before initializing the builder instance, we can identify the server type. Let's use a `--http` switch as the selector. Then pass `--http` when running the server.\n\n```bash dotnet run --project MyMcpServer -- --http\n\n```\n\nThen, before creating the `builder` instance, check whether the switch is present. It looks for the environment variables first, then checks the arguments passed.\n\n```csharp public static bool UseStreamableHttp(IDictionary env, string[] args) { var useHttp = env.Contains(\"UseHttp\") && bool.TryParse(env[\"UseHttp\"]?.ToString()?.ToLowerInvariant(), out var result) && result; if (args.Length == 0) { return useHttp; }\n\nuseHttp = args.Contains(\"--http\", StringComparer.InvariantCultureIgnoreCase);\n\nreturn useHttp; }\n\n```\n\nHere's the usage:\n\n```csharp var useStreamableHttp = UseStreamableHttp(Environment.GetEnvironmentVariables(), args);\n\n```\n\nWe've identified whether to use HTTP or not. Therefore, the `builder` instance is built in this way:\n\n```csharp IHostApplicationBuilder builder = useStreamableHttp ? WebApplication.CreateBuilder(args) : Host.CreateApplicationBuilder(args);\n\n```\n\nWith this `builder` instance, we can add more dependencies specific to web app or console app depending on the scenario.\n\n## The Transport Type\n\nLet's add the MCP server to the `builder` instance.\n\n```csharp var mcpServerBuilder = builder.Services.AddMcpServer() .WithPromptsFromAssembly() .WithResourcesFromAssembly() .WithToolsFromAssembly();\n\n```\n\nWe haven’t told `mcpServerBuilder` which transport to use yet. Use `useStreamableHttp` to select the transport.\n\n```csharp if (useStreamableHttp) { mcpServerBuilder.WithHttpTransport(o => o.Stateless = true); } else { mcpServerBuilder.WithStdioServerTransport(); }\n\n```\n\n## Type Casting to Run Server\n\nWhile configuring an ASP.NET web app, middlewares are added. The HTTP host also needs middleware, and the builder must be cast. After the `builder` instance is built, the `webApp` instance adds middleware including the endpoint mapping.\n\n```csharp IHost app; if (useStreamableHttp) { var webApp = (builder as WebApplicationBuilder)!.Build(); webApp.UseHttpsRedirection(); webApp.MapMcp(\"/mcp\");\n\napp = webApp; } else { var consoleApp = (builder as HostApplicationBuilder)!.Build();\n\napp = consoleApp; }\n\n```\n\nNote that WebApplication implements IHost, so you can assign it to an IHost variable. The console host built from HostApplicationBuilder is already an IHost.\n\nUse this `app` instance to run the MCP server.\n\n```csharp await app.RunAsync();\n\n```\n\nThat's it! Now you can run the MCP server with the STDIO transport or the HTTP transport by providing a single switch, `--http` .\n\n## Sample apps\n\nSample apps are available for you to check out. Visit the [MCP Samples in .NET](https://aka.ms/mcp/dotnet/samples) repository, and you'll find MCP server apps. All server apps in the repo support both STDIO and HTTP via the switch.\n\n## More resources\n\nIf you'd like to learn more about MCP in .NET, here are some additional resources worth exploring:\n\n- [Let's Learn MCP](https://aka.ms/letslearnmcp)\n- [MCP Workshop in .NET](https://aka.ms/mcp-workshop/dotnet)\n- [MCP Samples in .NET](https://aka.ms/mcp/dotnet/samples)\n- [MCP Samples](https://github.com/modelcontextprotocol/csharp-sdk/tree/main/samples)\n- [MCP for Beginners](https://aka.ms/mcp-for-beginners)",
  "Tags": []
}
