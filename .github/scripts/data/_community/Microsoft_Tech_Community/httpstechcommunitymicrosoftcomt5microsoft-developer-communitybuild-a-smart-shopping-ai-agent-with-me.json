{
  "Tags": [],
  "EnhancedContent": "## How to build an AI Agent with an intelligent memory using the Azure AI Foundry agent service.\n\nWhen we think about human intelligence, memory is one of the first things that comes to mind. It’s what enables us to learn from our experiences, adapt to new situations, and make more informed decisions over time. Similarly, AI Agents become smarter with memory. For example, an agent can remember your past purchases, your budget, your preferences, and suggest gifts for your friends based on the learning from the past conversations.\n\nAgents usually break tasks into steps (plan → search → call API → parse → write), but then they might forget what happened in earlier steps without memory. Agents repeat tool calls, fetch the same data again, or miss simple rules like “always refer to the user by their name.” As a result of repeating the same context over and over again, the agents can spend more tokens, achieve slower results, and provide inconsistent answers. You can read my other article about [why memory is important for AI Agents](https://www.gibsonai.com/blog/ai-apps-with-memory-vs-no-memory).\n\nIn this article, we’ll explore why memory is so important for AI Agents and walk through an example of a **Smart Shopping Assistant** to see how memory makes it more helpful and personalized. You will learn how to integrate **Memori** with the **Azure AI Foundry AI Agent service**.\n\n## Smart Shopping Experience With Memory for an AI Agent\n\nThis demo showcases an Agent that remembers customer preferences, shopping behavior, and purchase history to deliver personalized recommendations and experiences. The demo walks through **five shopping scenarios** where the assistant remembers customer preferences, budgets, and past purchases to give personalized recommendations. From buying Apple products and work setups to gifts, home needs, and books, the assistant adapts to each need and suggests complementary options.\n\n- **Learns Customer Preferences**: Remembers past purchases and preferences\n- **Provides Personalized Recommendations**: Suggests products based on shopping history\n- **Budget-Aware Shopping**: Considers customer budget constraints\n- **Cross-Category Intelligence**: Connects purchases across different product categories\n- **Gift Recommendations**: Suggests gifts based on the customer's history\n- **Contextual Conversations**: Maintains shopping context across interactions\n\nCheck the GitHub repo with the [full agent source code](https://github.com/GibsonAI/memori/tree/main/demos/smart_shopping_assistant) and try out the [live demo](https://smart-shopping-ai-agent.lovable.app/).\n\n## How Smart Shopping Assistant Works\n\nWe use the [Azure AI Foundry Agent Service](https://learn.microsoft.com/en-us/azure/ai-foundry/agents/overview) to build the shopping assistant and added [**Memori**](https://memori.gibsonai.com/), an open-source memory solution, to give it persistent memory. You can check out the Memori GitHub repo here: [https://github.com/GibsonAI/memori](https://github.com/GibsonAI/memori).\n\nWe connect Memori to a local SQLite database, so the assistant can store and recall information.\n\nYou can also use any other relational databases like PostgreSQL or MySQL.\n\n> >\n> Note that it is a simplified version of the actual smart shopping assistant implementation. Check out the GitHub repo code for the full version.\n> >\n\n``` from azure.ai.agents.models import FunctionTool from azure.ai.projects import AIProjectClient from azure.identity import DefaultAzureCredential from dotenv import load_dotenv\n\nfrom memori import Memori, create_memory_tool\n\n# Constants\nDATABASE_PATH = \"sqlite:///smart_shopping_memory.db\" NAMESPACE = \"smart_shopping_assistant\"\n\n# Create Azure provider configuration for Memori\nazure_provider = ProviderConfig.from_azure( api_key=os.environ[\"AZURE_OPENAI_API_KEY\"], azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"], azure_deployment=os.environ[\"AZURE_OPENAI_DEPLOYMENT_NAME\"], api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"], model=os.environ[\"AZURE_OPENAI_DEPLOYMENT_NAME\"], )\n\n# Initialize Memori for persistent memory\nmemory_system = Memori( database_connect=DATABASE_PATH, conscious_ingest=True, auto_ingest=True, verbose=False, provider_config=azure_provider, namespace=NAMESPACE, )\n\n# Enable the memory system\nmemory_system.enable()\n\n# Create memory tool for agents\nmemory_tool = create_memory_tool(memory_system)\n\ndef search_memory(query: str) -> str: \"\"\"Search customer's shopping history and preferences\"\"\" try: if not query.strip(): return json.dumps({\"error\": \"Please provide a search query\"})\n\nresult = memory_tool.execute(query=query.strip()) memory_result = ( str(result) if result else \"No relevant shopping history found\" )\n\nreturn json.dumps( { \"shopping_history\": memory_result, \"search_query\": query, \"timestamp\": datetime.now().isoformat(), } )\n\nexcept Exception as e: return json.dumps({\"error\": f\"Memory search error: {str(e)}\"}) ... ```\n\nThis setup records every conversation, and user preferences are saved under a namespace called *smart\\_shopping\\_assistant*.\n\nWe plug Memori into the Azure AI Foundry agent as a function tool. The agent can call *search\\_memory()* to look at the shopping history each time.\n\n``` ... functions = FunctionTool(search_memory)\n\n# Get configuration from environment\nproject_endpoint = os.environ[\"PROJECT_ENDPOINT\"] model_name = os.environ[\"MODEL_DEPLOYMENT_NAME\"]\n\n# Initialize the AIProjectClient\nproject_client = AIProjectClient( endpoint=project_endpoint, credential=DefaultAzureCredential() )\n\nprint(\"Creating Smart Shopping Assistant...\")\n\ninstructions = \"\"\"You are an advanced AI shopping assistant with memory capabilities. You help customers find products, remember their preferences, track purchase history, and provide personalized recommendations. \"\"\"\n\nagent = project_client.agents.create_agent( model=model_name, name=\"smart-shopping-assistant\", instructions=instructions, tools=functions.definitions, )\n\nthread = project_client.agents.threads.create()\n\nprint(f\"Created shopping assistant with ID: {agent.id}\") print(f\"Created thread with ID: {thread.id}\") ... ```\n\nThis integration makes the Azure-powered agent **memory-aware**: it can search customer history, remember preferences, and use that knowledge when responding.\n\n## Setting Up and Running AI Foundry Agent with Memory\n\nGo to the [Azure AI Foundry portal](https://ai.azure.com/?cid=learnDocs) and create a project by [following the guide](https://learn.microsoft.com/en-us/azure/ai-foundry/agents/quickstart?pivots=programming-language-python-azure#create-a-hub-and-project-in-azure-ai-foundry-portal) in the Microsoft docs. [Deploy a model](https://learn.microsoft.com/en-us/azure/ai-services/agents/quickstart?pivots=ai-foundry-portal#deploy-a-model) like GPT-4o. You will need the **Project Endpoint** and **Model Deployment Name** to run the example.\n\n1. Before running the demo, install the required libraries:\n\n``` pip install memorisdk azure-ai-projects azure-identity python-dotenv ```\n\n2. Set your Azure environment variables:\n\n```\n# Azure AI Foundry Project Configuration\nexport PROJECT_ENDPOINT=\"https://your-project.eastus2.ai.azure.com\"\n\n# Azure OpenAI Configuration\nexport AZURE_OPENAI_API_KEY=\"your-azure-openai-api-key-here\" export AZURE_OPENAI_ENDPOINT=\"https://your-resource.openai.azure.com/\" export AZURE_OPENAI_DEPLOYMENT_NAME=\"gpt-4o\" export AZURE_OPENAI_API_VERSION=\"2024-12-01-preview\" ```\n\n3. Run the demo:\n\n``` python smart_shopping_demo.py ```\n\nThe script runs **predefined conversations** to show how the assistant works in real life.\n\nExample:\n\n``` Hi! I'm looking for a new smartphone. I prefer Apple products and my budget is around $1000.\n\nThe assistant responds by considering previous preferences, suggesting iPhone 15 Pro and accessories, and remembering your price preference for the future. So next time, it might suggest AirPods Pro too. ```\n\nThe assistant responds by considering previous preferences, suggesting iPhone 15 Pro and accessories, and remembering your price preference for the future. So next time, it might suggest AirPods Pro too.\n\n## How Memori Helps\n\nMemori decides which long-term memories are important enough to promote into short-term memory, so agents always have the right context at the right time. Memori adds powerful memory features for AI Agents:\n\n- **Structured memory**: Learns and validates preferences using Pydantic-based logic\n- **Short-term vs. long-term memory**: You decide what’s important to keep\n- **Multi-agent memory**: Shared knowledge between different agents\n- **Automatic conversation recording**: Just one line of code\n- **Multi-tenancy:** Achieved with namespaces, so you can handle many users in the same setup.\n\n## What You Can Build with This\n\nYou can customize the demo further by:\n\n- **Expanding the product catalog** with real inventory and categories that matter to your store.\n- **Adding new tools** like “track my order,” “compare two products,” or “alert me when the price drops.”\n- **Connecting to a real store API** (Shopify, WooCommerce, Magento, or a custom backend) so recommendations are instantly shoppable.\n- **Enabling cross-device memory**, so the assistant remembers the same user whether they’re on web, mobile, or even a voice assistant.\n- **Integrating with payment and delivery services**, letting users complete purchases right inside the conversation.\n\n## Final Thoughts\n\nAI agents become truly useful when they can remember. With Memori + Azure AI Founder, you can build assistants that learn from each interaction, gets smarter over time, and deliver delightful, personal experiences.\n\nUpdated Sep 02, 2025\n\nVersion 1.0\n\n[agents](/tag/agents?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai](/tag/ai?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai foundry](/tag/ai%20foundry?nodeId=board%3AAzureDevCommunityBlog)\n\n[azure ai foundry](/tag/azure%20ai%20foundry?nodeId=board%3AAzureDevCommunityBlog)\n\n[llm](/tag/llm?nodeId=board%3AAzureDevCommunityBlog)\n\n[python](/tag/python?nodeId=board%3AAzureDevCommunityBlog)\n\n[!\\[Bobur_Umurzokov&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yMTc5NTYwLTUzMTQyOWk3MUIyMEFCOUQwQzhCRDBF?image-dimensions=50x50)](/users/bobur_umurzokov/2179560) [Bobur_Umurzokov](/users/bobur_umurzokov/2179560) Brass Contributor\n\nJoined December 02, 2023\n\n[View Profile](/users/bobur_umurzokov/2179560)\n\n/category/azure/blog/azuredevcommunityblog [Microsoft Developer Community Blog](/category/azure/blog/azuredevcommunityblog) Follow this blog board to get notified when there's new activity",
  "Author": "Bobur_Umurzokov",
  "OutputDir": "_community",
  "PubDate": "2025-09-04T07:00:00+00:00",
  "Description": "When we think about human intelligence, memory is one of the first things that comes to mind. It’s what enables us to learn from our experiences, adapt to new situations, and make more informed decisions over time. Similarly, AI Agents become smarter with memory. For example, an agent can remember your past purchases, your budget, your preferences, and suggest gifts for your friends based on the learning from the past conversations.\n\nAgents usually break tasks into steps (plan → search → call API → parse → write), but then they might forget what happened in earlier steps without memory. Agents repeat tool calls, fetch the same data again, or miss simple rules like “always refer to the user by their name.” As a result of repeating the same context over and over again, the agents can spend more tokens, achieve slower results, and provide inconsistent answers. You can read my other article about [why memory is important for AI Agents](https://www.gibsonai.com/blog/ai-apps-with-memory-vs-no-memory).\n\nIn this article, we’ll explore why memory is so important for AI Agents and walk through an example of a **Smart Shopping Assistant** to see how memory makes it more helpful and personalized. You will learn how to integrate **Memori** with the **Azure AI Foundry AI Agent service**.\n\n## Smart Shopping Experience With Memory for an AI Agent\n\nThis demo showcases an Agent that remembers customer preferences, shopping behavior, and purchase history to deliver personalized recommendations and experiences. The demo walks through **five shopping scenarios** where the assistant remembers customer preferences, budgets, and past purchases to give personalized recommendations. From buying Apple products and work setups to gifts, home needs, and books, the assistant adapts to each need and suggests complementary options.\n\n- **Learns Customer Preferences**: Remembers past purchases and preferences\n- **Provides Personalized Recommendations**: Suggests products based on shopping history\n- **Budget-Aware Shopping**: Considers customer budget constraints\n- **Cross-Category Intelligence**: Connects purchases across different product categories\n- **Gift Recommendations**: Suggests gifts based on the customer's history\n- **Contextual Conversations**: Maintains shopping context across interactions\n\n![]()\n\nCheck the GitHub repo with the [full agent source code](https://github.com/GibsonAI/memori/tree/main/demos/smart_shopping_assistant) and try out the [live demo](https://smart-shopping-ai-agent.lovable.app/).\n\n## How Smart Shopping Assistant Works\n\nWe use the [Azure AI Foundry Agent Service](https://learn.microsoft.com/en-us/azure/ai-foundry/agents/overview) to build the shopping assistant and added [**Memori**](https://memori.gibsonai.com/), an open-source memory solution, to give it persistent memory. You can check out the Memori GitHub repo here: [https://github.com/GibsonAI/memori](https://github.com/GibsonAI/memori).\n\nWe connect Memori to a local SQLite database, so the assistant can store and recall information.\n\nYou can also use any other relational databases like PostgreSQL or MySQL.\n\n> >\n> Note that it is a simplified version of the actual smart shopping assistant implementation. Check out the GitHub repo code for the full version.\n> >\n\n- from azure.ai.agents.models import FunctionTool\nfrom azure.ai.projects import AIProjectClient from azure.identity import DefaultAzureCredential from dotenv import load\\_dotenv\n\nfrom memori import Memori, create\\_memory\\_tool\n\n# Constants\nDATABASE\\_PATH = \"sqlite:///smart\\_shopping\\_memory.db\" NAMESPACE = \"smart\\_shopping\\_assistant\"\n\n# Create Azure provider configuration for Memori\nazure\\_provider = ProviderConfig.from\\_azure( api\\_key=os.environ[\"AZURE\\_OPENAI\\_API\\_KEY\"], azure\\_endpoint=os.environ[\"AZURE\\_OPENAI\\_ENDPOINT\"], azure\\_deployment=os.environ[\"AZURE\\_OPENAI\\_DEPLOYMENT\\_NAME\"], api\\_version=os.environ[\"AZURE\\_OPENAI\\_API\\_VERSION\"], model=os.environ[\"AZURE\\_OPENAI\\_DEPLOYMENT\\_NAME\"], )\n\n# Initialize Memori for persistent memory\nmemory\\_system = Memori( database\\_connect=DATABASE\\_PATH, conscious\\_ingest=True, auto\\_ingest=True, verbose=False, provider\\_config=azure\\_provider, namespace=NAMESPACE, )\n\n# Enable the memory system\nmemory\\_system.enable()\n\n# Create memory tool for agents\nmemory\\_tool = create\\_memory\\_tool(memory\\_system)\n\ndef search\\_memory(query: str) -> str: \"\"\"Search customer's shopping history and preferences\"\"\" try: if not query.strip(): return json.dumps({\"error\": \"Please provide a search query\"})\n\nresult = memory\\_tool.execute(query=query.strip()) memory\\_result = ( str(result) if result else \"No relevant shopping history found\" )\n\nreturn json.dumps( { \"shopping\\_history\": memory\\_result, \"search\\_query\": query, \"timestamp\": datetime.now().isoformat(), } )\n\nexcept Exception as e: return json.dumps({\"error\": f\"Memory search error: {str(e)}\"}) ...\n\nThis setup records every conversation, and user preferences are saved under a namespace called *smart\\_shopping\\_assistant*.\n\nWe plug Memori into the Azure AI Foundry agent as a function tool. The agent can call *search\\_memory()* to look at the shopping history each time.\n- ...\nfunctions = FunctionTool(search\\_memory)\n\n# Get configuration from environment\nproject\\_endpoint = os.environ[\"PROJECT\\_ENDPOINT\"] model\\_name = os.environ[\"MODEL\\_DEPLOYMENT\\_NAME\"]\n\n# Initialize the AIProjectClient\nproject\\_client = AIProjectClient( endpoint=project\\_endpoint, credential=DefaultAzureCredential() )\n\nprint(\"Creating Smart Shopping Assistant...\")\n\ninstructions = \"\"\"You are an advanced AI shopping assistant with memory capabilities. You help customers find products, remember their preferences, track purchase history, and provide personalized recommendations. \"\"\"\n\nagent = project\\_client.agents.create\\_agent( model=model\\_name, name=\"smart-shopping-assistant\", instructions=instructions, tools=functions.definitions, )\n\nthread = project\\_client.agents.threads.create()\n\nprint(f\"Created shopping assistant with ID: {agent.id}\") print(f\"Created thread with ID: {thread.id}\") ...\n\nThis integration makes the Azure-powered agent **memory-aware**: it can search customer history, remember preferences, and use that knowledge when responding.\n\n## Setting Up and Running AI Foundry Agent with Memory\n\nGo to the [Azure AI Foundry portal](https://ai.azure.com/?cid=learnDocs) and create a project by [following the guide](https://learn.microsoft.com/en-us/azure/ai-foundry/agents/quickstart?pivots=programming-language-python-azure#create-a-hub-and-project-in-azure-ai-foundry-portal) in the Microsoft docs. [Deploy a model](https://learn.microsoft.com/en-us/azure/ai-services/agents/quickstart?pivots=ai-foundry-portal#deploy-a-model) like GPT-4o. You will need the **Project Endpoint** and **Model Deployment Name** to run the example.\n\n1. Before running the demo, install the required libraries:\n- pip install memorisdk azure-ai-projects azure-identity python-dotenv\n\n2. Set your Azure environment variables:\n- # Azure AI Foundry Project Configuration\nexport PROJECT\\_ENDPOINT=\"https://your-project.eastus2.ai.azure.com\"\n\n# Azure OpenAI Configuration\nexport AZURE\\_OPENAI\\_API\\_KEY=\"your-azure-openai-api-key-here\" export AZURE\\_OPENAI\\_ENDPOINT=\"https://your-resource.openai.azure.com/\" export AZURE\\_OPENAI\\_DEPLOYMENT\\_NAME=\"gpt-4o\" export AZURE\\_OPENAI\\_API\\_VERSION=\"2024-12-01-preview\"\n\n3. Run the demo:\n- python smart\\_shopping\\_demo.py\n\nThe script runs **predefined conversations** to show how the assistant works in real life.\n\nExample:\n- Hi! I'm looking for a new smartphone. I prefer Apple products and my budget is around $1000.\n\nThe assistant responds by considering previous preferences, suggesting iPhone 15 Pro and accessories, and remembering your price preference for the future. So next time, it might suggest AirPods Pro too.\n\nThe assistant responds by considering previous preferences, suggesting iPhone 15 Pro and accessories, and remembering your price preference for the future. So next time, it might suggest AirPods Pro too.\n\n![]()\n\n## How Memori Helps\n\nMemori decides which long-term memories are important enough to promote into short-term memory, so agents always have the right context at the right time. Memori adds powerful memory features for AI Agents:\n\n- **Structured memory**: Learns and validates preferences using Pydantic-based logic\n- **Short-term vs. long-term memory**: You decide what’s important to keep\n- **Multi-agent memory**: Shared knowledge between different agents\n- **Automatic conversation recording**: Just one line of code\n- **Multi-tenancy:** Achieved with namespaces, so you can handle many users in the same setup.\n\n## What You Can Build with This\n\nYou can customize the demo further by:\n\n- **Expanding the product catalog** with real inventory and categories that matter to your store.\n- **Adding new tools** like “track my order,” “compare two products,” or “alert me when the price drops.”\n- **Connecting to a real store API** (Shopify, WooCommerce, Magento, or a custom backend) so recommendations are instantly shoppable.\n- **Enabling cross-device memory**, so the assistant remembers the same user whether they’re on web, mobile, or even a voice assistant.\n- **Integrating with payment and delivery services**, letting users complete purchases right inside the conversation.\n\n## Final Thoughts\n\nAI agents become truly useful when they can remember. With Memori + Azure AI Founder, you can build assistants that learn from each interaction, gets smarter over time, and deliver delightful, personal experiences.",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Title": "Build a smart shopping AI Agent with memory using the Azure AI Foundry Agent service",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Link": "https://techcommunity.microsoft.com/t5/microsoft-developer-community/build-a-smart-shopping-ai-agent-with-memory-using-the-azure-ai/ba-p/4450348",
  "FeedName": "Microsoft Tech Community",
  "ProcessedDate": "2025-09-04 07:12:07"
}
