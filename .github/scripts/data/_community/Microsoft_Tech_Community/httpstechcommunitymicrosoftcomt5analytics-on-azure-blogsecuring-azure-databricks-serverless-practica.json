{
  "EnhancedContent": "## In today’s data-driven world, organisations are racing to unlock the power of AI and analytics. But for those in regulated sectors—finance, government, healthcare—security and compliance aren’t just checkboxes; they’re mission-critical.\n\nAzure Databricks Serverless offers agility and scalability, but by default, it allows unrestricted outbound access to the internet. For many, that’s a dealbreaker. So, how do you harness the speed of serverless compute while keeping your data flows private and compliant? This post walks you through a proven solution using Azure Private Link, Azure Firewall, and a router VM to create a secure, controlled environment for your Databricks workloads.\n\n# The Challenge: Outbound Control in a Serverless World\n\nServerless compute resources run in the serverless compute plane, and is managed by Microsoft, for ease of use.  Databricks serverless provides hassle-free compute for running notebooks, jobs, and pipelines and by default, outbound traffic can reach the internet and other networks freely.\n\nOne of the most common security requirements for customers in the financial and government sectors is to have the ability to retain network paths within a private network for their users to access their data and for system integration.\n\n# Solution Objective\n\n- **Enforce deny-by-default posture**: Control outbound access with granular precision by enabling a deny-by-default policy for internet. By default, all outbound access is blocked unless explicitly allowed via Private Endpoint Rules.\n- **Control outbound connections**: by specifying allowed locations, connections, FQDN\n- **Enforce the traffic to go over the customer network** for traffic controls and inspection\n\n# Solution Overview\n\nThe solution is designed to route Databricks Serverless outbound traffic to the customer customer-managed Policy Enforcement Point (e.g. Azure Firewall), to allow the customer to securely connect to services hosted on the cloud without exposing the data to the public internet. Essentially, it establishes a private, secure connection between Databricks Control Plane to the customer virtual network.\n\n# Pre-Requisites\n\n**Azure Firewall**\n\n- Deploy an Azure Firewall if you don’t already have one.\n\n**Virtual Networks and Subnets**\n\n- Create a VNET for Databricks and Load Balancer deployment.\n- Set up subnets for the Azure Standard Load Balancer frontend (e.g., 10.0.2.0/26) and backend (e.g., 10.0.2.64/26).\n- Enable Private Endpoint network policy for Network Security Groups and Route Tables on the backend subnet.\n\n**VNET Peering**\n\n- Peer the Databricks VNET with your hub VNET to allow secure routing.\n\n**Azure Databricks Workspace**\n\n- Deploy an Azure Databricks workspace if you don’t have one.\n\nFollow the official Azure Databricks documentation for detailed steps on creating workspaces and private endpoints\n\n# **Summary of Steps**\n\n## Deploy Azure Firewall and Networking\n\n- Set up an Azure Firewall and create the necessary virtual networks (VNets) and subnets for your environment.\n- Peer the Databricks VNet with your hub VNet to enable secure routing.\n\n## Configure the Azure Load Balancer\n\n- Create an internal Standard Load Balancer.\n- Set up frontend and backend pools using NICs (not IP addresses).\n- Add load balancing rules and configure a health probe (typically HTTP on port 8082).\n\n## Create a Private Link Service\n\n- Deploy the Private Link Service behind the load balancer.\n- Associate it with the correct frontend and backend subnets.\n\n## Set Up Route Tables\n\n- Create route tables to direct backend VM traffic to the Azure Firewall.\n- Ensure the route tables are associated with the correct subnets (e.g., backend subnet for the router VM).\n\n## Deploy and Configure the Router VM\n\n- Deploy a Linux VM to act as a router.\n- Enable IP forwarding on the VM and in Azure settings.\n- Configure IPTables for NAT and traffic forwarding.\n- Install and configure NGINX to serve as a health probe for the load balancer.\n\n## Configure Network Security Groups (NSGs)\n\n- Set up NSGs to allow necessary traffic (SSH, load balancer, HTTP/HTTPS, health probe) to and from the router VM.\n\n## Configure Azure Firewall Application Rules\n\n- Define application rules to allow outbound access only to approved FQDNs (e.g., microsoft.com).\n- Block all other outbound traffic by default.\n\n## Configure Databricks Account Portal\n\n- Enable outbound (serverless) Azure Private Link to customer-managed resources in the Databricks Account Portal.\n- Create Network Connectivity Configurations (NCCs) and attach them to your workspaces.\n- Add private endpoint rules for each Azure resource you want to allow access to.\n\n## Approve Private Endpoints\n\n- In the Azure Portal, approve the private endpoint connections created by Databricks for your resources.\n\n## Troubleshooting\n\n- Use tools like netstat, conntrack, and tcpdump on the router VM to diagnose routing issues.\n- Double-check route table and NSG associations.\n- Validate private endpoint rule configurations in both Databricks and the Azure Portal.\n\n## References\n\n[Serverless compute plane networking - Azure Databricks | Microsoft Learn](https://learn.microsoft.com/en-us/azure/databricks/security/network/serverless-network-security/)\n\n[Configure private connectivity to Azure resources - Azure Databricks | Microsoft Learn](https://learn.microsoft.com/en-us/azure/databricks/security/network/serverless-network-security/serverless-private-link)\n\n# **Key Takeaway**\n\nThis solution enforces a deny-by-default posture for outbound traffic from Azure Databricks Serverless, only allowing explicitly approved connections via Private Endpoints. All traffic is routed through your network for inspection and control, helping you meet strict compliance and security requirements.\n\n# Ready to Get Started?\n\nSecuring your Databricks Serverless environment doesn’t have to be daunting. With Azure Private Link, Azure Firewall, and a smart configuration, you get the best of both worlds: agility and airtight security.\n\nFor more details, check out the official Azure Databricks documentation and start building your secure analytics platform today.\n\nQuestions or want to share your experience? Drop a comment below or reach out to the Azure Databricks community.\n\nPublished Sep 25, 2025\n\nVersion 1.0\n\n[analytics](/tag/analytics?nodeId=board%3AAnalyticsonAzure)\n\n[azure](/tag/azure?nodeId=board%3AAnalyticsonAzure)\n\n[azure databricks](/tag/azure%20databricks?nodeId=board%3AAnalyticsonAzure)\n\n[!\\[alescardoso&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0zNDA1NC00ODczNjBpNENDNTk3QTI2RjM5NzQzNQ?image-dimensions=50x50)](/users/alescardoso/34054) [alescardoso](/users/alescardoso/34054) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined December 15, 2016\n\n[View Profile](/users/alescardoso/34054)\n\n/category/azure/blog/analyticsonazure [Analytics on Azure Blog](/category/azure/blog/analyticsonazure) Follow this blog board to get notified when there's new activity",
  "ProcessedDate": "2025-09-26 00:54:12",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "PubDate": "2025-09-25T23:42:50+00:00",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Link": "https://techcommunity.microsoft.com/t5/analytics-on-azure-blog/securing-azure-databricks-serverless-practical-guide-to-private/ba-p/4457083",
  "Author": "alescardoso",
  "Tags": [],
  "OutputDir": "_community",
  "Description": "# The Challenge: Outbound Control in a Serverless World\n\nServerless compute resources run in the serverless compute plane, and is managed by Microsoft, for ease of use. Databricks serverless provides hassle-free compute for running notebooks, jobs, and pipelines and by default, outbound traffic can reach the internet and other networks freely.\n\nOne of the most common security requirements for customers in the financial and government sectors is to have the ability to retain network paths within a private network for their users to access their data and for system integration.\n\n# Solution Objective\n\n- **Enforce deny-by-default posture**: Control outbound access with granular precision by enabling a deny-by-default policy for internet. By default, all outbound access is blocked unless explicitly allowed via Private Endpoint Rules.\n- **Control outbound connections**: by specifying allowed locations, connections, FQDN\n- **Enforce the traffic to go over the customer network** for traffic controls and inspection\n\n# Solution Overview\n\nThe solution is designed to route Databricks Serverless outbound traffic to the customer customer-managed Policy Enforcement Point (e.g. Azure Firewall), to allow the customer to securely connect to services hosted on the cloud without exposing the data to the public internet. Essentially, it establishes a private, secure connection between Databricks Control Plane to the customer virtual network.\n\n![]()\n\n# Pre-Requisites\n\n**Azure Firewall**\n\n- Deploy an Azure Firewall if you don’t already have one.\n\n**Virtual Networks and Subnets**\n\n- Create a VNET for Databricks and Load Balancer deployment.\n- Set up subnets for the Azure Standard Load Balancer frontend (e.g., 10.0.2.0/26) and backend (e.g., 10.0.2.64/26).\n- Enable Private Endpoint network policy for Network Security Groups and Route Tables on the backend subnet.\n\n**VNET Peering**\n\n- Peer the Databricks VNET with your hub VNET to allow secure routing.\n\n**Azure Databricks Workspace**\n\n- Deploy an Azure Databricks workspace if you don’t have one.\n\nFollow the official Azure Databricks documentation for detailed steps on creating workspaces and private endpoints\n\n# **Summary of Steps**\n\n## Deploy Azure Firewall and Networking\n\n- Set up an Azure Firewall and create the necessary virtual networks (VNets) and subnets for your environment.\n- Peer the Databricks VNet with your hub VNet to enable secure routing.\n\n## Configure the Azure Load Balancer\n\n- Create an internal Standard Load Balancer.\n- Set up frontend and backend pools using NICs (not IP addresses).\n- Add load balancing rules and configure a health probe (typically HTTP on port 8082).\n\n## Create a Private Link Service\n\n- Deploy the Private Link Service behind the load balancer.\n- Associate it with the correct frontend and backend subnets.\n\n## Set Up Route Tables\n\n- Create route tables to direct backend VM traffic to the Azure Firewall.\n- Ensure the route tables are associated with the correct subnets (e.g., backend subnet for the router VM).\n\n## Deploy and Configure the Router VM\n\n- Deploy a Linux VM to act as a router.\n- Enable IP forwarding on the VM and in Azure settings.\n- Configure IPTables for NAT and traffic forwarding.\n- Install and configure NGINX to serve as a health probe for the load balancer.\n\n## Configure Network Security Groups (NSGs)\n\n- Set up NSGs to allow necessary traffic (SSH, load balancer, HTTP/HTTPS, health probe) to and from the router VM.\n\n## Configure Azure Firewall Application Rules\n\n- Define application rules to allow outbound access only to approved FQDNs (e.g., microsoft.com).\n- Block all other outbound traffic by default.\n\n## Configure Databricks Account Portal\n\n- Enable outbound (serverless) Azure Private Link to customer-managed resources in the Databricks Account Portal.\n- Create Network Connectivity Configurations (NCCs) and attach them to your workspaces.\n- Add private endpoint rules for each Azure resource you want to allow access to.\n\n## Approve Private Endpoints\n\n- In the Azure Portal, approve the private endpoint connections created by Databricks for your resources.\n\n## Troubleshooting\n\n- Use tools like netstat, conntrack, and tcpdump on the router VM to diagnose routing issues.\n- Double-check route table and NSG associations.\n- Validate private endpoint rule configurations in both Databricks and the Azure Portal.\n\n## References\n\n[Serverless compute plane networking - Azure Databricks | Microsoft Learn](https://learn.microsoft.com/en-us/azure/databricks/security/network/serverless-network-security/)\n\n[Configure private connectivity to Azure resources - Azure Databricks | Microsoft Learn](https://learn.microsoft.com/en-us/azure/databricks/security/network/serverless-network-security/serverless-private-link)\n\n# **Key Takeaway**\n\nThis solution enforces a deny-by-default posture for outbound traffic from Azure Databricks Serverless, only allowing explicitly approved connections via Private Endpoints. All traffic is routed through your network for inspection and control, helping you meet strict compliance and security requirements.\n\n# Ready to Get Started?\n\nSecuring your Databricks Serverless environment doesn’t have to be daunting. With Azure Private Link, Azure Firewall, and a smart configuration, you get the best of both worlds: agility and airtight security.\n\nFor more details, check out the official Azure Databricks documentation and start building your secure analytics platform today.\n\nQuestions or want to share your experience? Drop a comment below or reach out to the Azure Databricks community.",
  "Title": "Securing Azure Databricks Serverless: Practical Guide to Private Link Integration",
  "FeedName": "Microsoft Tech Community"
}
