<<<<<<< HEAD
{
  "ProcessedDate": "2025-08-15 14:40:33",
  "PubDate": "2025-08-15T04:56:31+00:00",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/send-traces-from-micronaut-native-image-applications-to-azure/ba-p/4443791",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Author": "Logico_jp",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "The original post (Japanese) was written on 23 July 2025.\n\n[MicronautからAzure Monitorにtraceを送信したい – Logico Inside](https://logico-jp.dev/2025/07/24/send-traces-from-micronaut-applications-to-azure-monitor/)\n\nThis entry is related to the following one. Please take a look for background information.\n\n[Send signals from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-signals-from-micronaut-native-image-applications-to-azure-monitor/4443735)\n\n### Prerequisites\n\n- Maven: 3.9.10\n- JDK version 21\n- Micronaut: 4.9.0 or later\n\nThe following tutorial was used as a reference.\n\n[OpenTelemetry Tracing with Oracle Cloud and the Micronaut Framework](https://guides.micronaut.io/latest/micronaut-cloud-trace-oci-maven-java.html)\n\nAs of 13 August 2025, GDK (Graal Dev Kit) guides are also available.\n\n[Create and Trace a Micronaut Application Using Azure Monitor](https://graal.cloud/gdk/gdk-modules/tracing/micronaut-trace-azure/?buildTool=maven&amp;system=linux)\n\n### Create an archetype\n\nWe can create an archetype using Micronaut’s CLI (`mn` ) or Micronaut Launch. In this entry, use `application.yml` instead of `application.properties` for application configuration. So, we need to specify the feature “yaml” so that we can include dependencies for using yaml.\n\n[Micronaut Launch](https://micronaut.io/launch/)\n\n``` mn create-app \\ --build=maven \\ --jdk=21 \\ --lang=java \\ --test=junit \\ --features=tracing-opentelemetry-http,validation,graalvm,azure-tracing,http-client,yaml \\ dev.logicojp.micronaut.azuremonitor-metric ```\n\nWhen using Micronaut Launch, click [FEATURES] and select the following features.\n\n- tracing-opentelemetry-http\n- validation\n- graalvm\n- azure-tracing\n- http-client\n- yaml\n\nAfter all features are selected, click [GENERATE PROJECT] and choose [Download Zip] to download an archetype in Zip file.\n\n### Implementation\n\n``` <dependency> <groupid>io.micronaut.tracing</groupid> <artifactid>micronaut-tracing-opentelemetry-http</artifactid> <scope>compile</scope> </dependency> ```\n\nIn this section, we’re going to use the tutorial in Micronaut Guides. We can use these codes as they are, but several points are modified.\n\n#### a) For sending traces to Application Insights\n\nPlease note that we didn’t include metrics in this article because we discussed them in the last one.\n\nStarting with Micronaut 4.9.0, a feature package called `micronaut-azure-tracing` has been added. This feature enables sending traces to Application Insights.\n\n``` <dependency> <groupid>io.micronaut.azure</groupid> <artifactid>micronaut-azure-tracing</artifactid> </dependency> ```\n\nIndeed, this dependency is necessary for sending data to Application Insights. However, adding this dependency and specifying the Application Insights connection string is not enough to send traces from applications. `micronaut-azure-tracing` depends upon the three dependencies listed below. This shows that adding dependencies for trace collection and creation are required.\n\n- `com.azure:azure-monitor-opentelemetry-autoconfigure`\n- `io.micronaut:micronaut-inject`\n- `io.micronaut.tracing:micronaut-tracing-opentelemetry`\n\nIn this case, we want to obtain HTTP traces, so we will add dependencies for generating HTTP traces.\n\n``` <dependency> <groupid>io.micronaut.tracing</groupid> <artifactid>micronaut-tracing-opentelemetry-http</artifactid> <scope>compile</scope> </dependency> ```\n\nWhere setting the connection string for `micronaut-azure-tracing` is different from where for `micrometer-azure-monitor` ( `azure.tracing.connection-string` ). If we want to retrieve not only metrics but traces, the setting location is different, which can be confusing. We can also use environment variables to specify the connection string.\n\n``` azure.tracing.connection-string=\"InstrumentationKey=....\" ```\n\n``` azure: tracing: connection-string: InstrumentationKey=.... ```\n\n#### b) pom.xml\n\nTo use the GraalVM Reachability Metadata Repository, we need to add this dependency. The latest version is 0.11.0 as of 23 July, 2025.\n\n``` <dependency> <groupid>org.graalvm.buildtools</groupid> <artifactid>graalvm-reachability-metadata</artifactid> <version>0.11.0</version> </dependency> ```\n\nAdd the GraalVM Maven plugin and enable the use of GraalVM Reachability Metadata obtained from the above dependency. This plugin lets us set optimization levels using `buildArg` (in this example, the optimisation level is specified). We can also add it to `native-image.properties` , the `native-image` tool (and the Maven/Gradle plugin) will read it.\n\n``` <plugin> <groupid>org.graalvm.buildtools</groupid> <artifactid>native-maven-plugin</artifactid> <configuration> <metadatarepository> <enabled>true</enabled> </metadatarepository> <buildargs combine.children=\"append\"> <buildarg>-Ob</buildarg> </buildargs> <quickbuild>true</quickbuild> </configuration> </plugin> ```\n\n#### c) To avoid version conflicts with dependencies used in the Azure SDK\n\nThis often happens when using Netty and/or Jackson. To avoid version conflicts during Native Image generation, Micronaut offers alternative components that we can choose. For example, if we want to avoid Netty version conflicts, we can use undertow.\n\n| **Dependencies** | **Alternatives** | | --- | --- | | Netty | undertow, jetty, Tomcat | | Jackson | JSON-P / JSON-B, BSON | | HTTP Client | JDK HTTP Client |\n\nFor now, let’s build it as a Java application.\n\n``` mvn clean package ```\n\n### Test as a Java application\n\nAt first, verify that the application is running without any problems and that traces are being sent to Application Insights. Then, run the application using the Tracing Agent to generate the necessary configuration files.\n\n```\n# (1) Collect configuration files such as reflect-config.json\n$JAVA_HOME/bin/java \\ -agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/{groupId}/{artifactId}/ \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-a Generate a trace file\n$JAVA_HOME/bin/java \\ -agentlib:native-image-agent=trace-output=/path/to/trace-file.json \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-b Generate a reachability metadata file from the collected trace file\nnative-image-configure generate \\ --trace-input=/path/to/trace-file.json \\ --output-dir=/path/to/config-dir/ ```\n\n[Configure Native Image with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-with-tracing-agent/)\n\n[Collect Metadata with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/)\n\nMake the following files in the specified folder.\n\n- `jni-config.json`\n- `reflect-config.json`\n- `proxy-config.json`\n- `resource-config.json`\n- `reachability-metadata.json`\n\nThese files can be located at `src/main/resources/META-INF/native-image` . The `native-image` tool picks up configuration files located in the directory `src/main/resources/META-INF/native-image` . However, it is recommended that we place the files in subdirectories divided by `groupId` and `artifactId` , as shown below.\n\n`src/main/resources/META-INF/native-image/{groupId}/{artifactId}`\n\n### native-image.properties\n\nWhen creating a native image, we call the following command.\n\n``` mvn package -Dpackaging=native-image ```\n\nWe should specify the timing of class initialization (build time or runtime), the command line options for the `native-image` tool (the same command line options work in Maven/Gradle plugin), and the JVM arguments in the `native-image.properties` file. Indeed, these settings can be specified in `pom.xml` , but it is recommended that they be externalized.\n\nThis is also explained in the metric entry, so some details will be left out. If needed, please check the metric entry.\n\n[Send metrics from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-metrics-from-micronaut-native-image-applications-to-azure-monitor/4443763)\n\n### Build a Native Image application\n\nBuilding a native image application takes a long time (though it has got quicker over time). If building it for testing purpose, we strongly recommend enabling Quick Build and setting the optimization level to `-Ob` option (although this will still take time). See below for more information.\n\n[Maven plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html#native-image-options) [Gradle plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html#native-image-options) [Optimizations and Performance](https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/#optimization-levels)\n\n### Test as a native image application\n\nLet’s check if the application works. To check the inventory of desktop, execute the following call.\n\n``` curl https://<container apps=\"\" url=\"\" and=\"\" port=\"\">/store/inventory/desktop</container> ```\n\nWe should receive a response like this.\n\n``` {\"warehouse\":7,\"item\":\"desktop\",\"store\":2} ```\n\nIn Azure Monitor (Application Insights) Application Map, we can observe this interaction visually.\n\nSwitching to the trace page shows us traces and custom properties on the right of the screen.\n\nPress enter or click to view image in full size\n\nThen, we add an order. For example, if we place an order for five desktops and then receive `202 Accepted` , we need to call inventory check API again. This will show that the number has increased by five and the desktop order has changed to seven (original was 2).\n\n``` $ curl -X \"POST\" \"https://<container apps=\"\" url=\"\" and=\"\" port=\"\">/store/order\" \\ -H 'Content-Type: application/json; charset=utf-8' \\ -d $'{\"item\":\"desktop\", \"count\":5}'\n\n$ curl https://<container apps=\"\" url=\"\" and=\"\" port=\"\">/store/inventory/desktop</container></container> ```\n\nWithin `azuremonitor-trace` , an HTTP Client is used internally to execute `POST /warehouse/order` . Looking at the Application Map in Azure Monitor (Application Insights), we can confirm that a call to `azuremonitor-trace` itself is occurring.\n\nThe trace at the time of order placement is as follows.\n\nClicking ‘View all’ in the red frame, we can check the details of each trace.\n\nUpdated Aug 15, 2025\n\nVersion 3.0\n\n[azure container apps](/tag/azure%20container%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[java](/tag/java?nodeId=board%3AAppsonAzureBlog)\n\n[web apps](/tag/web%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[Logico_jp&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yOTkyMzctNTQ3ODkyaTBFMzYwMUVGM0FBQkZBN0Y?image-dimensions=50x50)](/users/logico_jp/299237) [Logico_jp](/users/logico_jp/299237) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined March 12, 2019\n\n[View Profile](/users/logico_jp/299237)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "Title": "Send traces from Micronaut native image applications to Azure Monitor",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Description": "The original post (Japanese) was written on 23 July 2025.\n\n[MicronautからAzure Monitorにtraceを送信したい – Logico Inside](https://logico-jp.dev/2025/07/24/send-traces-from-micronaut-applications-to-azure-monitor/)\n\nThis entry is related to the following one. Please take a look for background information.\n\n[Send signals from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-signals-from-micronaut-native-image-applications-to-azure-monitor/4443735)\n\n### Prerequisites\n\n- Maven: 3.9.10\n- JDK version 21\n- Micronaut: 4.9.0 or later\n\nThe following tutorial was used as a reference.\n\n[OpenTelemetry Tracing with Oracle Cloud and the Micronaut Framework](https://guides.micronaut.io/latest/micronaut-cloud-trace-oci-maven-java.html)\n\nAs of 13 August 2025, GDK (Graal Dev Kit) guides are also available.\n\n[Create and Trace a Micronaut Application Using Azure Monitor](https://graal.cloud/gdk/gdk-modules/tracing/micronaut-trace-azure/?buildTool=maven&system=linux)\n\n### Create an archetype\n\nWe can create an archetype using Micronaut’s CLI (`mn` ) or Micronaut Launch. In this entry, use `application.yml` instead of `application.properties` for application configuration. So, we need to specify the feature “yaml” so that we can include dependencies for using yaml.\n\n[Micronaut Launch](https://micronaut.io/launch/)\n\n- mn create-app \\\n--build=maven \\ --jdk=21 \\ --lang=java \\ --test=junit \\ --features=tracing-opentelemetry-http,validation,graalvm,azure-tracing,http-client,yaml \\ dev.logicojp.micronaut.azuremonitor-metric\n\nWhen using Micronaut Launch, click [FEATURES] and select the following features.\n\n- tracing-opentelemetry-http\n- validation\n- graalvm\n- azure-tracing\n- http-client\n- yaml\n\nAfter all features are selected, click [GENERATE PROJECT] and choose [Download Zip] to download an archetype in Zip file.\n\n### Implementation\n- io.micronaut.tracing\nmicronaut-tracing-opentelemetry-http compile\n\nIn this section, we’re going to use the tutorial in Micronaut Guides. We can use these codes as they are, but several points are modified.\n\n#### a) For sending traces to Application Insights\n\nPlease note that we didn’t include metrics in this article because we discussed them in the last one.\n\nStarting with Micronaut 4.9.0, a feature package called `micronaut-azure-tracing` has been added. This feature enables sending traces to Application Insights.\n- io.micronaut.azure\nmicronaut-azure-tracing\n\nIndeed, this dependency is necessary for sending data to Application Insights. However, adding this dependency and specifying the Application Insights connection string is not enough to send traces from applications. `micronaut-azure-tracing` depends upon the three dependencies listed below. This shows that adding dependencies for trace collection and creation are required.\n\n- `com.azure:azure-monitor-opentelemetry-autoconfigure`\n- `io.micronaut:micronaut-inject`\n- `io.micronaut.tracing:micronaut-tracing-opentelemetry`\n\nIn this case, we want to obtain HTTP traces, so we will add dependencies for generating HTTP traces.\n- io.micronaut.tracing\nmicronaut-tracing-opentelemetry-http compile\n\nWhere setting the connection string for `micronaut-azure-tracing` is different from where for `micrometer-azure-monitor` ( `azure.tracing.connection-string` ). If we want to retrieve not only metrics but traces, the setting location is different, which can be confusing. We can also use environment variables to specify the connection string.\n- azure.tracing.connection-string=\"InstrumentationKey=....\"\n- azure:\ntracing: connection-string: InstrumentationKey=....\n\n#### b) pom.xml\n\nTo use the GraalVM Reachability Metadata Repository, we need to add this dependency. The latest version is 0.11.0 as of 23 July, 2025.\n- org.graalvm.buildtools\ngraalvm-reachability-metadata 0.11.0\n\nAdd the GraalVM Maven plugin and enable the use of GraalVM Reachability Metadata obtained from the above dependency. This plugin lets us set optimization levels using `buildArg` (in this example, the optimisation level is specified). We can also add it to `native-image.properties` , the `native-image` tool (and the Maven/Gradle plugin) will read it.\n- org.graalvm.buildtools\nnative-maven-plugin\n\ntrue\n\n-Ob\n\ntrue\n\n#### c) To avoid version conflicts with dependencies used in the Azure SDK\n\nThis often happens when using Netty and/or Jackson. To avoid version conflicts during Native Image generation, Micronaut offers alternative components that we can choose. For example, if we want to avoid Netty version conflicts, we can use undertow.\n\n| **Dependencies** | **Alternatives** | | --- | --- | | Netty | undertow, jetty, Tomcat | | Jackson | JSON-P / JSON-B, BSON | | HTTP Client | JDK HTTP Client |\n\nFor now, let’s build it as a Java application.\n- mvn clean package\n\n### Test as a Java application\n\nAt first, verify that the application is running without any problems and that traces are being sent to Application Insights. Then, run the application using the Tracing Agent to generate the necessary configuration files.\n- # (1) Collect configuration files such as reflect-config.json\n$JAVA\\_HOME/bin/java \\ -agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/{groupId}/{artifactId}/ \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-a Generate a trace file\n$JAVA\\_HOME/bin/java \\ -agentlib:native-image-agent=trace-output=/path/to/trace-file.json \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-b Generate a reachability metadata file from the collected trace file\nnative-image-configure generate \\ --trace-input=/path/to/trace-file.json \\ --output-dir=/path/to/config-dir/\n\n[Configure Native Image with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-with-tracing-agent/)\n\n[Collect Metadata with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/)\n\nMake the following files in the specified folder.\n\n- `jni-config.json`\n- `reflect-config.json`\n- `proxy-config.json`\n- `resource-config.json`\n- `reachability-metadata.json`\n\nThese files can be located at `src/main/resources/META-INF/native-image` . The `native-image` tool picks up configuration files located in the directory `src/main/resources/META-INF/native-image` . However, it is recommended that we place the files in subdirectories divided by `groupId` and `artifactId` , as shown below.\n\n`src/main/resources/META-INF/native-image/{groupId}/{artifactId}`\n\n### native-image.properties\n\nWhen creating a native image, we call the following command.\n- mvn package -Dpackaging=native-image\n\nWe should specify the timing of class initialization (build time or runtime), the command line options for the `native-image` tool (the same command line options work in Maven/Gradle plugin), and the JVM arguments in the `native-image.properties` file. Indeed, these settings can be specified in `pom.xml` , but it is recommended that they be externalized.\n\nThis is also explained in the metric entry, so some details will be left out. If needed, please check the metric entry.\n\n[Send metrics from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-metrics-from-micronaut-native-image-applications-to-azure-monitor/4443763)\n\n### Build a Native Image application\n\nBuilding a native image application takes a long time (though it has got quicker over time). If building it for testing purpose, we strongly recommend enabling Quick Build and setting the optimization level to `-Ob` option (although this will still take time). See below for more information.\n\n[Maven plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html#native-image-options) [Gradle plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html#native-image-options) [Optimizations and Performance](https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/#optimization-levels)\n\n### Test as a native image application\n\nLet’s check if the application works. To check the inventory of desktop, execute the following call.\n- curl https:///store/inventory/desktop\n\nWe should receive a response like this.\n- {\"warehouse\":7,\"item\":\"desktop\",\"store\":2}\n\nIn Azure Monitor (Application Insights) Application Map, we can observe this interaction visually.\n\n![]()\n\nSwitching to the trace page shows us traces and custom properties on the right of the screen.\n\nPress enter or click to view image in full size\n\n![]()\n\nThen, we add an order. For example, if we place an order for five desktops and then receive `202 Accepted` , we need to call inventory check API again. This will show that the number has increased by five and the desktop order has changed to seven (original was 2).\n- $ curl -X \"POST\" \"https:///store/order\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\ -d $'{\"item\":\"desktop\", \"count\":5}'\n\n$ curl https:///store/inventory/desktop\n\nWithin `azuremonitor-trace` , an HTTP Client is used internally to execute `POST /warehouse/order` . Looking at the Application Map in Azure Monitor (Application Insights), we can confirm that a call to `azuremonitor-trace` itself is occurring.\n\n![]()\n\nThe trace at the time of order placement is as follows.\n\n![]()\n\nClicking ‘View all’ in the red frame, we can check the details of each trace.\n\n![]()",
  "Tags": []
}
=======
{
  "Author": "Logico_jp",
  "ProcessedDate": "2025-08-15 03:30:52",
  "EnhancedContent": "The original post (Japanese) was written on 23 July 2025.\n\n[MicronautからAzure Monitorにtraceを送信したい – Logico Inside](https://logico-jp.dev/2025/07/24/send-traces-from-micronaut-applications-to-azure-monitor/)\n\nThis entry is related to the following one. Please take a look for background information.\n\n[Send metrics/traces/logs from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-metricstraceslogs-from-micronaut-native-image-applications-to-azure-monitor/4443735)\n\n### Prerequisites\n\n- Maven: 3.9.10\n- JDK version 21\n- Micronaut: 4.9.0 or later\n\nThe following tutorial was used as a reference.\n\n[OpenTelemetry Tracing with Oracle Cloud and the Micronaut Framework](https://guides.micronaut.io/latest/micronaut-cloud-trace-oci-maven-java.html)\n\nAs of 13 August 2025, GDK (Graal Dev Kit) guides are also available.\n\n[Create and Trace a Micronaut Application Using Azure Monitor](https://graal.cloud/gdk/gdk-modules/tracing/micronaut-trace-azure/?buildTool=maven&amp;system=linux)\n\n### Create an archetype\n\nWe can create an archetype using Micronaut’s CLI (`mn` ) or Micronaut Launch. In this entry, use `application.yml` instead of `application.properties` for application configuration. So, we need to specify the feature “yaml” so that we can include dependencies for using yaml.\n\n[Micronaut Launch](https://micronaut.io/launch/)\n\n``` mn create-app \\ --build=maven \\ --jdk=21 \\ --lang=java \\ --test=junit \\ --features=tracing-opentelemetry-http,validation,graalvm,azure-tracing,http-client,yaml \\ dev.logicojp.micronaut.azuremonitor-metric ```\n\nWhen using Micronaut Launch, click [FEATURES] and select the following features.\n\n- tracing-opentelemetry-http\n- validation\n- graalvm\n- azure-tracing\n- http-client\n- yaml\n\nAfter all features are selected, click [GENERATE PROJECT] and choose [Download Zip] to download an archetype in Zip file.\n\n### Implementation\n\n``` <dependency> <groupid>io.micronaut.tracing</groupid> <artifactid>micronaut-tracing-opentelemetry-http</artifactid> <scope>compile</scope> </dependency> ```\n\nIn this section, we’re going to use the tutorial in Micronaut Guides. We can use these codes as they are, but several points are modified.\n\n#### a) For sending traces to Application Insights\n\nPlease note that we didn’t include metrics in this article because we discussed them in the last one.\n\nStarting with Micronaut 4.9.0, a feature package called `micronaut-azure-tracing` has been added. This feature enables sending traces to Application Insights.\n\n``` <dependency> <groupid>io.micronaut.azure</groupid> <artifactid>micronaut-azure-tracing</artifactid> </dependency> ```\n\nIndeed, this dependency is necessary for sending data to Application Insights. However, adding this dependency and specifying the Application Insights connection string is not enough to send traces from applications. `micronaut-azure-tracing` depends upon the three dependencies listed below. This shows that adding dependencies for trace collection and creation are required.\n\n- `com.azure:azure-monitor-opentelemetry-autoconfigure`\n- `io.micronaut:micronaut-inject`\n- `io.micronaut.tracing:micronaut-tracing-opentelemetry`\n\nIn this case, we want to obtain HTTP traces, so we will add dependencies for generating HTTP traces.\n\n``` <dependency> <groupid>io.micronaut.tracing</groupid> <artifactid>micronaut-tracing-opentelemetry-http</artifactid> <scope>compile</scope> </dependency> ```\n\nWhere setting the connection string for `micronaut-azure-tracing` is different from where for `micrometer-azure-monitor` ( `azure.tracing.connection-string` ). If we want to retrieve not only metrics but traces, the setting location is different, which can be confusing. We can also use environment variables to specify the connection string.\n\n``` azure.tracing.connection-string=\"InstrumentationKey=....\" ```\n\n``` azure: tracing: connection-string: InstrumentationKey=.... ```\n\n#### b) pom.xml\n\nTo use the GraalVM Reachability Metadata Repository, we need to add this dependency. The latest version is 0.11.0 as of 23 July, 2025.\n\n``` <dependency> <groupid>org.graalvm.buildtools</groupid> <artifactid>graalvm-reachability-metadata</artifactid> <version>0.11.0</version> </dependency> ```\n\nAdd the GraalVM Maven plugin and enable the use of GraalVM Reachability Metadata obtained from the above dependency. This plugin lets us set optimization levels using `buildArg` (in this example, the optimisation level is specified). We can also add it to `native-image.properties` , the `native-image` tool (and the Maven/Gradle plugin) will read it.\n\n``` <plugin> <groupid>org.graalvm.buildtools</groupid> <artifactid>native-maven-plugin</artifactid> <configuration> <metadatarepository> <enabled>true</enabled> </metadatarepository> <buildargs combine.children=\"append\"> <buildarg>-Ob</buildarg> </buildargs> <quickbuild>true</quickbuild> </configuration> </plugin> ```\n\n#### c) To avoid version conflicts with dependencies used in the Azure SDK\n\nThis often happens when using Netty and/or Jackson. To avoid version conflicts during Native Image generation, Micronaut offers alternative components that we can choose. For example, if we want to avoid Netty version conflicts, we can use undertow.\n\n| **Dependencies** | **Alternatives** | | --- | --- | | Netty | undertow, jetty, Tomcat | | Jackson | JSON-P / JSON-B, BSON | | HTTP Client | JDK HTTP Client |\n\nFor now, let’s build it as a Java application.\n\n``` mvn clean package ```\n\n### Test as a Java application\n\nAt first, verify that the application is running without any problems and that traces are being sent to Application Insights. Then, run the application using the Tracing Agent to generate the necessary configuration files.\n\n```\n# (1) Collect configuration files such as reflect-config.json\n$JAVA_HOME/bin/java \\ -agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/{groupId}/{artifactId}/ \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-a Generate a trace file\n$JAVA_HOME/bin/java \\ -agentlib:native-image-agent=trace-output=/path/to/trace-file.json \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-b Generate a reachability metadata file from the collected trace file\nnative-image-configure generate \\ --trace-input=/path/to/trace-file.json \\ --output-dir=/path/to/config-dir/ ```\n\n[Configure Native Image with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-with-tracing-agent/)\n\n[Collect Metadata with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/)\n\nMake the following files in the specified folder.\n\n- `jni-config.json`\n- `reflect-config.json`\n- `proxy-config.json`\n- `resource-config.json`\n- `reachability-metadata.json`\n\nThese files can be located at `src/main/resources/META-INF/native-image` . The `native-image` tool picks up configuration files located in the directory `src/main/resources/META-INF/native-image` . However, it is recommended that we place the files in subdirectories divided by `groupId` and `artifactId` , as shown below.\n\n`src/main/resources/META-INF/native-image/{groupId}/{artifactId}`\n\n### native-image.properties\n\nWhen creating a native image, we call the following command.\n\n``` mvn package -Dpackaging=native-image ```\n\nWe should specify the timing of class initialization (build time or runtime), the command line options for the `native-image` tool (the same command line options work in Maven/Gradle plugin), and the JVM arguments in the `native-image.properties` file. Indeed, these settings can be specified in `pom.xml` , but it is recommended that they be externalized.\n\nThis is also explained in the metric entry, so some details will be left out. If needed, please check the metric entry.\n\n[Send metrics from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-metrics-from-micronaut-native-image-applications-to-azure-monitor/4443763)\n\n### Build a Native Image application\n\nBuilding a native image application takes a long time (though it has got quicker over time). If building it for testing purpose, we strongly recommend enabling Quick Build and setting the optimization level to `-Ob` option (although this will still take time). See below for more information.\n\n[Maven plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html#native-image-options) [Gradle plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html#native-image-options) [Optimizations and Performance](https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/#optimization-levels)\n\n### Test as a native image application\n\nLet’s check if the application works. To check the inventory of desktop, execute the following call.\n\n``` curl https://<container apps=\"\" url=\"\" and=\"\" port=\"\">/store/inventory/desktop</container> ```\n\nWe should receive a response like this.\n\n``` {\"warehouse\":7,\"item\":\"desktop\",\"store\":2} ```\n\nIn Azure Monitor (Application Insights) Application Map, we can observe this interaction visually.\n\nSwitching to the trace page shows us traces and custom properties on the right of the screen.\n\nPress enter or click to view image in full size\n\nThen, we add an order. For example, if we place an order for five desktops and then receive `202 Accepted` , we need to call inventory check API again. This will show that the number has increased by five and the desktop order has changed to seven (original was 2).\n\n``` $ curl -X \"POST\" \"https://<container apps=\"\" url=\"\" and=\"\" port=\"\">/store/order\" \\ -H 'Content-Type: application/json; charset=utf-8' \\ -d $'{\"item\":\"desktop\", \"count\":5}'\n\n$ curl https://<container apps=\"\" url=\"\" and=\"\" port=\"\">/store/inventory/desktop</container></container> ```\n\nWithin `azuremonitor-trace` , an HTTP Client is used internally to execute `POST /warehouse/order` . Looking at the Application Map in Azure Monitor (Application Insights), we can confirm that a call to `azuremonitor-trace` itself is occurring.\n\nThe trace at the time of order placement is as follows.\n\nClicking ‘View all’ in the red frame, we can check the details of each trace.\n\nUpdated Aug 15, 2025\n\nVersion 2.0\n\n[azure container apps](/tag/azure%20container%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[java](/tag/java?nodeId=board%3AAppsonAzureBlog)\n\n[web apps](/tag/web%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[Logico_jp&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yOTkyMzctNTQ3ODkyaTBFMzYwMUVGM0FBQkZBN0Y?image-dimensions=50x50)](/users/logico_jp/299237) [Logico_jp](/users/logico_jp/299237) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined March 12, 2019\n\n[View Profile](/users/logico_jp/299237)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Community",
  "PubDate": "2025-08-15T03:06:30+00:00",
  "Title": "Send traces from Micronaut native image applications to Azure Monitor",
  "OutputDir": "_community",
  "Description": "The original post (Japanese) was written on 23 July 2025.\n\n[MicronautからAzure Monitorにtraceを送信したい – Logico Inside](https://logico-jp.dev/2025/07/24/send-traces-from-micronaut-applications-to-azure-monitor/)\n\nThis entry is related to the following one. Please take a look for background information.\n\n[Send metrics/traces/logs from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-metricstraceslogs-from-micronaut-native-image-applications-to-azure-monitor/4443735)\n\n### Prerequisites\n\n- Maven: 3.9.10\n- JDK version 21\n- Micronaut: 4.9.0 or later\n\nThe following tutorial was used as a reference.\n\n[OpenTelemetry Tracing with Oracle Cloud and the Micronaut Framework](https://guides.micronaut.io/latest/micronaut-cloud-trace-oci-maven-java.html)\n\nAs of 13 August 2025, GDK (Graal Dev Kit) guides are also available.\n\n[Create and Trace a Micronaut Application Using Azure Monitor](https://graal.cloud/gdk/gdk-modules/tracing/micronaut-trace-azure/?buildTool=maven&system=linux)\n\n### Create an archetype\n\nWe can create an archetype using Micronaut’s CLI (`mn` ) or Micronaut Launch. In this entry, use `application.yml` instead of `application.properties` for application configuration. So, we need to specify the feature “yaml” so that we can include dependencies for using yaml.\n\n[Micronaut Launch](https://micronaut.io/launch/)\n\n- mn create-app \\\n--build=maven \\ --jdk=21 \\ --lang=java \\ --test=junit \\ --features=tracing-opentelemetry-http,validation,graalvm,azure-tracing,http-client,yaml \\ dev.logicojp.micronaut.azuremonitor-metric\n\nWhen using Micronaut Launch, click [FEATURES] and select the following features.\n\n- tracing-opentelemetry-http\n- validation\n- graalvm\n- azure-tracing\n- http-client\n- yaml\n\nAfter all features are selected, click [GENERATE PROJECT] and choose [Download Zip] to download an archetype in Zip file.\n\n### Implementation\n- io.micronaut.tracing\nmicronaut-tracing-opentelemetry-http compile\n\nIn this section, we’re going to use the tutorial in Micronaut Guides. We can use these codes as they are, but several points are modified.\n\n#### a) For sending traces to Application Insights\n\nPlease note that we didn’t include metrics in this article because we discussed them in the last one.\n\nStarting with Micronaut 4.9.0, a feature package called `micronaut-azure-tracing` has been added. This feature enables sending traces to Application Insights.\n- io.micronaut.azure\nmicronaut-azure-tracing\n\nIndeed, this dependency is necessary for sending data to Application Insights. However, adding this dependency and specifying the Application Insights connection string is not enough to send traces from applications. `micronaut-azure-tracing` depends upon the three dependencies listed below. This shows that adding dependencies for trace collection and creation are required.\n\n- `com.azure:azure-monitor-opentelemetry-autoconfigure`\n- `io.micronaut:micronaut-inject`\n- `io.micronaut.tracing:micronaut-tracing-opentelemetry`\n\nIn this case, we want to obtain HTTP traces, so we will add dependencies for generating HTTP traces.\n- io.micronaut.tracing\nmicronaut-tracing-opentelemetry-http compile\n\nWhere setting the connection string for `micronaut-azure-tracing` is different from where for `micrometer-azure-monitor` ( `azure.tracing.connection-string` ). If we want to retrieve not only metrics but traces, the setting location is different, which can be confusing. We can also use environment variables to specify the connection string.\n- azure.tracing.connection-string=\"InstrumentationKey=....\"\n- azure:\ntracing: connection-string: InstrumentationKey=....\n\n#### b) pom.xml\n\nTo use the GraalVM Reachability Metadata Repository, we need to add this dependency. The latest version is 0.11.0 as of 23 July, 2025.\n- org.graalvm.buildtools\ngraalvm-reachability-metadata 0.11.0\n\nAdd the GraalVM Maven plugin and enable the use of GraalVM Reachability Metadata obtained from the above dependency. This plugin lets us set optimization levels using `buildArg` (in this example, the optimisation level is specified). We can also add it to `native-image.properties` , the `native-image` tool (and the Maven/Gradle plugin) will read it.\n- org.graalvm.buildtools\nnative-maven-plugin\n\ntrue\n\n-Ob\n\ntrue\n\n#### c) To avoid version conflicts with dependencies used in the Azure SDK\n\nThis often happens when using Netty and/or Jackson. To avoid version conflicts during Native Image generation, Micronaut offers alternative components that we can choose. For example, if we want to avoid Netty version conflicts, we can use undertow.\n\n| **Dependencies** | **Alternatives** | | --- | --- | | Netty | undertow, jetty, Tomcat | | Jackson | JSON-P / JSON-B, BSON | | HTTP Client | JDK HTTP Client |\n\nFor now, let’s build it as a Java application.\n- mvn clean package\n\n### Test as a Java application\n\nAt first, verify that the application is running without any problems and that traces are being sent to Application Insights. Then, run the application using the Tracing Agent to generate the necessary configuration files.\n- # (1) Collect configuration files such as reflect-config.json\n$JAVA\\_HOME/bin/java \\ -agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/{groupId}/{artifactId}/ \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-a Generate a trace file\n$JAVA\\_HOME/bin/java \\ -agentlib:native-image-agent=trace-output=/path/to/trace-file.json \\ -jar ./target/{artifactId}-{version}.jar\n# (2)-b Generate a reachability metadata file from the collected trace file\nnative-image-configure generate \\ --trace-input=/path/to/trace-file.json \\ --output-dir=/path/to/config-dir/\n\n[Configure Native Image with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/guides/configure-with-tracing-agent/)\n\n[Collect Metadata with the Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/)\n\nMake the following files in the specified folder.\n\n- `jni-config.json`\n- `reflect-config.json`\n- `proxy-config.json`\n- `resource-config.json`\n- `reachability-metadata.json`\n\nThese files can be located at `src/main/resources/META-INF/native-image` . The `native-image` tool picks up configuration files located in the directory `src/main/resources/META-INF/native-image` . However, it is recommended that we place the files in subdirectories divided by `groupId` and `artifactId` , as shown below.\n\n`src/main/resources/META-INF/native-image/{groupId}/{artifactId}`\n\n### native-image.properties\n\nWhen creating a native image, we call the following command.\n- mvn package -Dpackaging=native-image\n\nWe should specify the timing of class initialization (build time or runtime), the command line options for the `native-image` tool (the same command line options work in Maven/Gradle plugin), and the JVM arguments in the `native-image.properties` file. Indeed, these settings can be specified in `pom.xml` , but it is recommended that they be externalized.\n\nThis is also explained in the metric entry, so some details will be left out. If needed, please check the metric entry.\n\n[Send metrics from Micronaut native image applications to Azure Monitor | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/appsonazureblog/send-metrics-from-micronaut-native-image-applications-to-azure-monitor/4443763)\n\n### Build a Native Image application\n\nBuilding a native image application takes a long time (though it has got quicker over time). If building it for testing purpose, we strongly recommend enabling Quick Build and setting the optimization level to `-Ob` option (although this will still take time). See below for more information.\n\n[Maven plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html#native-image-options) [Gradle plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html#native-image-options) [Optimizations and Performance](https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/#optimization-levels)\n\n### Test as a native image application\n\nLet’s check if the application works. To check the inventory of desktop, execute the following call.\n- curl https:///store/inventory/desktop\n\nWe should receive a response like this.\n- {\"warehouse\":7,\"item\":\"desktop\",\"store\":2}\n\nIn Azure Monitor (Application Insights) Application Map, we can observe this interaction visually.\n\n![]()\n\nSwitching to the trace page shows us traces and custom properties on the right of the screen.\n\nPress enter or click to view image in full size\n\n![]()\n\nThen, we add an order. For example, if we place an order for five desktops and then receive `202 Accepted` , we need to call inventory check API again. This will show that the number has increased by five and the desktop order has changed to seven (original was 2).\n- $ curl -X \"POST\" \"https:///store/order\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\ -d $'{\"item\":\"desktop\", \"count\":5}'\n\n$ curl https:///store/inventory/desktop\n\nWithin `azuremonitor-trace` , an HTTP Client is used internally to execute `POST /warehouse/order` . Looking at the Application Map in Azure Monitor (Application Insights), we can confirm that a call to `azuremonitor-trace` itself is occurring.\n\n![]()\n\nThe trace at the time of order placement is as follows.\n\n![]()\n\nClicking ‘View all’ in the red frame, we can check the details of each trace.\n\n![]()",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "FeedName": "Microsoft Tech Community",
  "Tags": [],
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/send-traces-from-micronaut-native-image-applications-to-azure/ba-p/4443791"
}
>>>>>>> f38d706 (Articles from old repo, styling and some other fixes)
