{
  "Author": "mutemwamasheke",
  "Description": "**Background:** Azure Machine Configuration remains committed to enabling greater security and simplicity in at-scale server management for all Azure customers. Machine Configuration (previously known as Azure Policy Guest Configuration) enables both built-in and custom configuration as code allowing you to audit and configure OS, app, and workload level settings at scale, both for machines running in Azure and hybrid Azure Arc-enabled servers.\n\nWe are excited to announce generally available support for [**System Assigned Identities**](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/overview) to privately access configuration packages stored in Azure Storage Blobs. This feature provides a simpler alternative to using Shared Access Signature (SAS) Tokens for anonymous access and **is available for use across both Azure and Arc machines.** This feature builds on top of our previously released support for User Assigned Identities.\n\nNow you have the flexibility to use either User Assigned or System Assigned Managed Identities when granting private access to packages stored in Azure Storage. Learn more about our support for User Assigned Identities here: [Securely store your Machine Configuration packages in Azure Storage using User Assigned Identities](https://techcommunity.microsoft.com/blog/azuregovernanceandmanagementblog/user-assigned-identity-based-access-for-machine-configuration-packages-%E2%80%93-general/4305594)\n\n## What’s new?\n\nCustom Machine Configuration policy definitions can now automatically use the **System Assigned Identity** of a Virtual Machine or Arc-enabled server with Azure Storage Blob read permissions. Any machine with system-assigned identity enabled and assigned the proper role can now privately access configuration packages in Azure Storage upon assignment of the Policy.\n\nWith this release, you do not need to generate a SAS token to reference the URL to a custom package in a custom Policy definition. With this feature, you can now block anonymous access in your Azure Storage accounts where your configuration packages are stored.\n\n## Getting started\n\nFor this feature to work successfully, you first need to:\n\n- **IMPORTANT:** Deploy the Machine Configuration extension at scale across all virtual machines by assigning the following policy initiative: [**Deploy prerequisites to enable machine configuration policies on virtual machines**](https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/guest-configuration#:~:text=Azure%20Policy.%20To,on%20virtual%20machines). This a required onboarding step for Azure Machine Configuration in order to receive compliance reports.\n- Ensure that all the Virtual Machines or Arc-enabled servers within the intended scope of your policy have [**system-assigned identity enabled**](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/how-to-configure-managed-identities?pivots=qs-configure-portal-windows-vm#enable-system-assigned-managed-identity-during-creation-of-a-vm) and granted [**Storage Blob Data Reader**](https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#storage) (or equivalent) permissions on the Storage Blob containing the package. See How to develop a custom machine configuration package to learn how to create and upload a custom package.\n- Download a minimum version of **4.10.0** of the **[Guest Configuration PowerShell Module](https://www.powershellgallery.com/packages/GuestConfiguration/4.10.0)** to successfully use cmdlets to author a managed identity-based Machine Configuration policy.\n- Follow the guidance in our official documentation on **[how to develop a custom machine configuration package](https://learn.microsoft.com/en-us/azure/governance/machine-configuration/how-to/develop-custom-package/overview)**.\n\nIn order to generate the Azure Policy definition using our [Guest Configuration PowerShell Module](https://www.powershellgallery.com/packages/GuestConfiguration/4.10.0), pass in the package path into the New-GuestConfigurationPolicy cmdlet. For system-assigned identities, **use the -UseSystemAssignedIdentity flag** instead of specifying a managed identity resource ID. You must still include the local path of the package as a parameter to allow for package validation and hash generation.\n\n**Example PowerShell snippet:**\n\n- $PolicyConfig = @{\nPolicyId = '\\_My GUID\\_' ContentUri = 'https://yourstorageaccount.blob.core.windows.net/yourcontainer/package.zip; DisplayName = 'My deployment policy' Description = 'My deployment policy' Path = './policies/deployIfNotExists.json' Platform = 'Windows' PolicyVersion = 1.0.0 Mode = 'ApplyAndAutoCorrect'\n# Required for managed identity package authoring\nLocalContentPath = \"C:\\Local\\Path\\To\\Package\" } New-GuestConfigurationPolicy @PolicyConfig -UseSystemAssignedIdentity\n\n**Example Policy definition metadata snippet:**\n- ...\n\"metadata\": { \"category\": \"Guest Configuration\", \"version\": \"1.0.0\", \"requiredProviders\": [ \"Microsoft.GuestConfiguration\" ], \"guestConfiguration\": { \"name\": \"TimeZone\", \"version\": \"1.0.0\", \"contentType\": \"Custom\", \"contentUri\": \"https://yourstorageaccount.blob.core.windows.net/yourcontainer/package.zip\", \"contentHash\": \"HASHVALUE\", \"contentManagedIdentity\": \"system\" } , ... }\n\nYou can now pass the file path of the policy definition as an argument in the **New-AzPolicyDefinition** cmdlet to upload your custom policy definition to Azure! With this feature you can take advantage of the simplicity of managed identities when deploying secure configurations.\n\n## Feature Limitations\n\n- For the machine to download the assigned package and apply the policy, the Guest Configuration Agent must be version **1.29.98.0 or higher for Windows** and **1.26.93.0 or higher for Linux**.\n- To ensure successful enforcement, the generated Azure Policy definition must call the API version **2024-04-05** or later.\n\nLearn more about Machine Configuration in the [documentation](https://docs.microsoft.com/en-us/azure/governance/machine-configuration/).\n\n*Please note that the use of Azure Machine Configuration on Azure Arc-enabled servers will incur a charge of **$6/server/month**. You only pay the charge once no matter how many machine configuration policies you apply to the server. If policies are assigned by Microsoft Defender for Servers Plan 2 or the policy is an Azure Security Benchmark, no charges will be incurred. Additionally, if Azure Change Tracking or Inventory Management are being used or the server is on Azure Stack HCI with Connected Machine agent version 1.13, no charges will be incurred.*",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "OutputDir": "_community",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "ProcessedDate": "2025-08-25 15:13:06",
  "Tags": [],
  "PubDate": "2025-08-25T14:30:00+00:00",
  "Link": "https://techcommunity.microsoft.com/t5/azure-governance-and-management/system-assigned-identity-based-access-for-machine-configuration/ba-p/4446603",
  "Title": "System-Assigned Identity-based Access for Machine Configuration Packages – GA on both Azure and Arc!",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "## Azure Machine Configuration now supports both System Assigned Identities for private access to configuration packages in Azure Storage, enhancing your cloud security and management.\n\n**Background:** Azure Machine Configuration remains committed to enabling greater security and simplicity in at-scale server management for all Azure customers. Machine Configuration (previously known as Azure Policy Guest Configuration) enables both built-in and custom configuration as code allowing you to audit and configure OS, app, and workload level settings at scale, both for machines running in Azure and hybrid Azure Arc-enabled servers.\n\nWe are excited to announce generally available support for [**System Assigned Identities**](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/overview) to privately access configuration packages stored in Azure Storage Blobs. This feature provides a simpler alternative to using Shared Access Signature (SAS) Tokens for anonymous access and **is available for use across both Azure and Arc machines.** This feature builds on top of our previously released support for User Assigned Identities.\n\nNow you have the flexibility to use either User Assigned or System Assigned Managed Identities when granting private access to packages stored in Azure Storage. Learn more about our support for User Assigned Identities here: [Securely store your Machine Configuration packages in Azure Storage using User Assigned Identities](https://techcommunity.microsoft.com/blog/azuregovernanceandmanagementblog/user-assigned-identity-based-access-for-machine-configuration-packages-%E2%80%93-general/4305594)\n\n## What’s new?\n\nCustom Machine Configuration policy definitions can now automatically use the **System Assigned Identity** of a Virtual Machine or Arc-enabled server with Azure Storage Blob read permissions. Any machine with system-assigned identity enabled and assigned the proper role can now privately access configuration packages in Azure Storage upon assignment of the Policy.\n\nWith this release, you do not need to generate a SAS token to reference the URL to a custom package in a custom Policy definition. With this feature, you can now block anonymous access in your Azure Storage accounts where your configuration packages are stored.\n\n## Getting started\n\nFor this feature to work successfully, you first need to:\n\n- **IMPORTANT:** Deploy the Machine Configuration extension at scale across all virtual machines by assigning the following policy initiative: [**Deploy prerequisites to enable machine configuration policies on virtual machines**](https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/guest-configuration#:~:text=Azure%20Policy.%20To,on%20virtual%20machines). This a required onboarding step for Azure Machine Configuration in order to receive compliance reports.\n- Ensure that all the Virtual Machines or Arc-enabled servers within the intended scope of your policy have [**system-assigned identity enabled**](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/how-to-configure-managed-identities?pivots=qs-configure-portal-windows-vm#enable-system-assigned-managed-identity-during-creation-of-a-vm) and granted [**Storage Blob Data Reader**](https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#storage) (or equivalent) permissions on the Storage Blob containing the package. See How to develop a custom machine configuration package to learn how to create and upload a custom package.\n- Download a minimum version of **4.10.0** of the **[Guest Configuration PowerShell Module](https://www.powershellgallery.com/packages/GuestConfiguration/4.10.0)** to successfully use cmdlets to author a managed identity-based Machine Configuration policy.\n- Follow the guidance in our official documentation on **[how to develop a custom machine configuration package](https://learn.microsoft.com/en-us/azure/governance/machine-configuration/how-to/develop-custom-package/overview)**.\n\nIn order to generate the Azure Policy definition using our [Guest Configuration PowerShell Module](https://www.powershellgallery.com/packages/GuestConfiguration/4.10.0), pass in the package path into the New-GuestConfigurationPolicy cmdlet. For system-assigned identities, **use the -UseSystemAssignedIdentity flag** instead of specifying a managed identity resource ID. You must still include the local path of the package as a parameter to allow for package validation and hash generation.\n\n**Example PowerShell snippet:**\n\n``` $PolicyConfig = @{ PolicyId = '_My GUID_' ContentUri = 'https://yourstorageaccount.blob.core.windows.net/yourcontainer/package.zip; DisplayName = 'My deployment policy' Description = 'My deployment policy' Path = './policies/deployIfNotExists.json' Platform = 'Windows' PolicyVersion = 1.0.0 Mode = 'ApplyAndAutoCorrect'\n# Required for managed identity package authoring\nLocalContentPath = \"C:\\Local\\Path\\To\\Package\" } New-GuestConfigurationPolicy @PolicyConfig -UseSystemAssignedIdentity ```\n\n**Example Policy definition metadata snippet:**\n\n```\n\n... \"metadata\": { \"category\": \"Guest Configuration\", \"version\": \"1.0.0\", \"requiredProviders\": [ \"Microsoft.GuestConfiguration\" ], \"guestConfiguration\": { \"name\": \"TimeZone\", \"version\": \"1.0.0\", \"contentType\": \"Custom\", \"contentUri\": \"https://yourstorageaccount.blob.core.windows.net/yourcontainer/package.zip\", \"contentHash\": \"HASHVALUE\", \"contentManagedIdentity\": \"system\" } , ... } ```\n\nYou can now pass the file path of the policy definition as an argument in the **New-AzPolicyDefinition** cmdlet to upload your custom policy definition to Azure! With this feature you can take advantage of the simplicity of managed identities when deploying secure configurations.\n\n## Feature Limitations\n\n- For the machine to download the assigned package and apply the policy, the Guest Configuration Agent must be version **1.29.98.0 or higher for Windows** and **1.26.93.0 or higher for Linux**.\n- To ensure successful enforcement, the generated Azure Policy definition must call the API version **2024-04-05** or later.\n\nLearn more about Machine Configuration in the [documentation](https://docs.microsoft.com/en-us/azure/governance/machine-configuration/).\n\n*Please note that the use of Azure Machine Configuration on Azure Arc-enabled servers will incur a charge of **$6/server/month**. You only pay the charge once no matter how many machine configuration policies you apply to the server. If policies are assigned by Microsoft Defender for Servers Plan 2 or the policy is an Azure Security Benchmark, no charges will be incurred. Additionally, if Azure Change Tracking or Inventory Management are being used or the server is on Azure Stack HCI with Connected Machine agent version 1.13, no charges will be incurred.*\n\nUpdated Aug 21, 2025\n\nVersion 1.0\n\n[azure arc](/tag/azure%20arc?nodeId=board%3AAzureGovernanceandManagementBlog)\n\n[governance](/tag/governance?nodeId=board%3AAzureGovernanceandManagementBlog)\n\n[guest configuration](/tag/guest%20configuration?nodeId=board%3AAzureGovernanceandManagementBlog)\n\n[management](/tag/management?nodeId=board%3AAzureGovernanceandManagementBlog)\n\n[policy](/tag/policy?nodeId=board%3AAzureGovernanceandManagementBlog)\n\n[well-architected](/tag/well-architected?nodeId=board%3AAzureGovernanceandManagementBlog)\n\n[!\\[mutemwamasheke&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yMDQ5ODA3LWpUQzdMMQ?image-coordinates=0%2C0%2C800%2C800&amp;image-dimensions=50x50)](/users/mutemwamasheke/2049807) [mutemwamasheke](/users/mutemwamasheke/2049807) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined September 26, 2023\n\n[View Profile](/users/mutemwamasheke/2049807)\n\n/category/azure/blog/azuregovernanceandmanagementblog [Azure Governance and Management Blog](/category/azure/blog/azuregovernanceandmanagementblog) Follow this blog board to get notified when there's new activity"
}
