{
  "ProcessedDate": "2025-08-15 14:40:33",
  "PubDate": "2025-08-14T17:56:30+00:00",
  "Link": "https://techcommunity.microsoft.com/t5/azure-tools-blog/announcing-msgraph-provider-public-preview-and-the-microsoft/ba-p/4443614",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Author": "stevenjma",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "## Microsoft Graph is now fully supported day 0 by Terraform and our VSCode Extension has been rebranded!\n\nWe are thrilled to announce two exciting developments in the Microsoft ecosystem for Terraform infrastructure-as-code (IaC) practitioners: the public preview of the Terraform Microsoft Graph (MSGraph) provider and the release of the Microsoft Terraform Visual Studio Code (VSCode) extension. These innovations are designed to streamline your workflow, empower your automation, and make managing Microsoft cloud resources easier than ever.\n\n# Public Preview: Terraform Microsoft Graph (MSGraph) Provider\n\nThe [Terraform MSGraph provider](https://techcommunity.microsoft.com/t5/learn.microsoft.com/graph/templates/terraform) empowers you to manage [Entra APIs like privileged identity management](https://github.com/MicrosoftDocs/msgraph-terraform-docs-pr/blob/main/entra/id-governance/privileged-identity-management/pim-apis) as well as [M365 Graph APIs like SharePoint sites](https://github.com/MicrosoftDocs/msgraph-terraform-docs-pr/blob/main/graph/api/resources/sharepoint) from day 0 by leveraging the power and flexibility of HashiCorp Configuration Language (HCL) in Terraform.\n\n``` resource \"msgraph_resource\" \"application\" { url = \"applications\" body = { displayName = \"My Application\" } response_export_values = { all = \"@\" app_id = \"appId\" } }\n\noutput \"app_id\" { value = msgraph_resource.application.output.app_id }\n\noutput \"all\" { // it will output the whole response value = msgraph_resource.application.output.all } ```\n\nHistorically, Terraform users could utilize the `azuread` provider to manage Entra features like users, groups, service principals, and applications. The new `msgraph` provider also supports these features and extends functionality to all beta and v1 Microsoft Graph endpoints.\n\n## Querying role assignments for a service principal\n\nThe below example shows how to use the `msgraph` provider to grant app permissions to a service principal:\n\n``` locals { MicrosoftGraphAppId = \"00000003-0000-0000-c000-000000000000\"\n\n# AppRoleAssignment\nuserReadAllAppRoleId = one([for role in data.msgraph_resource.servicePrincipal_msgraph.output.all.value[0].appRoles : role.id if role.value == \"User.Read.All\"]) userReadWriteRoleId = one([for role in data.msgraph_resource.servicePrincipal_msgraph.output.all.value[0].oauth2PermissionScopes : role.id if role.value == \"User.ReadWrite\"])\n\n# ServicePrincipal\nMSGraphServicePrincipalId = data.msgraph_resource.servicePrincipal_msgraph.output.all.value[0].id TestApplicationServicePrincipalId = msgraph_resource.servicePrincipal_application.output.all.id }\n\ndata \"msgraph_resource\" \"servicePrincipal_msgraph\" { url = \"servicePrincipals\" query_parameters = { \"$filter\" = [\"appId eq '${local.MicrosoftGraphAppId}'\"] } response_export_values = { all = \"@\" } }\n\nresource \"msgraph_resource\" \"application\" { url = \"applications\" body = { displayName = \"My Application\" requiredResourceAccess = [ { resourceAppId = local.MicrosoftGraphAppId resourceAccess = [ { id = local.userReadAllAppRoleId type = \"Scope\" }, { id = local.userReadWriteRoleId type = \"Scope\" } ] } ] } response_export_values = { appId = \"appId\" } }\n\nresource \"msgraph_resource\" \"servicePrincipal_application\" { url = \"servicePrincipals\" body = { appId = msgraph_resource.application.output.appId } response_export_values = { all = \"@\" } }\n\nresource \"msgraph_resource\" \"appRoleAssignment\" { url = \"servicePrincipals/${local.MSGraphServicePrincipalId}/appRoleAssignments\" body = { appRoleId = local.userReadAllAppRoleId principalId = local.TestApplicationServicePrincipalId resourceId = local.MSGraphServicePrincipalId } } ```\n\n## SharePoint & Outlook Notifications\n\nWith your service principals properly configured, you can set up M365 endpoint workflows such an outlook notification template list as shown below. The actual service principal setup has been omitted from this code sample for the sake of brevity, but you will need Sites.Manage.All, Sites.ReadWrite.All, User.Read, and User.Read.All permissions for this example to work:\n\n``` data \"msgraph_resource\" \"sharepoint_site_by_path\" { url = \"sites/microsoft.sharepoint.com:/sites/msgraphtest:\" response_export_values = { full_response = \"@\" site_id = \"id || ''\" } }\n\nresource \"msgraph_resource\" \"notification_templates_list\" { url = \"sites/${msgraph_resource.sharepoint_site_by_path.output.site_id}/lists\" body = { displayName = \"DevOps Notification Templates\" description = \"Centrally managed email templates for DevOps automation\" template = \"genericList\" columns = [ { name = \"TemplateName\" text = { allowMultipleLines = false appendChangesToExistingText = false linesForEditing = 1 maxLength = 255 } }, { name = \"Subject\" text = { allowMultipleLines = false appendChangesToExistingText = false linesForEditing = 1 maxLength = 500 } }, { name = \"HtmlBody\" text = { allowMultipleLines = true appendChangesToExistingText = false linesForEditing = 10 maxLength = 10000 } }, { name = \"Recipients\" text = { allowMultipleLines = true appendChangesToExistingText = false linesForEditing = 3 maxLength = 1000 } }, { name = \"TriggerConditions\" text = { allowMultipleLines = true appendChangesToExistingText = false linesForEditing = 5 maxLength = 2000 } } ] } response_export_values = { list_id = \"id\" list_name = \"displayName\" web_url = \"webUrl\" } } ```\n\nThe MSGraph provider is to AzureAD as the AzAPI provider is to AzureRM. Since support for resource types is automatic, you can access the latest features and functionality as soon as they're released via the provider. AzureAD will continue to serve as the convenience layer implementation of a subset of Entra APIs.\n\nWe invite you to try the new provider today:\n\n-          [Deploy your first msgraph resources](https://learn.microsoft.com/graph/templates/terraform/quickstart-create-terraform)\n\n-          [Check out the registry page](https://registry.terraform.io/providers/microsoft/msgraph/latest)\n\n-          [Visit the provider GitHub](https://github.com/Microsoft/terraform-provider-msgraph)\n\n# Introducing the Microsoft Terraform VSCode Extension\n\nThe new official Microsoft Terraform extension for Visual Studio Code consolidates AzureRM, AzAPI, and MSGraph VSCode support into a single powerful extension. The extension supports exporting Azure resources as Terraform code, as well as IntelliSense, syntax highlighting, and code sample generation. It replaces the Azure Terraform and AzAPI VSCode extensions and adds some new features.\n\n## Installation & Migration\n\nNew users can install the extension by searching “Microsoft Terraform” within Visual Studio Marketplace or their “Extensions” tab. [Users can also click this link to the Visual Studio marketplace.](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureterraform)\n\nUsers of the “Azure Terraform” extension can navigate to “Extensions” tab and selecting the old extension. Select the “Migrate” button to move to the new extension.\n\nUsers of the “Terraform AzAPI Provider” extension will be directed to the new extension:\n\n## New Features\n\n### Export Azure Resources As Terraform\n\nThis feature allows you to export existing Azure resources as Terraform configuration blocks using Azure Export for Terraform. This helps you migrate existing Azure resources to Terraform-managed infrastructure.\n\n1. Open the Command Palette (Command+Shift+P on macOS and Ctrl+Shift+P on Windows/Linux).\n2. Search for and select the command Microsoft Terraform: Export Azure Resource as Terraform.\n3. Follow the prompts to select the Azure subscription and resource group containing the resources you want to export.\n\n1. Select the azurerm provider or the azapi provider to export the resources.\n2. The extension will generate the Terraform configuration blocks for the selected resources and display them in a new editor tab.\n\n### Support for MSGraph\n\nThe new extension comes fully equipped with intellisense, code completion, and code samples just like the AzAPI provider. See the next section for recorded examples of these features within the AzureRM & AzAPI providers.\n\n## Preexisting Features\n\nIntelligent Code Completion:\n\nBenefit from context-aware suggestions, like property names or resource types.\n\n### Code Samples:\n\nQuickly insert code samples for your resources:\n\n### Paste as AzAPI:\n\nCopy your existing resource JSON or ARM Templates into VSCode with the Microsoft Terraform extension, and it will automatically convert your code into AzAPI. The below example takes a resource JSON from the Azure Portal and pastes it into VSCode as AzAPI:\n\n### Migrate AzureRM to AzAPI:\n\nMove existing AzureRM code to the AzAPI provider whenever you wish to. Read more in the [Guide to migrate AzureRM resources to AzAPI](https://registry.terraform.io/providers/Azure/azapi/latest/docs/guides/feature_migrate_from_azurerm)\n\n# Feedback\n\nWe value your feedback! You can share your experience with the Microsoft Terraform extension by running the command Microsoft Terraform: Show Survey from the Command Palette. Your input helps us improve the extension and better serve your needs.\n\n# Conclusion\n\nWhether you are managing traditional Azure resources, modern Microsoft Graph environments, or a combination of both, the new MSGraph provider and Microsoft Terraform VS Code extension are designed to help you deliver robust, reliable infrastructure—faster and with greater confidence.\n\nStay tuned for further updates, workshops, and community events as we continue to evolve these offerings. Your feedback and participation are invaluable as we build the next generation of infrastructure automation together.\n\nUpdated Aug 14, 2025\n\nVersion 1.0\n\n[get started](/tag/get%20started?nodeId=board%3AAzureToolsBlog)\n\n[resources](/tag/resources?nodeId=board%3AAzureToolsBlog)\n\n[terraform](/tag/terraform?nodeId=board%3AAzureToolsBlog)\n\n[!\\[stevenjma&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xNDM5MzA5LTM4NDMxNGlFQkQ3RkY3MDQ5MzdFRDU2?image-dimensions=50x50)](/users/stevenjma/1439309) [stevenjma](/users/stevenjma/1439309) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined June 28, 2022\n\n[View Profile](/users/stevenjma/1439309)\n\n/category/azure/blog/azuretoolsblog [Azure Tools Blog](/category/azure/blog/azuretoolsblog) Follow this blog board to get notified when there's new activity",
  "Title": "Announcing MSGraph Provider Public Preview and the Microsoft Terraform VSCode Extension",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Description": "We are thrilled to announce two exciting developments in the Microsoft ecosystem for Terraform infrastructure-as-code (IaC) practitioners: the public preview of the Terraform Microsoft Graph (MSGraph) provider and the release of the Microsoft Terraform Visual Studio Code (VSCode) extension. These innovations are designed to streamline your workflow, empower your automation, and make managing Microsoft cloud resources easier than ever.\n\n# Public Preview: Terraform Microsoft Graph (MSGraph) Provider\n\nThe [Terraform MSGraph provider](https://techcommunity.microsoft.com/t5/learn.microsoft.com/graph/templates/terraform) empowers you to manage [Entra APIs like privileged identity management](https://github.com/MicrosoftDocs/msgraph-terraform-docs-pr/blob/main/entra/id-governance/privileged-identity-management/pim-apis) as well as [M365 Graph APIs like SharePoint sites](https://github.com/MicrosoftDocs/msgraph-terraform-docs-pr/blob/main/graph/api/resources/sharepoint) from day 0 by leveraging the power and flexibility of HashiCorp Configuration Language (HCL) in Terraform.\n\n- resource \"msgraph\\_resource\" \"application\" {\nurl = \"applications\" body = { displayName = \"My Application\" } response\\_export\\_values = { all = \"@\" app\\_id = \"appId\" } }\n\noutput \"app\\_id\" { value = msgraph\\_resource.application.output.app\\_id }\n\noutput \"all\" { // it will output the whole response value = msgraph\\_resource.application.output.all }\n\nHistorically, Terraform users could utilize the `azuread` provider to manage Entra features like users, groups, service principals, and applications. The new `msgraph` provider also supports these features and extends functionality to all beta and v1 Microsoft Graph endpoints.\n\n## Querying role assignments for a service principal\n\nThe below example shows how to use the `msgraph` provider to grant app permissions to a service principal:\n- locals {\nMicrosoftGraphAppId = \"00000003-0000-0000-c000-000000000000\"\n\n# AppRoleAssignment\nuserReadAllAppRoleId = one([for role in data.msgraph\\_resource.servicePrincipal\\_msgraph.output.all.value[0].appRoles : role.id if role.value == \"User.Read.All\"]) userReadWriteRoleId = one([for role in data.msgraph\\_resource.servicePrincipal\\_msgraph.output.all.value[0].oauth2PermissionScopes : role.id if role.value == \"User.ReadWrite\"])\n\n# ServicePrincipal\nMSGraphServicePrincipalId = data.msgraph\\_resource.servicePrincipal\\_msgraph.output.all.value[0].id TestApplicationServicePrincipalId = msgraph\\_resource.servicePrincipal\\_application.output.all.id }\n\ndata \"msgraph\\_resource\" \"servicePrincipal\\_msgraph\" { url = \"servicePrincipals\" query\\_parameters = { \"$filter\" = [\"appId eq '${local.MicrosoftGraphAppId}'\"] } response\\_export\\_values = { all = \"@\" } }\n\nresource \"msgraph\\_resource\" \"application\" { url = \"applications\" body = { displayName = \"My Application\" requiredResourceAccess = [ { resourceAppId = local.MicrosoftGraphAppId resourceAccess = [ { id = local.userReadAllAppRoleId type = \"Scope\" }, { id = local.userReadWriteRoleId type = \"Scope\" } ] } ] } response\\_export\\_values = { appId = \"appId\" } }\n\nresource \"msgraph\\_resource\" \"servicePrincipal\\_application\" { url = \"servicePrincipals\" body = { appId = msgraph\\_resource.application.output.appId } response\\_export\\_values = { all = \"@\" } }\n\nresource \"msgraph\\_resource\" \"appRoleAssignment\" { url = \"servicePrincipals/${local.MSGraphServicePrincipalId}/appRoleAssignments\" body = { appRoleId = local.userReadAllAppRoleId principalId = local.TestApplicationServicePrincipalId resourceId = local.MSGraphServicePrincipalId } }\n\n## SharePoint & Outlook Notifications\n\nWith your service principals properly configured, you can set up M365 endpoint workflows such an outlook notification template list as shown below. The actual service principal setup has been omitted from this code sample for the sake of brevity, but you will need Sites.Manage.All, Sites.ReadWrite.All, User.Read, and User.Read.All permissions for this example to work:\n- data \"msgraph\\_resource\" \"sharepoint\\_site\\_by\\_path\" {\nurl = \"sites/microsoft.sharepoint.com:/sites/msgraphtest:\" response\\_export\\_values = { full\\_response = \"@\" site\\_id = \"id || ''\" } }\n\nresource \"msgraph\\_resource\" \"notification\\_templates\\_list\" { url = \"sites/${msgraph\\_resource.sharepoint\\_site\\_by\\_path.output.site\\_id}/lists\" body = { displayName = \"DevOps Notification Templates\" description = \"Centrally managed email templates for DevOps automation\" template = \"genericList\" columns = [ { name = \"TemplateName\" text = { allowMultipleLines = false appendChangesToExistingText = false linesForEditing = 1 maxLength = 255 } }, { name = \"Subject\" text = { allowMultipleLines = false appendChangesToExistingText = false linesForEditing = 1 maxLength = 500 } }, { name = \"HtmlBody\" text = { allowMultipleLines = true appendChangesToExistingText = false linesForEditing = 10 maxLength = 10000 } }, { name = \"Recipients\" text = { allowMultipleLines = true appendChangesToExistingText = false linesForEditing = 3 maxLength = 1000 } }, { name = \"TriggerConditions\" text = { allowMultipleLines = true appendChangesToExistingText = false linesForEditing = 5 maxLength = 2000 } } ] } response\\_export\\_values = { list\\_id = \"id\" list\\_name = \"displayName\" web\\_url = \"webUrl\" } }\n\nThe MSGraph provider is to AzureAD as the AzAPI provider is to AzureRM. Since support for resource types is automatic, you can access the latest features and functionality as soon as they're released via the provider. AzureAD will continue to serve as the convenience layer implementation of a subset of Entra APIs.\n\nWe invite you to try the new provider today:\n\n- [Deploy your first msgraph resources](https://learn.microsoft.com/graph/templates/terraform/quickstart-create-terraform)\n\n- [Check out the registry page](https://registry.terraform.io/providers/microsoft/msgraph/latest)\n\n- [Visit the provider GitHub](https://github.com/Microsoft/terraform-provider-msgraph)\n\n# Introducing the Microsoft Terraform VSCode Extension\n\nThe new official Microsoft Terraform extension for Visual Studio Code consolidates AzureRM, AzAPI, and MSGraph VSCode support into a single powerful extension. The extension supports exporting Azure resources as Terraform code, as well as IntelliSense, syntax highlighting, and code sample generation. It replaces the Azure Terraform and AzAPI VSCode extensions and adds some new features.\n\n## Installation & Migration\n\nNew users can install the extension by searching “Microsoft Terraform” within Visual Studio Marketplace or their “Extensions” tab. [Users can also click this link to the Visual Studio marketplace.](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureterraform)\n\nUsers of the “Azure Terraform” extension can navigate to “Extensions” tab and selecting the old extension. Select the “Migrate” button to move to the new extension.\n\nUsers of the “Terraform AzAPI Provider” extension will be directed to the new extension:\n\n![]()\n\n## New Features\n\n### Export Azure Resources As Terraform\n\nThis feature allows you to export existing Azure resources as Terraform configuration blocks using Azure Export for Terraform. This helps you migrate existing Azure resources to Terraform-managed infrastructure.\n\n1. Open the Command Palette (Command+Shift+P on macOS and Ctrl+Shift+P on Windows/Linux).\n2. Search for and select the command Microsoft Terraform: Export Azure Resource as Terraform.\n3. Follow the prompts to select the Azure subscription and resource group containing the resources you want to export.\n\n![]()\n1. Select the azurerm provider or the azapi provider to export the resources.\n2. The extension will generate the Terraform configuration blocks for the selected resources and display them in a new editor tab. ![]()\n\n### Support for MSGraph\n\nThe new extension comes fully equipped with intellisense, code completion, and code samples just like the AzAPI provider. See the next section for recorded examples of these features within the AzureRM & AzAPI providers.\n\n## Preexisting Features\n\nIntelligent Code Completion:\n\nBenefit from context-aware suggestions, like property names or resource types.\n\n![]()\n\n### Code Samples:\n\nQuickly insert code samples for your resources:\n\n![]()![]()\n\n### Paste as AzAPI:\n\nCopy your existing resource JSON or ARM Templates into VSCode with the Microsoft Terraform extension, and it will automatically convert your code into AzAPI. The below example takes a resource JSON from the Azure Portal and pastes it into VSCode as AzAPI:\n\n![]()\n\n### Migrate AzureRM to AzAPI:\n\nMove existing AzureRM code to the AzAPI provider whenever you wish to. Read more in the [Guide to migrate AzureRM resources to AzAPI](https://registry.terraform.io/providers/Azure/azapi/latest/docs/guides/feature_migrate_from_azurerm)\n\n![]()\n\n# Feedback\n\nWe value your feedback! You can share your experience with the Microsoft Terraform extension by running the command Microsoft Terraform: Show Survey from the Command Palette. Your input helps us improve the extension and better serve your needs.\n\n# Conclusion\n\nWhether you are managing traditional Azure resources, modern Microsoft Graph environments, or a combination of both, the new MSGraph provider and Microsoft Terraform VS Code extension are designed to help you deliver robust, reliable infrastructure—faster and with greater confidence.\n\nStay tuned for further updates, workshops, and community events as we continue to evolve these offerings. Your feedback and participation are invaluable as we build the next generation of infrastructure automation together.",
  "Tags": []
}
