{
  "OutputDir": "_community",
  "Title": "PowerShell hosting in C#",
  "Tags": [],
  "ProcessedDate": "2025-10-13 14:04:07",
  "PubDate": "2025-10-13T10:02:28+00:00",
  "EnhancedContent": "Don't know if this is the correct place to post my question...\n\nI want to use the PowerShell 7 cmdlet Get-ClusterResource in C# under Windows 11, like this:\n\n``` using System.Collections.ObjectModel; using System.Management.Automation;\n\nnamespace PSHosting;\n\nclass Program { static void Main() { using (var powerShell = PowerShell.Create()) { powerShell.AddScript(\"Get-ClusterResource -Cluster 'WSFC1'\"); Collection<PSObject> result = powerShell.Invoke(); } } ```\n\nI have the RSAT *FailoverCluster* Windows package installed.\n\nWhen calling *Get-ClusterResource* in a PowerShell session, PowerShell uses the implicit remoting technique to create and load a proxy module for the original FailoverCluster module, and then execute the command on the remote computer.\n\nAt some point during my attemps to get a working *Get-ClusterResource* in my C# code, I included the following in the above code (before the using statement):\n\n1. A*****Set-ExecutionPolicy* command that lets PowerShell execute arbitrary scripts (most probably required because module loading (see below) and/or implicit remoting would run .ps1 and/or .psm scripts contained in the FailoverCluster module folder)\n2. An *Import-Module* command that loads the FailoverCluster module into the current session\n\nInterestingly, the above code still works in my environment after stripping the commands 1. and 2. above from the code, deleting the proxy module C:\\Users\\&lt;UserName&gt;\\AppData\\Local\\Temp\\remoteIpMoProxy\\_FailoverClusters\\_2.0.0.0\\_localhost\\_&lt;ID&gt;, and rebooting the computer.\n\nMy ultimate goal is to publish code like the above together with all required modules and other stuff so it can run successfully on a computer with stock Windows 11 installed only (single exception: .NET runtime matching my C# version is installed, so I don't need to distribute that too).\n\nFrom what I think I know at the moment, this means that I need to:\n\n- Include the FailoverCluster module folder in my publication, and\n- Add the commands 1. and 2. above in my code (hopefully, referencing the FailoverCluster module works with a relative path)\n\nAm I correct here, or do I miss something out?",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Author": "ahinterl",
  "Link": "https://techcommunity.microsoft.com/t5/languages/powershell-hosting-in-c/m-p/4461118#M303",
  "FeedName": "Microsoft Tech Community",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=dotnet",
  "Description": "Don't know if this is the correct place to post my question...\n\nI want to use the PowerShell 7 cmdlet Get-ClusterResource in C# under Windows 11, like this:\n\n- using System.Collections.ObjectModel;\nusing System.Management.Automation;\n\nnamespace PSHosting;\n\nclass Program { static void Main() { using (var powerShell = PowerShell.Create()) { powerShell.AddScript(\"Get-ClusterResource -Cluster 'WSFC1'\"); Collection result = powerShell.Invoke(); } } I have the RSAT *FailoverCluster* Windows package installed.\n\nWhen calling *Get-ClusterResource* in a PowerShell session, PowerShell uses the implicit remoting technique to create and load a proxy module for the original FailoverCluster module, and then execute the command on the remote computer.\n\nAt some point during my attemps to get a working *Get-ClusterResource* in my C# code, I included the following in the above code (before the using statement):\n\n1. A **** *Set-ExecutionPolicy* command that lets PowerShell execute arbitrary scripts (most probably required because module loading (see below) and/or implicit remoting would run .ps1 and/or .psm scripts contained in the FailoverCluster module folder)\n2. An *Import-Module* command that loads the FailoverCluster module into the current session\n\nInterestingly, the above code still works in my environment after stripping the commands 1. and 2. above from the code, deleting the proxy module C:\\Users\\\\AppData\\Local\\Temp\\remoteIpMoProxy\\_FailoverClusters\\_2.0.0.0\\_localhost\\_, and rebooting the computer.\n\nMy ultimate goal is to publish code like the above together with all required modules and other stuff so it can run successfully on a computer with stock Windows 11 installed only (single exception: .NET runtime matching my C# version is installed, so I don't need to distribute that too).\n\nFrom what I think I know at the moment, this means that I need to:\n\n- Include the FailoverCluster module folder in my publication, and\n- Add the commands 1. and 2. above in my code (hopefully, referencing the FailoverCluster module works with a relative path)\n\nAm I correct here, or do I miss something out?"
}
