{
  "Title": "Running a Load Test within a Chaos Experiment",
  "FeedName": "Microsoft Tech Community",
  "Author": "Nikita_Nallamothu",
  "Tags": [],
  "OutputDir": "_community",
  "Description": "With [Azure Chaos Studio](https://aka.ms/AzureChaosStudio) and [Azure Load Testing](https://aka.ms/malt), you can simulate *both* — run a controlled load test while injecting faults into your application or infrastructure to understand how it behaves under stress.\n\nTogether, they help you find those *resiliency blind spots* — the cascading failures, retry storms, and degraded dependencies that only appear when your system is both *busy* and *broken*.\n\nFor example:\n\n- What if your database becomes read-only during peak user traffic?\n- How does your API react if a downstream service starts returning 500s?\n- Can your autoscaling rules recover fast enough?\n\nLet’s explore how you can run load tests from Azure Load Testing as part of a chaos experiment.\n\n## **Azure Chaos Studio + Azure Load Testing Integration**\n\nAzure Chaos Studio has load test actions that let you integrate load testing directly into your chaos experiment flow.\n\nFrom the [Chaos Studio fault library](https://learn.microsoft.com/en-us/azure/chaos-studio/chaos-studio-fault-library#orchestration-actions), you can find:\n\n- Start load test (Azure Load Testing)\n- Stop load test (Azure Load Testing)\n\nTriggers a load test from your Azure Load Testing resource as part of an experiment step.\n\nThis means you can now orchestrate a sequence like:\n\n1. Start load test\n2. Inject a fault (e.g., shut down VM, throttle network, restart App Service)\n3. Observe and measure resiliency\n4. Stop the test and analyze metrics\n\n## **Chaos Experiment with Load Test Action**\n\nHere’s how a typical experiment might look conceptually:\n\n#### **Step 1. Define the experiment in Chaos Studio**\n\nCreate a new experiment that targets your application or infrastructure components — for example, an App Service or a SQL Database.\n\nAdd the Start Load Test (Azure Load Testing) action: This tells Chaos Studio to kick off a load test from Azure Load Testing.\n\n![]()Snapshot of a Chaos experiement with load test action in Azure portal\n\n#### **Step 2. Add faults to simulate real-world failures**\n\nYou can follow up the load test action with a fault like:\n\n- CPU pressure on your VM or container\n- Network latency or packet loss injection\n- Service shutdown of a dependent component\n\n#### **Step 3. Observe and analyze**\n\nOnce the experiment runs, you can:\n\n- View load test metrics (like response times, error rates, throughput) in Azure Load Testing\n- View fault outcomes in Chaos Studio\n- Correlate both using Application Insights or Log Analytics\n\nThis gives a holistic view of performance and resiliency under controlled failure.\n\nBy combining load and chaos, you can answer:\n\n- How does latency or failure in one microservice affect end-to-end response times?\n- Do retry policies or circuit breakers behave as expected under load?\n- Does the system self-heal once the fault is removed?\n- What’s the performance impact of failover mechanisms?\n\n## **Conclusion**\n\nChaos testing under load helps teams move from confidence to certainty. Azure’s native integration between Chaos Studio and Load Testing makes it easier than ever to build resiliency testing into your CI/CD pipeline — using only Azure-native services.\n\n### **Learn More**\n\n- [Azure Chaos Studio documentation](http://aka.ms/ChaosDocs)\n- [Azure Load Testing documentation](https://learn.microsoft.com/en-us/azure/app-testing/load-testing/overview-what-is-azure-load-testing)",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "ProcessedDate": "2025-10-22 15:04:09",
  "PubDate": "2025-10-22T15:00:00+00:00",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "EnhancedContent": "## When you build for scale and reliability, testing for performance under ideal conditions is only half the story. Real-world systems rarely behave ideally — dependencies fail, services slow down, and resources get throttled. That’s where chaos engineering meets load testing.\n\nWith [Azure Chaos Studio](https://aka.ms/AzureChaosStudio) and [Azure Load Testing](https://aka.ms/malt), you can simulate *both* — run a controlled load test while injecting faults into your application or infrastructure to understand how it behaves under stress.\n\nTogether, they help you find those *resiliency blind spots* — the cascading failures, retry storms, and degraded dependencies that only appear when your system is both *busy* and *broken*.\n\nFor example:\n\n- What if your database becomes read-only during peak user traffic?\n- How does your API react if a downstream service starts returning 500s?\n- Can your autoscaling rules recover fast enough?\n\nLet’s explore how you can run load tests from Azure Load Testing as part of a chaos experiment.\n\n## **Azure Chaos Studio + Azure Load Testing Integration**\n\nAzure Chaos Studio has load test actions that let you integrate load testing directly into your chaos experiment flow.\n\nFrom the [Chaos Studio fault library](https://learn.microsoft.com/en-us/azure/chaos-studio/chaos-studio-fault-library#orchestration-actions), you can find:\n\n- Start load test (Azure Load Testing)\n- Stop load test (Azure Load Testing)\n\nTriggers a load test from your Azure Load Testing resource as part of an experiment step.\n\nThis means you can now orchestrate a sequence like:\n\n1. Start load test\n2. Inject a fault (e.g., shut down VM, throttle network, restart App Service)\n3. Observe and measure resiliency\n4. Stop the test and analyze metrics\n\n## **Chaos Experiment with Load Test Action**\n\nHere’s how a typical experiment might look conceptually:\n\n#### **Step 1. Define the experiment in Chaos Studio**\n\nCreate a new experiment that targets your application or infrastructure components — for example, an App Service or a SQL Database.\n\nAdd the Start Load Test (Azure Load Testing) action: This tells Chaos Studio to kick off a load test from Azure Load Testing.\n\nSnapshot of a Chaos experiement with load test action in Azure portal\n\n#### **Step 2. Add faults to simulate real-world failures**\n\nYou can follow up the load test action with a fault like:\n\n- CPU pressure on your VM or container\n- Network latency or packet loss injection\n- Service shutdown of a dependent component\n\n#### **Step 3. Observe and analyze**\n\nOnce the experiment runs, you can:\n\n- View load test metrics (like response times, error rates, throughput) in Azure Load Testing\n- View fault outcomes in Chaos Studio\n- Correlate both using Application Insights or Log Analytics\n\nThis gives a holistic view of performance and resiliency under controlled failure.\n\nBy combining load and chaos, you can answer:\n\n- How does latency or failure in one microservice affect end-to-end response times?\n- Do retry policies or circuit breakers behave as expected under load?\n- Does the system self-heal once the fault is removed?\n- What’s the performance impact of failover mechanisms?\n\n## **Conclusion**\n\nChaos testing under load helps teams move from confidence to certainty. Azure’s native integration between Chaos Studio and Load Testing makes it easier than ever to build resiliency testing into your CI/CD pipeline — using only Azure-native services.\n\n### **Learn More**\n\n- [Azure Chaos Studio documentation](http://aka.ms/ChaosDocs)\n- [Azure Load Testing documentation](https://learn.microsoft.com/en-us/azure/app-testing/load-testing/overview-what-is-azure-load-testing)\n\nPublished Oct 22, 2025\n\nVersion 1.0\n\n[Azure Chaos Studio](/tag/Azure%20Chaos%20Studio?nodeId=board%3AAppsonAzureBlog)\n\n[azure load testing](/tag/azure%20load%20testing?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[Nikita_Nallamothu&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xMjgyNDUxLTM3NTczNmlFNEYxRERGRERCRDg5RjI3?image-dimensions=50x50)](/users/nikita_nallamothu/1282451) [Nikita_Nallamothu](/users/nikita_nallamothu/1282451) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined January 21, 2022\n\n[View Profile](/users/nikita_nallamothu/1282451)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/running-a-load-test-within-a-chaos-experiment/ba-p/4463344"
}
