{
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Tags": [],
  "Title": "Selecting the Right Agentic Solution on Azure – Part 2 (Security)",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "Let’s pick up from where we left off in the previous post — [Selecting the Right Agentic Solution on Azure - Part 1](https://techcommunity.microsoft.com/blog/AzureArchitectureBlog/selecting-the-right-agentic-solution-on-azure/4453955). Earlier, we explored a decision tree to help identify the most suitable Azure service for building your agentic solution.\n\nFollowing that discussion, we received several requests to dive deeper into the security considerations for each of these services. In this post, we’ll examine the security aspects of each option, one by one. But before going ahead and looking at the security perspective I highly recommend looking at [list of Azure AI Services Technologies](https://learn.microsoft.com/en-us/azure/architecture/data-guide/technology-choices/ai-services) made available by Microsoft. This list is inclusive of all those services which were part of erstwhile cognitive services and latest additions.\n\n**Workflows with AI agents and models in Azure Logic Apps (Preview) –** This approach focuses on running your agents as an action or as part of an “agent loop” with multiple actions within Azure Logic Apps. It’s important not to confuse this with the alternative setup, where Azure Logic Apps integrates with AI Agents in the Foundry Agent Service—either as a tool or as a trigger. ([Announcement: Power your Agents in Azure AI Foundry Agent Service with Azure Logic Apps | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/integrationsonazureblog/%F0%9F%93%A2announcement-power-your-agents-in-azure-ai-foundry-agent-service-with-azure-lo/4414995)). In that scenario, your agents are hosted under the Azure AI Foundry Agent Service, which we’ll discuss separately below.\n\nAlthough, to create an agent workflow, you’ll need to establish a connection—either to Azure OpenAI or to an Azure AI Foundry project for connecting to a model. When connected to a Foundry project, you can view agents and threads directly within that project’s lists.\n\n| | | --- | | | |\n\nSince agents here run as Logic Apps actions, their security is governed by the Logic Apps security framework. Let’s look at the key aspects:\n\n1. **** **Easy Auth or App Service Auth (Preview) -** Agent workflows often integrate with a broader range of systems—models, MCPs, APIs, agents, and even human interactions. You can secure these workflows using Easy Auth, which integrates with Microsoft Entra ID for authentication and authorization. Read more here: [Protect Agent Workflows with Easy Auth - Azure Logic Apps | Microsoft Learn](https://learn.microsoft.com/en-us/azure/logic-apps/set-up-authentication-agent-workflows).\n\n1. **** **Securing and Encrypting Data at Rest** - Azure Logic Apps stores data in Azure Storage, which uses Microsoft-managed keys for encryption by default. You can further enhance security by:\n\n- Restricting access to Logic App operations via Azure RBAC\n- Limiting access to run history data\n- Securing inputs and outputs\n- Controlling parameter access for webhook-triggered workflows\n- Managing outbound call access to external services\n\nMore info here: [Secure access and data in workflows - Azure Logic Apps | Microsoft Learn](https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal).\n\n1. **** **Secure Data at transit –** When exposing your Logic App as an HTTP(S) endpoint, consider using:\n\n- Azure API Management for access policies and documentation\n- Azure Application Gateway or Azure Front Door for WAF (Web Application Firewall) protection.\n\nI highly recommend the labs provided by Logic Apps Product Group to learn more about Agentic Workflows: [https://azure.github.io/logicapps-labs/docs/intro](https://azure.github.io/logicapps-labs/docs/intro).\n\n**** **Azure AI Foundry Agent Service –** As of this writing, the Azure AI Foundry Agent Service abstracts the underlying infrastructure where your agents run. Microsoft manages this secure environment, so you don’t need to handle compute, network, or storage resources—though bring-your-own-storage is an option.\n\n1. **** **Securing and Encrypting Data at Rest -** Microsoft guarantees that your prompts and outputs remain private—never shared with other customers or AI providers (such as OpenAI or Meta).\n\n- Data (from messages, threads, runs, and uploads) is encrypted using AES-256.\n- It remains stored in the same region where the Agent Service is deployed.\n- You can optionally use Customer-Managed Keys (CMK) for encryption.\n\nRead more here: [Data, privacy, and security for Azure AI Agent Service - Azure AI Services | Microsoft Learn](https://learn.microsoft.com/en-us/azure/ai-foundry/responsible-ai/agents/data-privacy-security).\n\n1. **** **Network Security –** The service allows integration with your private virtual network using a private endpoint.\n\n***Note:*** There are known limitations, such as subnet IP restrictions, the need for a dedicated agent subnet, same-region requirements, and limited regional availability. Read more here: [How to use a virtual network with the Azure AI Foundry Agent Service - Azure AI Foundry | Microsoft Learn](https://learn.microsoft.com/en-gb/azure/ai-foundry/agents/how-to/virtual-networks).\n\n1. **** **Secure Data at transit –** Upcoming enhancements include API Management support (soon in Public Preview) for AI APIs, including Model APIs, Tool APIs/MCP servers, and Agent APIs.\n\nHere is another great article about using [APIM to safeguard HTTP APIs](https://learn.microsoft.com/en-us/azure/architecture/ai-ml/guide/azure-openai-gateway-guide) exposed by Azure OpenAI that let your applications perform embeddings or completions by using OpenAI's language models.\n\n**Agent Orchestrators –** We’ve introduced the **Agent Framework**, which succeeds both **AutoGen** and **Semantic Kernel**. According to the product group, it combines the best capabilities of both predecessors. Support for **Semantic Kernel** and related documentation for **AutoGen** will continue to be available for some time to allow users to transition smoothly to the new framework.\n\nWhen discussing the **security aspects of agent orchestrators**, it’s important to note that these considerations also extend to the underlying services hosting them—whether on AKS or Container Apps. However, this discussion will not focus on the security features of those hosting environments, as comprehensive resources already exist for them. Instead, we’ll focus on common security concerns applicable across different orchestrators, including AutoGen, Semantic Kernel, and other frameworks such as LlamaIndex, LangGraph, or LangChain.\n\n**Key areas to consider include (but are not limited to):**\n\n1. **Secure Secrets / Key Management**\n- Avoid hard-coding secrets (e.g., API keys for Foundry, OpenAI, Anthropic, Pinecone, etc.).\n- Use secret management solutions such as **Azure Key Vault** or environment variables.\n- Encrypt secrets at rest and enforce strict limits on scope and lifetime.\n2. **Access Control & Least Privilege**\n- Grant each agent or tool only the minimum required permissions.\n- Implement **Role-Based Access Control (RBAC)** and enforce least privilege principles.\n- Use strong authentication (e.g., **OAuth2**, **Azure AD**) for administrative or tool-level access.\n- Restrict the scope of external service credentials (e.g., read-only vs. write) and rotate them regularly.\n3. **Isolation / Sandboxing**\n- Isolate plugin execution and use inter-process separation as needed.\n- Prevent user inputs from executing arbitrary code on the host.\n- Apply resource limits for model or function execution to mitigate abuse.\n4. **Sensitive Data Protection**\n- Encrypt data both at rest and in transit.\n- Mask or remove **PII** before sending data to models.\n- Avoid persisting sensitive context unnecessarily.\n- Ensure logs and memory do not inadvertently expose secrets or user data.\n5. **Prompt & Query Security**\n- Sanitize or escape user input in custom query engines or chat interfaces.\n- Protect against **prompt injection** by implementing guardrails to monitor and filter prompts.\n- Set context length limits and use safe output filters (e.g., profanity filters, regex validators).\n6. **Observability, Logging & Auditing**\n- Maintain comprehensive logs, including tool invocations, agent decisions, and execution paths.\n- Continuously monitor for anomalies or unexpected behaviour.\n\nI hope this overview assists you in evaluating and implementing the appropriate security measures for your chosen agentic solution.\n\nUpdated Oct 22, 2025\n\nVersion 2.0\n\n[application](/tag/application?nodeId=board%3AAzureArchitectureBlog)\n\n[artificial intelligence](/tag/artificial%20intelligence?nodeId=board%3AAzureArchitectureBlog)\n\n[integration](/tag/integration?nodeId=board%3AAzureArchitectureBlog)\n\n[!\\[pranabpaul&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/m_assets/avatars/default/avatar-3.svg?image-dimensions=50x50)](/users/pranabpaul/1216949) [pranabpaul](/users/pranabpaul/1216949) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined November 12, 2021\n\n[View Profile](/users/pranabpaul/1216949)\n\n/category/azure/blog/azurearchitectureblog [Azure Architecture Blog](/category/azure/blog/azurearchitectureblog) Follow this blog board to get notified when there's new activity",
  "Link": "https://techcommunity.microsoft.com/t5/azure-architecture-blog/selecting-the-right-agentic-solution-on-azure-part-2-security/ba-p/4461215",
  "ProcessedDate": "2025-10-22 19:03:46",
  "Description": "Let’s pick up from where we left off in the previous post — [Selecting the Right Agentic Solution on Azure - Part 1](https://techcommunity.microsoft.com/blog/AzureArchitectureBlog/selecting-the-right-agentic-solution-on-azure/4453955). Earlier, we explored a decision tree to help identify the most suitable Azure service for building your agentic solution.\n\n![]()\n\nFollowing that discussion, we received several requests to dive deeper into the security considerations for each of these services. In this post, we’ll examine the security aspects of each option, one by one. But before going ahead and looking at the security perspective I highly recommend looking at [list of Azure AI Services Technologies](https://learn.microsoft.com/en-us/azure/architecture/data-guide/technology-choices/ai-services) made available by Microsoft. This list is inclusive of all those services which were part of erstwhile cognitive services and latest additions.\n\n**Workflows with AI agents and models in Azure Logic Apps (Preview) –** This approach focuses on running your agents as an action or as part of an “agent loop” with multiple actions within Azure Logic Apps. It’s important not to confuse this with the alternative setup, where Azure Logic Apps integrates with AI Agents in the Foundry Agent Service—either as a tool or as a trigger. ([Announcement: Power your Agents in Azure AI Foundry Agent Service with Azure Logic Apps | Microsoft Community Hub](https://techcommunity.microsoft.com/blog/integrationsonazureblog/%F0%9F%93%A2announcement-power-your-agents-in-azure-ai-foundry-agent-service-with-azure-lo/4414995)). In that scenario, your agents are hosted under the Azure AI Foundry Agent Service, which we’ll discuss separately below.\n\nAlthough, to create an agent workflow, you’ll need to establish a connection—either to Azure OpenAI or to an Azure AI Foundry project for connecting to a model. When connected to a Foundry project, you can view agents and threads directly within that project’s lists.\n\n![]()\n\n| | | --- | | | ![]() |\n\nSince agents here run as Logic Apps actions, their security is governed by the Logic Apps security framework. Let’s look at the key aspects:\n\n1. **** **Easy Auth or App Service Auth (Preview) -** Agent workflows often integrate with a broader range of systems—models, MCPs, APIs, agents, and even human interactions. You can secure these workflows using Easy Auth, which integrates with Microsoft Entra ID for authentication and authorization. Read more here: [Protect Agent Workflows with Easy Auth - Azure Logic Apps | Microsoft Learn](https://learn.microsoft.com/en-us/azure/logic-apps/set-up-authentication-agent-workflows).\n\n1. **** **Securing and Encrypting Data at Rest** - Azure Logic Apps stores data in Azure Storage, which uses Microsoft-managed keys for encryption by default. You can further enhance security by:\n\n- Restricting access to Logic App operations via Azure RBAC\n- Limiting access to run history data\n- Securing inputs and outputs\n- Controlling parameter access for webhook-triggered workflows\n- Managing outbound call access to external services\n\nMore info here: [Secure access and data in workflows - Azure Logic Apps | Microsoft Learn](https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal).\n\n1. **** **Secure Data at transit –** When exposing your Logic App as an HTTP(S) endpoint, consider using:\n\n- Azure API Management for access policies and documentation\n- Azure Application Gateway or Azure Front Door for WAF (Web Application Firewall) protection.\n\nI highly recommend the labs provided by Logic Apps Product Group to learn more about Agentic Workflows: [https://azure.github.io/logicapps-labs/docs/intro](https://azure.github.io/logicapps-labs/docs/intro).\n\n**** **Azure AI Foundry Agent Service –** As of this writing, the Azure AI Foundry Agent Service abstracts the underlying infrastructure where your agents run. Microsoft manages this secure environment, so you don’t need to handle compute, network, or storage resources—though bring-your-own-storage is an option.\n\n1. **** **Securing and Encrypting Data at Rest -** Microsoft guarantees that your prompts and outputs remain private—never shared with other customers or AI providers (such as OpenAI or Meta).\n\n- Data (from messages, threads, runs, and uploads) is encrypted using AES-256.\n- It remains stored in the same region where the Agent Service is deployed.\n- You can optionally use Customer-Managed Keys (CMK) for encryption.\n\nRead more here: [Data, privacy, and security for Azure AI Agent Service - Azure AI Services | Microsoft Learn](https://learn.microsoft.com/en-us/azure/ai-foundry/responsible-ai/agents/data-privacy-security).\n\n1. **** **Network Security –** The service allows integration with your private virtual network using a private endpoint.\n\n***Note:*** There are known limitations, such as subnet IP restrictions, the need for a dedicated agent subnet, same-region requirements, and limited regional availability. Read more here: [How to use a virtual network with the Azure AI Foundry Agent Service - Azure AI Foundry | Microsoft Learn](https://learn.microsoft.com/en-gb/azure/ai-foundry/agents/how-to/virtual-networks).\n\n![]()\n1. **** **Secure Data at transit –** Upcoming enhancements include API Management support (soon in Public Preview) for AI APIs, including Model APIs, Tool APIs/MCP servers, and Agent APIs.\n\n![]()\n\nHere is another great article about using [APIM to safeguard HTTP APIs](https://learn.microsoft.com/en-us/azure/architecture/ai-ml/guide/azure-openai-gateway-guide) exposed by Azure OpenAI that let your applications perform embeddings or completions by using OpenAI's language models.\n\n**Agent Orchestrators –** We’ve introduced the **Agent Framework**, which succeeds both **AutoGen** and **Semantic Kernel**. According to the product group, it combines the best capabilities of both predecessors. Support for **Semantic Kernel** and related documentation for **AutoGen** will continue to be available for some time to allow users to transition smoothly to the new framework.\n\nWhen discussing the **security aspects of agent orchestrators**, it’s important to note that these considerations also extend to the underlying services hosting them—whether on AKS or Container Apps. However, this discussion will not focus on the security features of those hosting environments, as comprehensive resources already exist for them. Instead, we’ll focus on common security concerns applicable across different orchestrators, including AutoGen, Semantic Kernel, and other frameworks such as LlamaIndex, LangGraph, or LangChain.\n\n**Key areas to consider include (but are not limited to):**\n\n1. **Secure Secrets / Key Management**\n- Avoid hard-coding secrets (e.g., API keys for Foundry, OpenAI, Anthropic, Pinecone, etc.).\n- Use secret management solutions such as **Azure Key Vault** or environment variables.\n- Encrypt secrets at rest and enforce strict limits on scope and lifetime.\n2. **Access Control & Least Privilege**\n- Grant each agent or tool only the minimum required permissions.\n- Implement **Role-Based Access Control (RBAC)** and enforce least privilege principles.\n- Use strong authentication (e.g., **OAuth2**, **Azure AD**) for administrative or tool-level access.\n- Restrict the scope of external service credentials (e.g., read-only vs. write) and rotate them regularly.\n3. **Isolation / Sandboxing**\n- Isolate plugin execution and use inter-process separation as needed.\n- Prevent user inputs from executing arbitrary code on the host.\n- Apply resource limits for model or function execution to mitigate abuse.\n4. **Sensitive Data Protection**\n- Encrypt data both at rest and in transit.\n- Mask or remove **PII** before sending data to models.\n- Avoid persisting sensitive context unnecessarily.\n- Ensure logs and memory do not inadvertently expose secrets or user data.\n5. **Prompt & Query Security**\n- Sanitize or escape user input in custom query engines or chat interfaces.\n- Protect against **prompt injection** by implementing guardrails to monitor and filter prompts.\n- Set context length limits and use safe output filters (e.g., profanity filters, regex validators).\n6. **Observability, Logging & Auditing**\n- Maintain comprehensive logs, including tool invocations, agent decisions, and execution paths.\n- Continuously monitor for anomalies or unexpected behaviour.\n\nI hope this overview assists you in evaluating and implementing the appropriate security measures for your chosen agentic solution.",
  "PubDate": "2025-10-22T18:10:53+00:00",
  "Author": "pranabpaul",
  "OutputDir": "_community"
}
