{
  "Title": "Securing Cloud Shell Access to AKS",
  "FeedName": "Microsoft Tech Community",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Tags": [],
  "ProcessedDate": "2025-09-02 15:14:27",
  "Author": "samcogan",
  "OutputDir": "_community",
  "PubDate": "2025-09-02T15:13:03+00:00",
  "Description": "[Azure Cloud Shell](https://azure.microsoft.com/en-us/get-started/azure-portal/cloud-shell/?msockid=1326760b53ac681c340f63b9524c692a) is an online shell hosted by Microsoft that provides instant access to a command-line interface, enabling users to manage Azure resources without needing local installations. Cloud Shell comes equipped with popular tools and programming languages, including Azure CLI, PowerShell, and the Kubernetes command-line tool (kubectl). Using Cloud Shell can provide several benefits for administrators who need to work with AKS, especially if they need quick access from anywhere, or are in locked down environments:\n\n- **Immediate Access**: There’s no need for local setup; you can start managing Azure resources directly from your web browser.\n- **Persistent Storage**: Cloud Shell offers a file share in Azure, keeping your scripts and files accessible across multiple sessions.\n- **Pre-Configured Environment**: It includes built-in tools, saving time on installation and configuration.\n\n## The Challenge of Connecting to AKS\n\nBy default, Cloud Shell traffic to AKS originates from a random Microsoft-managed IP address, rather than from within your network. As a result, the AKS API server must be publicly accessible with no IP restrictions, which poses a security risk as anyone on the internet can attempt to reach it. While credentials are still required, restricting access to the API server significantly enhances security.\n\nFortunately, there are ways to lock down the API server while still enabling access via Cloud Shell, which we’ll explore in the rest of this article\n\n## Options for Securing Cloud Shell Access to AKS\n\nSeveral approaches can be taken to secure the access to your AKS cluster while using Cloud Shell:\n\n### IP Allow Listing\n\nOn AKS clusters with a public API server, it is possible to lock down access to the API server with an IP allow list. Each Cloud Shell instance has a randomly selected outbound IP coming from the Azure address space whenever a new session is deployed. This means we cannot allow access to these IPs in advance, but we apply them once our session is running and this will work for the duration of our session. Below is an example script that you could run from Cloud Shell to check the current outbound IP address and allow it on your AKS clusters authorised IP list.\n\n- #!/usr/bin/env bash\nset -euo pipefail RG=\"$1\"; AKS=\"$2\" IP=\"$(curl -fsS https://api.ipify.org)\" echo \"Adding ${IP} to allow list\" CUR=\"$(az aks show -g \"$RG\" -n \"$AKS\" --query \"apiServerAccessProfile.authorizedIpRanges\" -o tsv | tr '\\t' '\\n' | awk 'NF')\" NEW=\"$(printf \"%s\\n%s/32\\n\" \"$CUR\" \"$IP\" | sort -u | paste -sd, -)\" if az aks update -g \"$RG\" -n \"$AKS\" --api-server-authorized-ip-ranges \"$NEW\" >/dev/null; then echo \"IP ${IP} applied successfully\"; else echo \"Failed to apply IP ${IP}\" >&2; exit 1; fi\n\nThis method comes with some caveats:\n\n1. The users running the script would need to be granted permissions to update the authorised IP ranges in AKS - this permission could be used to add any IP address\n2. This script will need to be run each time a Cloud Shell session is created, and can take a few minutes to run\n3. The script only deals with adding IPs to the allow list, you would also need to implement a process to remove these IPs on a regular basis to avoid building up a long list of IPs that are no longer needed.\n\nAdding Cloud Shell IPs in bulk, through Service Tags or similar will result in your API server being accessible to a much larger range of IP addresses, and should be avoided.\n\n### Command Invoke\n\nAzure provides a feature known as Command Invoke that allows you to send commands to be run in AKS, without the need for direct network connectivity. This method executes a container within AKS to run your command and then return the result, and works well from within Cloud Shell.\n\nThis is probably the simplest approach that works with a locked down API server and the quickest to implement. However, there are some downsides:\n\n- Commands take longer to run - when you execute the command, it needs to run a container in AKS, execute the command and then return the result.\n- You only get *exitCode* and *text output*, and you lose API level details.\n- All commands must be run within the context of the *az aks command invoke* CLI command, making commands much longer and complex to execute, rather than direct access with Kubectl\n\nCommand Invoke can be a practical solution for occasional access to AKS, especially when the cost or complexity of alternative methods isn't justified. However, its user experience may fall short if relied upon as a daily tool.\n\n**Further Details:** [Access a private Azure Kubernetes Service (AKS) cluster using the command invoke or Run command feature - Azure Kubernetes Service | Microsoft Learn](https://learn.microsoft.com/en-us/azure/aks/access-private-cluster?tabs=azure-cli)\n\n### Cloud Shell vNet Integration\n\nIt is possible to deploy Cloud Shell into a virtual network (vNet), allowing it to route traffic via the vNet, and so access resources using private network, Private Endpoints, or even public resources, but using a NAT Gateway or Firewall for consistent outbound IP address.\n\nThis approach uses Azure Relay to provide secure access to the vNet from Cloud Shell, without the need to open additional ports. When using Cloud Shell in this way, it does introduce [additional cost](https://azure.microsoft.com/en-us/pricing/details/service-bus/) for the Azure Relay service.\n\n![]()\n\nUsing this solution will require two different approaches, depending on whether you are using a private or public API server.\n\n- When using a Private API server, which is either directly connected to the vNet, or configured with Private Endpoints, Cloud Shell will be able to connect directly to the private IP of this service over the vNet\n- When using a Public API server, with a public IP, traffic for this will still leave the vNet and go to the internet. The benefit is that we can control the public IP used for the outbound traffic using a Nat Gateway or Azure Firewall. Once this is configured, we can then allow-list this fixed IP on the AKS API server authorised IP ranges.\n\n**Further Details: [Use Cloud Shell in an Azure virtual network | Microsoft Learn](https://learn.microsoft.com/en-us/azure/cloud-shell/vnet/overview)**\n\n### Azure Bastion\n\nAzure Bastion provides secure and seamless RDP and SSH connectivity to your virtual machines (VMs) directly from the Azure portal, without exposing them to the public internet. Recently, Bastion has also added support for direct connection to AKS with SSH, rather than needing to connect to a jump box and then use Kubectl from there. This greatly simplifies connecting to AKS, and also reduces the cost.\n\nUsing this approach, we can deploy a Bastion into the vNet hosting AKS. From Cloud Shell we can then use the following command to create a tunnel to AKS.\n- az aks bastion --name --resource-group --bastion\n\nOnce this tunnel is connected, we can run Kubectl commands without any need for further configuration.\n\n![]()\n\nAs with Cloud Shell network integration, we take two slightly different approaches depending on whether the API server is public or private:\n\n- When using a Private API server, which is either directly connected to the vNet, or configured with Private Endpoints, Cloud Shells connected via Bastion will be able to connect directly to the private IP of this service over the vNet\n- When using a Public API server, with a public IP, traffic for this will still leave the vNet and go to the internet. As with Cloud Shell vNet integration, we can configure this to use a static outbound IP and allow list this on the API server. Using Bastion, we can still use NAT Gateway or Azure Firewall to achieve this, however you can also allow list the public IP assigned to the Bastion, removing the cost for NAT Gateway or Azure Firewall if these are not required for anything else.\n\nConnecting to AKS directly from Bastion requires the use of the Standard for Premium SKU of Bastion, which does have additional cost over the Developer or Basic SKU. This feature also requires that you enable native client support.\n\n![]()\n\n**Further details: [Connect to AKS Private Cluster Using Azure Bastion (Preview) - Azure Bastion | Microsoft Learn](https://learn.microsoft.com/en-us/azure/bastion/bastion-connect-to-aks-private-cluster)**\n\n## Summary of Options\n\n1. **IP Allow Listing**\nThe outbound IP addresses for Cloud Shell instances can be added to the Authorised IP list for your API server. As these IPs are dynamically assigned to sessions they would need to be added at runtime, to avoid adding a large list of IPs and reducing security. This can be achieved with a script. While easy to implement, this requires additional time to run the script with every new session, and increases the overhead for managing the Authorise IP list to remove unused IPs.\n2. **Command Invoke**\nCommand Invoke allows you to run commands against AKS without requiring direct network access or any setup. This is a convenient option for occasional tasks or troubleshooting, but it’s not designed for regular use due to its limited user experience and flexibility.\n3. **Cloud Shell vNet Integration**\nThis approach connects Cloud Shell directly to your virtual network, enabling secure access to AKS resources. It’s well-suited for environments where Cloud Shell is the primary access method and offers a more secure and consistent experience than default configurations. It does involve additional cost for Azure Relay.\n4. **Azure Bastion**\nAzure Bastion provides a secure tunnel to AKS that can be used from Cloud Shell or by users running the CLI locally. It offers strong security by eliminating public exposure of the API server and supports flexible access for different user scenarios, though it does require setup and may incur additional cost.\n\nCloud Shell is a great tool for providing pre-configured, easily accessible CLI instances, but in the default configuration it can require some security compromises. With a little work, it is possible to make Cloud Shell work with a more secure configuration that limits how much exposure is needed for your AKS API server.",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/securing-cloud-shell-access-to-aks/ba-p/4450299",
  "EnhancedContent": "[Azure Cloud Shell](https://azure.microsoft.com/en-us/get-started/azure-portal/cloud-shell/?msockid=1326760b53ac681c340f63b9524c692a) is an online shell hosted by Microsoft that provides instant access to a command-line interface, enabling users to manage Azure resources without needing local installations. Cloud Shell comes equipped with popular tools and programming languages, including Azure CLI, PowerShell, and the Kubernetes command-line tool (kubectl). Using Cloud Shell can provide several benefits for administrators who need to work with AKS, especially if they need quick access from anywhere, or are in locked down environments:\n\n- **Immediate Access**: There’s no need for local setup; you can start managing Azure resources directly from your web browser.\n- **Persistent Storage**: Cloud Shell offers a file share in Azure, keeping your scripts and files accessible across multiple sessions.\n- **Pre-Configured Environment**: It includes built-in tools, saving time on installation and configuration.\n\n## The Challenge of Connecting to AKS\n\nBy default, Cloud Shell traffic to AKS originates from a random Microsoft-managed IP address, rather than from within your network. As a result, the AKS API server must be publicly accessible with no IP restrictions, which poses a security risk as anyone on the internet can attempt to reach it. While credentials are still required, restricting access to the API server significantly enhances security.\n\nFortunately, there are ways to lock down the API server while still enabling access via Cloud Shell, which we’ll explore in the rest of this article\n\n## Options for Securing Cloud Shell Access to AKS\n\nSeveral approaches can be taken to secure the access to your AKS cluster while using Cloud Shell:\n\n### IP Allow Listing\n\nOn AKS clusters with a public API server, it is possible to lock down access to the API server with an IP allow list. Each Cloud Shell instance has a randomly selected outbound IP coming from the Azure address space whenever a new session is deployed. This means we cannot allow access to these IPs in advance, but we apply them once our session is running and this will work for the duration of our session. Below is an example script that you could run from Cloud Shell to check the current outbound IP address and allow it on your AKS clusters authorised IP list.\n\n``` #!/usr/bin/env bash set -euo pipefail RG=\"$1\"; AKS=\"$2\" IP=\"$(curl -fsS https://api.ipify.org)\" echo \"Adding ${IP} to allow list\" CUR=\"$(az aks show -g \"$RG\" -n \"$AKS\" --query \"apiServerAccessProfile.authorizedIpRanges\" -o tsv | tr '\\t' '\\n' | awk 'NF')\" NEW=\"$(printf \"%s\\n%s/32\\n\" \"$CUR\" \"$IP\" | sort -u | paste -sd, -)\" if az aks update -g \"$RG\" -n \"$AKS\" --api-server-authorized-ip-ranges \"$NEW\" >/dev/null; then echo \"IP ${IP} applied successfully\"; else echo \"Failed to apply IP ${IP}\" >&2; exit 1; fi ```\n\nThis method comes with some caveats:\n\n1. The users running the script would need to be granted permissions to update the authorised IP ranges in AKS - this permission could be used to add any IP address\n2. This script will need to be run each time a Cloud Shell session is created, and can take a few minutes to run\n3. The script only deals with adding IPs to the allow list, you would also need to implement a process to remove these IPs on a regular basis to avoid building up a long list of IPs that are no longer needed.\n\nAdding Cloud Shell IPs in bulk, through Service Tags or similar will result in your API server being accessible to a much larger range of IP addresses, and should be avoided.\n\n### Command Invoke\n\nAzure provides a feature known as Command Invoke that allows you to send commands to be run in AKS, without the need for direct network connectivity. This method executes a container within AKS to run your command and then return the result, and works well from within Cloud Shell.\n\nThis is probably the simplest approach that works with a locked down API server and the quickest to implement. However, there are some downsides:\n\n- Commands take longer to run - when you execute the command, it needs to run a container in AKS, execute the command and then return the result.\n- You only get *exitCode* and *text output*, and you lose API level details.\n- All commands must be run within the context of the *az aks command invoke* CLI command, making commands much longer and complex to execute, rather than direct access with Kubectl\n\nCommand Invoke can be a practical solution for occasional access to AKS, especially when the cost or complexity of alternative methods isn't justified. However, its user experience may fall short if relied upon as a daily tool.\n\n**Further Details:** [Access a private Azure Kubernetes Service (AKS) cluster using the command invoke or Run command feature - Azure Kubernetes Service | Microsoft Learn](https://learn.microsoft.com/en-us/azure/aks/access-private-cluster?tabs=azure-cli)\n\n### Cloud Shell vNet Integration\n\nIt is possible to deploy Cloud Shell into a virtual network (vNet), allowing it to route traffic via the vNet, and so access resources using private network, Private Endpoints, or even public resources, but using a NAT Gateway or Firewall for consistent outbound IP address.\n\nThis approach uses Azure Relay to provide secure access to the vNet from Cloud Shell, without the need to open additional ports. When using Cloud Shell in this way, it does introduce [additional cost](https://azure.microsoft.com/en-us/pricing/details/service-bus/) for the Azure Relay service.\n\nUsing this solution will require two different approaches, depending on whether you are using a private or public API server.\n\n- When using a Private API server, which is either directly connected to the vNet, or configured with Private Endpoints, Cloud Shell will be able to connect directly to the private IP of this service over the vNet\n- When using a Public API server, with a public IP, traffic for this will still leave the vNet and go to the internet. The benefit is that we can control the public IP used for the outbound traffic using a Nat Gateway or Azure Firewall. Once this is configured, we can then allow-list this fixed IP on the AKS API server authorised IP ranges.\n\n**Further Details: [Use Cloud Shell in an Azure virtual network | Microsoft Learn](https://learn.microsoft.com/en-us/azure/cloud-shell/vnet/overview)**\n\n### Azure Bastion\n\nAzure Bastion provides secure and seamless RDP and SSH connectivity to your virtual machines (VMs) directly from the Azure portal, without exposing them to the public internet. Recently, Bastion has also added support for direct connection to AKS with SSH, rather than needing to connect to a jump box and then use Kubectl from there. This greatly simplifies connecting to AKS, and also reduces the cost.\n\nUsing this approach, we can deploy a Bastion into the vNet hosting AKS. From Cloud Shell we can then use the following command to create a tunnel to AKS.\n\n``` az aks bastion --name <aks name> --resource-group <resource group name> --bastion <bastion resource ID> ```\n\nOnce this tunnel is connected, we can run Kubectl commands without any need for further configuration.\n\nAs with Cloud Shell network integration, we take two slightly different approaches depending on whether the API server is public or private:\n\n- When using a Private API server, which is either directly connected to the vNet, or configured with Private Endpoints, Cloud Shells connected via Bastion will be able to connect directly to the private IP of this service over the vNet\n- When using a Public API server, with a public IP, traffic for this will still leave the vNet and go to the internet. As with Cloud Shell vNet integration, we can configure this to use a static outbound IP and allow list this on the API server. Using Bastion, we can still use NAT Gateway or Azure Firewall to achieve this, however you can also allow list the public IP assigned to the Bastion, removing the cost for NAT Gateway or Azure Firewall if these are not required for anything else.\n\nConnecting to AKS directly from Bastion requires the use of the Standard for Premium SKU of Bastion, which does have additional cost over the Developer or Basic SKU. This feature also requires that you enable native client support.\n\n**Further details: [Connect to AKS Private Cluster Using Azure Bastion (Preview) - Azure Bastion | Microsoft Learn](https://learn.microsoft.com/en-us/azure/bastion/bastion-connect-to-aks-private-cluster)**\n\n## Summary of Options\n\n1. **IP Allow Listing**\nThe outbound IP addresses for Cloud Shell instances can be added to the Authorised IP list for your API server. As these IPs are dynamically assigned to sessions they would need to be added at runtime, to avoid adding a large list of IPs and reducing security. This can be achieved with a script. While easy to implement, this requires additional time to run the script with every new session, and increases the overhead for managing the Authorise IP list to remove unused IPs.\n2. **Command Invoke**\nCommand Invoke allows you to run commands against AKS without requiring direct network access or any setup. This is a convenient option for occasional tasks or troubleshooting, but it’s not designed for regular use due to its limited user experience and flexibility.\n3. **Cloud Shell vNet Integration**\nThis approach connects Cloud Shell directly to your virtual network, enabling secure access to AKS resources. It’s well-suited for environments where Cloud Shell is the primary access method and offers a more secure and consistent experience than default configurations. It does involve additional cost for Azure Relay.\n4. **Azure Bastion**\nAzure Bastion provides a secure tunnel to AKS that can be used from Cloud Shell or by users running the CLI locally. It offers strong security by eliminating public exposure of the API server and supports flexible access for different user scenarios, though it does require setup and may incur additional cost.\n\nCloud Shell is a great tool for providing pre-configured, easily accessible CLI instances, but in the default configuration it can require some security compromises. With a little work, it is possible to make Cloud Shell work with a more secure configuration that limits how much exposure is needed for your AKS API server.\n\nUpdated Sep 02, 2025\n\nVersion 1.0\n\n[azure kubernetes service](/tag/azure%20kubernetes%20service?nodeId=board%3AAppsonAzureBlog)\n\n[cloud native](/tag/cloud%20native?nodeId=board%3AAppsonAzureBlog)\n\n[containers](/tag/containers?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[samcogan&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yOTgxNTI4LVdSRVN4Rg?image-coordinates=64%2C0%2C1938%2C1873&amp;image-dimensions=50x50)](/users/samcogan/2981528) [samcogan](/users/samcogan/2981528) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined April 03, 2025\n\n[View Profile](/users/samcogan/2981528)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedLevelAuthor": "rss.livelink.threads-in-node"
}
