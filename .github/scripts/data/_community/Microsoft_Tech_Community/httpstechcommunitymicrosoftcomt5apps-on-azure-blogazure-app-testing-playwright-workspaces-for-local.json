{
  "Description": "Azure App Testing centralizes functional and performance testing for your apps. With Playwright Workspaces, you can author, execute, and analyze browser tests at scale, both locally and in the cloud, with shared reporting and parallel, cloud-hosted browsers.\n\nIf you’re new to the service, start with this [Overview](https://learn.microsoft.com/en-us/azure/app-testing/playwright-workspaces/overview-what-is-microsoft-playwright-workspaces) and [QuickStart](https://learn.microsoft.com/en-us/azure/app-testing/playwright-workspaces/quickstart-run-end-to-end-tests?tabs=playwrightcli&pivots=playwright-test-runner).\n\n# Create a Playwright Workspace (portal quick tour)\n\n- In the Azure portal, search for “Azure App Testing”, open it, and select “Create.”\n- Choose “Playwright Workspaces” (use “Azure Load Testing” for performance/load).\n- Provide a name, region, and subscription, then create the workspace.\n- Open your Playwright Workspace to author and run tests locally or on cloud-hosted browsers, and view results in “Test runs.”\n\n> >\n> **Note:** A workspace lets you publish test results and artifacts and (optionally) run tests on cloud browsers for high parallelism and faster feedback.\n> >\n\n# What you’ll do in this guide\n\n- Run Playwright locally with an auto-started dev server.\n- Point tests at a deployed Azure Web App.\n- Publish runs to a Playwright Workspace (and optionally fan out on cloud-hosted browsers).\n\n# Application Under Test\n\n> >\n> **Sample app:** Node + Express (ESM) with a minimal Todo page.\n> > >\n> [Repository (clone this first)](https://github.com/jvargh/azure-playwright-testing)\n> >\n\n### 1) Clone the repo and install\n\n- git clone https://github.com/jvargh/azure-playwright-testing.git\n\ncd azure-playwright-testing\n\nnpm install\n\n# (Optional, but helpful if you haven’t used Playwright locally yet)\nnpx playwright install\n\n### 2) App layout & behavior\n\n**Entry:** ./server.js\n\n**Port:** process.env.PORT || 3000 (Azure-ready)\n\n**Routes:**\n\n- **GET /** → simple “Welcome” page\n- **GET /todomvc** → minimal TodoMVC-style page (localStorage-backed)\n\n> >\n> The app is intentionally tiny so you can focus on the test flow (local → Azure Web App → Workspace).\n> >\n\n# Config files you’ll use\n\n- **playwright.config.ts (base):** General settings (projects, reporters). Override baseURL per run via BASE\\_URL.\n- **playwright.local.config.ts (local dev):** Uses webServer to auto-start the app and targets http://localhost:3000. webServer.command runs node ./server.js.\n- **playwright.service.config.ts (Workspace):** Adds the Azure service reporter/integration to publish runs to your workspace.\n\n> >\n> **Note:** The QuickStart above covers the service region endpoint and package integration for publishing and cloud browsers.\n> >\n\n# NPM scripts\n\n- **start:src** → start the local server\n- **test:local** → run locally using playwright.local.config.ts\n- **test:azure** → run against your Azure Web App URL\n- **test:workspace** → publish runs to your Workspace\n- **test:workspace:scale** → same as above, but cranks up workers to scale with cloud browsers\n\n> >\n> You can always open the HTML report locally with: **npx playwright show-report**\n> >\n\n# Playwright run sequences\n\n### 1) Run against Local (auto server via playwright.local.config.ts)\n\n**Why:** Fast dev loop—Playwright spins up [http://localhost:3000](http://localhost:3000) for you.\n- # One-shot via npm:\nnpm run test:local\n\n# Under the hood (Windows CMD):\nnpx playwright test -c playwright.local.config.ts --reporter=line\n\n**Outcome:** Starts node ./server.js, waits for http://localhost:3000, runs tests, and reuses the server on the next run.\n\n**Manual variant** (start server yourself, then point BASE\\_URL at it):\n- node .\\server.js\nset BASE\\_URL=http://localhost:3000 && npx playwright test -c playwright.config.ts --reporter=line\n\n> >\n> **Tip:** To target a single test or title on Windows CMD:\n> > > >\n> ```\n> npx playwright test -c playwright.local.config.ts tests-examples\\demo-todo-app.spec.ts -g \"should allow me to add todo items\" --reporter=line\n> ```\n>\n\n### 2) Run against your Azure Web App (base config + BASE\\_URL)\n\n**Prereq**: Your app is deployed and reachable at the given URL.\n\n**Why:** Validate the real, deployed site as no local server needed.\n- # One-shot NPM\nset BASE\\_URL=https://.azurewebsites.net && npm run test:azure\n\n# Cross-platform option (no shell differences)\nnpm i -D cross-env\n## Make changes in package.json\n{ \"scripts\": { \"test:azure\": \"cross-env BASE\\_URL=$npm\\_config\\_baseurl npx playwright test -c playwright.config.ts --reporter=line\" } } npm run test:azure --baseurl=https://.azurewebsites.net\n\n# Full suite (Windows CMD)\nset BASE\\_URL=https://.azurewebsites.net && ^ npx playwright test -c playwright.config.ts --reporter=line\n\n# Focused test\nset BASE\\_URL=https://.azurewebsites.net && ^ npx playwright test -c playwright.config.ts tests-examples\\demo-todo-app.spec.ts -g \"should allow me to add todo items\" --reporter=line\n\n**Outcome:** Reuses your base config but targets the live app via BASE\\_URL.\n\n### 3) Run in your Playwright Workspace (playwright.service.config.ts)\n\n**One-time per shell/session:** Authenticate and set region service URL\n- az login\n\n# Use the region where your workspace is created, e.g., eastus\nset PLAYWRIGHT\\_SERVICE\\_URL=https://eastus.api.playwright.microsoft.com\n\n**Why**: Publish results/artifacts to the **Workspace** (portal), and optionally run at scale on **cloud-hosted browsers** for higher parallelism.\n- # Publish (local browsers):\nnpm run test:workspace\n\n# Publish at scale (cloud-hosted browsers):\nnpm run test:workspace:scale\n\n# Equivalent raw command:\nnpx playwright test -c playwright.service.config.ts --reporter=line\n\n**Outcome:** Results and artifacts appear under Test runs in the Workspace; the scaled run adds parallel workers on cloud browsers.\n\n> >\n> **Tip:** The QuickStart walks through setting the service region endpoint, service config file, and package integration for cloud browsers.\n> >\n\n# Troubleshooting nudges\n\n- **BASE\\_URL not honored?** Confirm you’re invoking the intended config (-c ...config.ts) and setting BASE\\_URL in the same shell.\n- **Workspace runs not showing up?** Re-run az login, verify PLAYWRIGHT\\_SERVICE\\_URL matches your workspace region, and check role access if needed.\n- **Runs taking too long?** Increase workers only where it helps—optimal parallelism is app-specific and benefits from experimentation.\n\n# Conclusion\n\nYou now have a clear, repeatable path to run the same Playwright tests locally with a self-started server, against your deployed Azure Web App, and in Playwright Workspaces with centralized reporting and optional cloud scale.\n\nUse this flow during development (local), before releases (staging/prod Web App), and continuously (Workspace + CI) to keep feedback fast and reliable.",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/azure-app-testing-playwright-workspaces-for-local-to-cloud-test/ba-p/4442711",
  "ProcessedDate": "2025-08-13 06:31:43",
  "Author": "varghesejoji",
  "PubDate": "2025-08-13T03:43:11+00:00",
  "OutputDir": "_community",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "## A practical, step-by-step guide to cloning the sample app and running Playwright tests locally, against Azure Web Apps, and at cloud scale with Azure Playwright Workspaces.\n\nAzure App Testing centralizes functional and performance testing for your apps. With Playwright Workspaces, you can author, execute, and analyze browser tests at scale, both locally and in the cloud, with shared reporting and parallel, cloud-hosted browsers.\n\nIf you’re new to the service, start with this [Overview](https://learn.microsoft.com/en-us/azure/app-testing/playwright-workspaces/overview-what-is-microsoft-playwright-workspaces) and [QuickStart](https://learn.microsoft.com/en-us/azure/app-testing/playwright-workspaces/quickstart-run-end-to-end-tests?tabs=playwrightcli&amp;pivots=playwright-test-runner).\n\n# Create a Playwright Workspace (portal quick tour)\n\n- In the Azure portal, search for “Azure App Testing”, open it, and select “Create.”\n- Choose “Playwright Workspaces” (use “Azure Load Testing” for performance/load).\n- Provide a name, region, and subscription, then create the workspace.\n- Open your Playwright Workspace to author and run tests locally or on cloud-hosted browsers, and view results in “Test runs.”\n\n> >\n> **Note:** A workspace lets you publish test results and artifacts and (optionally) run tests on cloud browsers for high parallelism and faster feedback.\n> >\n\n# What you’ll do in this guide\n\n- Run Playwright locally with an auto-started dev server.\n- Point tests at a deployed Azure Web App.\n- Publish runs to a Playwright Workspace (and optionally fan out on cloud-hosted browsers).\n\n# Application Under Test\n\n> >\n> **Sample app:** Node + Express (ESM) with a minimal Todo page.\n> > >\n> [Repository (clone this first)](https://github.com/jvargh/azure-playwright-testing)\n> >\n\n### 1) Clone the repo and install\n\n``` git clone https://github.com/jvargh/azure-playwright-testing.git\n\ncd azure-playwright-testing\n\nnpm install\n\n# (Optional, but helpful if you haven’t used Playwright locally yet)\nnpx playwright install ```\n\n### 2) App layout & behavior\n\n**Entry:** ./server.js\n\n**Port:** process.env.PORT || 3000 (Azure-ready)\n\n**Routes:**\n\n- **GET /** → simple “Welcome” page\n- **GET /todomvc** → minimal TodoMVC-style page (localStorage-backed)\n\n> >\n> The app is intentionally tiny so you can focus on the test flow (local → Azure Web App → Workspace).\n> >\n\n# Config files you’ll use\n\n- **playwright.config.ts (base):** General settings (projects, reporters). Override baseURL per run via BASE\\_URL.\n- **playwright.local.config.ts (local dev):** Uses webServer to auto-start the app and targets http://localhost:3000. webServer.command runs node ./server.js.\n- **playwright.service.config.ts (Workspace):** Adds the Azure service reporter/integration to publish runs to your workspace.\n\n> >\n> **Note:** The QuickStart above covers the service region endpoint and package integration for publishing and cloud browsers.\n> >\n\n# NPM scripts\n\n- **start:src** → start the local server\n- **test:local** → run locally using playwright.local.config.ts\n- **test:azure** → run against your Azure Web App URL\n- **test:workspace** → publish runs to your Workspace\n- **test:workspace:scale** → same as above, but cranks up workers to scale with cloud browsers\n\n> >\n> You can always open the HTML report locally with:  **npx playwright show-report**\n> >\n\n# Playwright run sequences\n\n### 1) Run against Local (auto server via playwright.local.config.ts)\n\n**Why:** Fast dev loop—Playwright spins up [http://localhost:3000](http://localhost:3000)  for you.\n\n```\n# One-shot via npm:\nnpm run test:local\n\n# Under the hood (Windows CMD):\nnpx playwright test -c playwright.local.config.ts --reporter=line ```\n\n**Outcome:** Starts node ./server.js, waits for http://localhost:3000, runs tests, and reuses the server on the next run.\n\n**Manual variant** (start server yourself, then point BASE\\_URL at it):\n\n``` node .\\server.js set BASE_URL=http://localhost:3000 && npx playwright test -c playwright.config.ts --reporter=line ```\n\n> >\n> **Tip:** To target a single test or title on Windows CMD:\n> > > >\n> ```\n> npx playwright test -c playwright.local.config.ts tests-examples\\demo-todo-app.spec.ts -g \"should allow me to add todo items\" --reporter=line\n> ```\n>\n\n### 2) Run against your Azure Web App (base config + BASE\\_URL)\n\n**Prereq**: Your app is deployed and reachable at the given URL.\n\n**Why:** Validate the real, deployed site as no local server needed.\n\n```\n# One-shot NPM\nset BASE_URL=https://<app>.azurewebsites.net && npm run test:azure\n\n# Cross-platform option (no shell differences)\nnpm i -D cross-env\n## Make changes in package.json\n{ \"scripts\": { \"test:azure\": \"cross-env BASE_URL=$npm_config_baseurl npx playwright test -c playwright.config.ts --reporter=line\" } } npm run test:azure --baseurl=https://<app>.azurewebsites.net\n\n# Full suite (Windows CMD)\nset BASE_URL=https://<azure-webapp>.azurewebsites.net && ^ npx playwright test -c playwright.config.ts --reporter=line\n\n# Focused test\nset BASE_URL=https://<azure-webapp>.azurewebsites.net && ^ npx playwright test -c playwright.config.ts tests-examples\\demo-todo-app.spec.ts -g \"should allow me to add todo items\" --reporter=line ```\n\n**Outcome:** Reuses your base config but targets the live app via BASE\\_URL.\n\n### 3) Run in your Playwright Workspace (playwright.service.config.ts)\n\n**One-time per shell/session:** Authenticate and set region service URL\n\n``` az login\n\n# Use the region where your workspace is created, e.g., eastus\nset PLAYWRIGHT_SERVICE_URL=https://eastus.api.playwright.microsoft.com ```\n\n**Why**: Publish results/artifacts to the **Workspace** (portal), and optionally run at scale on **cloud-hosted browsers** for higher parallelism.\n\n```\n# Publish (local browsers):\nnpm run test:workspace\n\n# Publish at scale (cloud-hosted browsers):\nnpm run test:workspace:scale\n\n# Equivalent raw command:\nnpx playwright test -c playwright.service.config.ts --reporter=line ```\n\n**Outcome:** Results and artifacts appear under Test runs in the Workspace; the scaled run adds parallel workers on cloud browsers.\n\n> >\n> **Tip:** The QuickStart walks through setting the service region endpoint, service config file, and package integration for cloud browsers.\n> >\n\n# Troubleshooting nudges\n\n- **BASE\\_URL not honored?** Confirm you’re invoking the intended config (-c ...config.ts) and setting BASE\\_URL in the same shell.\n- **Workspace runs not showing up?** Re-run az login, verify PLAYWRIGHT\\_SERVICE\\_URL matches your workspace region, and check role access if needed.\n- **Runs taking too long?** Increase workers only where it helps—optimal parallelism is app-specific and benefits from experimentation.\n\n# Conclusion\n\nYou now have a clear, repeatable path to run the same Playwright tests locally with a self-started server, against your deployed Azure Web App, and in Playwright Workspaces with centralized reporting and optional cloud scale.\n\nUse this flow during development (local), before releases (staging/prod Web App), and continuously (Workspace + CI) to keep feedback fast and reliable.\n\nPublished Aug 13, 2025\n\nVersion 1.0\n\n[azure app service](/tag/azure%20app%20service?nodeId=board%3AAppsonAzureBlog)\n\n[azure load testing](/tag/azure%20load%20testing?nodeId=board%3AAppsonAzureBlog)\n\n[microsoft playwright testing](/tag/microsoft%20playwright%20testing?nodeId=board%3AAppsonAzureBlog)\n\n[web apps](/tag/web%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[varghesejoji&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xMzkzMTU4LTM3MjcxN2k0NzU3MEFFMzkwODU2N0E4?image-dimensions=50x50)](/users/varghesejoji/1393158) [varghesejoji](/users/varghesejoji/1393158) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined May 18, 2022\n\n[View Profile](/users/varghesejoji/1393158)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Community",
  "Title": "Azure App Testing: Playwright Workspaces for Local-to-Cloud Test Runs",
  "Tags": [],
  "FeedLevelAuthor": "rss.livelink.threads-in-node"
}
