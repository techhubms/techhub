{
  "Description": "[AI Toolkit VS Code extension](https://code.visualstudio.com/docs/intelligentapps/overview) is a great place for developers to experiment, prototype, and learn about AI workflows. Developers exploring AI often start in \"Model Playground\" — experimenting with models, testing prompts, and iterating on ideas. But turning those experiments into real applications can take time.\n\n![]()\n\nThat’s why we partnered with the AI Toolkit team to introduce a new **project scaffold experience**. With just a few clicks, you can now generate a **complete AI-powered chat app**.\n\n## From playground to real app — in one click\n\nAI Toolkit helps developers learn, prototype, and experiment with AI workflows. Until now, it provided **code snippets** — great for exploration, but still a few steps away from a runnable project.\n\nTo bridge that gap, the latest release introduces **project scaffolding**. Once you’ve explored model responses in **Model Playground**, click **View Code**. You’ll now see a new option:\n\n![]()View Code -> OpenAI SDK. The support for other SDKs are coming.![]()Select \"Scaffold a chat application\"\n\nAfter choosing a local folder, AI Toolkit will scaffold a full project — including both backend and frontend code and you’re ready to run.\n\n## What’s inside the chat app\n\nThe scaffolded project, named **AI Chat**, provides a complete end-to-end example of an **AI + real-time chat** application.\n\n![]()VS Code on the left and the UI of the chat app on the right\n\n**Key features:**\n\n- Multi-room, real-time chat,\n- AI bot replies powered by GitHub LLM models via your token,\n- Same React frontend and Python backend code in both local or cloud modes,\n- (Optional) Azure Web PubSub integration for scale and message broadcasting.\n\nYou can start locally in minutes — no Azure setup required. When you’re ready to scale, deploy to Azure with **no code changes**.\n\n## Run locally in minutes\n\n**Prerequisites:**\n\n- Python 3.12+\n- Node.js 18+\n- GitHub Personal Access Token with **Models – Read permission**\n\n- pip install -r requirements.txt\nexport GITHUB\\_TOKEN=\n\npython start\\_dev.py\n\nThen open [http://localhost:5173](http://localhost:5173) — and you’re chatting!\n\nYou can open a second browser window to see real-time message streaming between rooms.\n\n![]()I use Edge Browser \"Split screen\" feature here.\n\n## From local to cloud: scale without rewrites\n\nOne of the best parts about this sample is its flexibility.\n\nYou can **run it entirely locally**, with no Azure setup or dependencies. Everything — frontend, backend, and real-time messaging — works out of the box. This makes it perfect for experimentation, quick demos, or internal prototypes.\n\nBut when you’re ready to **go beyond local**, Azure steps in to take care of scalability, reliability, and lifecycle management — with **no code changes**.\n\n### Why run it on Azure?\n\nDeploying to Azure offers several advantages:\n\n- **Built-in scalability** — Move from a handful of users to thousands of concurrent connections without changing your architecture,\n- **Managed infrastructure** — Azure App Service, Azure Web PubSub, Azure Storage are fully managed services; you don’t manage servers or maintain WebSocket connections,\n- **Security and access control** — Use Azure identity integration for production-grade protection,\n- **Dev-friendly automation** — Provision everything with a single command using [Azure Developer CLI (azd)](https://learn.microsoft.com/azure/developer/azure-developer-cli/overview).\n\nTo deploy the sample app to Azure, you only need one command.\n- azd up\n\nEverything — including Azure App Service, Azure Web PubSub and Azure Storage — is provisioned automatically.\n\n### Real-time, managed: Azure Web PubSub\n\nAt the heart of the cloud setup is **Azure Web PubSub**, a fully managed service for building real-time, bi-directional messaging applications using WebSockets. Developers can focus on application logic and leaving infra-related concerns to the service.\n\nIn the AI Chat Demo, Azure Web PubSub powers the **real-time messaging and multi-room architecture**, while LLMs via **GitHub Models** handle the intelligence layer. Specifically, Azure Web PubSub handles:\n\n- **Message broadcasting** across chat rooms,\n- **Group management** *(join, leave, and isolate rooms),*\n- **Event handling** through CloudEvents for flexible server integration,\n- Client negotiation via tokens for **secure, scoped access.**\n\nThis means your chat app can support large numbers of simultaneous users and global traffic — without you managing connection state or scaling infrastructure.\n\n## Next Steps\n\n1. Try the new project scaffold in **AI Toolkit VS Code,**\n2. Explore advanced options in [docs/ADVANCED.md,](http://docs/ADVANCED.md)\n3. Deploy your app with:\n- azd up\n1. Learn more about [Azure Web PubSub](https://learn.microsoft.com/azure/azure-web-pubsub/)\n\n### Explore, build and scale\n\nThe new AI Toolkit + Azure Web PubSub experience helps developers go from **model exploration** to **real-time AI application** in minutes — no boilerplate, no setup friction.\n\nStart experimenting today and bring your AI chat ideas to life.",
  "Tags": [],
  "FeedName": "Microsoft Tech Community",
  "Author": "kevinguo",
  "EnhancedContent": "[AI Toolkit VS Code extension](https://code.visualstudio.com/docs/intelligentapps/overview) is a great place for developers to experiment, prototype, and learn about AI workflows. Developers exploring AI often start in \"Model Playground\" — experimenting with models, testing prompts, and iterating on ideas. But turning those experiments into real applications can take time.\n\nThat’s why we partnered with the AI Toolkit team to introduce a new **project scaffold experience**. With just a few clicks, you can now generate a **complete AI-powered chat app**.\n\n## From playground to real app — in one click\n\nAI Toolkit helps developers learn, prototype, and experiment with AI workflows. Until now, it provided **code snippets** — great for exploration, but still a few steps away from a runnable project.\n\nTo bridge that gap, the latest release introduces **project scaffolding**. Once you’ve explored model responses in **Model Playground**, click **View Code**. You’ll now see a new option:\n\nView Code -&gt; OpenAI SDK. The support for other SDKs are coming.Select \"Scaffold a chat application\"\n\nAfter choosing a local folder, AI Toolkit will scaffold a full project — including both backend and frontend code and you’re ready to run.\n\n## What’s inside the chat app\n\nThe scaffolded project, named **AI Chat**, provides a complete end-to-end example of an **AI + real-time chat** application.\n\nVS Code on the left and the UI of the chat app on the right\n\n**Key features:**\n\n- Multi-room, real-time chat,\n- AI bot replies powered by GitHub LLM models via your token,\n- Same React frontend and Python backend code in both local or cloud modes,\n- (Optional) Azure Web PubSub integration for scale and message broadcasting.\n\nYou can start locally in minutes — no Azure setup required. When you’re ready to scale, deploy to Azure with **no code changes**.\n\n## Run locally in minutes\n\n**Prerequisites:**\n\n- Python 3.12+\n- Node.js 18+\n- GitHub Personal Access Token with **Models – Read permission**\n\n``` pip install -r requirements.txt export GITHUB_TOKEN=<your_pat>\n\npython start_dev.py\n\n```\n\nThen open [http://localhost:5173](http://localhost:5173) — and you’re chatting!\n\nYou can open a second browser window to see real-time message streaming between rooms.\n\nI use Edge Browser \"Split screen\" feature here.\n\n## From local to cloud: scale without rewrites\n\nOne of the best parts about this sample is its flexibility.\n\nYou can **run it entirely locally**, with no Azure setup or dependencies. Everything — frontend, backend, and real-time messaging — works out of the box. This makes it perfect for experimentation, quick demos, or internal prototypes.\n\nBut when you’re ready to **go beyond local**, Azure steps in to take care of scalability, reliability, and lifecycle management — with **no code changes**.\n\n### Why run it on Azure?\n\nDeploying to Azure offers several advantages:\n\n- **Built-in scalability** — Move from a handful of users to thousands of concurrent connections without changing your architecture,\n- **Managed infrastructure** — Azure App Service, Azure Web PubSub, Azure Storage are fully managed services; you don’t manage servers or maintain WebSocket connections,\n- **Security and access control** — Use Azure identity integration for production-grade protection,\n- **Dev-friendly automation** — Provision everything with a single command using [Azure Developer CLI (azd)](https://learn.microsoft.com/azure/developer/azure-developer-cli/overview).\n\nTo deploy the sample app to Azure, you only need one command.\n\n``` azd up ```\n\nEverything — including Azure App Service, Azure Web PubSub and Azure Storage — is provisioned automatically.\n\n### Real-time, managed: Azure Web PubSub\n\nAt the heart of the cloud setup is **Azure Web PubSub**, a fully managed service for building real-time, bi-directional messaging applications using WebSockets. Developers can focus on application logic and leaving infra-related concerns to the service.\n\nIn the AI Chat Demo, Azure Web PubSub powers the **real-time messaging and multi-room architecture**, while LLMs via **GitHub Models** handle the intelligence layer. Specifically, Azure Web PubSub handles:\n\n- **Message broadcasting** across chat rooms,\n- **Group management** *(join, leave, and isolate rooms),*\n- **Event handling** through CloudEvents for flexible server integration,\n- Client negotiation via tokens for **secure, scoped access.**\n\nThis means your chat app can support large numbers of simultaneous users and global traffic — without you managing connection state or scaling infrastructure.\n\n## Next Steps\n\n1. Try the new project scaffold in **AI Toolkit VS Code,**\n2. Explore advanced options in [docs/ADVANCED.md,](http://docs/ADVANCED.md)\n3. Deploy your app with:\n\n``` azd up ```\n\n1. Learn more about [Azure Web PubSub](https://learn.microsoft.com/azure/azure-web-pubsub/)\n\n### Explore, build and scale\n\nThe new AI Toolkit + Azure Web PubSub experience helps developers go from **model exploration** to **real-time AI application** in minutes — no boilerplate, no setup friction.\n\nStart experimenting today and bring your AI chat ideas to life.\n\nUpdated Oct 30, 2025\n\nVersion 1.0\n\n[azure web pubsub](/tag/azure%20web%20pubsub?nodeId=board%3AAppsonAzureBlog)\n\n[web apps](/tag/web%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[kevinguo&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xNjEyNjgyLTU0MzIzM2lBNkRDRTlFMzU3N0U3MzU2?image-dimensions=50x50)](/users/kevinguo/1612682) [kevinguo](/users/kevinguo/1612682) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined November 15, 2022\n\n[View Profile](/users/kevinguo/1612682)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "PubDate": "2025-10-30T04:56:45+00:00",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/build-an-ai-powered-chat-app-in-minutes-with-ai-toolkit/ba-p/4464967",
  "Title": "Build an AI-Powered Chat App in Minutes with AI Toolkit",
  "ProcessedDate": "2025-10-30 05:03:32"
}
