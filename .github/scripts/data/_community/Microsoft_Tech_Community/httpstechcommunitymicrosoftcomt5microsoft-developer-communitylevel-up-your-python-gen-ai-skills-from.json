{
  "Author": "Pamela_Fox",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "PubDate": "2025-10-06T17:46:34+00:00",
  "Tags": [],
  "Title": "Level up your Python Gen AI Skills from our free nine-part YouTube series!",
  "Link": "https://techcommunity.microsoft.com/t5/microsoft-developer-community/level-up-your-python-gen-ai-skills-from-our-free-nine-part/ba-p/4459464",
  "EnhancedContent": "Want to learn how to use generative AI models in your Python applications? We're putting on a series of nine live streams, in both [English](http://aka.ms/PythonAI/series)¬†and¬†[Spanish](http://aka.ms/PythonIA/serie), all about generative AI.\n\nWe'll cover¬†**large language models**,**embedding models**,¬†**vision models**, introduce techniques like **RAG**,¬†**function calling**, and¬†**structured outputs,** and **** show you how to build **Agents and MCP servers.** Plus we'll talk about **AI safety and evaluations**, to make sure all your models and applications are producing safe outputs.\n\n[üîó Register for the entire series.](https://aka.ms/PythonAI/series)\n\nIn addition to the live streams, you can also join a¬†[weekly office hours](https://aka.ms/aipython/oh) in our AI Discord to ask any questions that don't get answered in the chat.\n\nYou can also scroll down to learn about each live stream and register for individual sessions.\n\nSee you in the streams! üëãüèª\n\n## Large Language Models\n\n7 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26292/)\n\nJoin us for the first session in our Python + AI series! In this session, we'll talk about Large Language Models (LLMs), the models that power ChatGPT and GitHub Copilot. We'll use Python to interact with LLMs using popular packages like the OpenAI SDK and Langchain. We'll experiment with prompt engineering and few-shot examples to improve our outputs. We'll also show how to build a full stack app powered by LLMs, and explain the importance of concurrency and streaming for user-facing AI apps.\n\n[## Vector embeddings](https://developer.microsoft.com/en-us/reactor/events/26293/)\n\n8 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26293/)\n\nIn our second session of the Python + AI series, we'll dive into a different kind of model: the vector embedding model. A vector embedding is a way to encode a text or image as an array of floating point numbers. Vector embeddings make it possible to perform similarity search on many kinds of content. In this session, we'll explore different vector embedding models, like the OpenAI text-embedding-3 series, with both visualizations and Python code. We'll compare distance metrics, use quantization to reduce vector size, and try out multimodal embedding models.\n\n[## Retrieval Augmented Generation](https://developer.microsoft.com/en-us/reactor/events/26295/)\n\n9 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26295/)\n\nIn our fourth Python + AI session, we'll explore one of the most popular techniques used with LLMs: Retrieval Augmented Generation. RAG is an approach that sends context to the LLM so that it can provide well-grounded answers for a particular domain. The RAG approach can be used with many kinds of data sources like CSVs, webpages, documents, databases. In this session, we'll walk through RAG flows in Python, starting with a simple flow and culminating in a full-stack RAG application based on Azure AI Search.\n\n[## Vision models](https://developer.microsoft.com/en-us/reactor/events/26294/)\n\n14 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26294/)\n\nOur third stream in the Python + AI series is all about vision models! Vision models are LLMs that can accept both text and images, like GPT 4o and 4o-mini. You can use those models for image captioning, data extraction, question-answering, classification, and more! We'll use Python to send images to vision models, build a basic chat-on-images app, and build a multimodal search engine.\n\n[## Structured outputs](https://developer.microsoft.com/en-us/reactor/events/26296/)\n\n15 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26296/)\n\nIn our fifth stream of the Python + AI series, we'll discover how to get LLMs to output structured responses that adhere to a schema. In Python, all we need to do is define a @dataclass or a Pydantic BaseModel, and we get validated output that meets our needs perfectly. We'll focus on the structured outputs mode available in OpenAI models, but you can use similar techniques with other model providers. Our examples will demonstrate the many ways you can use structured responses, like entity extraction, classification, and agentic workflows.\n\n[## Quality and safety](https://developer.microsoft.com/en-us/reactor/events/26297/)\n\n16 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26297/)\n\nNow that we're more than halfway through our Python + AI series, we're covering a crucial topic: how to use AI safely, and how to evaluate the quality of AI outputs. There are multiple mitigation layers when working with LLMs: the model itself, a safety system on top, the prompting and context, and the application user experience. Our focus will be on Azure tools that make it easier to put safe AI systems into production. We'll show how to configure the Azure AI Content Safety system when working with Azure AI models, and how to handle those errors in Python code. Then we'll use the Azure AI Evaluation SDK to evaluate the safety and quality of the output from our LLM.\n\n[## Tool calling](https://developer.microsoft.com/en-us/reactor/events/26298/)\n\n21 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26298/)\n\nNow that we're more than halfway through our Python + AI series, we're covering a crucial topic: how to use AI safely, and how to evaluate the quality of AI outputs. There are multiple mitigation layers when working with LLMs: the model itself, a safety system on top, the prompting and context, and the application user experience. Our focus will be on Azure tools that make it easier to put safe AI systems into production. We'll show how to configure the Azure AI Content Safety system when working with Azure AI models, and how to handle those errors in Python code. Then we'll use the Azure AI Evaluation SDK to evaluate the safety and quality of the output from our LLM.\n\n[## AI agents](https://developer.microsoft.com/en-us/reactor/events/26299/)\n\n22 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26299/)\n\nFor the penultimate session of our Python + AI series, we're building AI agents! We'll use many of the most popular Python AI agent frameworks: Langgraph, Semantic Kernel, Autogen, Pydantic AI, and more. Our agents will start simple and then ramp up in complexity, demonstrating different architectures like hand-offs, round-robin, supervisor, graphs, and ReAct.\n\n[## Model Context Protocol](https://developer.microsoft.com/en-us/reactor/events/26300/)\n\n23 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26300/)\n\nIn the final session of our Python + AI series, we're diving into the hottest technology of 2025: MCP, Model Context Protocol. This open protocol makes it easy to extend AI agents and chatbots with custom functionality, to make them more powerful and flexible. We'll show how to use the official Python FastMCP SDK to build an MCP server running locally and consume that server from chatbots like GitHub Copilot. Then we'll build our own MCP client to consume the server. Finally, we'll discover how easy it is to point popular AI agent frameworks like Langgraph, Pydantic AI, and Semantic Kernel at MCP servers. With great power comes great responsibility, so we will briefly discuss the many security risks that come with MCP, both as a user and developer.\n\nPublished Oct 06, 2025\n\nVersion 1.0\n\n[agents](/tag/agents?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai](/tag/ai?nodeId=board%3AAzureDevCommunityBlog)\n\n[genai](/tag/genai?nodeId=board%3AAzureDevCommunityBlog)\n\n[learning](/tag/learning?nodeId=board%3AAzureDevCommunityBlog)\n\n[pamela fox](/tag/pamela%20fox?nodeId=board%3AAzureDevCommunityBlog)\n\n[python](/tag/python?nodeId=board%3AAzureDevCommunityBlog)\n\n[rag](/tag/rag?nodeId=board%3AAzureDevCommunityBlog)\n\n[retrieval augmented generation](/tag/retrieval%20augmented%20generation?nodeId=board%3AAzureDevCommunityBlog)\n\n[youtube](/tag/youtube?nodeId=board%3AAzureDevCommunityBlog)\n\n[!\\[Pamela_Fox&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xNjA0MDc4LTQxODI4MWk5MjkyQjFBMEVGOUE5NkM5?image-dimensions=50x50)](/users/pamela_fox/1604078) [Pamela_Fox](/users/pamela_fox/1604078) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined November 08, 2022\n\n[View Profile](/users/pamela_fox/1604078)\n\n/category/azure/blog/azuredevcommunityblog [Microsoft Developer Community Blog](/category/azure/blog/azuredevcommunityblog) Follow this blog board to get notified when there's new activity",
  "Description": "Want to learn how to use generative AI models in your Python applications? We're putting on a series of nine live streams, in both [English](http://aka.ms/PythonAI/series) and [Spanish](http://aka.ms/PythonIA/serie), all about generative AI.\n\nWe'll cover **large language models**, **embedding models**, **vision models**, introduce techniques like **RAG**, **function calling**, and **structured outputs,** and **** show you how to build **Agents and MCP servers.** Plus we'll talk about **AI safety and evaluations**, to make sure all your models and applications are producing safe outputs.\n\n[üîó Register for the entire series.](https://aka.ms/PythonAI/series)\n\nIn addition to the live streams, you can also join a [weekly office hours](https://aka.ms/aipython/oh) in our AI Discord to ask any questions that don't get answered in the chat.\n\nYou can also scroll down to learn about each live stream and register for individual sessions.\n\nSee you in the streams! üëãüèª\n\n## Large Language Models\n\n7 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26292/)\n\nJoin us for the first session in our Python + AI series! In this session, we'll talk about Large Language Models (LLMs), the models that power ChatGPT and GitHub Copilot. We'll use Python to interact with LLMs using popular packages like the OpenAI SDK and Langchain. We'll experiment with prompt engineering and few-shot examples to improve our outputs. We'll also show how to build a full stack app powered by LLMs, and explain the importance of concurrency and streaming for user-facing AI apps.\n\n[## Vector embeddings](https://developer.microsoft.com/en-us/reactor/events/26293/)\n\n8 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26293/)\n\nIn our second session of the Python + AI series, we'll dive into a different kind of model: the vector embedding model. A vector embedding is a way to encode a text or image as an array of floating point numbers. Vector embeddings make it possible to perform similarity search on many kinds of content. In this session, we'll explore different vector embedding models, like the OpenAI text-embedding-3 series, with both visualizations and Python code. We'll compare distance metrics, use quantization to reduce vector size, and try out multimodal embedding models.\n\n[## Retrieval Augmented Generation](https://developer.microsoft.com/en-us/reactor/events/26295/)\n\n9 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26295/)\n\nIn our fourth Python + AI session, we'll explore one of the most popular techniques used with LLMs: Retrieval Augmented Generation. RAG is an approach that sends context to the LLM so that it can provide well-grounded answers for a particular domain. The RAG approach can be used with many kinds of data sources like CSVs, webpages, documents, databases. In this session, we'll walk through RAG flows in Python, starting with a simple flow and culminating in a full-stack RAG application based on Azure AI Search.\n\n[## Vision models](https://developer.microsoft.com/en-us/reactor/events/26294/)\n\n14 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26294/)\n\nOur third stream in the Python + AI series is all about vision models! Vision models are LLMs that can accept both text and images, like GPT 4o and 4o-mini. You can use those models for image captioning, data extraction, question-answering, classification, and more! We'll use Python to send images to vision models, build a basic chat-on-images app, and build a multimodal search engine.\n\n[## Structured outputs](https://developer.microsoft.com/en-us/reactor/events/26296/)\n\n15 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26296/)\n\nIn our fifth stream of the Python + AI series, we'll discover how to get LLMs to output structured responses that adhere to a schema. In Python, all we need to do is define a @dataclass or a Pydantic BaseModel, and we get validated output that meets our needs perfectly. We'll focus on the structured outputs mode available in OpenAI models, but you can use similar techniques with other model providers. Our examples will demonstrate the many ways you can use structured responses, like entity extraction, classification, and agentic workflows.\n\n[## Quality and safety](https://developer.microsoft.com/en-us/reactor/events/26297/)\n\n16 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26297/)\n\nNow that we're more than halfway through our Python + AI series, we're covering a crucial topic: how to use AI safely, and how to evaluate the quality of AI outputs. There are multiple mitigation layers when working with LLMs: the model itself, a safety system on top, the prompting and context, and the application user experience. Our focus will be on Azure tools that make it easier to put safe AI systems into production. We'll show how to configure the Azure AI Content Safety system when working with Azure AI models, and how to handle those errors in Python code. Then we'll use the Azure AI Evaluation SDK to evaluate the safety and quality of the output from our LLM.\n\n[## Tool calling](https://developer.microsoft.com/en-us/reactor/events/26298/)\n\n21 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26298/)\n\nNow that we're more than halfway through our Python + AI series, we're covering a crucial topic: how to use AI safely, and how to evaluate the quality of AI outputs. There are multiple mitigation layers when working with LLMs: the model itself, a safety system on top, the prompting and context, and the application user experience. Our focus will be on Azure tools that make it easier to put safe AI systems into production. We'll show how to configure the Azure AI Content Safety system when working with Azure AI models, and how to handle those errors in Python code. Then we'll use the Azure AI Evaluation SDK to evaluate the safety and quality of the output from our LLM.\n\n[## AI agents](https://developer.microsoft.com/en-us/reactor/events/26299/)\n\n22 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26299/)\n\nFor the penultimate session of our Python + AI series, we're building AI agents! We'll use many of the most popular Python AI agent frameworks: Langgraph, Semantic Kernel, Autogen, Pydantic AI, and more. Our agents will start simple and then ramp up in complexity, demonstrating different architectures like hand-offs, round-robin, supervisor, graphs, and ReAct.\n\n[## Model Context Protocol](https://developer.microsoft.com/en-us/reactor/events/26300/)\n\n23 October, 2025 | 5:00 PM - 6:00 PM (UTC) Coordinated Universal Time\n\n[Register for the stream on Reactor](https://developer.microsoft.com/en-us/reactor/events/26300/)\n\nIn the final session of our Python + AI series, we're diving into the hottest technology of 2025: MCP, Model Context Protocol. This open protocol makes it easy to extend AI agents and chatbots with custom functionality, to make them more powerful and flexible. We'll show how to use the official Python FastMCP SDK to build an MCP server running locally and consume that server from chatbots like GitHub Copilot. Then we'll build our own MCP client to consume the server. Finally, we'll discover how easy it is to point popular AI agent frameworks like Langgraph, Pydantic AI, and Semantic Kernel at MCP servers. With great power comes great responsibility, so we will briefly discuss the many security risks that come with MCP, both as a user and developer.",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "ProcessedDate": "2025-10-06 18:05:18",
  "OutputDir": "_community",
  "FeedName": "Microsoft Tech Community"
}
