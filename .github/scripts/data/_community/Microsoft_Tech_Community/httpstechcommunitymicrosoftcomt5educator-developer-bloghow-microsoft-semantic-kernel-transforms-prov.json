{
  "ProcessedDate": "2025-08-13 07:06:40",
  "Tags": [],
  "Link": "https://techcommunity.microsoft.com/t5/educator-developer-blog/how-microsoft-semantic-kernel-transforms-proven-workflows-into/ba-p/4434731",
  "Title": "How Microsoft Semantic Kernel Transforms Proven Workflows into Intelligent Agents",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Author": "Abdulhamid_Onawole",
  "EnhancedContent": "Most developers today face a common challenge when integrating AI into their applications: **the gap between natural language prompts and actual code execution**. While services like OpenAI's ChatGPT excel at generating responses, they can't directly interact with your existing systems, databases, or business logic. You're left building complex orchestration layers, managing function calls manually, and creating brittle workflows that break when requirements change.\n\n**Microsoft Semantic Kernel** changes this paradigm entirely.\n\nUnlike traditional LLM integrations where you send a prompt and receive text, Semantic Kernel acts as an **AI orchestration layer** that bridges natural language with your existing codebase. Semantic Kernel intelligently decides which of your trusted functions to execute, chains your reliable workflows together automatically, and handles the complete workflow from user intent to business outcome using your proven business logic rather than asking the LLM to handle complex tasks with the risk of hallucinating solutions.\n\n**What Makes Semantic Kernel Different**\n\n###### The Traditional (Novice) LLM Integration Problem\n\nMeet Kemi, a data analyst who has spent months perfecting a Python script that generates exactly the sales visualizations her team needs. Her workflow is reliable: run the script, review the charts, write insights based on patterns she knows matter to the business, and deliver a concise report.\n\nExcited about AI's potential, Kemi decides to \"upgrade\" her process with ChatGPT. She uploads her sales data and asks the model to create visualizations and analysis. The LLM responds by generating an entirely new script with a dozen different chart types - many irrelevant to her business needs. She then has to upload the generated images back to the model for analysis, hoping it will provide accurate insights.\n\n**The result?** Instead of streamlining her proven workflow, Kemi now has:\n\n- **Unreliable outputs**: The LLM generates different charts each time, some irrelevant to business decisions\n- **Loss of domain expertise**: Her carefully crafted analysis logic is replaced by generic AI interpretations\n- **Broken workflow**: What was once a single script is now a multi-step process of uploading, generating, downloading, and re-uploading\n- **Reduced confidence**: She can't trust the AI's business recommendations the way she trusted her own tested methodology\n- **More complexity, not less**: Her \"AI upgrade\" created more steps and uncertainty than her original manual process\n\nKemi's experience reflects a common pitfall: **replacing proven business logic with unpredictable LLM generation** rather than enhancing existing workflows with intelligent orchestration.\n\nA Better Approach: Semantic Kernel Integration\n\nIn this article, I present a better approach that solves Kemi's problem entirely. Instead of replacing her proven workflows with unpredictable AI generation, we'll show how **Microsoft Semantic Kernel** transforms her existing script into an intelligent agent that preserves her business logic while adding natural language control.\n\nBy the end of this article, you'll have a solid grasp of how to integrate Semantic Kernel into your own workflows - whether that's connecting weather APIs for automated marketing campaigns, database queries for sales reporting, or Teams notifications for development task management. The principles you'll learn here apply to automating any specific marketing, sales, or development task where you want AI orchestration without sacrificing the reliability of your existing business logic.\n\n## The Semantic Kernel Transformation\n\nLet's see how Semantic Kernel solves Kemi's workflow problem by transforming her existing script into an intelligent agent that preserves her business logic while adding natural language orchestration.\n\n## The Complete Example\n\n- **Before**: [Kemi's Original Script](https://github.com/HamidOna/semantic-kernel-business-agent/blob/master/basic_data_analysis.py)\n- **After**: [Smart Business Agent](https://github.com/HamidOna/semantic-kernel-business-agent/blob/master/smart_business_agent.py)\n- **Full Repository**: [semantic-kernel-business-agent](https://github.com/HamidOna/semantic-kernel-business-agent)\n\n## Kemi's Original Functions\n\nKemi's script contains two core functions that she's refined over months:\n\n- **get\\_sales\\_summary()**: Calculates total sales, daily averages, and key metrics\n- **create\\_basic\\_chart()**: Generates a reliable sales trend visualization\n\nThese functions work perfectly for her needs, but require manual orchestration and individual execution.\n\n## Setting Up the Foundation\n\nFirst, Kemi needs to install the required libraries and set up her OpenAI credentials:\n\n``` pip install semantic-kernel pandas matplotlib python-dotenv ```\n\nShe creates a .env file to securely store her OpenAI API key:\n\n``` OPENAI_API_KEY=your-openai-api-key-here ```\n\n*Get your OpenAI API key from [platform.openai.com](https://platform.openai.com/) â†’ API Keys*\n\n## Step 1: From Manual Function Calls to Kernel Functions\n\nIn her original script, Kemi had to manually orchestrate everything:\n\n```\n# From basic_data_analysis.py - Kemi's manual workflow\nanalyzer = DataAnalyzer() print(analyzer.get_sales_summary()) # She manually calls this analyzer.create_basic_chart() # Then manually calls this ```\n\nWith Semantic Kernel, she transforms these exact same functions into AI-discoverable capabilities:\n\n``` from semantic_kernel.functions import kernel_function from typing import Annotated\n\n@kernel_function( description=\"Get sales performance summary with total sales, averages, and trends\", name=\"get_sales_summary\" ) def get_sales_summary(self) -> Annotated[str, \"Sales summary with key metrics\"]:\n# Kemi's exact same trusted business logic - unchanged!\ntotal_sales = self.sales_data['sales'].sum() avg_daily_sales = self.sales_data['sales'].mean() return f\"Total: ${total_sales:,}, Daily Avg: ${avg_daily_sales:.2f}\" ```\n\nShe's not replacing her proven logic with AI generation - she's making her existing, reliable functions available to intelligent orchestration.\n\n## Step 2: Enhancing Her Chart Function with Smart Parameters\n\nKemi's original create\\_basic\\_chart() only made one type of chart. With SK, she can enhance it to be more versatile while keeping the core logic:\n\n``` ( description=\"Create and save a sales performance chart visualization\", name=\"create_sales_chart\" ) def create_sales_chart( self, chart_type: Annotated[str, \"Type of chart: 'trend', 'regional', or 'product'\"] = \"trend\" ) -> Annotated[str, \"Confirmation that chart was created\"]:\n# Kemi's same matplotlib logic, now with intelligent chart selection\nplt.figure(figsize=(12, 8))\n\nif chart_type == \"trend\": plt.plot(self.sales_data['date'], self.sales_data['sales'], marker='o') plt.title('Sales Trend Over Time', fontsize=16)\n# ... rest of her charting logic\n```\n\n## Step 3: Adding New Capabilities She Always Wanted\n\nNow she can add functions she never had time to build manually, like automated insights and report sending:\n\n``` ( description=\"Send performance report via email to team\", name=\"send_report\" ) def send_report(self, recipient: Annotated[str, \"Email address\"]) -> Annotated[str, \"Confirmation\"]:\n# For now, simulated - but she could easily integrate real email here\nreturn f\"ðŸ“§ Performance report sent to {recipient}\" ```\n\n## Step 4: Creating the Intelligent Agent\n\nHere's where the magic happens - connecting her functions to Semantic Kernel:\n\n``` from semantic_kernel import Kernel from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion from semantic_kernel.connectors.ai import FunctionChoiceBehavior from dotenv import load_dotenv\n\nload_dotenv() # Load her OpenAI key\n\nclass SmartBusinessAgent: def __init__(self):\n# Initialize the kernel\nself.kernel = Kernel()\n\n# Connect to OpenAI\nself.kernel.add_service( OpenAIChatCompletion( service_id=\"business_agent\", api_key=os.getenv(\"OPENAI_API_KEY\"), ai_model_id=\"gpt-4o-mini\" ) )\n\n# Register Kemi's functions as AI-accessible tools\nself.kernel.add_plugin(SmartBusinessPlugin(), plugin_name=\"business\")\n\n# Enable automatic function orchestration\nself.execution_settings = OpenAIChatPromptExecutionSettings( function_choice_behavior=FunctionChoiceBehavior.Auto() ) ```\n\n## Step 5: The Natural Language Interface\n\nNow Kemi can interact with her proven workflows using natural language:\n\n``` async def process_request(self, user_request: str) -> str: result = await self.kernel.invoke_prompt( prompt=f\"You are a business intelligence agent. You can analyze sales data, create charts, generate insights, and send reports.\\n\\nRequest: {user_request}\", arguments=KernelArguments(settings=self.execution_settings) ) return str(result) ```\n\n## The Transformation in Action\n\n**Before** - Kemi's manual, step-by-step process:\n\n``` analyzer = DataAnalyzer() summary = analyzer.get_sales_summary() # She decides to call this chart = analyzer.create_basic_chart() # Then she decides to call this\n# Then she manually writes insights and sends emails\n```\n\n**After** - Intelligent orchestration of her same functions:\n\n``` agent = SmartBusinessAgent() response = await agent.process_request( \"Analyze our sales performance, create relevant charts, and email the full report to sarah@company.com\" )\n# SK automatically calls: get_sales_summary() â†’ create_sales_chart(\"trend\") â†’\n# create_sales_chart(\"regional\") â†’ get_business_insights() â†’ send_report(\"sarah@company.com\")\n```\n\nprompt and model's responseprompt and model's response\n\n**The breakthrough**: Kemi keeps her trusted business logic intact while gaining an intelligent interface that can understand complex requests, automatically determine which of her functions to call, and handle multi-step workflows - all while using her proven, reliable analysis methods instead of unpredictable AI generation.\n\nThis is the core power of Semantic Kernel: **enhancing existing workflows with AI orchestration rather than replacing proven business logic with risky hallucination-prone generation**.\n\nWhether you're working with weather APIs for marketing automation, database queries for sales reporting, or Teams notifications for development workflows, these same patterns apply. You can keep your proven logic and enhance with AI orchestration.\n\n## Try It Yourself\n\nReady to transform your own workflows? Here's how to get started:\n\n### 1. Clone and Run the Complete Example\n\n``` git clone https://github.com/your-username/semantic-kernel-business-agent cd semantic-kernel-business-agent pip install -r requirements.txt ```\n\n### 2. Set Up Your Environment\n\n```\n# Add your OpenAI API key\ncp .env.example .env\n# Edit .env and add: OPENAI_API_KEY=your-key-here\n```\n\n### 3. Experience the Transformation\n\n```\n# Run Kemi's original manual script\npython basic_data_analysis.py\n\n# Then run the intelligent agent\npython smart_business_agent.py ```\n\n### 4. Experiment with Natural Language Requests\n\nTry these prompts with the smart agent:\n\n- \"Give me a comprehensive sales analysis with multiple chart types\"\n- \"Create regional performance charts and send insights to my email\"\n- \"What trends should we focus on for next quarter's strategy?\"\n\nWatch how Semantic Kernel automatically orchestrates Kemi's trusted functions to fulfill complex, multi-step requests.\n\n## Next Steps: Adapt to Your Workflow\n\nTake your own scripts and apply the same transformation:\n\n1. **Identify your core functions** (like Kemi's get\\_sales\\_summary() and create\\_basic\\_chart())\n2. **Add â€‹ decorators** with clear descriptions\n3. **Create your agent class** connecting to your preferred LLM\n4. **Test with natural language requests** that combine multiple functions\n\nThe full repository includes additional examples and documentation to help you extend these concepts to your specific use cases.\n\n**The goal isn't to replace your expertise with AI - it's to make your expertise accessible through intelligent, natural language orchestration.**\n\nStart with the working example, then gradually transform your own workflows. You'll discover that Semantic Kernel doesn't just automate tasks - it amplifies your existing capabilities while keeping you in control of the business logic that matters.\n\n#### Further Reading\n\n- [Introduction to Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/)\n\nUpdated Jul 19, 2025\n\nVersion 1.0\n\n[ai](/tag/ai?nodeId=board%3AEducatorDeveloperBlog)\n\n[LangChain](/tag/LangChain?nodeId=board%3AEducatorDeveloperBlog)\n\n[semantic kernel](/tag/semantic%20kernel?nodeId=board%3AEducatorDeveloperBlog)\n\n[!\\[Abdulhamid_Onawole&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yNTE5NjM1LTU5MTkzNGk1Q0E5QjI4OEI3QjdDMDc0?image-dimensions=50x50)](/users/abdulhamid_onawole/2519635) [Abdulhamid_Onawole](/users/abdulhamid_onawole/2519635) Copper Contributor\n\nJoined June 12, 2024\n\n[View Profile](/users/abdulhamid_onawole/2519635)\n\n/category/educationsector/blog/educatordeveloperblog [Educator Developer Blog](/category/educationsector/blog/educatordeveloperblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Community",
  "FeedName": "Microsoft Tech Community",
  "Description": "Most developers today face a common challenge when integrating AI into their applications: **the gap between natural language prompts and actual code execution**. While services like OpenAI's ChatGPT excel at generating responses, they can't directly interact with your existing systems, databases, or business logic. You're left building complex orchestration layers, managing function calls manually, and creating brittle workflows that break when requirements change.\n\n**Microsoft Semantic Kernel** changes this paradigm entirely.\n\nUnlike traditional LLM integrations where you send a prompt and receive text, Semantic Kernel acts as an **AI orchestration layer** that bridges natural language with your existing codebase. Semantic Kernel intelligently decides which of your trusted functions to execute, chains your reliable workflows together automatically, and handles the complete workflow from user intent to business outcome using your proven business logic rather than asking the LLM to handle complex tasks with the risk of hallucinating solutions.\n\n**What Makes Semantic Kernel Different**\n\n###### The Traditional (Novice) LLM Integration Problem\n\nMeet Kemi, a data analyst who has spent months perfecting a Python script that generates exactly the sales visualizations her team needs. Her workflow is reliable: run the script, review the charts, write insights based on patterns she knows matter to the business, and deliver a concise report.\n\nExcited about AI's potential, Kemi decides to \"upgrade\" her process with ChatGPT. She uploads her sales data and asks the model to create visualizations and analysis. The LLM responds by generating an entirely new script with a dozen different chart types - many irrelevant to her business needs. She then has to upload the generated images back to the model for analysis, hoping it will provide accurate insights.\n\n**The result?** Instead of streamlining her proven workflow, Kemi now has:\n\n- **Unreliable outputs**: The LLM generates different charts each time, some irrelevant to business decisions\n- **Loss of domain expertise**: Her carefully crafted analysis logic is replaced by generic AI interpretations\n- **Broken workflow**: What was once a single script is now a multi-step process of uploading, generating, downloading, and re-uploading\n- **Reduced confidence**: She can't trust the AI's business recommendations the way she trusted her own tested methodology\n- **More complexity, not less**: Her \"AI upgrade\" created more steps and uncertainty than her original manual process\n\nKemi's experience reflects a common pitfall: **replacing proven business logic with unpredictable LLM generation** rather than enhancing existing workflows with intelligent orchestration.\n\nA Better Approach: Semantic Kernel Integration\n\nIn this article, I present a better approach that solves Kemi's problem entirely. Instead of replacing her proven workflows with unpredictable AI generation, we'll show how **Microsoft Semantic Kernel** transforms her existing script into an intelligent agent that preserves her business logic while adding natural language control.\n\nBy the end of this article, you'll have a solid grasp of how to integrate Semantic Kernel into your own workflows - whether that's connecting weather APIs for automated marketing campaigns, database queries for sales reporting, or Teams notifications for development task management. The principles you'll learn here apply to automating any specific marketing, sales, or development task where you want AI orchestration without sacrificing the reliability of your existing business logic.\n\n## The Semantic Kernel Transformation\n\nLet's see how Semantic Kernel solves Kemi's workflow problem by transforming her existing script into an intelligent agent that preserves her business logic while adding natural language orchestration.\n\n## The Complete Example\n\n- **Before**: [Kemi's Original Script](https://github.com/HamidOna/semantic-kernel-business-agent/blob/master/basic_data_analysis.py)\n- **After**: [Smart Business Agent](https://github.com/HamidOna/semantic-kernel-business-agent/blob/master/smart_business_agent.py)\n- **Full Repository**: [semantic-kernel-business-agent](https://github.com/HamidOna/semantic-kernel-business-agent)\n\n## Kemi's Original Functions\n\nKemi's script contains two core functions that she's refined over months:\n\n- **get\\_sales\\_summary()**: Calculates total sales, daily averages, and key metrics\n- **create\\_basic\\_chart()**: Generates a reliable sales trend visualization\n\nThese functions work perfectly for her needs, but require manual orchestration and individual execution.\n\n## Setting Up the Foundation\n\nFirst, Kemi needs to install the required libraries and set up her OpenAI credentials:\n\n- pip install semantic-kernel pandas matplotlib python-dotenv\n\nShe creates a .env file to securely store her OpenAI API key:\n- OPENAI\\_API\\_KEY=your-openai-api-key-here\n\n*Get your OpenAI API key from [platform.openai.com](https://platform.openai.com/) â†’ API Keys*\n\n## Step 1: From Manual Function Calls to Kernel Functions\n\nIn her original script, Kemi had to manually orchestrate everything:\n- # From basic\\_data\\_analysis.py - Kemi's manual workflow\nanalyzer = DataAnalyzer() print(analyzer.get\\_sales\\_summary()) # She manually calls this analyzer.create\\_basic\\_chart() # Then manually calls this\n\nWith Semantic Kernel, she transforms these exact same functions into AI-discoverable capabilities:\n- from semantic\\_kernel.functions import kernel\\_function\nfrom typing import Annotated\n\n@kernel\\_function( description=\"Get sales performance summary with total sales, averages, and trends\", name=\"get\\_sales\\_summary\" ) def get\\_sales\\_summary(self) -> Annotated[str, \"Sales summary with key metrics\"]:\n# Kemi's exact same trusted business logic - unchanged!\ntotal\\_sales = self.sales\\_data['sales'].sum() avg\\_daily\\_sales = self.sales\\_data['sales'].mean() return f\"Total: ${total\\_sales:,}, Daily Avg: ${avg\\_daily\\_sales:.2f}\"\n\nShe's not replacing her proven logic with AI generation - she's making her existing, reliable functions available to intelligent orchestration.\n\n## Step 2: Enhancing Her Chart Function with Smart Parameters\n\nKemi's original create\\_basic\\_chart() only made one type of chart. With SK, she can enhance it to be more versatile while keeping the core logic:\n- (\ndescription=\"Create and save a sales performance chart visualization\", name=\"create\\_sales\\_chart\" ) def create\\_sales\\_chart( self, chart\\_type: Annotated[str, \"Type of chart: 'trend', 'regional', or 'product'\"] = \"trend\" ) -> Annotated[str, \"Confirmation that chart was created\"]:\n# Kemi's same matplotlib logic, now with intelligent chart selection\nplt.figure(figsize=(12, 8))\n\nif chart\\_type == \"trend\": plt.plot(self.sales\\_data['date'], self.sales\\_data['sales'], marker='o') plt.title('Sales Trend Over Time', fontsize=16)\n# ... rest of her charting logic\n\n## Step 3: Adding New Capabilities She Always Wanted\n\nNow she can add functions she never had time to build manually, like automated insights and report sending:\n- (\ndescription=\"Send performance report via email to team\", name=\"send\\_report\" ) def send\\_report(self, recipient: Annotated[str, \"Email address\"]) -> Annotated[str, \"Confirmation\"]:\n# For now, simulated - but she could easily integrate real email here\nreturn f\"ðŸ“§ Performance report sent to {recipient}\"\n\n## Step 4: Creating the Intelligent Agent\n\nHere's where the magic happens - connecting her functions to Semantic Kernel:\n- from semantic\\_kernel import Kernel\nfrom semantic\\_kernel.connectors.ai.open\\_ai import OpenAIChatCompletion from semantic\\_kernel.connectors.ai import FunctionChoiceBehavior from dotenv import load\\_dotenv\n\nload\\_dotenv() # Load her OpenAI key\n\nclass SmartBusinessAgent: def \\_\\_init\\_\\_(self):\n# Initialize the kernel\nself.kernel = Kernel()\n\n# Connect to OpenAI\nself.kernel.add\\_service( OpenAIChatCompletion( service\\_id=\"business\\_agent\", api\\_key=os.getenv(\"OPENAI\\_API\\_KEY\"), ai\\_model\\_id=\"gpt-4o-mini\" ) )\n\n# Register Kemi's functions as AI-accessible tools\nself.kernel.add\\_plugin(SmartBusinessPlugin(), plugin\\_name=\"business\")\n\n# Enable automatic function orchestration\nself.execution\\_settings = OpenAIChatPromptExecutionSettings( function\\_choice\\_behavior=FunctionChoiceBehavior.Auto() )\n\n## Step 5: The Natural Language Interface\n\nNow Kemi can interact with her proven workflows using natural language:\n- async def process\\_request(self, user\\_request: str) -> str:\nresult = await self.kernel.invoke\\_prompt( prompt=f\"You are a business intelligence agent. You can analyze sales data, create charts, generate insights, and send reports.\\n\\nRequest: {user\\_request}\", arguments=KernelArguments(settings=self.execution\\_settings) ) return str(result)\n\n## The Transformation in Action\n\n**Before** - Kemi's manual, step-by-step process:\n- analyzer = DataAnalyzer()\nsummary = analyzer.get\\_sales\\_summary() # She decides to call this chart = analyzer.create\\_basic\\_chart() # Then she decides to call this\n# Then she manually writes insights and sends emails\n\n**After** - Intelligent orchestration of her same functions:\n- agent = SmartBusinessAgent()\nresponse = await agent.process\\_request( \"Analyze our sales performance, create relevant charts, and email the full report to sarah@company.com\" )\n# SK automatically calls: get\\_sales\\_summary() â†’ create\\_sales\\_chart(\"trend\") â†’\n# create\\_sales\\_chart(\"regional\") â†’ get\\_business\\_insights() â†’ send\\_report(\"sarah@company.com\")\n\n![]()prompt and model's response![]()prompt and model's response![]()![]()\n\n**The breakthrough**: Kemi keeps her trusted business logic intact while gaining an intelligent interface that can understand complex requests, automatically determine which of her functions to call, and handle multi-step workflows - all while using her proven, reliable analysis methods instead of unpredictable AI generation.\n\nThis is the core power of Semantic Kernel: **enhancing existing workflows with AI orchestration rather than replacing proven business logic with risky hallucination-prone generation**.\n\nWhether you're working with weather APIs for marketing automation, database queries for sales reporting, or Teams notifications for development workflows, these same patterns apply. You can keep your proven logic and enhance with AI orchestration.\n\n## Try It Yourself\n\nReady to transform your own workflows? Here's how to get started:\n\n### 1. Clone and Run the Complete Example\n- git clone https://github.com/your-username/semantic-kernel-business-agent\ncd semantic-kernel-business-agent pip install -r requirements.txt\n\n### 2. Set Up Your Environment\n- # Add your OpenAI API key\ncp .env.example .env\n# Edit .env and add: OPENAI\\_API\\_KEY=your-key-here\n\n### 3. Experience the Transformation\n- # Run Kemi's original manual script\npython basic\\_data\\_analysis.py\n\n# Then run the intelligent agent\npython smart\\_business\\_agent.py\n\n### 4. Experiment with Natural Language Requests\n\nTry these prompts with the smart agent:\n\n- \"Give me a comprehensive sales analysis with multiple chart types\"\n- \"Create regional performance charts and send insights to my email\"\n- \"What trends should we focus on for next quarter's strategy?\"\n\nWatch how Semantic Kernel automatically orchestrates Kemi's trusted functions to fulfill complex, multi-step requests.\n\n## Next Steps: Adapt to Your Workflow\n\nTake your own scripts and apply the same transformation:\n\n1. **Identify your core functions** (like Kemi's get\\_sales\\_summary() and create\\_basic\\_chart())\n2. **Add â€‹ decorators** with clear descriptions\n3. **Create your agent class** connecting to your preferred LLM\n4. **Test with natural language requests** that combine multiple functions\n\nThe full repository includes additional examples and documentation to help you extend these concepts to your specific use cases.\n\n**The goal isn't to replace your expertise with AI - it's to make your expertise accessible through intelligent, natural language orchestration.**\n\nStart with the working example, then gradually transform your own workflows. You'll discover that Semantic Kernel doesn't just automate tasks - it amplifies your existing capabilities while keeping you in control of the business logic that matters.\n\n#### Further Reading\n\n- [Introduction to Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/)",
  "PubDate": "2025-08-13T07:00:00+00:00"
}
