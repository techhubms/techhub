{
  "Author": "mmhangami",
  "Link": "https://techcommunity.microsoft.com/t5/microsoft-developer-community/langchain-v1-is-now-generally-available/ba-p/4462159",
  "ProcessedDate": "2025-10-17 08:04:21",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Tags": [],
  "PubDate": "2025-10-17T07:25:12+00:00",
  "EnhancedContent": "## With Day 1 support for Azure AI Foundry and Associated Azure Services\n\nToday **LangChain v1** officially launches and marks a new era for the popular AI agent library. The new version ushers in a more opinionated, streamlined, and extensible foundation for building agentic LLM applications. In this post we'll breakdown of what’s new, what changed, and what “general availability” means in practice.\n\nJoin Microsoft Developer Advocates, Marlene Mhangami and Yohan Lasorsa, to see live demos of the new API and find out more about what JavaScript and Python developers need to know about v1. **Register for this event [here](https://developer.microsoft.com/en-us/reactor/events/26481/?wt.mc_id=blog_26481_webpage_reactor).**\n\n****\n\n## Why v1? The Motivation Behind the Redesign\n\nThe number of abstractions in LangChain had grown over the years to include chains, agents, tools, wrappers, prompt helpers and more, which, while powerful, introduced complexity and fragmentation. As model APIs evolve (multimodal inputs, richer structured output, tool-calling semantics), LangChain needed a cleaner, more consistent core to ensure production ready stability.\n\nIn v1:\n\n- All existing **chains** and **agent abstractions** in the old LangChain are deprecated; they are replaced by a **single high-level agent abstraction** built on **LangGraph** internals.\n- LangGraph becomes the foundational runtime for durable, stateful, orchestrated execution. LangChain now emphasizes being the “fast path to agents” that doesn’t hide but builds upon LangGraph.\n- The internal message format has been upgraded to support **standard content blocks** (e.g. text, reasoning, citations, tool calls) across model providers, decoupling “content” from raw strings.\n- Namespace cleanup: the langchain package now focuses tightly on core abstractions (agents, models, messages, tools), while legacy patterns are moved into langchain-classic (or equivalents).\n\n## What’s New & Noteworthy for Developers\n\nHere are key changes developers should pay attention to:\n\n### 1. create\\_agent becomes the default API\n\nThe create\\_agent function is now the idiomatic way to spin up agents in v1. It replaces older constructs (e.g. create\\_react\\_agent) with a clearer, more modular API that is middleware-centric. You can now compose middleware around model calls, tool calls, before/after hooks, error handling, etc.\n\n### 2. Standard content blocks & normalized message model\n\nResponses from models are no longer opaque strings. Instead, they carry structured content\\_blocks which classify parts of the output (e.g. “text”, “reasoning”, “citation”, “tool\\_call”). If needed for backward compatibility or client serialization, you can **opt in** to serializing those blocks back into the .content field by setting output\\_version=\"v1\".\n\n### 3. Multimodal and richer model inputs / outputs\n\nLangChain now supports more than just text-based interactions. Models can accept and return files, images, video, etc., and the message format reflects this flexibility. This upgrade prepares us well for the next generation of models with mixed modalities (vision, audio, etc.).\n\n### 4. Middleware hooks, runtime context, and finer control\n\nBecause create\\_agent is designed as a pluggable pipeline, developers can now inject logic before/after model calls, tool calls, error recoveries, fallback strategies, request transformations, and more. New middleware such as **retry**, **fallback**, **call limits**, and **context editing** have been added. The notion of a **runtime and context** object accompanies each agent execution, making it easier to carry state or metadata through the pipeline.\n\n### 5. Simplified, leaner namespace & migration path\n\nMany formerly top-level modules or helper classes have been removed or relocated to langchain-classic (or similarly stamped “legacy”) to declutter the main API surface. A [migration guide](http://LangChain%20Docs) is available to help projects transition from v0 to v1. While v1 is now the main line, older v0 is still documented and maintained for compatibility.\n\n## What “General Availability” Means (and Doesn’t)\n\n- v1 is **production-ready**, after months of testing the alpha version\n- The stable v0 release line remains supported for those unwilling or unable to migrate immediately.\n- Breaking changes in public APIs will be accompanied by version bumps (i.e. minor version increments) and deprecation notices.\n- The roadmap anticipates minor versions every 2–3 months (with patch releases more frequently).\n- Because the field of LLM applications is evolving rapidly, the team expects continued iterations in v1—even in GA mode—with users encouraged to surface feedback, file issues, and adopt the migration path. (This is in line with the philosophy stated in docs.)\n\n## Developer Callouts & Suggested Steps\n\nHere are practical tips to get developers onboard:\n\n1. **Try the new API Now!**\nLangChain Azure AI and Azure OpenAI have migrated to LangChain v1 and are ready to test! Try out our getting started sample here. Learn more about using LangChain and Azure AI:\n1. Python: [https://docs.langchain.com/oss/python/integrations/providers/azure_ai](https://docs.langchain.com/oss/python/integrations/providers/azure_ai)\n2. JavaScript: [https://docs.langchain.com/oss/javascript/integrations/providers/microsoft](https://docs.langchain.com/oss/javascript/integrations/providers/microsoft)\n2. **Join us for a Live Stream on Wednesday 22 October 2025**\nJoin Microsoft Developer Advocates Marlene Mhangami and Yohan Lasorsa for a livestream this Wednesday to see live demos and find out more about what JavaScript and Python developers need to know about v1. Register for this event [here](https://developer.microsoft.com/en-us/reactor/events/26481/?wt.mc_id=blog_26481_webpage_reactor).\n\nUpdated Oct 17, 2025\n\nVersion 3.0\n\n[agents](/tag/agents?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai](/tag/ai?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai foundry](/tag/ai%20foundry?nodeId=board%3AAzureDevCommunityBlog)\n\n[azure](/tag/azure?nodeId=board%3AAzureDevCommunityBlog)\n\n[azure ai foundry](/tag/azure%20ai%20foundry?nodeId=board%3AAzureDevCommunityBlog)\n\n[best practices](/tag/best%20practices?nodeId=board%3AAzureDevCommunityBlog)\n\n[developer](/tag/developer?nodeId=board%3AAzureDevCommunityBlog)\n\n[python](/tag/python?nodeId=board%3AAzureDevCommunityBlog)\n\n[!\\[mmhangami&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yNzI2NDM1LTBaa2VJZg?image-coordinates=92%2C0%2C2498%2C2406&amp;image-dimensions=50x50)](/users/mmhangami/2726435) [mmhangami](/users/mmhangami/2726435) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined October 21, 2024\n\n[View Profile](/users/mmhangami/2726435)\n\n/category/azure/blog/azuredevcommunityblog [Microsoft Developer Community Blog](/category/azure/blog/azuredevcommunityblog) Follow this blog board to get notified when there's new activity",
  "FeedName": "Microsoft Tech Community",
  "Description": "Today **LangChain v1** officially launches and marks a new era for the popular AI agent library. The new version ushers in a more opinionated, streamlined, and extensible foundation for building agentic LLM applications. In this post we'll breakdown of what’s new, what changed, and what “general availability” means in practice.\n\n![]()![]()\n\nJoin Microsoft Developer Advocates, Marlene Mhangami and Yohan Lasorsa, to see live demos of the new API and find out more about what JavaScript and Python developers need to know about v1. **Register for this event [here](https://developer.microsoft.com/en-us/reactor/events/26481/?wt.mc_id=blog_26481_webpage_reactor).**\n\n![]()\n\n****\n\n## Why v1? The Motivation Behind the Redesign\n\nThe number of abstractions in LangChain had grown over the years to include chains, agents, tools, wrappers, prompt helpers and more, which, while powerful, introduced complexity and fragmentation. As model APIs evolve (multimodal inputs, richer structured output, tool-calling semantics), LangChain needed a cleaner, more consistent core to ensure production ready stability.\n\nIn v1:\n\n- All existing **chains** and **agent abstractions** in the old LangChain are deprecated; they are replaced by a **single high-level agent abstraction** built on **LangGraph** internals.\n- LangGraph becomes the foundational runtime for durable, stateful, orchestrated execution. LangChain now emphasizes being the “fast path to agents” that doesn’t hide but builds upon LangGraph.\n- The internal message format has been upgraded to support **standard content blocks** (e.g. text, reasoning, citations, tool calls) across model providers, decoupling “content” from raw strings.\n- Namespace cleanup: the langchain package now focuses tightly on core abstractions (agents, models, messages, tools), while legacy patterns are moved into langchain-classic (or equivalents).\n\n## What’s New & Noteworthy for Developers\n\nHere are key changes developers should pay attention to:\n\n### 1. create\\_agent becomes the default API\n\nThe create\\_agent function is now the idiomatic way to spin up agents in v1. It replaces older constructs (e.g. create\\_react\\_agent) with a clearer, more modular API that is middleware-centric. You can now compose middleware around model calls, tool calls, before/after hooks, error handling, etc.\n\n### 2. Standard content blocks & normalized message model\n\nResponses from models are no longer opaque strings. Instead, they carry structured content\\_blocks which classify parts of the output (e.g. “text”, “reasoning”, “citation”, “tool\\_call”). If needed for backward compatibility or client serialization, you can **opt in** to serializing those blocks back into the .content field by setting output\\_version=\"v1\".\n\n### 3. Multimodal and richer model inputs / outputs\n\nLangChain now supports more than just text-based interactions. Models can accept and return files, images, video, etc., and the message format reflects this flexibility. This upgrade prepares us well for the next generation of models with mixed modalities (vision, audio, etc.).\n\n### 4. Middleware hooks, runtime context, and finer control\n\nBecause create\\_agent is designed as a pluggable pipeline, developers can now inject logic before/after model calls, tool calls, error recoveries, fallback strategies, request transformations, and more. New middleware such as **retry**, **fallback**, **call limits**, and **context editing** have been added. The notion of a **runtime and context** object accompanies each agent execution, making it easier to carry state or metadata through the pipeline.\n\n### 5. Simplified, leaner namespace & migration path\n\nMany formerly top-level modules or helper classes have been removed or relocated to langchain-classic (or similarly stamped “legacy”) to declutter the main API surface. A [migration guide](http://LangChain%20Docs) is available to help projects transition from v0 to v1. While v1 is now the main line, older v0 is still documented and maintained for compatibility.\n\n## What “General Availability” Means (and Doesn’t)\n\n- v1 is **production-ready**, after months of testing the alpha version\n- The stable v0 release line remains supported for those unwilling or unable to migrate immediately.\n- Breaking changes in public APIs will be accompanied by version bumps (i.e. minor version increments) and deprecation notices.\n- The roadmap anticipates minor versions every 2–3 months (with patch releases more frequently).\n- Because the field of LLM applications is evolving rapidly, the team expects continued iterations in v1—even in GA mode—with users encouraged to surface feedback, file issues, and adopt the migration path. (This is in line with the philosophy stated in docs.)\n\n## Developer Callouts & Suggested Steps\n\nHere are practical tips to get developers onboard:\n\n1. **Try the new API Now!**\nLangChain Azure AI and Azure OpenAI have migrated to LangChain v1 and are ready to test! Try out our getting started sample here. Learn more about using LangChain and Azure AI:\n1. Python: [https://docs.langchain.com/oss/python/integrations/providers/azure_ai](https://docs.langchain.com/oss/python/integrations/providers/azure_ai)\n2. JavaScript: [https://docs.langchain.com/oss/javascript/integrations/providers/microsoft](https://docs.langchain.com/oss/javascript/integrations/providers/microsoft)\n2. **Join us for a Live Stream on Wednesday 22 October 2025**\nJoin Microsoft Developer Advocates Marlene Mhangami and Yohan Lasorsa for a livestream this Wednesday to see live demos and find out more about what JavaScript and Python developers need to know about v1. Register for this event [here](https://developer.microsoft.com/en-us/reactor/events/26481/?wt.mc_id=blog_26481_webpage_reactor).",
  "OutputDir": "_community",
  "Title": "LangChain v1 is now generally available!"
}
