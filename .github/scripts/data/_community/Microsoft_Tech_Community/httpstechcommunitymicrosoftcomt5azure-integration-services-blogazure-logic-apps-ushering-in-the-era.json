{
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "ProcessedDate": "2025-09-09 18:15:44",
  "FeedName": "Microsoft Tech Community",
  "PubDate": "2025-09-09T18:11:58+00:00",
  "Tags": [],
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Title": "ðŸŽ‰ Azure Logic Apps: Ushering in the Era of Multi-Agentic Business Process Automation",
  "Author": "DivSwa",
  "Description": "We've reached another exciting milestone in our automation journey, after introducing [Agent loop](https://aka.ms/agentloopblog) at Build this year. We're excited to announce enhancements that make Azure Logic Apps the multiagentic business process automation platform that empowers you to build intelligent, collaborative automation solutions. This isn't just about automating tasksâ€”it's about creating an ecosystem where agents, workflows, and humans work together seamlessly to drive exceptional business outcomes.\n\nThe key **highlights** of this release includes support for Agent loop in any workflow - new or existing, Python code interpreter, support for Foundry Agent Service in Agent loop, rich Conversational capabilities in our agentic workflows, and multiagent patterns in workflows. Along with these new features, we are also introducing Azure [**Logic Apps Labs**](https://aka.ms/lalabs), your hub for AI labs, workshops, and tutorials.\n\n## Evolving Automation: Extending workflows with intelligent Agents\n\nWorkflows remain the backbone of reliable business automationâ€”essential for governed, regulated, and strictly defined processes where consistency and auditability are paramount. Yet in todayâ€™s fast-moving environment, not every process fits into rigid rules. Some must adapt in real time, apply reasoning, and collaborate across multiple participants to achieve outcomes.\n\nThatâ€™s where our new agentic workflow capabilities come inâ€”not to replace traditional workflows, but to complement them. Workflows deliver structure and reliability for repeatable processes, while agentic workflows powered by Agent loop add adaptability, reasoning, and collaboration for dynamic scenarios. With Logic Apps, you can orchestrate workflows, agents and human expertsâ€”preserving compliance where needed and enabling intelligence where it matters most.\n\n## **Every workflow is now Agentic**\n\n**Every workflow in Logic Apps is now an agentic workflow.** This means you can seamlessly add AI intelligence to any existing business process with our Agent loop capability. Whether it's a simple approval workflow or a complex multi-step process, you can now infuse AI-powered decision-making and adaptability without rebuilding from scratch.\n\n## **Agent loop backed by Foundry Agent Service**\n\nAzure Logic Apps now supports creating Agent loop backed by Foundry Agent service, giving you access to the full spectrum of models in Microsoft's Foundry - including third-party optionsâ€”plus powerful built-in tools like Code Interpreter. You get the best of Microsoft's AI stack: use Logic Apps to build and orchestrate your agentic workflows, while Foundry serves as your centralized catalog for agents, models, and built-in tools.\n\n## **Conversational Agents in workflows built on A2A standards**\n\nWeâ€™re excited to announce that Logic Apps now supports Conversational Agents in workflowsâ€”a major expansion beyond Autonomous Agents. Our conversational agents are built on the [A2A (Agent-to-Agent) standard](https://a2a-protocol.org/dev/), making them fully interoperable within the broader A2A ecosystem of agents and applications. This standards-based approach ensures your Logic Apps agents can seamlessly participate in multi-vendor agent networks while maintaining enterprise-grade security., making them fully interoperable within the broader A2A ecosystem of agents and applications. This standards-based approach ensures your Logic Apps agents can seamlessly participate in multi-vendor agent networks while maintaining enterprise-grade security.\n\n### *Chat experience*\n\nThe out-of-box A2A chat client delivers a rich conversational experience with:\n\n- **Real-time streaming** for responsive, natural interactions\n- **Multiturn conversations** that maintain context across complex interactions\n- **Multiple session management** allowing users to maintain separate conversation threads\n- **Designer integration** for testing and development directly within Logic Apps\n- **Open-source external client option** that organizations can fully customize and brand to match their specific requirements\n- **Per-user chat session** that supports in-chat consent flow. Full security and isolation across user chats and sessions\n\nThe chat client is [open source](https://github.com/Azure/LogicAppsAgentChat) so you can customize for your organizational needs\n\n### *Enterprise security by default*\n\nSecurity isn't an afterthoughtâ€”it's built into the foundation. Our conversational agents leverage Azure App Service's built-in Easy Auth capabilities - an out-of-the-box authentication layer that supports federated identity providers like Microsoft Entra. With no SDKs or code changes required, the platform automatically handles token validation, session management, and user identity injectionâ€”making your agents secure by default.\n\n### *Agents act On Behalf of Users*\n\nOur agents operate with full user-aware context through per-user connections using the On-Behalf-Of (OBO) authentication flow. This important capability means that when an agent needs to call a tool, access data, or take an action, it does so using the specific user's identity and permissionsâ€”not a shared service account. This ensures that the access rights, permissions, and security policies applied to the user are consistently enforced across all downstream services, preventing unauthorized access.\n\nThis user-aware approach using OBO transforms agents from simple chatbots into true collaborative partners that can take meaningful action while maintaining the security and governance standards your organization requires.\n\n## **Advanced multiagent orchestration**\n\nLogic Apps now serves as a powerful workflow orchestration engine that enables sophisticated collaboration between multiple AI agents. Built on proven patterns used in production systems worldwide, our multiagent capabilities let you build automation workflows from simple agent handoffs to complex hierarchical systems where agents coordinate, delegate tasks, and work together to solve problems that would not be feasible for any single agent to handle alone.\n\n**State Machine powered handoffs**: Logic Apps now functions as a sophisticated state machine, enabling you to define precise handoff conditions between agents. This creates dynamic, powerful applications that can tackle complex problems by seamlessly transferring context and control between specialized agents.\n\n**Nested Agent architecture**: Build sophisticated patterns like supervisor-agent hierarchies where agents can utilize other agents as tools. This enables powerful architectural patterns that can break down complex challenges into manageable, specialized tasks.\n\n## **Python Code Interpreter: Extensible Agent tools**\n\nWith Python Code Interpreter support, agents can now think computationallyâ€”processing complex problems through code execution. Developers gain unlimited extensibility by bringing custom Python code as agent tools, either writing the code themselves or letting the agent generate it dynamically. This empowers agents to tackle large datasets, perform complex calculations, and execute custom business logic, giving developers the freedom to build specialized tools that go far beyond standard capabilities.\n\n## **Comprehensive Observability and Transparency**\n\nLogic Apps provides complete run history for full transparency and auditability. We're now introducing task timeline visualization in run history that makes it easy to follow agent and task execution through an intuitive timeline view.\n\nThe newly added **task timeline** captures the entire A2A communication flowâ€”showing how tasks are initiated, delegated between agents, and completed, tools used, along with all messages exchanged throughout the process. This gives you full visibility into your multiagent workflows, letting you track task handoffs, monitor agent interactions, and understand the complete execution path for debugging and compliance needs.\n\n## The platform that grows with your ambitions\n\nLogic Apps as a multiagent business process automation platform isn't just about today's needsâ€”it's about future-proofing your automation strategy. As your business evolves and new AI capabilities emerge, your agents and workflows can evolve too, without requiring complete system overhauls.\n\nThe beauty of this approach lies in its accessibility. Developers familiar with Logic Apps can immediately begin building agentic applications using familiar tools and patterns, while gradually exploring more sophisticated multiagent architectures as their needs grow.\n\n## The future is built on collaboration!\n\nThe future of automation is about creating intelligent systems where AI agents, automated processes, and human expertise work together seamlessly. Logic Apps now provides the platform to make this vision a reality. Built with security, isolation, scale, and governance, Logic Apps runs anywhereâ€”giving you everything you need for production-ready applications.\n\n#### **Welcome to the era of collaborative intelligence. Welcome to Azure Logic Apps as your Intelligent automation platform!**\n\n## Explore Logic Apps Labs\n\nThe best way to learn is by building. Ready to get started?\n\nIntroducing Azure [**Logic Apps Labs**](https://aka.ms/lalabs) â€”your hub for AI labs, workshops, and tutorials. Whether youâ€™re exploring [agent basics](https://azure.github.io/logicapps-labs/docs/logicapps-ai-course/overview), building [autonomous](https://azure.github.io/logicapps-labs/docs/category/build-autonomous-agents) or [conversational](https://azure.github.io/logicapps-labs/docs/category/build-conversational-agents) agents, or designing advanced [multi-agent patterns](https://azure.github.io/logicapps-labs/docs/category/multi-agent-workflow-patterns) for building agentic workflows, this is the perfect place to begin.\n\nWeâ€™re continuously expanding these capabilities and welcome your feedback at or [https://aka.ms/AgentLoopFeedback](https://aka.ms/AgentLoopFeedback)",
  "Link": "https://techcommunity.microsoft.com/t5/azure-integration-services-blog/azure-logic-apps-ushering-in-the-era-of-multi-agentic-business/ba-p/4452275",
  "EnhancedContent": "We've reached another exciting milestone in our automation journey, after introducing [Agent loop](https://aka.ms/agentloopblog) at Build this year. We're excited to announce enhancements that make Azure Logic Apps the multiagentic business process automation platform that empowers you to build intelligent, collaborative automation solutions. This isn't just about automating tasksâ€”it's about creating an ecosystem where agents, workflows, and humans work together seamlessly to drive exceptional business outcomes.\n\nThe key **highlights** of this release includes support for Agent loop in any workflow - new or existing, Python code interpreter, support for Foundry Agent Service in Agent loop, rich Conversational capabilities in our agentic workflows, and multiagent patterns in workflows. Along with these new features, we are also introducing Azure [**Logic Apps Labs**](https://aka.ms/lalabs), your hub for AI labs, workshops, and tutorials.\n\n## Evolving Automation: Extending workflows with intelligent Agents\n\nWorkflows remain the backbone of reliable business automationâ€”essential for governed, regulated, and strictly defined processes where consistency and auditability are paramount. Yet in todayâ€™s fast-moving environment, not every process fits into rigid rules. Some must adapt in real time, apply reasoning, and collaborate across multiple participants to achieve outcomes.\n\nThatâ€™s where our new agentic workflow capabilities come inâ€”not to replace traditional workflows, but to complement them. Workflows deliver structure and reliability for repeatable processes, while agentic workflows powered by Agent loop add adaptability, reasoning, and collaboration for dynamic scenarios. With Logic Apps, you can orchestrate workflows, agents and human expertsâ€”preserving compliance where needed and enabling intelligence where it matters most.\n\n## **Every workflow is now Agentic**\n\n**Every workflow in Logic Apps is now an agentic workflow.** This means you can seamlessly add AI intelligence to any existing business process with our Agent loop capability. Whether it's a simple approval workflow or a complex multi-step process, you can now infuse AI-powered decision-making and adaptability without rebuilding from scratch.\n\n## **Agent loop backed by Foundry Agent Service**\n\nAzure Logic Apps now supports creating Agent loop backed by Foundry Agent service, giving you access to the full spectrum of models in Microsoft's Foundry - including third-party optionsâ€”plus powerful built-in tools like Code Interpreter. You get the best of Microsoft's AI stack: use Logic Apps to build and orchestrate your agentic workflows, while Foundry serves as your centralized catalog for agents, models, and built-in tools.\n\n## **Conversational Agents in workflows built on A2A standards**\n\nWeâ€™re excited to announce that Logic Apps now supports Conversational Agents in workflowsâ€”a major expansion beyond Autonomous Agents. Our conversational agents are built on the [A2A (Agent-to-Agent) standard](https://a2a-protocol.org/dev/), making them fully interoperable within the broader A2A ecosystem of agents and applications. This standards-based approach ensures your Logic Apps agents can seamlessly participate in multi-vendor agent networks while maintaining enterprise-grade security., making them fully interoperable within the broader A2A ecosystem of agents and applications. This standards-based approach ensures your Logic Apps agents can seamlessly participate in multi-vendor agent networks while maintaining enterprise-grade security.\n\n### *Chat experience*\n\nThe out-of-box A2A chat client delivers a rich conversational experience with:\n\n- **Real-time streaming** for responsive, natural interactions\n- **Multiturn conversations** that maintain context across complex interactions\n- **Multiple session management** allowing users to maintain separate conversation threads\n- **Designer integration** for testing and development directly within Logic Apps\n- **Open-source external client option** that organizations can fully customize and brand to match their specific requirements\n- **Per-user chat session** that supports in-chat consent flow. Full security and isolation across user chats and sessions\n\nThe chat client is [open source](https://github.com/Azure/LogicAppsAgentChat) so you can customize for your organizational needs\n\n### *Enterprise security by default*\n\nSecurity isn't an afterthoughtâ€”it's built into the foundation. Our conversational agents leverage Azure App Service's built-in Easy Auth capabilities - an out-of-the-box authentication layer that supports federated identity providers like Microsoft Entra. With no SDKs or code changes required, Â the platform automatically handles token validation, session management, and user identity injectionâ€”making your agents secure by default.\n\n### *Agents act On Behalf of Users*\n\nOur agents operate with full user-aware context through per-user connections using the On-Behalf-Of (OBO) authentication flow. This important capability means that when an agent needs to call a tool, access data, or take an action, it does so using the specific user's identity and permissionsâ€”not a shared service account. This ensures that the access rights, permissions, and security policies applied to the user are consistently enforced across all downstream services, preventing unauthorized access.\n\nThis user-aware approach using OBO transforms agents from simple chatbots into true collaborative partners that can take meaningful action while maintaining the security and governance standards your organization requires.\n\n## **Advanced multiagent orchestration**\n\nLogic Apps now serves as a powerful workflow orchestration engine that enables sophisticated collaboration between multiple AI agents. Built on proven patterns used in production systems worldwide, our multiagent capabilities let you build automation workflows from simple agent handoffs to complex hierarchical systems where agents coordinate, delegate tasks, and work together to solve problems that would not be feasible for any single agent to handle alone.\n\n**State Machine powered handoffs**: Logic Apps now functions as a sophisticated state machine, enabling you to define precise handoff conditions between agents. This creates dynamic, powerful applications that can tackle complex problems by seamlessly transferring context and control between specialized agents.\n\n**Nested Agent architecture**: Build sophisticated patterns like supervisor-agent hierarchies where agents can utilize other agents as tools. This enables powerful architectural patterns that can break down complex challenges into manageable, specialized tasks.\n\n## **Python Code Interpreter: Extensible Agent tools**\n\nWith Python Code Interpreter support, agents can now think computationallyâ€”processing complex problems through code execution. Developers gain unlimited extensibility by bringing custom Python code as agent tools, either writing the code themselves or letting the agent generate it dynamically. This empowers agents to tackle large datasets, perform complex calculations, and execute custom business logic, giving developers the freedom to build specialized tools that go far beyond standard capabilities.\n\n## **Comprehensive Observability and Transparency**\n\nLogic Apps provides complete run history for full transparency and auditability. We're now introducing task timeline visualization in run history that makes it easy to follow agent and task execution through an intuitive timeline view.\n\nThe newly added **task timeline** captures the entire A2A communication flowâ€”showing how tasks are initiated, delegated between agents, and completed, tools used, along with all messages exchanged throughout the process. This gives you full visibility into your multiagent workflows, letting you track task handoffs, monitor agent interactions, and understand the complete execution path for debugging and compliance needs.\n\n## The platform that grows with your ambitions\n\nLogic Apps as a multiagent business process automation platform isn't just about today's needsâ€”it's about future-proofing your automation strategy. As your business evolves and new AI capabilities emerge, your agents and workflows can evolve too, without requiring complete system overhauls.\n\nThe beauty of this approach lies in its accessibility. Developers familiar with Logic Apps can immediately begin building agentic applications using familiar tools and patterns, while gradually exploring more sophisticated multiagent architectures as their needs grow.\n\n## The future is built on collaboration!\n\nThe future of automation is about creating intelligent systems where AI agents, automated processes, and human expertise work together seamlessly. Logic Apps now provides the platform to make this vision a reality. Built with security, isolation, scale, and governance, Logic Apps runs anywhereâ€”giving you everything you need for production-ready applications.\n\n#### **Welcome to the era of collaborative intelligence. Welcome to Azure Logic Apps as your Intelligent automation platform!**\n\n## Explore Logic Apps Labs\n\nThe best way to learn is by building. Ready to get started?\n\nIntroducing Azure [**Logic Apps Labs**](https://aka.ms/lalabs)Â â€”your hub for AI labs, workshops, and tutorials. Whether youâ€™re exploring [agent basics](https://azure.github.io/logicapps-labs/docs/logicapps-ai-course/overview), building [autonomous](https://azure.github.io/logicapps-labs/docs/category/build-autonomous-agents)Â or [conversational](https://azure.github.io/logicapps-labs/docs/category/build-conversational-agents)Â agents, or designing advanced [multi-agent patterns](https://azure.github.io/logicapps-labs/docs/category/multi-agent-workflow-patterns) for building agentic workflows, this is the perfect place to begin.\n\nWeâ€™re continuously expanding these capabilities and welcome your feedback at or [https://aka.ms/AgentLoopFeedback](https://aka.ms/AgentLoopFeedback)\n\nUpdated Sep 09, 2025\n\nVersion 1.0\n\n[ai](/tag/ai?nodeId=board%3AIntegrationsonAzureBlog)\n\n[logic apps standard](/tag/logic%20apps%20standard?nodeId=board%3AIntegrationsonAzureBlog)\n\n[!\\[DivSwa&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xNTYxNTYzLTQxNzI3NmlGRjYyMDM2MjI1MjVFMjhD?image-dimensions=50x50)](/users/divswa/1561563) [DivSwa](/users/divswa/1561563) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined October 11, 2022\n\n[View Profile](/users/divswa/1561563)\n\n/category/azure/blog/integrationsonazureblog [Azure Integration Services Blog](/category/azure/blog/integrationsonazureblog) Follow this blog board to get notified when there's new activity",
  "OutputDir": "_community"
}
