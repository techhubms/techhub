{
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "EnhancedContent": "#### **Introduction**\n\nA large enterprise customer set out to build a generative AI application using Azure OpenAI. While the app would be hosted on-premises, the customer wanted to leverage the latest large language models (LLMs) available through Azure OpenAI. However, they faced a critical challenge: how to securely access Azure OpenAI from an on-prem environment without private network connectivity or a full Azure landing zone.\n\nThis blog post walks through how customers overcame these limitations using Application Gateway as a reverse proxy in front of their Azure Open AI along with other Azure services, to meet their security and governance requirements.\n\n#### **Customer landscape and challenges**\n\nThe customer’s environment lacked:\n\n- Private network connectivity (no Site-to-Site VPN or ExpressRoute). This was due to using a new Azure Government environment and not having a cloud operations team set up yet\n\n- Common network topology such as Virtual WAN and Hub-Spoke network design\n\n- A full [Enterprise Scale Landing Zone (ESLZ)](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/enterprise-scale/) of common infrastructure\n\n- Security components like private DNS zones, DNS resolvers, API Management, and firewalls\n\nThis meant they couldn’t use private endpoints or other standard security controls typically available in mature Azure environments.\n\nSecurity was non-negotiable. Public access to Azure OpenAI was unacceptable. Customer needs to:\n\n- Restrict access to specific IP CIDR ranges from on-prem user machines and data centers\n\n- Limit ports communicating with Azure OpenAI\n\n- Implement a reverse proxy with SSL termination and Web Application Firewall (WAF)\n\n- Use a customer-provided SSL certificate to secure traffic\n\n#### **Proposed solution**\n\nTo address these challenges, the customer designed a secure architecture using the following Azure components:\n\n#### **Key Azure services**\n\n- **Application Gateway** – Layer 7 reverse proxy, SSL termination & Web Application Firewall (WAF)\n\n- **Public IP** – Allows communication over public internet between customer’s IP addresses & Azure IP addresses\n\n- **Virtual Network** – Allows control of network traffic in Azure\n\n- **Network Security Group (NSG)** – Layer 4 network controls such as port numbers, service tags using five-tuple information (source, source port, destination, destination port, protocol)\n\n- **Azure OpenAI** – Large Language Model (LLM)\n\n**NSG configuration**\n\n- Inbound Rules: Allow traffic only from specific IP CIDR ranges and HTTP(S) ports\n\n- Outbound Rules: Target AzureCloud.&lt;region&gt; with HTTP(S) ports (no service tag for Azure OpenAI yet)\n\n**Application Gateway setup**\n\n- SSL Certificate: Issued by the customer’s on-prem Certificate Authority\n\n- HTTPS Listener: Uses the on-prem certificate to terminate SSL\n\n- Traffic flow:\n\n- - Decrypt incoming traffic\n\n- - Scan with WAF\n\n- - Re-encrypt using a well-known Azure CA\n\n- - Override backend hostname\n\n- Custom health probe: Configured to detect a 404 response from Azure OpenAI (since no health check endpoint exists)\n\n**Azure OpenAI configuration**\n\n- IP firewall restrictions: Only allow traffic from the Application Gateway subnet\n\n#### **Outcome**\n\nBy combining Application Gateway, NSGs, and custom SSL configurations, the customer successfully secured their Azure OpenAI deployment—without needing a full ESLZ or private connectivity. This approach enabled them to move forward with their generative AI app while maintaining enterprise-grade security and governance.\n\nUpdated Sep 24, 2025\n\nVersion 1.0\n\n[application gateway](/tag/application%20gateway?nodeId=board%3AAzureNetworkingBlog)\n\n[azure networking](/tag/azure%20networking?nodeId=board%3AAzureNetworkingBlog)\n\n[updates](/tag/updates?nodeId=board%3AAzureNetworkingBlog)\n\n[well-architected](/tag/well-architected?nodeId=board%3AAzureNetworkingBlog)\n\n[!\\[vnamani&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/m_assets/avatars/default/avatar-8.svg?image-dimensions=50x50)](/users/vnamani/3092431) [vnamani](/users/vnamani/3092431) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined June 30, 2025\n\n[View Profile](/users/vnamani/3092431)\n\n/category/azure/blog/azurenetworkingblog [Azure Networking Blog](/category/azure/blog/azurenetworkingblog) Follow this blog board to get notified when there's new activity",
  "Tags": [],
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "PubDate": "2025-09-25T21:12:24+00:00",
  "OutputDir": "_community",
  "ProcessedDate": "2025-09-25 22:10:18",
  "Description": "#### **Introduction**\n\nA large enterprise customer set out to build a generative AI application using Azure OpenAI. While the app would be hosted on-premises, the customer wanted to leverage the latest large language models (LLMs) available through Azure OpenAI. However, they faced a critical challenge: how to securely access Azure OpenAI from an on-prem environment without private network connectivity or a full Azure landing zone.\n\nThis blog post walks through how customers overcame these limitations using Application Gateway as a reverse proxy in front of their Azure Open AI along with other Azure services, to meet their security and governance requirements.\n\n#### **Customer landscape and challenges**\n\nThe customer’s environment lacked:\n\n- Private network connectivity (no Site-to-Site VPN or ExpressRoute). This was due to using a new Azure Government environment and not having a cloud operations team set up yet\n\n- Common network topology such as Virtual WAN and Hub-Spoke network design\n\n- A full [Enterprise Scale Landing Zone (ESLZ)](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/enterprise-scale/) of common infrastructure\n\n- Security components like private DNS zones, DNS resolvers, API Management, and firewalls\n\nThis meant they couldn’t use private endpoints or other standard security controls typically available in mature Azure environments.\n\nSecurity was non-negotiable. Public access to Azure OpenAI was unacceptable. Customer needs to:\n\n- Restrict access to specific IP CIDR ranges from on-prem user machines and data centers\n\n- Limit ports communicating with Azure OpenAI\n\n- Implement a reverse proxy with SSL termination and Web Application Firewall (WAF)\n\n- Use a customer-provided SSL certificate to secure traffic\n\n#### **Proposed solution**\n\nTo address these challenges, the customer designed a secure architecture using the following Azure components:\n\n![]()\n\n#### **Key Azure services**\n\n- **Application Gateway** – Layer 7 reverse proxy, SSL termination & Web Application Firewall (WAF)\n\n- **Public IP** – Allows communication over public internet between customer’s IP addresses & Azure IP addresses\n\n- **Virtual Network** – Allows control of network traffic in Azure\n\n- **Network Security Group (NSG)** – Layer 4 network controls such as port numbers, service tags using five-tuple information (source, source port, destination, destination port, protocol)\n\n- **Azure OpenAI** – Large Language Model (LLM)\n\n**NSG configuration**\n\n- Inbound Rules: Allow traffic only from specific IP CIDR ranges and HTTP(S) ports\n\n- Outbound Rules: Target AzureCloud. with HTTP(S) ports (no service tag for Azure OpenAI yet)\n\n**Application Gateway setup**\n\n- SSL Certificate: Issued by the customer’s on-prem Certificate Authority\n\n- HTTPS Listener: Uses the on-prem certificate to terminate SSL\n\n- Traffic flow:\n\n- - Decrypt incoming traffic\n\n- - Scan with WAF\n\n- - Re-encrypt using a well-known Azure CA\n\n- - Override backend hostname\n\n- Custom health probe: Configured to detect a 404 response from Azure OpenAI (since no health check endpoint exists)\n\n**Azure OpenAI configuration**\n\n- IP firewall restrictions: Only allow traffic from the Application Gateway subnet\n\n#### **Outcome**\n\nBy combining Application Gateway, NSGs, and custom SSL configurations, the customer successfully secured their Azure OpenAI deployment—without needing a full ESLZ or private connectivity. This approach enabled them to move forward with their generative AI app while maintaining enterprise-grade security and governance.",
  "Title": "Using Application Gateway to secure access to the Azure OpenAI Service: Customer success story",
  "FeedName": "Microsoft Tech Community",
  "Author": "vnamani",
  "Link": "https://techcommunity.microsoft.com/t5/azure-networking-blog/using-application-gateway-to-secure-access-to-the-azure-openai/ba-p/4456696"
}
