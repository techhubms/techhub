{
  "ProcessedDate": "2025-08-15 14:36:07",
  "PubDate": "2025-08-15T14:31:39+00:00",
  "Link": "https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/using-entra-id-authentication-with-arc-enabled-sql-server-in-a/ba-p/4435168",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Community",
  "Author": "jpigott",
  "FeedName": "Microsoft Tech Community",
  "EnhancedContent": "##\n\n## **Introduction:**\n\nThis guide demonstrates how to securely connect a .NET Framework Windows Forms application to an Arc-enabled SQL Server 2022 instance using Entra ID (Azure AD) authentication. It covers user authentication, token management, and secure connection practices, with code samples and screenshots.\n\nIn many modern applications, it is common practice to use an application web service to mediate access to SQL Server. This approach can offer several advantages, such as improved security, scalability, and centralized management of database connections. However, there are scenarios where directly connecting to SQL Server is more appropriate. This guide focuses on such scenarios, providing a solution for applications that need direct access to SQL Server.\n\nThis model is particularly useful for applications like SQL Server Management Studio (SSMS), which require direct database connections to perform their functions. By using Entra ID authentication, we can ensure that these direct connections are secure and that user credentials are managed efficiently. By following the steps outlined in this guide, developers can ensure secure and efficient connections between their .NET Windows Forms applications and Arc-enabled SQL Server instances using Entra ID authentication. This approach not only enhances security but also simplifies the management of user credentials and access tokens, providing a robust solution for modern application development.\n\n**SAMPLE CODE:  [GitHub Repository](https://github.com/wjpigott/Azure/tree/main/SQLArcWithEntraIDSample)**\n\n**Prerequisites**\n\n- Arc-enabled SQL Server 2022/2025 configured for Entra ID authentication\n- Entra ID (Azure AD) tenant and app registration\n- .NET Framework 4.6.2 Windows Forms application (Not required .NET version, only what the solution is based on)\n- Microsoft.Identity.Client, Microsoft.Data.SqlClient NuGet packages\n\n**Application Overview**\n\n- User authenticates with Entra ID\n- Token is acquired and used to connect to SQL Server\n- Option to persist token cache or keep it in memory\n- Data is retrieved and displayed in a DataGridView\n- Similar setup to use SSMS with Entra ID in articles below.\n\nWindows Form Sample\n\nCheck User Button shows the current user\n\nThe Connect to Entra ID at Login button will verify if you are logged in and try to connect to SQL Server.\n\nIf the user is not logged in, an Entra ID authentication window will be displayed or ask you to log in.\n\nOnce logged in it shows a Connection successful message box stating the connection to the database was completed.\n\nThe Load Data button queries the Adventure Works database Person table and loads the names into the datagridview.\n\nThe Cache Token to Disk checkbox option either caches to memory when unchecked and would require reauthentication after the application closes, or the option to cache to disk the token to be read on future application usage.\n\nIf the file is cached to disk, the location of the cached file is (C:\\Users\\[useraccount]\\AppData\\Local).  This sample does not encrypt the file which is something that would be recommended for production use.\n\n### This code uses MSAL (Microsoft Authentication Library) to authenticate users in a .NET application using their Microsoft Entra ID (Azure AD) credentials. It configures the app with its client ID, tenant ID, redirect URI, and logging settings to enable secure token-based authentication.\n\n//Application registration ClientID, and TenantID are required for MSAL authentication\n\nprivate static IPublicClientApplication app = PublicClientApplicationBuilder.Create(\"YourApplicationClientID\")\n\n.WithAuthority(AzureCloudInstance.AzurePublic, \"YourTenantID\")\n\n.WithRedirectUri(\"http://localhost\")\n\n.WithLogging((level, message, containsPii) =&gt; Debug.WriteLine($\"MSAL: {message}\"), LogLevel.Verbose, true, true)\n\n.Build();\n\n### This method handles user login by either enabling persistent token caching or setting up temporary in-memory caching, depending on the input. It then attempts to silently acquire an access token for Azure SQL Database using cached credentials, falling back to interactive login if no account is found.\n\nprivate async Task&lt;AuthenticationResult&gt; LoginAsync(bool persistCache)\n\n{\n\nif (persistCache)\n\nTokenCacheHelper.EnablePersistence(app.UserTokenCache);\n\nelse\n\n{\n\napp.UserTokenCache.SetBeforeAccess(args =&gt; { });\n\napp.UserTokenCache.SetAfterAccess(args =&gt; { });\n\n}\n\nstring[] scopes = new[] { \"https://database.windows.net//.default\" };\n\nvar accounts = await app.GetAccountsAsync();\n\nif (accounts == null || !accounts.Any())\n\nreturn await app.AcquireTokenInteractive(scopes).ExecuteAsync();\n\nvar account = accounts.FirstOrDefault();\n\nreturn await app.AcquireTokenSilent(scopes, account).ExecuteAsync();\n\n}\n\n### Connecting to SQL Server with Access Token\n\nThis code connects to an Azure SQL Database using a connection string and an access token obtained through MSAL authentication. It securely opens the database connection by assigning the token to the SqlConnection object, enabling authenticated access without storing credentials in the connection string.\n\nThis sample uses a self-signed certificate, in production always configure SQL Server protocols with a certificate issued by a trusted Certificate Authority (CA).\n\n- TrustServerCertificate=True bypasses certificate validation and can allow MITM attacks.\n\n- For production, use a trusted Certificate Authority and change TrustServerCertificate=True to TrustServerCertificate=False.\n- [Configure Client Computer and Application for Encryption - SQL Server | Microsoft Learn](https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/special-cases-for-encrypting-connections-sql-server?view=sql-server-ver17)\n\nstring connectionString = $\"Server={txtSqlServer.Text};Database=AdventureWorks2019;Encrypt=True;TrustServerCertificate=True;\";\n\nvar result = await LoginAsync(checkBox1.Checked);\n\nusing (var conn = new SqlConnection(connectionString))\n\n{\n\nconn.AccessToken = result.AccessToken;\n\nconn.Open();\n\n// ... use connection ...\n\n}\n\n### Fetching Data into DataGridView\n\nThis method authenticates the user and connects to an Azure SQL Database using an access token, and runs a SQL query to retrieve the top 1,000 names from the Person table. It loads the results into a DataTable, which can then be used for display or further processing in the application.\n\nprivate async Task&lt;DataTable&gt; FetchDataAsync()\n\n{\n\nvar dataTable = new DataTable();\n\nvar result = await LoginAsync(checkBox1.Checked);\n\nusing (var conn = new SqlConnection(connectionString))\n\n{\n\nconn.AccessToken = result.AccessToken;\n\nawait conn.OpenAsync();\n\nusing (var cmd = new SqlCommand(\"SELECT TOP (1000) [FirstName], [MiddleName], [LastName] FROM [AdventureWorks2019].[Person].[Person]\", conn))\n\nusing (var reader = await cmd.ExecuteReaderAsync())\n\n{\n\ndataTable.Load(reader);\n\n}\n\n}\n\nreturn dataTable;\n\n}\n\n## Configure Azure Arc SQL Server to use Entra ID authentication\n\nUsing SQL Server 2022 follow the instructions here to setup the key vault and certificate when configuring.\n\nThis article can also be used to configure SSMS to use Entra ID authentication. Detailed steps located here: [Set up Microsoft Entra authentication for SQL Server - SQL Server | Microsoft Learn](https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/azure-ad-authentication-sql-server-setup-tutorial?view=sql-server-ver16#create-logins-and-users)\n\n**Using SQL Server 2025 the setup is much easier as you do not need to configure a Key Vault, or certificates as it is relying on using the managed identity for the authentication.**\n\n**Entra ID App Registration Steps**\n\n- Register a new app in Azure AD\n- Add a redirect URI (**http://localhost**)\n- Add API permissions for [https://database.windows.net/.default](https://database.windows.net/.default)\n\nOn the Entra ID app registration, click on API Permissions.\n\nAdd the API’s for Microsoft Graph:\n\n- User.Read.All\n- Application.Read.All\n- Group.Read.All\n\nAdd a permission for Azure SQL Database. If Azure SQL database is not shown in the list ensure that the Resource Provider is registered for **Microsoft.Sql**.\n\nChoose Delegated permissions and select user\\_impersonation, Click Add permission for the Azure SQL Database.\n\n**NOTE: Once the permissions are added ensure that you grant admin consent on the items.**\n\n****\n\n**Security Considerations**\n\n- Never store client secrets in client apps\n- Use in-memory token cache for higher security, or encrypted disk cache for convenience\n- Use user tokens for auditing and least privilege\n\n**References**\n\n- [**Microsoft Docs: Azure AD Authentication for SQL Server**](https://learn.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-overview)\n- [**MSAL.NET Documentation**](https://learn.microsoft.com/en-us/azure/active-directory/develop/msal-overview)\n- [**Arc-enabled SQL Server Documentation**](https://learn.microsoft.com/en-us/azure/azure-arc/data/)\n\n## Conclusion:\n\nBy following the steps outlined in this guide, developers can ensure secure and efficient connections between their .NET Windows Forms applications and Arc-enabled SQL Server instances using Entra ID authentication. This approach not only enhances security but also simplifies the management of user credentials and access tokens, providing a robust solution for modern application development.\n\n****\n\n***\\*\\*\\* Disclaimer \\*\\*\\****\n\n*The sample scripts are not supported under any Microsoft standard support program or service. The sample scripts are provided AS IS without warranty of any kind. Microsoft further disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a particular purpose. The entire risk arising out of the use or performance of the sample scripts and documentation remains with you. In no event shall Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or other pecuniary loss) arising out of the use of or inability to use*\n\nUpdated Aug 15, 2025\n\nVersion 2.0\n\n[jpigott](/tag/jpigott?nodeId=board%3ACoreInfrastructureandSecurityBlog)\n\n[!\\[jpigott&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xOTIyNjAyLU9KeWY5SA?image-coordinates=0%2C22%2C330%2C352&amp;image-dimensions=50x50)](/users/jpigott/1922602) [jpigott](/users/jpigott/1922602) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined July 03, 2023\n\n[View Profile](/users/jpigott/1922602)\n\n/category/cis/blog/coreinfrastructureandsecurityblog [Core Infrastructure and Security Blog](/category/cis/blog/coreinfrastructureandsecurityblog) Follow this blog board to get notified when there's new activity",
  "Title": "Using Entra ID Authentication with Arc-Enabled SQL Server in a .NET Windows Forms Application",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Description": "## **Introduction:**\n\nThis guide demonstrates how to securely connect a .NET Framework Windows Forms application to an Arc-enabled SQL Server 2022 instance using Entra ID (Azure AD) authentication. It covers user authentication, token management, and secure connection practices, with code samples and screenshots.\n\nIn many modern applications, it is common practice to use an application web service to mediate access to SQL Server. This approach can offer several advantages, such as improved security, scalability, and centralized management of database connections. However, there are scenarios where directly connecting to SQL Server is more appropriate. This guide focuses on such scenarios, providing a solution for applications that need direct access to SQL Server.\n\nThis model is particularly useful for applications like SQL Server Management Studio (SSMS), which require direct database connections to perform their functions. By using Entra ID authentication, we can ensure that these direct connections are secure and that user credentials are managed efficiently. By following the steps outlined in this guide, developers can ensure secure and efficient connections between their .NET Windows Forms applications and Arc-enabled SQL Server instances using Entra ID authentication. This approach not only enhances security but also simplifies the management of user credentials and access tokens, providing a robust solution for modern application development.\n\n**SAMPLE CODE: [GitHub Repository](https://github.com/wjpigott/Azure/tree/main/SQLArcWithEntraIDSample)**\n\n**Prerequisites**\n\n- Arc-enabled SQL Server 2022/2025 configured for Entra ID authentication\n- Entra ID (Azure AD) tenant and app registration\n- .NET Framework 4.6.2 Windows Forms application (Not required .NET version, only what the solution is based on)\n- Microsoft.Identity.Client, Microsoft.Data.SqlClient NuGet packages\n\n**Application Overview**\n\n- User authenticates with Entra ID\n- Token is acquired and used to connect to SQL Server\n- Option to persist token cache or keep it in memory\n- Data is retrieved and displayed in a DataGridView\n- Similar setup to use SSMS with Entra ID in articles below.\n\nWindows Form Sample\n\n![]()\n\nCheck User Button shows the current user\n\n![]()\n\nThe Connect to Entra ID at Login button will verify if you are logged in and try to connect to SQL Server.\n\n![]()\n\nIf the user is not logged in, an Entra ID authentication window will be displayed or ask you to log in.\n\n![]()\n\nOnce logged in it shows a Connection successful message box stating the connection to the database was completed.\n\n![]()\n\nThe Load Data button queries the Adventure Works database Person table and loads the names into the datagridview.\n\n![]()\n\n![]()\n\nThe Cache Token to Disk checkbox option either caches to memory when unchecked and would require reauthentication after the application closes, or the option to cache to disk the token to be read on future application usage.\n\nIf the file is cached to disk, the location of the cached file is (C:\\Users\\[useraccount]\\AppData\\Local). This sample does not encrypt the file which is something that would be recommended for production use.\n\n![]()\n\n### This code uses MSAL (Microsoft Authentication Library) to authenticate users in a .NET application using their Microsoft Entra ID (Azure AD) credentials. It configures the app with its client ID, tenant ID, redirect URI, and logging settings to enable secure token-based authentication.\n\n//Application registration ClientID, and TenantID are required for MSAL authentication\n\nprivate static IPublicClientApplication app = PublicClientApplicationBuilder.Create(\"YourApplicationClientID\")\n\n.WithAuthority(AzureCloudInstance.AzurePublic, \"YourTenantID\")\n\n.WithRedirectUri(\"http://localhost\")\n\n.WithLogging((level, message, containsPii) => Debug.WriteLine($\"MSAL: {message}\"), LogLevel.Verbose, true, true)\n\n.Build();\n\n### This method handles user login by either enabling persistent token caching or setting up temporary in-memory caching, depending on the input. It then attempts to silently acquire an access token for Azure SQL Database using cached credentials, falling back to interactive login if no account is found.\n\nprivate async Task LoginAsync(bool persistCache)\n\n{\n\nif (persistCache)\n\nTokenCacheHelper.EnablePersistence(app.UserTokenCache);\n\nelse\n\n{\n\napp.UserTokenCache.SetBeforeAccess(args => { });\n\napp.UserTokenCache.SetAfterAccess(args => { });\n\n}\n\nstring[] scopes = new[] { \"https://database.windows.net//.default\" };\n\nvar accounts = await app.GetAccountsAsync();\n\nif (accounts == null || !accounts.Any())\n\nreturn await app.AcquireTokenInteractive(scopes).ExecuteAsync();\n\nvar account = accounts.FirstOrDefault();\n\nreturn await app.AcquireTokenSilent(scopes, account).ExecuteAsync();\n\n}\n\n### Connecting to SQL Server with Access Token\n\nThis code connects to an Azure SQL Database using a connection string and an access token obtained through MSAL authentication. It securely opens the database connection by assigning the token to the SqlConnection object, enabling authenticated access without storing credentials in the connection string.\n\nThis sample uses a self-signed certificate, in production always configure SQL Server protocols with a certificate issued by a trusted Certificate Authority (CA).\n\n- TrustServerCertificate=True bypasses certificate validation and can allow MITM attacks.\n\n- For production, use a trusted Certificate Authority and change TrustServerCertificate=True to TrustServerCertificate=False.\n- [Configure Client Computer and Application for Encryption - SQL Server | Microsoft Learn](https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/special-cases-for-encrypting-connections-sql-server?view=sql-server-ver17)\n\nstring connectionString = $\"Server={txtSqlServer.Text};Database=AdventureWorks2019;Encrypt=True;TrustServerCertificate=True;\";\n\nvar result = await LoginAsync(checkBox1.Checked);\n\nusing (var conn = new SqlConnection(connectionString))\n\n{\n\nconn.AccessToken = result.AccessToken;\n\nconn.Open();\n\n// ... use connection ...\n\n}\n\n### Fetching Data into DataGridView\n\nThis method authenticates the user and connects to an Azure SQL Database using an access token, and runs a SQL query to retrieve the top 1,000 names from the Person table. It loads the results into a DataTable, which can then be used for display or further processing in the application.\n\nprivate async Task FetchDataAsync()\n\n{\n\nvar dataTable = new DataTable();\n\nvar result = await LoginAsync(checkBox1.Checked);\n\nusing (var conn = new SqlConnection(connectionString))\n\n{\n\nconn.AccessToken = result.AccessToken;\n\nawait conn.OpenAsync();\n\nusing (var cmd = new SqlCommand(\"SELECT TOP (1000) [FirstName], [MiddleName], [LastName] FROM [AdventureWorks2019].[Person].[Person]\", conn))\n\nusing (var reader = await cmd.ExecuteReaderAsync())\n\n{\n\ndataTable.Load(reader);\n\n}\n\n}\n\nreturn dataTable;\n\n}\n\n## Configure Azure Arc SQL Server to use Entra ID authentication\n\nUsing SQL Server 2022 follow the instructions here to setup the key vault and certificate when configuring.\n\nThis article can also be used to configure SSMS to use Entra ID authentication. Detailed steps located here: [Set up Microsoft Entra authentication for SQL Server - SQL Server | Microsoft Learn](https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/azure-ad-authentication-sql-server-setup-tutorial?view=sql-server-ver16#create-logins-and-users)\n\n![]()\n\n**Using SQL Server 2025 the setup is much easier as you do not need to configure a Key Vault, or certificates as it is relying on using the managed identity for the authentication.**\n\n![]()\n\n**Entra ID App Registration Steps**\n\n- Register a new app in Azure AD\n- Add a redirect URI (**http://localhost**)\n- Add API permissions for [https://database.windows.net/.default](https://database.windows.net/.default)\n\nOn the Entra ID app registration, click on API Permissions.\n\nAdd the API’s for Microsoft Graph:\n\n- User.Read.All\n- Application.Read.All\n- Group.Read.All\n\nAdd a permission for Azure SQL Database. If Azure SQL database is not shown in the list ensure that the Resource Provider is registered for **Microsoft.Sql**.\n\n![]()\n\nChoose Delegated permissions and select user\\_impersonation, Click Add permission for the Azure SQL Database.\n\n![]()\n\n![]()\n\n**NOTE: Once the permissions are added ensure that you grant admin consent on the items.**\n\n****\n\n**Security Considerations**\n\n- Never store client secrets in client apps\n- Use in-memory token cache for higher security, or encrypted disk cache for convenience\n- Use user tokens for auditing and least privilege\n\n**References**\n\n- [**Microsoft Docs: Azure AD Authentication for SQL Server**](https://learn.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-overview)\n- [**MSAL.NET Documentation**](https://learn.microsoft.com/en-us/azure/active-directory/develop/msal-overview)\n- [**Arc-enabled SQL Server Documentation**](https://learn.microsoft.com/en-us/azure/azure-arc/data/)\n\n## Conclusion:\n\nBy following the steps outlined in this guide, developers can ensure secure and efficient connections between their .NET Windows Forms applications and Arc-enabled SQL Server instances using Entra ID authentication. This approach not only enhances security but also simplifies the management of user credentials and access tokens, providing a robust solution for modern application development.\n\n****\n\n***\\*\\*\\* Disclaimer \\*\\*\\****\n\n*The sample scripts are not supported under any Microsoft standard support program or service. The sample scripts are provided AS IS without warranty of any kind. Microsoft further disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a particular purpose. The entire risk arising out of the use or performance of the sample scripts and documentation remains with you. In no event shall Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or other pecuniary loss) arising out of the use of or inability to use*",
  "Tags": []
}
