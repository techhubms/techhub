{
  "OutputDir": "_community",
  "ProcessedDate": "2025-08-31 16:12:27",
  "PubDate": "2025-08-31T15:28:07+00:00",
  "FeedName": "Microsoft Tech Community",
  "Description": "## Architecture at a glance\n\n**Diagram:** “AGC with AKS Networking Models (Overlay & Flat)” – attached below.\n\n![]()\n\n- Left: internet ↦ **AGC Frontend** (Public/Private)\n- Middle: **AGC** (Gateway) ↦ **AGC Subnet (/24)** ↦ **AKS Node Subnet(s)**\n- Right (two options):\n- **Overlay**: Pods use **Overlay CIDR** (separate routing domain). AGC can proxy *directly* to pods via the overlay routing extension.\n- **Flat**: Pods get VNet‑routable IPs (Azure CNI Pod/Node Subnet). AGC forwards to pod/service IPs inside the VNet.\n- Security & Ops: **NSGs**, **Azure Firewall**, **Kubernetes Network Policies** (Azure NP, Calico, **Cilium**), **TLS**, **Observability**.\n\n**Key facts you can bank on**\n\n- AGC **auto‑detects** whether your cluster runs **CNI Overlay** or **CNI**—you don’t change your Gateway/Ingress specs just to switch models .\n- For Overlay, AGC extends the routing domain to the AGC subnet so it can reach overlay pod CIDRs directly .\n- Network policies (Azure NP, Calico, **Cilium**) are supported with AGC .\n- **Subnet** for AGC must be **/24** and only **one AGC deployment per subnet**.\n- **ALB Controller** (the AGC Kubernetes controller) must be **v1.7.9+** for Overlay support .\n- AGC overview and resource model: what it is, where it fits.\n\n**Why AGC for AKS?**\n\n- **Layer‑7 intelligence**: Host/path/header/Query‑string routing, redirects, rewrites, mTLS to backends.\n- **Near real‑time convergence** when pods/services change (scale‑out, rollouts) so ingress keeps pace with GitOps/CI [community coverage aligns with Learn guidance].\n- **First‑class Azure**: NSGs, Azure Firewall, Private Link, zones, managed identity—plus policy/monitoring integration.\n- **Gateway API OR Ingress**: adopt Gateway API incrementally while still supporting existing Ingress resources.\n\n**The two AKS networking models (and what AGC does)**\n\n###### 1) **Azure CNI Overlay** (Overlay networking)\n\n- **When to choose**: Conserve VNet IPs, run very large clusters, keep IP management simple.\n- **How it works**: Pods get IPs from **overlay CIDR** (not from VNet). Azure builds a **separate routing domain** for pod CIDRs; AGC extends that domain to its subnet to proxy directly to pods .\n- **Notes**: Requires **ALB Controller v1.7.9+**; policies (Azure NP, Calico, Cilium) are supported .\n\n###### 2) **Flat networking** (Azure CNI Pod/Node Subnet)\n\n- **When to choose**: You need **direct pod reachability** from on‑prem or peered VNets; VNet IP space is ample.\n- **How it works**: Pods get VNet‑routable IPs. AGC forwards traffic into the VNet directly.\n- **Trade‑off**: Plan your subnets carefully to avoid IP exhaustion.\n\n**Good news**: In both models, **you don’t change** your Gateway/Ingress specs just because the underlay is different. AGC handles it.\n\n##### **Quick start with Gateway API**\n\n**Ensure you’ve installed and configured the ALB Controller for AGC in your AKS cluster (v1.7.9+ recommended for Overlay) and created the AGC subnet (/24)**\n\n1. Create a simple app (Deployment + Service):\n\n- apiVersion: apps/v1\nkind: Deployment metadata: name: hello labels: { app: hello } spec: replicas: 3 selector: { matchLabels: { app: hello } } template: metadata: { labels: { app: hello } } spec: containers:\n- name: web\nimage: mcr.microsoft.com/azuredocs/aks-helloworld:v1 ports: [{ containerPort: 80 }] --- apiVersion: v1 kind: Service metadata: name: hello spec: selector: { app: hello } ports:\n- port: 80\ntargetPort: 80\n\n2) Define the GatewayClass and Gateway for AGC:\n- apiVersion: gateway.networking.k8s.io/v1\nkind: GatewayClass metadata: name: azure-alb spec: controllerName: alb.networking.azure.io/gateway-controller --- apiVersion: gateway.networking.k8s.io/v1 kind: Gateway metadata: name: web-gw namespace: default spec: gatewayClassName: azure-alb listeners:\n- name: http\nprotocol: HTTP port: 80\n\n*Tip:* The controllerName can differ by release. If your cluster already ships an azure-albGatewayClass, **reuse it** and skip creating your own. Validate with:\n- kubectl get gatewayclasses -o wide\n\n3) Route traffic with HTTPRoute:\n- apiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute metadata: name: hello-route spec: parentRefs:\n- name: web-gw\nhostnames:\n- \"hello.example.com\" # replace with your DNS name\nrules:\n- matches:\n- path:\ntype: PathPrefix value: / backendRefs:\n- name: hello\nport: 80\n\n**4) (Optional) Add basic header rewrite & redirect policies** (illustrative—check the AGC policy CRDs supported by your controller version):\n- # Example: redirect /old to / (HTTP 301)\napiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: hello-redirect spec: parentRefs:\n- name: web-gw\nhostnames: [\"hello.example.com\"] rules:\n- matches:\n- path: { type: PathPrefix, value: \"/old\" }\nfilters:\n- type: RequestRedirect\nrequestRedirect: statusCode: 301 path: { type: ReplacePrefixMatch, replacePrefixMatch: \"/\" } backendRefs:\n- name: hello\nport: 80\n\nDeploy:\n- kubectl apply -f hello.yaml\nkubectl apply -f gateway.yaml kubectl apply -f route.yaml\n\nWhen the Gateway becomes Accepted=True and the listeners are programmed, you’ll see a **public/private IP** on the AGC frontend. Point your DNS (hello.example.com) to that IP and you’re live.\n\n##### **Subnetting, peering & version**\n\n- **AGC Subnet must be /24**, and only **one** AGC per subnet .\n- Don’t place AGC in VNet **region A** while AKS nodes are in **region B**, or mix VNets via **regional/global peering**—those placements aren’t supported for the AGC‑to‑AKS path .\n- For **Overlay**, confirm **ALB Controller ≥ 1.7.9**.\n- Keep network policies consistent across namespaces; AGC respects your chosen NP engine (Azure NP, Calico, **Cilium**).",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "Title": "Container Networking with Azure Application Gateway for Containers (AGC): Overlay vs. Flat AKS",
  "Link": "https://techcommunity.microsoft.com/t5/azure-infrastructure-blog/container-networking-with-azure-application-gateway-for/ba-p/4449941",
  "Author": "lakshaymalik",
  "Tags": [],
  "EnhancedContent": "## How does AGC route traffic to your AKS pods across Azure CNI Overlay and flat (CNI Pod/Node Subnet) models? This post demystifies the networking, shows a production‑style diagram, and gives you Gateway API YAML you can run today.\n\n## Architecture at a glance\n\n**Diagram:** “AGC with AKS Networking Models (Overlay & Flat)” – attached below.\n\n- Left: internet ↦ **AGC Frontend** (Public/Private)\n- Middle: **AGC** (Gateway) ↦ **AGC Subnet (/24)** ↦ **AKS Node Subnet(s)**\n- Right (two options):\n- **Overlay**: Pods use **Overlay CIDR** (separate routing domain). AGC can proxy *directly* to pods via the overlay routing extension.\n- **Flat**: Pods get VNet‑routable IPs (Azure CNI Pod/Node Subnet). AGC forwards to pod/service IPs inside the VNet.\n- Security & Ops: **NSGs**, **Azure Firewall**, **Kubernetes Network Policies** (Azure NP, Calico, **Cilium**), **TLS**, **Observability**.\n\n**Key facts you can bank on**\n\n- AGC **auto‑detects** whether your cluster runs **CNI Overlay** or **CNI**—you don’t change your Gateway/Ingress specs just to switch models .\n- For Overlay, AGC extends the routing domain to the AGC subnet so it can reach overlay pod CIDRs directly .\n- Network policies (Azure NP, Calico, **Cilium**) are supported with AGC .\n- **Subnet** for AGC must be **/24** and only **one AGC deployment per subnet**.\n- **ALB Controller** (the AGC Kubernetes controller) must be **v1.7.9+** for Overlay support .\n- AGC overview and resource model: what it is, where it fits.\n\n**Why AGC for AKS?**\n\n- **Layer‑7 intelligence**: Host/path/header/Query‑string routing, redirects, rewrites, mTLS to backends.\n- **Near real‑time convergence** when pods/services change (scale‑out, rollouts) so ingress keeps pace with GitOps/CI [community coverage aligns with Learn guidance].\n- **First‑class Azure**: NSGs, Azure Firewall, Private Link, zones, managed identity—plus policy/monitoring integration.\n- **Gateway API OR Ingress**: adopt Gateway API incrementally while still supporting existing Ingress resources.\n\n**The two AKS networking models (and what AGC does)**\n\n###### 1) **Azure CNI Overlay** (Overlay networking)\n\n- **When to choose**: Conserve VNet IPs, run very large clusters, keep IP management simple.\n- **How it works**: Pods get IPs from **overlay CIDR** (not from VNet). Azure builds a **separate routing domain** for pod CIDRs; AGC extends that domain to its subnet to proxy directly to pods .\n- **Notes**: Requires **ALB Controller v1.7.9+**; policies (Azure NP, Calico, Cilium) are supported .\n\n###### 2) **Flat networking** (Azure CNI Pod/Node Subnet)\n\n- **When to choose**: You need **direct pod reachability** from on‑prem or peered VNets; VNet IP space is ample.\n- **How it works**: Pods get VNet‑routable IPs. AGC forwards traffic into the VNet directly.\n- **Trade‑off**: Plan your subnets carefully to avoid IP exhaustion.\n\n**Good news**: In both models, **you don’t change** your Gateway/Ingress specs just because the underlay is different. AGC handles it.\n\n##### **Quick start with Gateway API**\n\n**Ensure you’ve installed and configured the ALB Controller for AGC in your AKS cluster (v1.7.9+ recommended for Overlay) and created the AGC subnet (/24)**\n\n1. Create a simple app (Deployment + Service):\n\n``` apiVersion: apps/v1 kind: Deployment metadata: name: hello labels: { app: hello } spec: replicas: 3 selector: { matchLabels: { app: hello } } template: metadata: { labels: { app: hello } } spec: containers:\n- name: web\nimage: mcr.microsoft.com/azuredocs/aks-helloworld:v1 ports: [{ containerPort: 80 }] --- apiVersion: v1 kind: Service metadata: name: hello spec: selector: { app: hello } ports:\n- port: 80\ntargetPort: 80 ```\n\n2) Define the GatewayClass and Gateway for AGC:\n\n``` apiVersion: gateway.networking.k8s.io/v1 kind: GatewayClass metadata: name: azure-alb spec: controllerName: alb.networking.azure.io/gateway-controller --- apiVersion: gateway.networking.k8s.io/v1 kind: Gateway metadata: name: web-gw namespace: default spec: gatewayClassName: azure-alb listeners:\n- name: http\nprotocol: HTTP port: 80 ```\n\n*Tip:* The controllerName can differ by release. If your cluster already ships an azure-albGatewayClass, **reuse it** and skip creating your own. Validate with:\n\n``` kubectl get gatewayclasses -o wide ```\n\n3) Route traffic with HTTPRoute:\n\n``` apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: hello-route spec: parentRefs:\n- name: web-gw\nhostnames:\n- \"hello.example.com\" # replace with your DNS name\nrules:\n- matches:\n- path:\ntype: PathPrefix value: / backendRefs:\n- name: hello\nport: 80 ```\n\n**4) (Optional) Add basic header rewrite & redirect policies** (illustrative—check the AGC policy CRDs supported by your controller version):\n\n```\n# Example: redirect /old to / (HTTP 301)\napiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: hello-redirect spec: parentRefs:\n- name: web-gw\nhostnames: [\"hello.example.com\"] rules:\n- matches:\n- path: { type: PathPrefix, value: \"/old\" }\nfilters:\n- type: RequestRedirect\nrequestRedirect: statusCode: 301 path: { type: ReplacePrefixMatch, replacePrefixMatch: \"/\" } backendRefs:\n- name: hello\nport: 80 ```\n\nDeploy:\n\n``` kubectl apply -f hello.yaml kubectl apply -f gateway.yaml kubectl apply -f route.yaml ```\n\nWhen the Gateway becomes Accepted=True and the listeners are programmed, you’ll see a **public/private IP** on the AGC frontend. Point your DNS (hello.example.com) to that IP and you’re live.\n\n##### **Subnetting, peering & version**\n\n- **AGC Subnet must be /24**, and only **one** AGC per subnet .\n- Don’t place AGC in VNet **region A** while AKS nodes are in **region B**, or mix VNets via **regional/global peering**—those placements aren’t supported for the AGC‑to‑AKS path .\n- For **Overlay**, confirm **ALB Controller ≥ 1.7.9**.\n- Keep network policies consistent across namespaces; AGC respects your chosen NP engine (Azure NP, Calico, **Cilium**).\n\nPublished Aug 31, 2025\n\nVersion 1.0\n\n[!\\[lakshaymalik&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/m_assets/avatars/default/avatar-8.svg?image-dimensions=50x50)](/users/lakshaymalik/2973662) [lakshaymalik](/users/lakshaymalik/2973662) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined March 28, 2025\n\n[View Profile](/users/lakshaymalik/2973662)\n\n/category/azure/blog/azureinfrastructureblog [Azure Infrastructure Blog](/category/azure/blog/azureinfrastructureblog) Follow this blog board to get notified when there's new activity"
}
