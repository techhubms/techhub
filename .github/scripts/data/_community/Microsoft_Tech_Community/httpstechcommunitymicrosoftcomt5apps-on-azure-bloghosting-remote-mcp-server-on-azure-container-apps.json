{
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "PubDate": "2025-10-15T04:22:11+00:00",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "OutputDir": "_community",
  "Description": "# About\n\nContinuing from the earlier article of [Hosting Remote MCP Server on Azure Container Apps (ACA) using SSE transport mechanism](https://techcommunity.microsoft.com/blog/appsonazureblog/host-remote-mcp-servers-in-azure-container-apps/4403550)\n\nThis blog showcases the Hosting Remote MCP Servers on [Azure Container Apps](https://aka.ms/aca) (ACA) as HTTP type transport.\n\n# Overview\n\nThe Model Context Protocol (MCP) has revolutionized how AI assistants interact with external tools and data sources. While many examples focus on local implementations using stdio transport, this post demonstrates how to build and deploy a production-ready MCP server using **HTTP transport** in Azure Container Apps.\n\nIn this article, we create a live forex converter that fetches real-time exchange rates from external APIs, showcasing how MCP servers can integrate with third-party services to provide dynamic, up-to-date information to AI assistants.\n\n# What is MCP HTTP Transport?\n\nMCP supports multiple transport mechanisms, with HTTP being ideal for cloud deployments:\n\n- **Stdio Transport**: {\"type\": \"stdio\"} - Direct process communication\n- **HTTP Transport**: {\"type\": \"http\"} - RESTful API communication\n\nHTTP transport enables:\n\n- Cloud deployment and scaling\n- Cross-platform compatibility\n- Multiple client connections\n- Load balancing and high availability\n- Integration with external APIs\n- Real-time data fetching from third-party services\n\n# Building and testing the MCP Server from the GitHub Repo\n\nFollow the steps to clone the [code](https://github.com/deepganguly/azure-container-apps-mcp-sample) on your local machine and test the server locally\n\n- # Clone the repository\ngit clone https://github.com/deepganguly/azure-container-apps-mcp-sample.git\n\n# Navigate to the project directory\ncd azure-container-apps-mcp-sample\n\n# Install dependencies\nnpm install\n\n# Test Locally, Run the MCP server\nnpm start\n\n# Test the server (in another terminal)\ncurl -X POST http://localhost:3001/mcp \\ -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}'\n\nThe `server.js` (checkout the file from the above repository for more details) fetches live forex exchange rates from a Third-Party API and servers as live price converter for any requests. It performs the following functions\n\n1. Exchange Rate Management\n\n- Caches live exchange rates from exchangerate-api.com for 10 minutes\n- Fetches fresh rates when cache expires or is empty\n- Falls back to hardcoded rates if the external API fails (USD, EUR, GBP, JPY, INR, CAD, AUD, CHF, CNY)\n\n2. Exchange Rate Management\n\n- Listens on /mcp endpoint for POST requests with JSON-RPC 2.0 format\n- Handles tools/list method - Returns available tools (convert\\_currency)\n- Handles tools/call method - Executes currency conversion requests\n- Returns proper MCP responses with jsonrpc, id, and result/error fields\n- // Fetch live exchange rates from exchangerate-api.com (free, no API key needed)\nasync function getLiveRates() { try { // Check cache first if (ratesCache && cacheTimestamp && (Date.now() - cacheTimestamp)\n\n3. Currency Conversion Logic\n\n- USD as base conversion - Direct rate lookup for USD to other currencies\n- Other to USD conversion - Uses inverse rate (1/rate)\n- Cross-currency conversion - Converts through USD (from→USD→to)\n- Calculates exchange rate and final converted amount\n\n4. Response Formatting\n\n- Success response - Returns formatted text with amount, converted value, live rate, and timestamp\n- Error handling - Returns proper JSON-RPC error responses for failures\n\n# Deploy the App to Azure Container Apps\n\nThe [code](https://github.com/deepganguly/azure-container-apps-mcp-sample) can be deployed with the following commands. Also, check out the *main.bicep file* provided in the repository for quick one step deployment\n- # Clone the repository\ngit clone https://github.com/deepganguly/azure-container-apps-mcp-sample.git\n\n#Login to Azure az login\n\n# Create resource group\naz group create --name mcp-live-rates-rg --location eastus\n\n# Create Container App environment\naz containerapp env create --name mcp-forex-env --resource-group mcp-live-rates-rg --location eastus\n\n# Deploy container app\naz containerapp up --name mcp-live-forex-server --resource-group mcp-live-rates-rg --environment mcp-forex-env --source . --target-port 3001 --ingress external\n\n# Connect the MCP Server with VS Code Chat\n- Step 1: Get Your Deployed Server URL\n\nAfter deployment, your server is available at: https://mcp-live-forex-server.\\*\\*\\*\\*.eastus.azurecontainerapps.io/\n\nKey Endpoints:\n- MCP Endpoint: https://mcp-live-forex-server.\\*\\*\\*\\*.eastus.azurecontainerapps.io/mcp\n- Health Check: https://mcp-live-forex-server.\\*\\*\\*\\*.eastus.azurecontainerapps.io//health\n\nStep 2: Configure VS Code Settings\n\n1. Open VS Code\n2. Navigate to .vscode/mcp.json file with the following configurations\n{ \"servers\": { \"my-mcp-server-1a118d61\": { \"url\": \"https://mcp-live-forex-server.\\*\\*\\*\\*.eastus.azurecontainerapps.io/mcp\", \"type\": \"http\" } }, \"inputs\": [ { \"id\": \"convert\\_currency\", \"type\": \"promptString\", \"description\": \"Convert {amount} {from} to {to} using live exchange rates\" } ] }\n3. Add the mcp.json as a Server\n4. Reload the Window and query the VS code chat client\n\nFollowing picture showcases the Add Server configuration from the *mcp.json* file and the follow up conversation for the exchange rates\n\n![]()\n\n# Conclusion\n\nIn this article we see the approach that enables to run serverless functions in a fully managed, scalable container environment, leveraging the flexibility of containers and the power of Azure Container Apps. You can now monitor, scale, and update your app easily using Azure tools and CLI.",
  "ProcessedDate": "2025-10-15 05:03:53",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/hosting-remote-mcp-server-on-azure-container-apps-aca-using/ba-p/4459263",
  "Title": "Hosting Remote MCP Server on Azure Container Apps (ACA) using Streamable HTTP transport mechanism",
  "Author": "DeepGanguly",
  "EnhancedContent": "# About\n\nContinuing from the earlier article of [Hosting Remote MCP Server on Azure Container Apps (ACA) using SSE transport mechanism](https://techcommunity.microsoft.com/blog/appsonazureblog/host-remote-mcp-servers-in-azure-container-apps/4403550)\n\nThis blog showcases the Hosting Remote MCP Servers on [Azure Container Apps](https://aka.ms/aca) (ACA) as HTTP type transport.\n\n# Overview\n\nThe Model Context Protocol (MCP) has revolutionized how AI assistants interact with external tools and data sources. While many examples focus on local implementations using stdio transport, this post demonstrates how to build and deploy a production-ready MCP server using **HTTP transport** in Azure Container Apps.\n\nIn this article, we create a live forex converter that fetches real-time exchange rates from external APIs, showcasing how MCP servers can integrate with third-party services to provide dynamic, up-to-date information to AI assistants.\n\n# What is MCP HTTP Transport?\n\nMCP supports multiple transport mechanisms, with HTTP being ideal for cloud deployments:\n\n- **Stdio Transport**: {\"type\": \"stdio\"} - Direct process communication\n- **HTTP Transport**: {\"type\": \"http\"} - RESTful API communication\n\nHTTP transport enables:\n\n- Cloud deployment and scaling\n- Cross-platform compatibility\n- Multiple client connections\n- Load balancing and high availability\n- Integration with external APIs\n- Real-time data fetching from third-party services\n\n# Building and testing the MCP Server from the GitHub Repo\n\nFollow the steps to clone the [code](https://github.com/deepganguly/azure-container-apps-mcp-sample) on your local machine and test the server locally\n\n```\n# Clone the repository\ngit clone https://github.com/deepganguly/azure-container-apps-mcp-sample.git\n\n# Navigate to the project directory\ncd azure-container-apps-mcp-sample\n\n# Install dependencies\nnpm install\n\n# Test Locally, Run the MCP server\nnpm start\n\n# Test the server (in another terminal)\ncurl -X POST http://localhost:3001/mcp \\ -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}' ```\n\nThe `server.js` (checkout the file from the above repository for more details) fetches live forex exchange rates from a Third-Party API and servers as live price converter for any requests. It performs the following functions\n\n1. Exchange Rate Management\n\n- Caches live exchange rates from exchangerate-api.com for 10 minutes\n- Fetches fresh rates when cache expires or is empty\n- Falls back to hardcoded rates if the external API fails (USD, EUR, GBP, JPY, INR, CAD, AUD, CHF, CNY)\n\n2. Exchange Rate Management\n\n- Listens on /mcp endpoint for POST requests with JSON-RPC 2.0 format\n- Handles tools/list method - Returns available tools (convert\\_currency)\n- Handles tools/call method - Executes currency conversion requests\n- Returns proper MCP responses with jsonrpc, id, and result/error fields\n\n``` // Fetch live exchange rates from exchangerate-api.com (free, no API key needed) async function getLiveRates() { try { // Check cache first if (ratesCache && cacheTimestamp && (Date.now() - cacheTimestamp) < CACHE_DURATION) { return ratesCache; } console.log('Fetching live exchange rates...'); const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD'); const data = await response.json() ```\n\n3. Currency Conversion Logic\n\n- USD as base conversion - Direct rate lookup for USD to other currencies\n- Other to USD conversion - Uses inverse rate (1/rate)\n- Cross-currency conversion - Converts through USD (from→USD→to)\n- Calculates exchange rate and final converted amount\n\n4. Response Formatting\n\n- Success response - Returns formatted text with amount, converted value, live rate, and timestamp\n- Error handling - Returns proper JSON-RPC error responses for failures\n\n# Deploy the App to Azure Container Apps\n\nThe [code](https://github.com/deepganguly/azure-container-apps-mcp-sample) can be deployed with the following commands. Also, check out the *main.bicep file* provided in the repository for quick one step deployment\n\n```\n# Clone the repository\ngit clone https://github.com/deepganguly/azure-container-apps-mcp-sample.git\n\n#Login to Azure az login\n\n# Create resource group\naz group create --name mcp-live-rates-rg --location eastus\n\n# Create Container App environment\naz containerapp env create --name mcp-forex-env --resource-group mcp-live-rates-rg --location eastus\n\n# Deploy container app\naz containerapp up --name mcp-live-forex-server --resource-group mcp-live-rates-rg --environment mcp-forex-env --source . --target-port 3001 --ingress external ```\n\n# Connect the MCP Server with VS Code Chat\n\n``` Step 1: Get Your Deployed Server URL\n\nAfter deployment, your server is available at: https://mcp-live-forex-server.****.eastus.azurecontainerapps.io/\n\nKey Endpoints:\n- MCP Endpoint: https://mcp-live-forex-server.****.eastus.azurecontainerapps.io/mcp\n- Health Check: https://mcp-live-forex-server.****.eastus.azurecontainerapps.io//health\n\nStep 2: Configure VS Code Settings\n\n1. Open VS Code\n2. Navigate to .vscode/mcp.json file with the following configurations\n{ \"servers\": { \"my-mcp-server-1a118d61\": { \"url\": \"https://mcp-live-forex-server.****.eastus.azurecontainerapps.io/mcp\", \"type\": \"http\" } }, \"inputs\": [ { \"id\": \"convert_currency\", \"type\": \"promptString\", \"description\": \"Convert {amount} {from} to {to} using live exchange rates\" } ] }\n3. Add the mcp.json as a Server\n4. Reload the Window and query the VS code chat client\n\n```\n\nFollowing picture showcases the Add Server configuration from the *mcp.json* file and the follow up conversation for the exchange rates\n\n# Conclusion\n\nIn this article we see the approach that enables to run serverless functions in a fully managed, scalable container environment, leveraging the flexibility of containers and the power of Azure Container Apps. You can now monitor, scale, and update your app easily using Azure tools and CLI.\n\nUpdated Oct 14, 2025\n\nVersion 1.0\n\n[azure container apps](/tag/azure%20container%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[DeepGanguly&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0zMTc3ODQ4LTBEV0FTUQ?image-coordinates=6%2C0%2C536%2C530&amp;image-dimensions=50x50)](/users/deepganguly/3177848) [DeepGanguly](/users/deepganguly/3177848) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined September 11, 2025\n\n[View Profile](/users/deepganguly/3177848)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedName": "Microsoft Tech Community",
  "Tags": []
}
