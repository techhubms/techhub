{
  "Link": "https://techcommunity.microsoft.com/t5/azure-integration-services-blog/introducing-native-service-bus-message-publishing-from-azure-api/ba-p/4462644",
  "Tags": [],
  "EnhancedContent": "## Azure API Management now supports sending messages directly to Azure Service Bus using a built-in policy. Simplify your event-driven architecture with managed identities, secure policies, and zero code changes.\n\nWe’re excited to announce a new capability in Azure API Management (APIM) — you can now send messages directly to Azure Service Bus from your APIs using a built-in policy. This enhancement simplifies how you connect your API layer with event-driven and asynchronous systems, helping you build more scalable, resilient, and loosely coupled architectures across your enterprise.\n\n#### **Why this matters?**\n\nModern applications increasingly rely on asynchronous communication and event-driven designs. With this new integration:\n\n- Any API hosted in API Management can publish to Service Bus — no SDKs, custom code, or middleware required.\n- Partners, clients, and IoT devices can send data through standard HTTP calls, even if they don’t support AMQP natively.\n- You stay in full control with authentication, throttling, and logging managed centrally in API Management.\n- Your systems scale more smoothly by decoupling front-end requests from backend processing.\n\n#### **How it works**\n\nThe new send-service-bus-message policy allows API Management to forward payloads from API calls directly into Service Bus queues or topics.\n\n**High-level flow**\n\n1. A client sends a standard HTTP request to your API endpoint in API Management.\n2. The policy executes and sends the payload as a message to Service Bus.\n3. Downstream consumers such as Logic Apps, Azure Functions, or microservices process those messages asynchronously.\n\nAll configurations happen in API Management — no code changes or new infrastructure are required.\n\n#### **Getting started**\n\nYou can try it out in minutes:\n\n1. Set up a Service Bus namespace and create a queue or topic.\n2. Enable a managed identity (system-assigned or user-assigned) on your API Management instance.\n3. Grant the identity the “Service Bus data sender” role in Azure RBAC, scoped to your queue/ topic.\n4. Add the policy to your API operation:\n\n&lt;send-service-bus-message queue-name=\"orders\"&gt; [&lt;payload&gt;@(context.Request.Body.As&lt;string&gt;())&lt;/payload](mailto:&lt;payload&gt;@%28context.Request.Body.As&lt;string&gt;%28%29%29&lt;/payload)&gt; &lt;/send-service-bus-message&gt;\n\nOnce saved, each API call publishes its payload to the Service Bus queue or topic. 📖 [Learn more.](https://learn.microsoft.com/en-us/azure/api-management/api-management-howto-send-service-bus?utm_source=chatgpt.com)\n\n#### **Common use cases**\n\nThis capability makes it easy to integrate your APIs into event-driven workflows:\n\n- Order processing – Queue incoming orders for fulfillment or billing.\n- Event notifications – Trigger internal workflows across multiple applications.\n- Telemetry ingestion – Forward IoT or mobile app data to Service Bus for analytics.\n- Partner integrations – Offer REST-based endpoints for external systems while maintaining policy-based control.\n\nEach of these scenarios benefits from simplified integration, centralized governance, and improved reliability.\n\n#### **Secure and governed by design**\n\nThe integration uses managed identities for secure communication between API Management and Service Bus — no secrets required. You can further apply enterprise-grade controls:\n\n- Enforce rate limits, quotas, and authorization through APIM policies.\n- Gain API-level logging and tracing for each message sent.\n- Use Service Bus metrics to monitor downstream processing.\n\nTogether, these tools help you maintain a consistent security posture across your APIs and messaging layer.\n\n#### **Build modern, event-driven architectures**\n\nWith this feature, API Management can serve as a bridge to your event-driven backbone. Start small by queuing a single API’s workload, or extend to enterprise-wide event distribution using topics and subscriptions. You’ll reduce architectural complexity while enabling more flexible, scalable, and decoupled application patterns.\n\n##### **Learn more**: Get the full walkthrough and examples in the documentation 👉 [here](https://learn.microsoft.com/en-us/azure/api-management/api-management-howto-send-service-bus?utm_source=chatgpt.com)\n\nPublished Oct 20, 2025\n\nVersion 1.0\n\n[api](/tag/api?nodeId=board%3AIntegrationsonAzureBlog)\n\n[api management](/tag/api%20management?nodeId=board%3AIntegrationsonAzureBlog)\n\n[azure](/tag/azure?nodeId=board%3AIntegrationsonAzureBlog)\n\n[azure event grid](/tag/azure%20event%20grid?nodeId=board%3AIntegrationsonAzureBlog)\n\n[built-in](/tag/built-in?nodeId=board%3AIntegrationsonAzureBlog)\n\n[enterprise integration](/tag/enterprise%20integration?nodeId=board%3AIntegrationsonAzureBlog)\n\n[integration](/tag/integration?nodeId=board%3AIntegrationsonAzureBlog)\n\n[messaging](/tag/messaging?nodeId=board%3AIntegrationsonAzureBlog)\n\n[!\\[anishta&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/m_assets/avatars/default/avatar-5.svg?image-dimensions=50x50)](/users/anishta/3024625) [anishta](/users/anishta/3024625) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined May 08, 2025\n\n[View Profile](/users/anishta/3024625)\n\n/category/azure/blog/integrationsonazureblog [Azure Integration Services Blog](/category/azure/blog/integrationsonazureblog) Follow this blog board to get notified when there's new activity",
  "Author": "anishta",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "ProcessedDate": "2025-10-20 01:31:02",
  "OutputDir": "_community",
  "FeedName": "Microsoft Tech Community",
  "PubDate": "2025-10-20T01:22:49+00:00",
  "Description": "We’re excited to announce a new capability in Azure API Management (APIM) — you can now send messages directly to Azure Service Bus from your APIs using a built-in policy. This enhancement simplifies how you connect your API layer with event-driven and asynchronous systems, helping you build more scalable, resilient, and loosely coupled architectures across your enterprise.\n\n#### **Why this matters?**\n\nModern applications increasingly rely on asynchronous communication and event-driven designs. With this new integration:\n\n- Any API hosted in API Management can publish to Service Bus — no SDKs, custom code, or middleware required.\n- Partners, clients, and IoT devices can send data through standard HTTP calls, even if they don’t support AMQP natively.\n- You stay in full control with authentication, throttling, and logging managed centrally in API Management.\n- Your systems scale more smoothly by decoupling front-end requests from backend processing.\n\n#### **How it works**\n\nThe new send-service-bus-message policy allows API Management to forward payloads from API calls directly into Service Bus queues or topics.\n\n**High-level flow**\n\n1. A client sends a standard HTTP request to your API endpoint in API Management.\n2. The policy executes and sends the payload as a message to Service Bus.\n3. Downstream consumers such as Logic Apps, Azure Functions, or microservices process those messages asynchronously.\n\nAll configurations happen in API Management — no code changes or new infrastructure are required.\n\n#### **Getting started**\n\nYou can try it out in minutes:\n\n1. Set up a Service Bus namespace and create a queue or topic.\n2. Enable a managed identity (system-assigned or user-assigned) on your API Management instance.\n3. Grant the identity the “Service Bus data sender” role in Azure RBAC, scoped to your queue/ topic.\n4. Add the policy to your API operation:\n\n[Learn more.](mailto:@%28context.Request.Body.As%28%29%29@%28context.Request.Body.As%28%29%29>%20</SPAN><BR><SPAN></SPAN>%20<SPAN>%20</SPAN></p>\n\n<P><SPAN>Once%20saved,%20each%20API%20call%20publishes%20its%20payload%20to%20the%20Service%20Bus%20queue%20or%20topic.%20📖%20</SPAN><A%20href=)\n\n#### **Common use cases**\n\nThis capability makes it easy to integrate your APIs into event-driven workflows:\n\n- Order processing – Queue incoming orders for fulfillment or billing.\n- Event notifications – Trigger internal workflows across multiple applications.\n- Telemetry ingestion – Forward IoT or mobile app data to Service Bus for analytics.\n- Partner integrations – Offer REST-based endpoints for external systems while maintaining policy-based control.\n\nEach of these scenarios benefits from simplified integration, centralized governance, and improved reliability.\n\n#### **Secure and governed by design**\n\nThe integration uses managed identities for secure communication between API Management and Service Bus — no secrets required. You can further apply enterprise-grade controls:\n\n- Enforce rate limits, quotas, and authorization through APIM policies.\n- Gain API-level logging and tracing for each message sent.\n- Use Service Bus metrics to monitor downstream processing.\n\nTogether, these tools help you maintain a consistent security posture across your APIs and messaging layer.\n\n#### **Build modern, event-driven architectures**\n\nWith this feature, API Management can serve as a bridge to your event-driven backbone. Start small by queuing a single API’s workload, or extend to enterprise-wide event distribution using topics and subscriptions. You’ll reduce architectural complexity while enabling more flexible, scalable, and decoupled application patterns.\n\n##### **Learn more**: Get the full walkthrough and examples in the documentation 👉 [here](https://learn.microsoft.com/en-us/azure/api-management/api-management-howto-send-service-bus?utm_source=chatgpt.com)",
  "Title": "Introducing native Service Bus message publishing from Azure API Management"
}
