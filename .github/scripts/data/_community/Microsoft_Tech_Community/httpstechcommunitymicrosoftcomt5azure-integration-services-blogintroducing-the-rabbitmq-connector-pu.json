{
  "OutputDir": "_community",
  "EnhancedContent": "## Connect to RabbitMQ from Azure Logic Apps (Standard and Hybrid)\n\nWe are pleased to announce the introduction of the RabbitMQ Connector in Logic Apps (Standard) which allows you to both send and receive messages between Logic Apps and RabbitMQ.\n\n**RabbitMQ** is a robust, open-source message broker widely used for building reliable, scalable, and flexible messaging solutions. It is trusted across industries such as financial services, e-commerce, IoT, telecommunications, and cloud-native microservices.\n\nOur RabbitMQ connector allows messaging scenarios on-premises using **Logic Apps hybrid**.\n\n**Benefits of Using RabbitMQ**\n\n- **Reliability:** RabbitMQ ensures message delivery with strong durability and acknowledgment mechanisms.\n- **Flexible Routing:** Supports complex routing logic via exchanges (direct, topic, fanout, headers).\n- **Clustering & High Availability:** Offers clustering and mirrored queues for fault tolerance.\n- **Management & Monitoring:** Provides a user-friendly management UI and extensive monitoring capabilities.\n- **Extensibility:** Supports plugins for authentication, federation, and more.\n\nOur current connector offering supports both triggers (receive) and sending (publish) within Logic Apps.\n\n### **Receiving Messages**\n\nTo enable a trigger, we need to search for the RabbitMQ connector within our designer. We will discover an operation called When the queue has messages from RabbitMQ show up as a built-in connector. We also have a peek lock operation for non-destructive reads.\n\nSearch for Trigger and click on this operation to add the trigger to your design surface. Configure the trigger by providing the **Queue Name.**\n\nYou can use the payload from your trigger in downstream actions. For example, you might place the payload within a Compose action for further processing.\n\n**Publishing Messages**\n\nTo send a message, search for the RabbitMQ connector in your design experience. You’ll find an operation called **Send a message**.\n\n- Add this operation to your design surface and Provide the following:\n- **Queue Name**\n- **Message Body**\n- **Exchange Name** (if routing is required)\n- **Routing Key**\n\nOnce configured, you can run messages through your solution. To see this in action, refer to the demonstration video (No link found).\n\n**Completing Messages**\n\nTo Complete messages, in scenarios using peek-lock, search for the RabbitMQ connector within the Logic Apps designer. You’ll find an operation called **Complete message** as a built-in connector. Search for the action and click on this operation to add the action to your design surface.\n\n- Provide:\n- Delivery tag\n- Consumer tag\n- Acknowledgment (Complete or Reject)\n\nYou can use the payload from your trigger in downstream actions. For example, you might place the payload within a Compose action for further processing. You can also create queues as well, with the **Create a queue** action.\n\nPlease see the following video with further details on the configuration of this connector:\n\n**Supported Regions**\n\nWe are rolling out this connector worldwide, with some regions receiving it before others.\n\nUpdated Oct 20, 2025\n\nVersion 2.0\n\n[azure](/tag/azure?nodeId=board%3AIntegrationsonAzureBlog)\n\n[biztalk modernization](/tag/biztalk%20modernization?nodeId=board%3AIntegrationsonAzureBlog)\n\n[hybrid](/tag/hybrid?nodeId=board%3AIntegrationsonAzureBlog)\n\n[logic apps](/tag/logic%20apps?nodeId=board%3AIntegrationsonAzureBlog)\n\n[messaging](/tag/messaging?nodeId=board%3AIntegrationsonAzureBlog)\n\n[!\\[hcamposu&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xNTI0MTY1LTUwOTc2N2lCREVDRDAxQjMxQ0Q3OTM0?image-dimensions=50x50)](/users/hcamposu/1524165) [hcamposu](/users/hcamposu/1524165) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined September 16, 2022\n\n[View Profile](/users/hcamposu/1524165)\n\n/category/azure/blog/integrationsonazureblog [Azure Integration Services Blog](/category/azure/blog/integrationsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "FeedName": "Microsoft Tech Community",
  "ProcessedDate": "2025-10-20 14:04:11",
  "PubDate": "2025-10-20T13:52:07+00:00",
  "Link": "https://techcommunity.microsoft.com/t5/azure-integration-services-blog/introducing-the-rabbitmq-connector-public-preview/ba-p/4462627",
  "Tags": [],
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Author": "hcamposu",
  "Description": "We are pleased to announce the introduction of the RabbitMQ Connector in Logic Apps (Standard) which allows you to both send and receive messages between Logic Apps and RabbitMQ.\n\n**RabbitMQ** is a robust, open-source message broker widely used for building reliable, scalable, and flexible messaging solutions. It is trusted across industries such as financial services, e-commerce, IoT, telecommunications, and cloud-native microservices.\n\nOur RabbitMQ connector allows messaging scenarios on-premises using **Logic Apps hybrid**.\n\n**Benefits of Using RabbitMQ**\n\n- **Reliability:** RabbitMQ ensures message delivery with strong durability and acknowledgment mechanisms.\n- **Flexible Routing:** Supports complex routing logic via exchanges (direct, topic, fanout, headers).\n- **Clustering & High Availability:** Offers clustering and mirrored queues for fault tolerance.\n- **Management & Monitoring:** Provides a user-friendly management UI and extensive monitoring capabilities.\n- **Extensibility:** Supports plugins for authentication, federation, and more.\n\nOur current connector offering supports both triggers (receive) and sending (publish) within Logic Apps.\n\n### **Receiving Messages**\n\nTo enable a trigger, we need to search for the RabbitMQ connector within our designer. We will discover an operation called When the queue has messages from RabbitMQ show up as a built-in connector. We also have a peek lock operation for non-destructive reads.\n\n![]()\n\nSearch for Trigger and click on this operation to add the trigger to your design surface. Configure the trigger by providing the **Queue Name.**\n\n![]()\n\nYou can use the payload from your trigger in downstream actions. For example, you might place the payload within a Compose action for further processing.\n\n**Publishing Messages**\n\nTo send a message, search for the RabbitMQ connector in your design experience. You’ll find an operation called **Send a message**.\n\n- Add this operation to your design surface and Provide the following:\n- **Queue Name**\n- **Message Body**\n- **Exchange Name** (if routing is required)\n- **Routing Key**\n\n![]()\n\nOnce configured, you can run messages through your solution. To see this in action, refer to the demonstration video (No link found).\n\n**Completing Messages**\n\nTo Complete messages, in scenarios using peek-lock, search for the RabbitMQ connector within the Logic Apps designer. You’ll find an operation called **Complete message** as a built-in connector. Search for the action and click on this operation to add the action to your design surface.\n\n- Provide:\n- Delivery tag\n- Consumer tag\n- Acknowledgment (Complete or Reject)\n\n![]()\n\nYou can use the payload from your trigger in downstream actions. For example, you might place the payload within a Compose action for further processing. You can also create queues as well, with the **Create a queue** action.\n\nPlease see the following video with further details on the configuration of this connector:\n\n**Supported Regions**\n\nWe are rolling out this connector worldwide, with some regions receiving it before others.",
  "Title": "Introducing the RabbitMQ Connector (Public Preview)"
}
