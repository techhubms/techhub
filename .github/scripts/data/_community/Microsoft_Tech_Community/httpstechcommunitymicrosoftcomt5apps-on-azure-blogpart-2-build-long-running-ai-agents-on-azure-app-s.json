{
  "ProcessedDate": "2025-10-31 16:04:15",
  "Description": "Last week, I shared how to [build long-running AI agents on Azure App Service with Microsoft Agent Framework](https://techcommunity.microsoft.com/blog/appsonazureblog/build-long-running-ai-agents-on-azure-app-service-with-microsoft-agent-framework/4463159). If you haven't seen that post yet, I would recommend starting there as this post builds on the foundations introduced there including getting started with [Microsoft Agent Framework](https://learn.microsoft.com/agent-framework/overview/agent-framework-overview). The response so far was great, and one comment in particular stood out:\n\n> >\n> \"Thanks for the example. Nice job! Just curious (I still have to investigate the ins and outs of MAF) but why didn't you use the workflow pattern/classes of MAF? I thought that was meant to be the way to connect agents and let them cooperate (even in long running job situations).\"\n> > >\n> ‚Äî [Michel_Schep‚Äã](javascript:void%280%29)\n> >\n\n**Great question!** You're absolutely right in questioning this‚Äîthe initial sample I created was designed to demonstrate the async request-reply architecture for handling long-running operations on App Service with a single agent. Today, we're taking the next step: a **multi-agent workflow sample** that addresses exactly what you asked about and is the next leap in building agentic apps in the cloud.\n\nIn this post, we'll explore:\n\n‚úÖ Building multi-agent systems with specialized, collaborating AI agents ‚úÖ When to create agents in code vs. using Azure AI Foundry portal ‚úÖ Orchestrating complex workflows with parallel and sequential execution ‚úÖ Real-world patterns for production multi-agent applications\n\nüîó **Full Sample Code**: [https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet](https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet)\n\n## Why Multi-Agent Systems?\n\nThe single-agent pattern I showed last week works great for straightforward tasks. But real-world AI applications often need **specialized expertise** across different domains. That's where multi-agent systems shine.\n\n### The Travel Planning Challenge\n\nImagine planning a trip to Tokyo. You need:\n\n- **Currency expertise** for budget conversion and exchange rates\n- **Weather knowledge** for packing recommendations and seasonal planning\n- **Local insights** about customs, culture, and etiquette\n- **Itinerary skills** to create day-by-day schedules\n- **Budget optimization** to allocate funds across categories\n- **Coordination** to assemble everything into a cohesive plan\n\nWith a single agent handling all of this, you get a \"jack of all trades, master of none\" situation. The prompts become complex, the agent loses focus, and results can be inconsistent.\n\n### Enter Multi-Agent Workflows\n\nInstead of one generalist agent, we can create **6 or more specialized agents**, each with a focused responsibility:\n\n1. **Currency Converter Agent** - Real-time exchange rates (Frankfurter API integration)\n2. **Weather Advisor Agent** - Forecasts and packing tips (National Weather Service API)\n3. **Local Knowledge Agent** - Cultural insights and customs\n4. **Itinerary Planner Agent** - Day-by-day activity scheduling\n5. **Budget Optimizer Agent** - Cost allocation and optimization\n6. **Coordinator Agent** - Final assembly and formatting\n\nEach agent has:\n\n- üéØ **Clear, focused instructions** specific to its domain\n- üõ†Ô∏è **Specialized tools** (weather API, currency API)\n- üìä **Defined inputs and outputs** for predictable collaboration\n- ‚úÖ **Testable behavior** that's easy to validate\n\nAdditionally, if you wanted to extend this even further, you could create even more agents and give some of your specialist agents even more knowledge by connecting additional tools and MCP servers. The possibilities are endless, and I hope this post inspires you to start thinking about what you can build and achieve.\n\n## What Makes This Possible? Microsoft Agent Framework\n\nAll of this is powered by **[Microsoft Agent Framework](https://learn.microsoft.com/agent-framework/overview/agent-framework-overview)**‚Äîa comprehensive platform for building, deploying, and managing AI agents that goes far beyond simple chat completions.\n\n### Understanding Agent Framework vs. Other Approaches\n\nBefore diving into the details, it's important to understand what Agent Framework is. Unlike frameworks like Semantic Kernel where you orchestrate AI behavior entirely in your application code with direct API calls, **Agent Framework creates actual agent resources** that live on Azure AI Foundry's infrastructure.\n\nWhen you use Agent Framework:\n\n- **Agents are Azure resources** - They exist on the server-side in Azure AI Foundry, not just as code patterns\n- **Execution happens on Foundry** - Agent runs execute on Azure's infrastructure with built-in state management\n- **You get structured primitives** - Agents, Threads, and Runs are first-class concepts with their own lifecycles\n- **Server-side persistence** - Conversation history and context are managed by the platform\n\nThis is fundamentally different from client-side orchestration frameworks where your code directly manages everything. With Agent Framework, you're leveraging a managed service for agent execution.\n\nIf you're new to Agent Framework, here's what makes it special:\n\n**üîÑ Persistent Agents**: Server-side agents that maintain context across multiple interactions, not just one-off API calls **üí¨ Conversation Threads**: Organized conversation history and state management that persists across agent runs **üéØ Agent Runs**: Structured execution with progress tracking and lifecycle management‚Äîyou can monitor exactly what your agents are doing **üîÅ Multi-Turn Interactions**: Complex workflows with iterative AI processing, where agents can refine and improve their outputs **üõ†Ô∏è Tool Integration**: Extensible function calling and integration capabilities‚Äîagents can call external APIs, execute code, and interact with real-world systems\n\nIn our sample, Agent Framework handles:\n\n- Creating and managing 6 specialized agents programmatically\n- Maintaining conversation context as agents collaborate\n- Tracking execution progress across workflow phases\n- Managing agent lifecycle (creation, execution, cleanup)\n- Integrating external APIs (weather, currency) seamlessly\n\nThe beauty of Agent Framework is that it makes complex multi-agent orchestration feel natural. You focus on defining what your agents should do, and the framework handles the infrastructure, state management, and execution‚Äîall running on Azure AI Foundry with enterprise-grade reliability.\n\n## The Multi-Agent Workflow\n\nHere's how these agents collaborate to create a comprehensive travel plan in the sample I put together:\n\n![]()\n\n### Execution Phases\n\n**Phase 1: Parallel Information Gathering (10-40%)**\n\n- Currency, Weather, and Local Knowledge agents execute **simultaneously**\n- No dependencies = maximum performance\n- Results stored in workflow state for downstream agents\n\n**Phase 2: Itinerary Planning (40-70%)**\n\n- Itinerary Planner uses context from all Phase 1 agents\n- Weather data influences activity recommendations\n- Local knowledge shapes cultural experiences\n- Currency conversion informs budget-conscious choices\n\n**Phase 3: Budget Optimization (70-90%)**\n\n- Budget Optimizer analyzes the proposed itinerary\n- Allocates funds across categories (lodging, food, activities, transport)\n- Provides cost-saving tips without compromising the experience\n\n**Phase 4: Final Assembly (90-100%)**\n\n- Coordinator compiles all agent outputs\n- Formats comprehensive travel plan with tips\n- Returns structured, user-friendly itinerary\n\n### Benefits of This Architecture\n\n‚úÖ **Faster Execution**: Parallel agents complete in ~30% less time ‚úÖ **Better Quality**: Specialized agents produce more focused, accurate results ‚úÖ **Easy Debugging**: Each agent's contribution is isolated and traceable ‚úÖ **Maintainable**: Update one agent without affecting others ‚úÖ **Scalable**: Add new agents (flight booking, hotel search) without refactoring ‚úÖ **Testable**: Validate each agent independently with unit tests\n\n## The Complete Architecture\n\nHere's how everything fits together on Azure App Service:\n\n![]()\n\nThis architecture builds on the async request-reply pattern from our previous post, adding:\n\n‚úÖ **Multi-agent orchestration** in the background worker ‚úÖ **Parallel execution** of independent agents for performance ‚úÖ **Code-generated agents** for production-ready DevOps ‚úÖ **External API integration** (weather, currency) for real-world data ‚úÖ **Progress tracking** across workflow phases (10% ‚Üí 40% ‚Üí 70% ‚Üí 100%)\n\n## Get Started Today\n\nReady to build your own multi-agent workflows on Azure App Service? Try out the sample today!\n\nüîó **GitHub Repository**: [https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet](https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet)\n\nThe repository includes:\n\n- ‚úÖ Complete .NET 9 source code with 6 specialized agents\n- ‚úÖ Infrastructure as Code (Bicep) for one-command deployment\n- ‚úÖ Complete web UI with real-time progress tracking\n- ‚úÖ Comprehensive README with architecture documentation\n- ‚úÖ External API integrations (weather, currency)\n\n### Deploy in Minutes\n\n- git clone https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet.git\ncd app-service-maf-workflow-travel-agent-dotnet azd auth login azd up\n\nThe `azd up` command provisions:\n\n- Azure App Service (P0v4 Premium)\n- Azure Service Bus (message queue for async processing)\n- Azure Cosmos DB (state storage with 24-hour TTL)\n- Azure AI Foundry (AI Services + Project for Agent Framework)\n- GPT-4o model deployment (GlobalStandard 50K TPM)\n\nThen manually deploy the WebJob following the [README instructions](https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet#deploy-the-webjob).\n\n## What's Next? Extend This Pattern\n\nThis sample demonstrates production-ready patterns you can extend:\n\n### üõ†Ô∏è Add More Specialized Agents\n\n- **Flight Expert Agent** - Search and compare flight prices\n- **Hotel Specialist Agent** - Find accommodations based on preferences\n- **Activity Planner Agent** - Book tours, restaurants, events\n- **Transportation Agent** - Plan routes, transit passes, car rentals\n\n### ü§ù Implement Agent-to-Agent Communication\n\n- Agents negotiate conflicting recommendations\n- Hierarchical structures with supervisor agents\n- Voting mechanisms for decision-making\n\n### üß† Add Advanced Capabilities\n\n- **RAG (Retrieval Augmented Generation)** for destination-specific knowledge bases\n- **Memory** to remember user preferences across trips\n- **Vision models** to analyze travel photos and recommend similar destinations\n- **Multi-language support** for international travelers\n\n### üìä Production Enhancements\n\n- **Authentication** - Microsoft Entra AD for user identity\n- **Application Insights** - Distributed tracing and custom metrics\n- **VNet Integration** - Private endpoints for security\n- **Auto-Scaling** - Scale workers based on queue depth\n- **Webhooks** - Notify users when their travel plan is ready\n\n## Key Takeaways\n\n‚úÖ **Multi-agent systems** provide specialized expertise and better results than single generalist agents\n\n‚úÖ **Azure App Service** provides a simple, reliable platform for long-running multi-agent workflows\n\n‚úÖ **Async request-reply pattern** with Service Bus + Cosmos DB ensures scalability and resilience\n\n‚úÖ **External API integration** makes agents more useful with real-world data\n\n‚úÖ **Parallel execution** of independent agents dramatically improves performance\n\nWhether you're building travel planners, document processors, research assistants, or other AI-powered applications, multi-agent workflows on Azure App Service give you the flexibility and sophistication you need.\n\n## Learn More\n\n- **[Microsoft Agent Framework Documentation](https://learn.microsoft.com/en-us/agent-framework/overview/agent-framework-overview)** - Complete guide to Agent Framework\n- **[Original Blog Post](https://techcommunity.microsoft.com/blog/appsonazureblog/build-long-running-ai-agents-on-azure-app-service-with-microsoft-agent-framework/4463159)** - Single-agent async patterns on App Service\n- **[Azure App Service Best Practices](https://learn.microsoft.com/azure/app-service/app-service-best-practices)** - Production deployment patterns\n- **[Async Request-Reply Pattern](https://learn.microsoft.com/azure/architecture/patterns/async-request-reply)** - Architecture guidance\n- **[Azure App Service WebJobs](https://learn.microsoft.com/azure/app-service/overview-webjobs)** - Background processing documentation\n\n## We Want to Hear From You!\n\nThanks again to [Michel_Schep‚Äã](javascript:void%280%29) for the great question that inspired this follow-up sample!\n\nHave you built multi-agent systems with Agent Framework? Are you using Azure App Service to host your AI and intelligent apps? We'd love to hear about your experience in the comments below.\n\nQuestions about multi-agent workflows on App Service? Drop a comment and our team will help you get started.\n\nHappy building! üöÄ",
  "Title": "Part 2: Build Long-Running AI Agents on Azure App Service with Microsoft Agent Framework",
  "OutputDir": "_community",
  "EnhancedContent": "## Learn how to build sophisticated multi-agent systems with Microsoft Agent Framework on Azure App Service‚Äîa continuation from last week's introduction to Microsoft Agent Framework.\n\nLast week, I shared how to [build long-running AI agents on Azure App Service with Microsoft Agent Framework](https://techcommunity.microsoft.com/blog/appsonazureblog/build-long-running-ai-agents-on-azure-app-service-with-microsoft-agent-framework/4463159). If you haven't seen that post yet, I would recommend starting there as this post builds on the foundations introduced there including getting started with [Microsoft Agent Framework](https://learn.microsoft.com/agent-framework/overview/agent-framework-overview). The response so far was great, and one comment in particular stood out:\n\n> >\n> \"Thanks for the example. Nice job! Just curious (I still have to investigate the ins and outs of MAF) but why didn't you use the workflow pattern/classes of MAF? I thought that was meant to be the way to connect agents and let them cooperate (even in long running job situations).\"\n> > >\n> ‚Äî [Michel_Schep‚Äã](javascript:void%280%29)\n> >\n\n**Great question!** You're absolutely right in questioning this‚Äîthe initial sample I created was designed to demonstrate the async request-reply architecture for handling long-running operations on App Service with a single agent. Today, we're taking the next step: a **multi-agent workflow sample** that addresses exactly what you asked about and is the next leap in building agentic apps in the cloud.\n\nIn this post, we'll explore:\n\n‚úÖ Building multi-agent systems with specialized, collaborating AI agents ‚úÖ When to create agents in code vs. using Azure AI Foundry portal ‚úÖ Orchestrating complex workflows with parallel and sequential execution ‚úÖ Real-world patterns for production multi-agent applications\n\nüîó **Full Sample Code**: [https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet](https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet)\n\n## Why Multi-Agent Systems?\n\nThe single-agent pattern I showed last week works great for straightforward tasks. But real-world AI applications often need **specialized expertise** across different domains. That's where multi-agent systems shine.\n\n### The Travel Planning Challenge\n\nImagine planning a trip to Tokyo. You need:\n\n- **Currency expertise** for budget conversion and exchange rates\n- **Weather knowledge** for packing recommendations and seasonal planning\n- **Local insights** about customs, culture, and etiquette\n- **Itinerary skills** to create day-by-day schedules\n- **Budget optimization** to allocate funds across categories\n- **Coordination** to assemble everything into a cohesive plan\n\nWith a single agent handling all of this, you get a \"jack of all trades, master of none\" situation. The prompts become complex, the agent loses focus, and results can be inconsistent.\n\n### Enter Multi-Agent Workflows\n\nInstead of one generalist agent, we can create **6 or more specialized agents**, each with a focused responsibility:\n\n1. **Currency Converter Agent** - Real-time exchange rates (Frankfurter API integration)\n2. **Weather Advisor Agent** - Forecasts and packing tips (National Weather Service API)\n3. **Local Knowledge Agent** - Cultural insights and customs\n4. **Itinerary Planner Agent** - Day-by-day activity scheduling\n5. **Budget Optimizer Agent** - Cost allocation and optimization\n6. **Coordinator Agent** - Final assembly and formatting\n\nEach agent has:\n\n- üéØ **Clear, focused instructions** specific to its domain\n- üõ†Ô∏è **Specialized tools** (weather API, currency API)\n- üìä **Defined inputs and outputs** for predictable collaboration\n- ‚úÖ **Testable behavior** that's easy to validate\n\nAdditionally, if you wanted to extend this even further, you could create even more agents and give some of your specialist agents even more knowledge by connecting additional tools and MCP servers. The possibilities are endless, and I hope this post inspires you to start thinking about what you can build and achieve.\n\n## What Makes This Possible? Microsoft Agent Framework\n\nAll of this is powered by **[Microsoft Agent Framework](https://learn.microsoft.com/agent-framework/overview/agent-framework-overview)**‚Äîa comprehensive platform for building, deploying, and managing AI agents that goes far beyond simple chat completions.\n\n### Understanding Agent Framework vs. Other Approaches\n\nBefore diving into the details, it's important to understand what Agent Framework is. Unlike frameworks like Semantic Kernel where you orchestrate AI behavior entirely in your application code with direct API calls, **Agent Framework creates actual agent resources** that live on Azure AI Foundry's infrastructure.\n\nWhen you use Agent Framework:\n\n- **Agents are Azure resources** - They exist on the server-side in Azure AI Foundry, not just as code patterns\n- **Execution happens on Foundry** - Agent runs execute on Azure's infrastructure with built-in state management\n- **You get structured primitives** - Agents, Threads, and Runs are first-class concepts with their own lifecycles\n- **Server-side persistence** - Conversation history and context are managed by the platform\n\nThis is fundamentally different from client-side orchestration frameworks where your code directly manages everything. With Agent Framework, you're leveraging a managed service for agent execution.\n\nIf you're new to Agent Framework, here's what makes it special:\n\n**üîÑ Persistent Agents**: Server-side agents that maintain context across multiple interactions, not just one-off API calls **üí¨ Conversation Threads**: Organized conversation history and state management that persists across agent runs **üéØ Agent Runs**: Structured execution with progress tracking and lifecycle management‚Äîyou can monitor exactly what your agents are doing **üîÅ Multi-Turn Interactions**: Complex workflows with iterative AI processing, where agents can refine and improve their outputs **üõ†Ô∏è Tool Integration**: Extensible function calling and integration capabilities‚Äîagents can call external APIs, execute code, and interact with real-world systems\n\nIn our sample, Agent Framework handles:\n\n- Creating and managing 6 specialized agents programmatically\n- Maintaining conversation context as agents collaborate\n- Tracking execution progress across workflow phases\n- Managing agent lifecycle (creation, execution, cleanup)\n- Integrating external APIs (weather, currency) seamlessly\n\nThe beauty of Agent Framework is that it makes complex multi-agent orchestration feel natural. You focus on defining what your agents should do, and the framework handles the infrastructure, state management, and execution‚Äîall running on Azure AI Foundry with enterprise-grade reliability.\n\n## The Multi-Agent Workflow\n\nHere's how these agents collaborate to create a comprehensive travel plan in the sample I put together:\n\n### Execution Phases\n\n**Phase 1: Parallel Information Gathering (10-40%)**\n\n- Currency, Weather, and Local Knowledge agents execute **simultaneously**\n- No dependencies = maximum performance\n- Results stored in workflow state for downstream agents\n\n**Phase 2: Itinerary Planning (40-70%)**\n\n- Itinerary Planner uses context from all Phase 1 agents\n- Weather data influences activity recommendations\n- Local knowledge shapes cultural experiences\n- Currency conversion informs budget-conscious choices\n\n**Phase 3: Budget Optimization (70-90%)**\n\n- Budget Optimizer analyzes the proposed itinerary\n- Allocates funds across categories (lodging, food, activities, transport)\n- Provides cost-saving tips without compromising the experience\n\n**Phase 4: Final Assembly (90-100%)**\n\n- Coordinator compiles all agent outputs\n- Formats comprehensive travel plan with tips\n- Returns structured, user-friendly itinerary\n\n### Benefits of This Architecture\n\n‚úÖ **Faster Execution**: Parallel agents complete in ~30% less time ‚úÖ **Better Quality**: Specialized agents produce more focused, accurate results ‚úÖ **Easy Debugging**: Each agent's contribution is isolated and traceable ‚úÖ **Maintainable**: Update one agent without affecting others ‚úÖ **Scalable**: Add new agents (flight booking, hotel search) without refactoring ‚úÖ **Testable**: Validate each agent independently with unit tests\n\n## The Complete Architecture\n\nHere's how everything fits together on Azure App Service:\n\nThis architecture builds on the async request-reply pattern from our previous post, adding:\n\n‚úÖ **Multi-agent orchestration** in the background worker ‚úÖ **Parallel execution** of independent agents for performance ‚úÖ **Code-generated agents** for production-ready DevOps ‚úÖ **External API integration** (weather, currency) for real-world data ‚úÖ **Progress tracking** across workflow phases (10% ‚Üí 40% ‚Üí 70% ‚Üí 100%)\n\n## Get Started Today\n\nReady to build your own multi-agent workflows on Azure App Service? Try out the sample today!\n\nüîó **GitHub Repository**: [https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet](https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet)\n\nThe repository includes:\n\n- ‚úÖ Complete .NET 9 source code with 6 specialized agents\n- ‚úÖ Infrastructure as Code (Bicep) for one-command deployment\n- ‚úÖ Complete web UI with real-time progress tracking\n- ‚úÖ Comprehensive README with architecture documentation\n- ‚úÖ External API integrations (weather, currency)\n\n### Deploy in Minutes\n\n``` git clone https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet.git cd app-service-maf-workflow-travel-agent-dotnet azd auth login azd up\n\n```\n\nThe `azd up` command provisions:\n\n- Azure App Service (P0v4 Premium)\n- Azure Service Bus (message queue for async processing)\n- Azure Cosmos DB (state storage with 24-hour TTL)\n- Azure AI Foundry (AI Services + Project for Agent Framework)\n- GPT-4o model deployment (GlobalStandard 50K TPM)\n\nThen manually deploy the WebJob following the [README instructions](https://github.com/Azure-Samples/app-service-maf-workflow-travel-agent-dotnet#deploy-the-webjob).\n\n## What's Next? Extend This Pattern\n\nThis sample demonstrates production-ready patterns you can extend:\n\n### üõ†Ô∏è Add More Specialized Agents\n\n- **Flight Expert Agent** - Search and compare flight prices\n- **Hotel Specialist Agent** - Find accommodations based on preferences\n- **Activity Planner Agent** - Book tours, restaurants, events\n- **Transportation Agent** - Plan routes, transit passes, car rentals\n\n### ü§ù Implement Agent-to-Agent Communication\n\n- Agents negotiate conflicting recommendations\n- Hierarchical structures with supervisor agents\n- Voting mechanisms for decision-making\n\n### üß† Add Advanced Capabilities\n\n- **RAG (Retrieval Augmented Generation)** for destination-specific knowledge bases\n- **Memory** to remember user preferences across trips\n- **Vision models** to analyze travel photos and recommend similar destinations\n- **Multi-language support** for international travelers\n\n### üìä Production Enhancements\n\n- **Authentication** - Microsoft Entra AD for user identity\n- **Application Insights** - Distributed tracing and custom metrics\n- **VNet Integration** - Private endpoints for security\n- **Auto-Scaling** - Scale workers based on queue depth\n- **Webhooks** - Notify users when their travel plan is ready\n\n## Key Takeaways\n\n‚úÖ **Multi-agent systems** provide specialized expertise and better results than single generalist agents\n\n‚úÖ **Azure App Service** provides a simple, reliable platform for long-running multi-agent workflows\n\n‚úÖ **Async request-reply pattern** with Service Bus + Cosmos DB ensures scalability and resilience\n\n‚úÖ **External API integration** makes agents more useful with real-world data\n\n‚úÖ **Parallel execution** of independent agents dramatically improves performance\n\nWhether you're building travel planners, document processors, research assistants, or other AI-powered applications, multi-agent workflows on Azure App Service give you the flexibility and sophistication you need.\n\n## Learn More\n\n- **[Microsoft Agent Framework Documentation](https://learn.microsoft.com/en-us/agent-framework/overview/agent-framework-overview)** - Complete guide to Agent Framework\n- **[Original Blog Post](https://techcommunity.microsoft.com/blog/appsonazureblog/build-long-running-ai-agents-on-azure-app-service-with-microsoft-agent-framework/4463159)** - Single-agent async patterns on App Service\n- **[Azure App Service Best Practices](https://learn.microsoft.com/azure/app-service/app-service-best-practices)** - Production deployment patterns\n- **[Async Request-Reply Pattern](https://learn.microsoft.com/azure/architecture/patterns/async-request-reply)** - Architecture guidance\n- **[Azure App Service WebJobs](https://learn.microsoft.com/azure/app-service/overview-webjobs)** - Background processing documentation\n\n## We Want to Hear From You!\n\nThanks again to [Michel_Schep‚Äã](javascript:void%280%29) for the great question that inspired this follow-up sample!\n\nHave you built multi-agent systems with Agent Framework? Are you using Azure App Service to host your AI and intelligent apps? We'd love to hear about your experience in the comments below.\n\nQuestions about multi-agent workflows on App Service? Drop a comment and our team will help you get started.\n\nHappy building! üöÄ\n\nUpdated Oct 31, 2025\n\nVersion 2.0\n\n[.net](/tag/.net?nodeId=board%3AAppsonAzureBlog)\n\n[azure app service](/tag/azure%20app%20service?nodeId=board%3AAppsonAzureBlog)\n\n[modern apps](/tag/modern%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[web apps](/tag/web%20apps?nodeId=board%3AAppsonAzureBlog)\n\n[!\\[jordanselig&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0xMTg1ODUyLTQwNTU5Mmk4NTY0MjQ3RTE3NURDNzJC?image-dimensions=50x50)](/users/jordanselig/1185852) [jordanselig](/users/jordanselig/1185852) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined October 14, 2021\n\n[View Profile](/users/jordanselig/1185852)\n\n/category/azure/blog/appsonazureblog [Apps on Azure Blog](/category/azure/blog/appsonazureblog) Follow this blog board to get notified when there's new activity",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Category?category.id=Azure",
  "PubDate": "2025-10-31T15:44:05+00:00",
  "Author": "jordanselig",
  "Tags": [],
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "Link": "https://techcommunity.microsoft.com/t5/apps-on-azure-blog/part-2-build-long-running-ai-agents-on-azure-app-service-with/ba-p/4465825",
  "FeedName": "Microsoft Tech Community"
}
