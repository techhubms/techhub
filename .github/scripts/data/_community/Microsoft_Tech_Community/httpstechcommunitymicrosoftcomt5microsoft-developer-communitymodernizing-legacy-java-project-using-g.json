{
  "PubDate": "2025-08-12T04:15:00+00:00",
  "Author": "jorgebalderas",
  "OutputDir": "_community",
  "Title": "Modernizing legacy Java project using GitHub Copilot App Modernization upgrade for Java",
  "ProcessedDate": "2025-08-12 05:06:34",
  "Description": "The [**GitHub Copilot App Modernization – Upgrade for Java**](https://learn.microsoft.com/java/upgrade/overview) is an AI-powered solution designed to streamline the modernization of legacy Java applications. This tool is available as a **Visual Studio Code extension** and leverages **GitHub Copilot** to perform the following tasks:\n\n- Analyze the project and its dependencies and propose an upgrade plan.\n- Execute the plan to transform the project.\n- Automatically fix issues during the progress.\n- Report all details including commits, logs, and output.\n- Perform a check for Common Vulnerabilities and Exposures (CVE) security vulnerabilities and code inconsistencies after the upgrade.\n- Show a summary including file changes, updated dependencies, and fixed issues.\n- Generate unit test cases separately from the upgrade process.\n\n## Prerequisites\n\nTo get started, ensure the following are installed:\n\n1. [Visual Studio Code](https://code.visualstudio.com/download)\n2. [GitHub Copilot account](https://github.com/features/copilot/plans?cft=copilot_li.features_copilot)\n3. [GitHub Copilot chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extension for Visual Studio Code\n4. [GitHub Copilot app modernization - upgrade for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-upgrade) extension for Visual Studio Code\n5. Source and Target JDKs (Java Development Kit) - [JDK 8](https://adoptium.net/temurin/releases/?version=8) and [JDK 21](https://adoptium.net/temurin/releases/?version=21)\n6. [Node.js and npm (Node Package Manager)](https://nodejs.org/download) (required for building frontend app)\n\n## Project Setup\n\nAfter installing all prerequisites, clone the following repository:\n\n- git clone https://github.com/yortch/spring-petclinic-angularjs\n\nOpen the project in Visual Studio Code and confirm that you can build and run the application using the instructions from the README file:\n- ./mvnw clean install\ncd spring-petclinic-server ../mvnw spring-boot:run\n\nNavigate to the application and verify the Pet Clinic loads at: [http://localhost:8080/](http://localhost:8080/)\n\n## GitHub Copilot App Modernization - Upgrade for Java tools\n\nThe extension includes several built-in tools to assist with upgrading Java projects. You can list these tools by asking GitHub Copilot chat in VS Code: **\"What tools are available in the GitHub Copilot Upgrade for Java?\"**. You'll see output similar to the following:\n\n- **Typical Upgrade Workflow**\n\n1. **Plan Generation** → generate\\_upgrade\\_plan\\_for\\_java\\_project\n2. **Plan Review** → confirm\\_upgrade\\_plan\\_for\\_java\\_project\n3. **Automated Changes** → upgrade\\_java\\_project\\_using\\_openrewrite\n4. **Build Validation** → build\\_java\\_project\n5. **Test Execution** → run\\_tests\\_for\\_java\n6. **Behavior Validation** → validate\\_behavior\\_changes\\_for\\_java\n7. **Security Check** → validate\\_cves\\_for\\_java\n8. **Documentation** → summarize\\_upgrade\n- **Framework/Library Upgrades**\n- Spring Boot: 2.7.x, 3.2.x, 3.3.x, 3.4.x, 3.5.x\n- Jakarta EE: 10.0.x (from Java EE)\n- Spring Framework: 6.1.x, 6.2.x\n- Custom Dependencies: Any Maven/Gradle dependency\n\nAdditionally, the tool **generate\\_tests\\_for\\_java** can be used independently to increase test coverage before upgrading, helping validate that there no breaking changes are introduced.\n\nThe **upgrade\\_java\\_project\\_using\\_openrewrite** tool uses [OpenRewrite](https://github.com/openrewrite), an open-source project with Java upgrade-specific recipes. At the time of writing, **version 1.1.0** of the upgrade plugin is used.\n\n## Java Project Upgrade\n\nTo begin the upgrade, use the **generate\\_upgrade\\_plan\\_for\\_java\\_project** tool. Ensure all file changes are committed or discarded beforehand to avoid warnings.\n\nUsing Agent mode with **Claude Sonnet 4** as the model in GitHub Copilot, provide a prompt similar to the following, replacing the JDK paths from your local setup:\n- #generate\\_upgrade\\_plan\\_for\\_java\\_project for spring-petclinic-server project\ninto Java 21 and latest SpringBoot 3.x available using jdk 8 location: C:\\Users\\jbalderas\\apps\\jdk8u442-b06 and jdk21 location: C:\\Program Files\\Eclipse Adoptium\\jdk-21.0.2.13-hotspot\n\nAfter a few minutes, a preview of the upgrade plan will be displayed. Review and update the plan as needed. If it meets your expectations, click **Continue**:\n\n![]()Generated upgrade plan\n\nAs the upgrade proceeds, you'll see each step completed with logs available from build output, unit test results, as well as any failures. The extension will iterate through build and test errors, resolving them incrementally. Occasionally, you may need to click **Continue** if the tool loops through a task multiple times.\n\nOnce complete, a summary screen will show all changes and the upgrade status:\n\n![]()Upgrade Java Project completion\n\nDuring our upgrade, we noticed that the **Maven wrapper** (**mvnw**) was not automatically updated. This caused build failures due to version incompatibility (this was undetected during the upgrade because maven was used directly). To resolve this, ask GitHub Copilot:\n- Upgrade maven wrapper to at least version 3.6.3\n\nThis updates the **distributionUrl** in the **maven-wrapper.properties** file. Click **Keep** to accept the changes.\n\nThen, rerun the build and launch commands:\n- ./mvnw clean install\ncd spring-petclinic-server ../mvnw spring-boot:run\n\nVisit [http://localhost:8080](http://localhost:8080) to confirm the Pet Clinic loads successfully.\n\n![]()Spring PetClinic welcome screen\n\nAll changes should be committed to a branch named **java-upgrade-**. If there are any remaining changes, commit and push them, then create a pull request.\n\nHere's an example of a draft pull request showing 27 changed files across 6 commits, completed in just minutes:\n\n![]()Pull request\n\nWe hope this walkthrough demonstrates how the **GitHub Copilot App Modernization – Upgrade for Java** can save time and eliminate the tedious work of upgrading legacy code. Give it a try and share your feedback below!",
  "FeedUrl": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/rss/Community",
  "FeedName": "Microsoft Tech Community",
  "Tags": [],
  "FeedLevelAuthor": "rss.livelink.threads-in-node",
  "EnhancedContent": "The [**GitHub Copilot App Modernization – Upgrade for Java**](https://learn.microsoft.com/java/upgrade/overview) is an AI-powered solution designed to streamline the modernization of legacy Java applications. This tool is available as a **Visual Studio Code extension** and leverages **GitHub Copilot** to perform the following tasks:\n\n- Analyze the project and its dependencies and propose an upgrade plan.\n- Execute the plan to transform the project.\n- Automatically fix issues during the progress.\n- Report all details including commits, logs, and output.\n- Perform a check for Common Vulnerabilities and Exposures (CVE) security vulnerabilities and code inconsistencies after the upgrade.\n- Show a summary including file changes, updated dependencies, and fixed issues.\n- Generate unit test cases separately from the upgrade process.\n\n## Prerequisites\n\nTo get started, ensure the following are installed:\n\n1. [Visual Studio Code](https://code.visualstudio.com/download)\n2. [GitHub Copilot account](https://github.com/features/copilot/plans?cft=copilot_li.features_copilot)\n3. [GitHub Copilot chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extension for Visual Studio Code\n4. [GitHub Copilot app modernization - upgrade for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-upgrade) extension for Visual Studio Code\n5. Source and Target JDKs (Java Development Kit) - [JDK 8](https://adoptium.net/temurin/releases/?version=8) and [JDK 21](https://adoptium.net/temurin/releases/?version=21)\n6. [Node.js and npm (Node Package Manager)](https://nodejs.org/download) (required for building frontend app)\n\n## Project Setup\n\nAfter installing all prerequisites, clone the following repository:\n\n``` git clone https://github.com/yortch/spring-petclinic-angularjs ```\n\nOpen the project in Visual Studio Code and confirm that you can build and run the application using the instructions from the README file:\n\n``` ./mvnw clean install cd spring-petclinic-server ../mvnw spring-boot:run ```\n\nNavigate to the application and verify the Pet Clinic loads at: [http://localhost:8080/](http://localhost:8080/)\n\n## GitHub Copilot App Modernization - Upgrade for Java tools\n\nThe extension includes several built-in tools to assist with upgrading Java projects. You can list these tools by asking GitHub Copilot chat in VS Code: **\"What tools are available in the GitHub Copilot Upgrade for Java?\"**. You'll see output similar to the following:\n\n- **Typical Upgrade Workflow**\n\n1. **Plan Generation** → generate\\_upgrade\\_plan\\_for\\_java\\_project\n2. **Plan Review** → confirm\\_upgrade\\_plan\\_for\\_java\\_project\n3. **Automated Changes** → upgrade\\_java\\_project\\_using\\_openrewrite\n4. **Build Validation** → build\\_java\\_project\n5. **Test Execution** → run\\_tests\\_for\\_java\n6. **Behavior Validation** → validate\\_behavior\\_changes\\_for\\_java\n7. **Security Check** → validate\\_cves\\_for\\_java\n8. **Documentation** → summarize\\_upgrade\n- **Framework/Library Upgrades**\n- Spring Boot: 2.7.x, 3.2.x, 3.3.x, 3.4.x, 3.5.x\n- Jakarta EE: 10.0.x (from Java EE)\n- Spring Framework: 6.1.x, 6.2.x\n- Custom Dependencies: Any Maven/Gradle dependency\n\nAdditionally, the tool **generate\\_tests\\_for\\_java** can be used independently to increase test coverage before upgrading, helping validate that there no breaking changes are introduced.\n\nThe **upgrade\\_java\\_project\\_using\\_openrewrite** tool uses [OpenRewrite](https://github.com/openrewrite), an open-source project with Java upgrade-specific recipes. At the time of writing, **version 1.1.0** of the upgrade plugin is used.\n\n## Java Project Upgrade\n\nTo begin the upgrade, use the **generate\\_upgrade\\_plan\\_for\\_java\\_project** tool. Ensure all file changes are committed or discarded beforehand to avoid warnings.\n\nUsing Agent mode with **Claude Sonnet 4** as the model in GitHub Copilot, provide a prompt similar to the following, replacing the JDK paths from your local setup:\n\n``` #generate_upgrade_plan_for_java_project for spring-petclinic-server project into Java 21 and latest SpringBoot 3.x available using jdk 8 location: C:\\Users\\jbalderas\\apps\\jdk8u442-b06 and jdk21 location: C:\\Program Files\\Eclipse Adoptium\\jdk-21.0.2.13-hotspot ```\n\nAfter a few minutes, a preview of the upgrade plan will be displayed. Review and update the plan as needed. If it meets your expectations, click **Continue**:\n\nGenerated upgrade plan\n\nAs the upgrade proceeds, you'll see each step completed with logs available from build output, unit test results, as well as any failures. The extension will iterate through build and test errors, resolving them incrementally. Occasionally, you may need to click **Continue** if the tool loops through a task multiple times.\n\nOnce complete, a summary screen will show all changes and the upgrade status:\n\nUpgrade Java Project completion\n\nDuring our upgrade, we noticed that the **Maven wrapper** (**mvnw**) was not automatically updated. This caused build failures due to version incompatibility (this was undetected during the upgrade because maven was used directly). To resolve this, ask GitHub Copilot:\n\n``` Upgrade maven wrapper to at least version 3.6.3 ```\n\nThis updates the **distributionUrl** in the **maven-wrapper.properties** file. Click **Keep** to accept the changes.\n\nThen, rerun the build and launch commands:\n\n``` ./mvnw clean install cd spring-petclinic-server ../mvnw spring-boot:run ```\n\nVisit [http://localhost:8080](http://localhost:8080) to confirm the Pet Clinic loads successfully.\n\nSpring PetClinic welcome screen\n\nAll changes should be committed to a branch named **java-upgrade-&lt;unique id&gt;**. If there are any remaining changes, commit and push them, then create a pull request.\n\nHere's an example of a draft pull request showing 27 changed files across 6 commits, completed in just minutes:\n\nPull request\n\nWe hope this walkthrough demonstrates how the **GitHub Copilot App Modernization – Upgrade for Java** can save time and eliminate the tedious work of upgrading legacy code. Give it a try and share your feedback below!\n\nUpdated Aug 06, 2025\n\nVersion 1.0\n\n[agents](/tag/agents?nodeId=board%3AAzureDevCommunityBlog)\n\n[ai](/tag/ai?nodeId=board%3AAzureDevCommunityBlog)\n\n[java](/tag/java?nodeId=board%3AAzureDevCommunityBlog)\n\n[tips and tricks](/tag/tips%20and%20tricks?nodeId=board%3AAzureDevCommunityBlog)\n\n[!\\[jorgebalderas&#x27;s avatar\\](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/dS0yNDkwNTI3LWV5REd1UA?image-coordinates=0%2C0%2C1586%2C1586&amp;image-dimensions=50x50)](/users/jorgebalderas/2490527) [jorgebalderas](/users/jorgebalderas/2490527) ![Icon for Microsoft rank](https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/cmstNC05WEo0blc?image-dimensions=100x16&amp;constrain-image=true)Microsoft\n\nJoined May 25, 2024\n\n[View Profile](/users/jorgebalderas/2490527)\n\n/category/azure/blog/azuredevcommunityblog [Microsoft Developer Community Blog](/category/azure/blog/azuredevcommunityblog) Follow this blog board to get notified when there's new activity",
  "Link": "https://techcommunity.microsoft.com/t5/microsoft-developer-community/modernizing-legacy-java-project-using-github-copilot-app/ba-p/4440777"
}
