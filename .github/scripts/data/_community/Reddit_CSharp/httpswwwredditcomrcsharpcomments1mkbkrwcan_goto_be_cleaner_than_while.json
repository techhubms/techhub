{
  "FeedUrl": "https://www.reddit.com/r/csharp/.rss",
  "Link": "https://www.reddit.com/r/csharp/comments/1mkbkrw/can_goto_be_cleaner_than_while/",
  "Tags": [
    "csharp"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit CSharp",
  "ProcessedDate": "2025-08-08 15:50:34",
  "Title": "Can `goto` be cleaner than `while`?",
  "FeedLevelAuthor": "C#",
  "EnhancedContent": "This is the standard way to loop until an event occurs in C#:\n\n``` while (true) { Console.WriteLine(\"choose an action (attack, wait, run):\"); string input = Console.ReadLine();\n\nif (input is \"attack\" or \"wait\" or \"run\") { break; } } ```\n\nHowever, if the event *usually* occurs, then can using a loop be less readable than using a `goto` statement?\n\n``` while (true) { Console.WriteLine(\"choose an action (attack, wait, run):\"); string input = Console.ReadLine();\n\nif (input is \"attack\") { Console.WriteLine(\"you attack\"); break; } else if (input is \"wait\") { Console.WriteLine(\"nothing happened\"); } else if (input is \"run\") { Console.WriteLine(\"you run\"); break; } } ```\n\n``` ChooseAction: Console.WriteLine(\"choose an action (attack, wait, run):\"); string input = Console.ReadLine();\n\nif (input is \"attack\") { Console.WriteLine(\"you attack\"); } else if (input is \"wait\") { Console.WriteLine(\"nothing happened\"); goto ChooseAction; } else if (input is \"run\") { Console.WriteLine(\"you run\"); } ```\n\nThe rationale is that the `goto` statement explicitly loops whereas the `while` statement implicitly loops. What is your opinion?\n\nI get your rationale, but people expect top to bottom program flow, and there's a reason the anonymous code block was invented. Stick to the `while` loop.\n\nThe only time I'll use goto in c# is if I've got a huge bunch of nested control statements, and that avoids needing to add extra conditions to all the nested statements.\n\nEven then, I think I've only had to do that once in 22 years of using c#.\n\nAnd even then, can't you just put the whole thing in a function and use return to break out of the nested scopes instead of resorting to goto? Even if you have to move some code around, it's worth it for the amount of time you'll save by not having to justify yourself in code reviews\n\nWhenever I hear goto I think of: [https://xkcd.com/292](https://xkcd.com/292)\n\n``` string input = \"\"; while (input is not \"attack\" or \"run\") { Console.WriteLine(\"choose an action (attack, wait, run):\"); input = Console.ReadLine();\n\nif (input is \"attack\") { Console.WriteLine(\"you attack\"); } else if (input is \"wait\") { Console.WriteLine(\"nothing happened\"); } else if (input is \"run\") { Console.WriteLine(\"you run\"); } } ```\n\nDonâ€™t you dare.\n\nGoto is almost never clearer, if only because you could be jumping anywhere in the code. I'd also not consider 'while(true)' to be the standard way; I'd always use 'while(isRunning)' or similar, and set that to false when it's time to exit the loop.\n\nIf the loop is still unclear, you probably need a larger refactor of your code to make it reflect the execution flow more clearly.\n\n/shrugs. I have like one or two places its used in my codebase.\n\nThe hundreds of thousands of lines, and its used less then a handful of times. And- for those handful of times, the alternative, would be refactoring..... and you would end up with drastically MORE code, methods, and jumps.... rather then doing a simple goto.\n\nIts a language feature, and I'm using it, where it makes sense.\n\nUse 'continue' if you want to be explicit in all cases\n\nOnly use goto if somehow using goto makes the code less confusing.\n\n\"cleaner\" is a term that probably doesn't mean much in terms of good. \"More readable\" is a far more important metric and one that you should optimize for where possible. Curly brackets and indentations let your eye see at a glance that one section of code is different from other parts. Some statements are \"inside\" the loop and other statements are \"outside\" it, and the longer it takes you to find that difference, the less readable your code is.\n\nInternally the compiler is transforming the code in the first example into something similar to the code in the second example, so if similar code is being generated performance is not a concern.",
  "Author": "Foreign-Radish1641",
  "PubDate": "2025-08-07T20:46:56+00:00",
  "Description": "This is the standard way to loop until an event occurs in C#:\n\n```cs while (true) { Console.WriteLine(\"choose an action (attack, wait, run):\"); string input = Console.ReadLine();\n\n``` if (input is \"attack\" or \"wait\" or \"run\") { break; } ```\n\n} ```\n\nHowever, if the event *usually* occurs, then can using a loop be less readable than using a `goto` statement?\n\n```cs while (true) { Console.WriteLine(\"choose an action (attack, wait, run):\"); string input = Console.ReadLine();\n\n``` if (input is \"attack\") { Console.WriteLine(\"you attack\"); break; } else if (input is \"wait\") { Console.WriteLine(\"nothing happened\"); } else if (input is \"run\") { Console.WriteLine(\"you run\"); break; } ```\n\n} ```\n\n```cs ChooseAction: Console.WriteLine(\"choose an action (attack, wait, run):\"); string input = Console.ReadLine();\n\nif (input is \"attack\") { Console.WriteLine(\"you attack\"); } else if (input is \"wait\") { Console.WriteLine(\"nothing happened\"); goto ChooseAction; } else if (input is \"run\") { Console.WriteLine(\"you run\"); } ```\n\nThe rationale is that the `goto` statement explicitly loops whereas the `while` statement implicitly loops. What is your opinion?"
}
