{
  "FeedUrl": "https://www.reddit.com/r/MachineLearning/.rss",
  "Link": "https://www.reddit.com/r/MachineLearning/comments/1mkacbi/d_lstms_vs_transformers_model_selection_and/",
  "Tags": [
    "MachineLearning"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit Machine Learning",
  "ProcessedDate": "2025-08-08 16:08:39",
  "Title": "[D] LSTMs vs Transformers (Model Selection and Thoughts)",
  "FeedLevelAuthor": "Machine Learning",
  "EnhancedContent": "I wanted to have a discussion along the following lines. Lets say there is a scenario where the advantage of parallelism is no longer present. Then for an NLP task which model would you prefer an LSTM or a transformer? Lets assume the size of both models in terms of parameters is also the same. I have consulted 4o, claude sonnet, gemini flash 2.5 and grok 3 as well. Posting their responses in the comments. The question is around how to think about different models and their advantages. I feel like nowadays throwing a transformer is the first thing people do.\n\nIf there is no parallelism, Transformers would have severe drop in inference speed. Is there anything else to talk about?\n\nBased on the different I prefer Grok's version. Getting a baseline using a transformer model on HuggingFace is very fast nowadays. But based on the requirements in latency and memory like next phrase prediction or small text classification with compute constraints LSTMs are worth a try.\n\nGPT-4o\n\nLSTMs win in this scenario\n\nLSTMs are inherently designed for token-by-token processing, maintaining a hidden state that evolves over time.\n\nTransformers, in the absence of parallelism, must compute all pairwise attention scores per token step — this becomes computationally more expensive sequentially than LSTM’s simple recurrence.\n\nLSTMs naturally preserve token order and temporal dependencies via their recurrent structure.\n\nTransformers need positional encodings to compensate for their permutation-invariant attention mechanism — but those encodings must still be computed and applied at every step.\n\nLSTMs require a fixed-size hidden state regardless of sequence length.\n\nTransformers require storing the entire sequence history for self-attention, which becomes expensive and unwieldy if you don’t get batching or parallelism benefits.\n\nTransformers are generally better at modeling long-range dependencies due to global attention.\n\nIf the NLP task heavily depends on such dependencies and latency isn't a bottleneck, the Transformer might still edge out the LSTM in accuracy.\n\nTransformers can better integrate non-local signals — e.g., graphs, tables, or external memory structures (like Retrieval-Augmented Generation or Memory-Augmented Transformers).\n\nSo for complex reasoning tasks, even in serial mode, Transformers retain some edge\n\nClaude Sonnet 4\n\nI'd lean toward Transformers for most NLP tasks, but the choice would depend heavily on the specific requirements:\n\nWhy Transformers would still have advantages:\n\n1. Attention mechanism: The ability to directly model relationships between any two positions in a sequence, regardless of distance, is fundamentally powerful. LSTMs suffer from the vanishing gradient problem for very long sequences, even with gating mechanisms.\n2. Representational capacity: Self-attention can capture multiple types of relationships simultaneously (syntactic, semantic, positional) in different attention heads, providing richer representations.\n3. Better handling of long-range dependencies: While LSTMs were designed to address this, Transformers do it more effectively through direct connections via attention.\n\nWhere LSTMs might compete or excel:\n\n1. Sequential inductive bias: For tasks where the sequential nature is crucial (like some time series or streaming applications), LSTMs have this built into their architecture.\n2. Memory efficiency for very long sequences: LSTMs have constant memory with respect to sequence length, while Transformers scale quadratically.\n3. Potentially faster inference: For single-token generation, LSTMs might be faster since they don't need to recompute attention over the entire sequence.\n\nThe key insight is that even without parallelism, the attention mechanism provides a fundamentally different and often superior way of modeling sequence relationships compared to the recurrent processing of LSTMs.\n\nGemini Flash 2.5\n\nYou'd generally prefer an LSTM over a Transformer for an NLP task, assuming both models have a similar number of parameters.\n\nWhy LSTMs are better without parallelism\n\nThe primary benefit of a Transformer model is its parallelization. This comes from its self-attention mechanism, which allows it to process all parts of a sequence simultaneously. This is a huge win for modern GPUs, which are designed for parallel computation. However, if this advantage is removed, the Transformer's self-attention mechanism becomes a computational bottleneck. The attention mechanism requires calculating the similarity between every pair of tokens in a sequence, leading to a quadratic computational complexity (O(n2)) with respect to the sequence length n.\n\nGrok 3\n\nFor a general NLP task, I’d prefer the transformer. Its self-attention mechanism offers a clear advantage in capturing long-range dependencies and complex relationships, which are common in language processing. Even without parallelism, the transformer’s ability to model the entire sequence holistically outweighs the LSTM’s sequential approach. While LSTMs might hold their own for short, simple sequences, transformers are more versatile and robust across the diverse challenges of NLP—think translation, summarization, or classification over varied lengths.\n\nThat said, if the task were specifically short and sequential with minimal long-range needs (e.g., predicting the next word in a simple sequence), an LSTM could be competitive. But without a specific task, the transformer’s flexibility and proven dominance make it my choice.",
  "Author": "bababhaukali",
  "PubDate": "2025-08-07T19:59:44+00:00",
  "Description": "I wanted to have a discussion along the following lines. Lets say there is a scenario where the advantage of parallelism is no longer present. Then for an NLP task which model would you prefer an LSTM or a transformer? Lets assume the size of both models in terms of parameters is also the same. I have consulted 4o, claude sonnet, gemini flash 2.5 and grok 3 as well. Posting their responses in the comments. The question is around how to think about different models and their advantages. I feel like nowadays throwing a transformer is the first thing people do."
}
