{
  "FeedUrl": "https://www.reddit.com/r/AI_Agents/.rss",
  "Link": "https://www.reddit.com/r/AI_Agents/comments/1mknhpg/how_are_you_getting_llms_to_handle_tricky_date/",
  "Tags": [
    "AI_Agents"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit AI Agents",
  "ProcessedDate": "2025-08-08 16:40:10",
  "Title": "How are you getting LLMs to handle tricky date & time expressions reliably?",
  "FeedLevelAuthor": "AI Agents",
  "EnhancedContent": "I’ve been experimenting a lot with getting LLMs to extract exact dates/times from natural language. Everything from simple 'next Friday at 3pm' to vague stuff like 'two weeks after Thanksgiving' or 'the first Monday after the school holidays end.\n\nWhat I’m finding is that even with strong prompting, there are a few recurring issues:\n\n- Ambiguity with multi-time-zone contexts\n- Handling ranges ('between 2-5pm next Thursday') without losing precision\n- Ambiguity of time ranges (when does afternoon start/end etc.)\n- LLMs hallucinating dates that aren’t in the text\n\nI've tried looking at hybrid approaches (e.g., LLM → structured intermediate format → deterministic parser), but I’m curious what’s been working for *you*.\n\n- Are you relying purely on the model or do you post-process?\n- Any prompt patterns, models or architectures that have been more reliable for you?\n- Have you found ways to keep it consistent across different models?\n- Test coverage?\n\nWould love to swap notes. Happy to share some of the weirdest edge cases I’ve run into and what’s worked so far.\n\nWhat’s your current go-to strategy?\n\nThank you for your submission, for any questions regarding AI, please check out our wiki at [https://www.reddit.com/r/ai_agents/wiki](https://www.reddit.com/r/ai_agents/wiki) (this is currently in test and we are actively adding to the wiki)\n\n*I am a bot, and this action was performed automatically. Please* [*contact the moderators of this subreddit*](/message/compose/?to=/r/AI_Agents) *if you have any questions or concerns.*\n\nI pair the LLM with a dedicated date-time parser and let it validate the output.\n\nI just get good results for my scheduling bot using gpt-4.1-nano, so I assume that the bigger brothers are doing it OK as well. I can do remind me in one minute from now etc. Works perfect. In the system prompt, there is always prompted date time iso. The rest of the messages stay the same but the system message gets updated before. So, I have history. It really works pefect, did all the weird stuff regarding input.",
  "Author": "Practical_Still_9754",
  "PubDate": "2025-08-08T06:08:07+00:00",
  "Description": "I’ve been experimenting a lot with getting LLMs to extract exact dates/times from natural language. Everything from simple 'next Friday at 3pm' to vague stuff like 'two weeks after Thanksgiving' or 'the first Monday after the school holidays end.\n\nWhat I’m finding is that even with strong prompting, there are a few recurring issues:\n\n- Ambiguity with multi-time-zone contexts\n- Handling ranges ('between 2-5pm next Thursday') without losing precision\n- Ambiguity of time ranges (when does afternoon start/end etc.)\n- LLMs hallucinating dates that aren’t in the text\n\nI've tried looking at hybrid approaches (e.g., LLM → structured intermediate format → deterministic parser), but I’m curious what’s been working for *you*.\n\n- Are you relying purely on the model or do you post-process?\n- Any prompt patterns, models or architectures that have been more reliable for you?\n- Have you found ways to keep it consistent across different models?\n- Test coverage?\n\nWould love to swap notes. Happy to share some of the weirdest edge cases I’ve run into and what’s worked so far.\n\nWhat’s your current go-to strategy?"
}
