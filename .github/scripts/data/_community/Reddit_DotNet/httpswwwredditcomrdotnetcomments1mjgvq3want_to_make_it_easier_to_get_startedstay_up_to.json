{
  "FeedUrl": "https://www.reddit.com/r/dotnet/.rss",
  "Link": "https://www.reddit.com/r/dotnet/comments/1mjgvq3/want_to_make_it_easier_to_get_startedstay_up_to/",
  "Tags": [
    "dotnet"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit DotNet",
  "ProcessedDate": "2025-08-08 16:23:55",
  "Title": "Want to make it easier to get started/stay up to date with the .NET SDK?",
  "FeedLevelAuthor": ".NET",
  "EnhancedContent": "Hey folks - I'm Chet, the PM for the .NET SDK team. I'm here to ask you to take a look at a new [dotnet/designs spec](https://github.com/dotnet/designs/pull/339) we've been working on for a CLI-based way of downloading, installing, and staying up-to-date with .NET SDK and .NET Runtime installations.\n\nWe think there's a big gap in the current .NET ecosystem for a simple, easy to use, and most importantly *consistent* experience across all of the platforms and IDEs that people use with .NET today. We'd like it to be as easy as `dnup init` or `dnup install` for anyone to get the latest and greatest tooling, and `dnup update` to *stay* up to date afterwards.\n\nSo take a look and tell us what you think - ideally on the PR/spec itself, but here works too.\n\n-The .NET SDK team.\n\ni just use my systems package manager\n\nThis would be helpful. I wanted to install the latest .net on Ubuntu and the version in the package manager was not the latest one so I had to use the script from the official webpage. However, how do I keep it updated? Having a tool for that would be great.\n\nI understand the value if it was baked into the dotnet CLI, something like what pip already does, but having a new CLI just to do what winget already does but sparing to specifying the package name feels like a missed opportunity...\n\nWinGet is Windows specific but even for Linux, Ubuntu provides its own sdk/runtimes packages contrary to Debian etc.. This cli will end to be just a sugar cli wrapping other tools.\n\nAlso Visual Studio already have this feature natively using install config. and automatically applied if near the sln file..\n\nThere seems to be quite a bit more churn with .NET SDK installation procedures than I'd have expected. The way to handle this on Ubuntu has changed several times in the last few years. And if you get it wrong, you get weird errors from the SDK (like when you manage to mix Ubuntu and Microsoft repositories).\n\nBut the way it works is still annoying, especially as there's no way to get the later SDKs for a specific .NET version, it's always the 1xx version as mentioned in your spec. The other part I found annoying was that you are very quickly in the backports region when your .NET version doesn't match the very few ones supported on a specific Ubuntu version, so you always have to pay attention to that difference as well.\n\nIn general, .NET SDKs from the Linux package management caused me mostly headaches. So I think the general idea of having the .NET SDKs managed entirely separate is good.\n\nOh yeah I think is a nice addition to the ecosystem, especially making it CLI and not tied up to any IDEs. While I usually working on Windows and just download and run the installer, I would prefer to do this via CLI too.\n\nWhy did someone give you a downvote for this? Makes no sense lol\n\nThanks for your post chusk3. Please note that we don't allow spam, and we ask that you follow the rules available in the sidebar. We have a lot of commonly asked questions so if this post gets removed, please do a search and see if it's already been asked.\n\n*I am a bot, and this action was performed automatically. Please* [*contact the moderators of this subreddit*](/message/compose/?to=/r/dotnet) *if you have any questions or concerns.*\n\nSemi-OT, but I've been looking for a good .NET runtime bootstrapper, like [https://github.com/Tyrrrz/DotnetRuntimeBootstrapper](https://github.com/Tyrrrz/DotnetRuntimeBootstrapper), which\n\n- installs the runtime into a custom path (my own tooling can take care of invoking that path),\n- doesn't require admin permissions,\n- uses whatever arch I pass\n\nIf I take away the last requirement, and are OK with shipping a ginormous (but stripped) runtime with each executable, I can instead use self-contained deployment, but I'd rather keep those requirements, just in case I later offer ARM64 builds.\n\nI just use scoop or winget or dotnet-install script\n\nI don’t know that I see a point to wrapping these further? Like the install script is already the most consistent way of doing this.\n\nI guess wrapping it in a cli tool kinda makes sense…but it’s also such a little amount of value honestly that I’ve never even considered it as a paint point",
  "Author": "chusk3",
  "PubDate": "2025-08-06T21:13:04+00:00",
  "Description": "Hey folks - I'm Chet, the PM for the .NET SDK team. I'm here to ask you to take a look at a new [dotnet/designs spec](https://github.com/dotnet/designs/pull/339) we've been working on for a CLI-based way of downloading, installing, and staying up-to-date with .NET SDK and .NET Runtime installations.\n\nWe think there's a big gap in the current .NET ecosystem for a simple, easy to use, and most importantly *consistent* experience across all of the platforms and IDEs that people use with .NET today. We'd like it to be as easy as `dnup init` or `dnup install` for anyone to get the latest and greatest tooling, and `dnup update` to *stay* up to date afterwards.\n\nSo take a look and tell us what you think - ideally on the PR/spec itself, but here works too.\n\n-The .NET SDK team."
}
