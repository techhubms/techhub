{
  "FeedUrl": "https://www.reddit.com/r/dotnet/.rss",
  "Link": "https://www.reddit.com/r/dotnet/comments/1mkxmt5/asyncawait_beyond_the_basics/",
  "Tags": [
    "dotnet"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit DotNet",
  "ProcessedDate": "2025-08-08 16:23:54",
  "Title": "Async/Await - Beyond the basics",
  "FeedLevelAuthor": ".NET",
  "EnhancedContent": "We recently ran into a performance issue in one of our applications, and the culprit was the frowned upon sync-over-async pattern.\n\nWhile debugging, I found myself asking several questions I hadn‚Äôt really considered before when learning async programming. I‚Äôve put those learnings into a short 6-minute read ‚úçÔ∏è:\n\nüëâ [https://medium.com/@ashishbhagwani/do-you-really-understand-async-await-d583586a476d](https://medium.com/@ashishbhagwani/do-you-really-understand-async-await-d583586a476d)\n\nfor .NET folks, I‚Äôm planning a follow-up article on the ThreadPool, worker vs IOCP threads, and why sync-over-async is frowned upon. Your feedback on this article would be really appreciated üôè\n\nThanks for your post Delicious\\_Jaguar\\_341. Please note that we don't allow spam, and we ask that you follow the rules available in the sidebar. We have a lot of commonly asked questions so if this post gets removed, please do a search and see if it's already been asked.\n\n*I am a bot, and this action was performed automatically. Please* [*contact the moderators of this subreddit*](/message/compose/?to=/r/dotnet) *if you have any questions or concerns.*\n\nThank you for this post. Will read and likely share with my dev team.\n\nI feel like a lot of people read the keywords and what they do, but don‚Äôt internalize it well or go past that ever\n\nI see you've met people before.\n\nNice breakdown! You got me curious about the performance issue you were chasing and why you ended up all the way down in the hardware and not in the top part, where async/await turns into a state machine on compilation (the syntactic suger)\n\nThey mentioned \"sync over async\", so I can make a guess.\n\nA lot of people, when learning about async/await, don't like how `async` becomes \"viral\". They want to do their IO work at a low layer, but the top layer is some inherently synchronous code. They find it complex to rework that top-layer code, so at some layer they end up with:\n\n``` var result = DoSomethingAsync().Result; ```\n\nSome of them have read articles and know this is bad, but didn't gain deep comprehension so they think a different incantation is better:\n\n``` var result = DoSomethingAsync().GetAwaiter().GetResult(); ```\n\nThat came from some article or another that argued this was marginally better than `Result` . That article never intended to claim it was a solution or a good practice.\n\nIt doesn't matter which approach is chosen, that converts an async call into a sync call in a way that will block a thread. That puts severe limits on how many I/O operations can be supported.\n\nThe correct practice is to refactor your top-level code to handle async calls properly. That's a pain in the butt in GUI frameworks because even though MS writes a new one every 4-5 years, they have yet to write a GUI framework with support for asynchronous events or initialization, which are both practically the default case in modern client apps.\n\nSo a lot of newbies hear `async void` is bad, but need to write an event handler, and think the solution is to get rid of `async` and use the pattern above to \"make\" the call synchronous. The solution's to learn why `async void` is bad, accept that it is the ONLY option for event handlers, learn what you can do to mitigate the bad parts, and adopt those mitigations.",
  "Author": "Delicious_Jaguar_341",
  "PubDate": "2025-08-08T15:04:02+00:00",
  "Description": "We recently ran into a performance issue in one of our applications, and the culprit was the frowned upon sync-over-async pattern.\n\nWhile debugging, I found myself asking several questions I hadn‚Äôt really considered before when learning async programming. I‚Äôve put those learnings into a short 6-minute read ‚úçÔ∏è:\n\nüëâ [https://medium.com/@ashishbhagwani/do-you-really-understand-async-await-d583586a476d](https://medium.com/@ashishbhagwani/do-you-really-understand-async-await-d583586a476d)\n\nfor .NET folks, I‚Äôm planning a follow-up article on the ThreadPool, worker vs IOCP threads, and why sync-over-async is frowned upon. Your feedback on this article would be really appreciated üôè"
}
