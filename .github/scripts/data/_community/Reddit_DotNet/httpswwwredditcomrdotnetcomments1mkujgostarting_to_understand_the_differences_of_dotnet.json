{
  "FeedUrl": "https://www.reddit.com/r/dotnet/.rss",
  "Link": "https://www.reddit.com/r/dotnet/comments/1mkujgo/starting_to_understand_the_differences_of_dotnet/",
  "Tags": [
    "dotnet"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit DotNet",
  "ProcessedDate": "2025-08-08 16:23:55",
  "Title": "Starting to understand the differences of dotnet",
  "FeedLevelAuthor": ".NET",
  "EnhancedContent": "Junior here, creating my first dotnet project. I kept wondering \"all this seems awfully, unnecessarily complex\". Why do I make DTOs, why so many layers, why EF migrations, why the method OnModelCreating when I can spin up a Node Express backend with way less code and way less effort? Then it struck me. All these things aren't to make greenfield development easy. It's to make working with a 15-year old legacy ass grandfather project that's already fucked up with layers and layers of bandaid and tech debt easy.\n\nNo, it's made like that so your project doesn't become 15year old legacy piece of garbage in 1 year\n\nReally? I'm not doubting, just a genuine question. How much more difficult is it for projects written in dotnet to become slop compared to other languages?\n\nYou aren't forced to use any of that, you can use minimal API and DbConnections to pretty much do everything in one file if you like. You use them because a bit of extra complexity now means a cleaner and most consistent result when things really do get complex.\n\nYou're hating on .net because you don't like Entity Framework? I might be misinterpreting this (rather terrible) take on .net, of course, but you're complaining about EF related concepts. Perhaps consider an alternative like Dapper?\n\nI'm not actually hating on it, just joking that a long-running application tends to have a lot of tech debt, and long running applications are kind of the domain of dotnet. I like how structured everything is, but it really is something new to me.\n\nThanks for your post jeddthedoge. Please note that we don't allow spam, and we ask that you follow the rules available in the sidebar. We have a lot of commonly asked questions so if this post gets removed, please do a search and see if it's already been asked.\n\n*I am a bot, and this action was performed automatically. Please* [*contact the moderators of this subreddit*](/message/compose/?to=/r/dotnet) *if you have any questions or concerns.*\n\nYou can find a simple app written in both dotnet and node (expressjs) here: [https://gist.github.com/iSeiryu/c1b95242af000a11ea4710b79c2d6a53](https://gist.github.com/iSeiryu/c1b95242af000a11ea4710b79c2d6a53)\n\nBoth look similar but the dotnet version does a lot more out of the box here - it validates all of the incoming data to make sure the data types match, it even makes sure enum values are correct. Nodejs will eat any value you submit for any field which will lead to broken data in your system. You'll have to use something like Zod which will bloat and slow down your code. But even without Zod expressjs version is 7 times slower - tested on different machines on Ubuntu and Debian.\n\nDotnet version also includes logs and traces, config reader, tests, real immutability and a bunch of other things out of the box for which nodejs will require a hundred different packages and a lot of extra code and configuration.\n\n> > >\n> Why do I make DTOs, why so many layers, why EF migrations, why the method OnModelCreating when I can spin up a Node Express backend with way less code and way less effort?\n> > > >\n\nNone of these concepts are specific to ASP.NET Core. You don't have to use DTOs, complicated architectures, entity framework.\n\nProblem is that you are comparing raw Express backend with ASP.NET Core. Better comparison (if you are utilizing \"batteries\" would be a framework like NestJS. For companies, it is important to choose technology that will allow easy onboarding of new team members, enforcing standards, having a structure.\n\nGenerally, you end up having to make a choice of starting from scratch (with something like Express), and letting the team evolve the structure, or choosing a batteries included framework where some of these decisions have been made for you already to a degree. The level of \"batteries included\" also varies. ABP.IO, a framework for ASP.NET Core provides even more infrastructure.\n\nExpress sounds enticing because of it's simplicity. You spin up a new application in a minute, and build your first endpoint. Problem is that as the project evolves, and team expands, you will have to build the framework yourself. You define the folder structure, introduce concept of controllers, services, models. You add TypeORM/MikroORM for database querying. You add dependency injection. You create company-wide packages so that other teams can reuse the infrastructure you created. Congratulations, you've just reinvented NestJS :D",
  "Author": "jeddthedoge",
  "PubDate": "2025-08-08T12:59:42+00:00",
  "Description": "Junior here, creating my first dotnet project. I kept wondering \"all this seems awfully, unnecessarily complex\". Why do I make DTOs, why so many layers, why EF migrations, why the method OnModelCreating when I can spin up a Node Express backend with way less code and way less effort? Then it struck me. All these things aren't to make greenfield development easy. It's to make working with a 15-year old legacy ass grandfather project that's already fucked up with layers and layers of bandaid and tech debt easy."
}
