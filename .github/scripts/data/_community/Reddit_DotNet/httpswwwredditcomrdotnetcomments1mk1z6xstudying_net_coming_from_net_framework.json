{
  "FeedUrl": "https://www.reddit.com/r/dotnet/.rss",
  "Link": "https://www.reddit.com/r/dotnet/comments/1mk1z6x/studying_net_coming_from_net_framework/",
  "Tags": [
    "dotnet"
  ],
  "OutputDir": "_community",
  "FeedName": "Reddit DotNet",
  "ProcessedDate": "2025-08-08 16:23:55",
  "Title": "Studying .NET coming from .NET Framework",
  "FeedLevelAuthor": ".NET",
  "EnhancedContent": "Hello everyone! At my company I recently transferred from a team responsible for supporting a legacy application based on .NET Framework 4.8 to a squad of .NET 9 web developers and I'm feeling like there are so many differences in the new .NET versions that I don't know where to begin, like where do you all get all that information of new features and other things?\n\nCan you guys help me with some recommendations? Can be anything from YT channels to blogs and social media. I'm really trying to run after but don't know where to start\n\nYou‚Äôre in luck because .NET 5 onwards (which includes version 9) is a huge improvement over the clumsy .NET Framework\n\nFirst of all, everything is modular meaning you have bring in all services that you‚Äôll need, via dependency injection; such as: being able to access Httpcontext, any custom interfaces you want to bind to an inherited class, caching, Database context, etc\n\nSecond, the code execution is so much faster thanks to the huge performance improvements the .NET team has made\n\nThird, you can develop your apps on Windows, iOS and Linux using VSCode as long as you download the .NET version for the correct operating system and CPU type\n\nFourth, take advantage of a huge library of NuGet packages that are also backwards compatible with .NET Framework\n\nFifth, you can build almost any apps using the different frameworks such as: Games, Mobile Apps, Internet-of-things, websites, APIs, etc\n\nSixth, learn how to squash down your program and deploy it to containers via Docker\n\nSeventh, the C# language has evolved to the point where you don‚Äôt need a lot of the boilerplate code such as the huge braces around a namespace and being able to use global usings\n\nA good YouTuber I‚Äôd recommend is Tim Corey\n\n[https://youtube.com/@iamtimcorey?feature=shared](https://youtube.com/@iamtimcorey?feature=shared)\n\nBest of luck to ya üëç\n\nEDIT: I forgot to mention the most important advantage of them all‚Ä¶NO MORE WEBFORMS!! üòÅ\n\nI really hate ASP .NET WebForms because it‚Äôs awful to work with\n\nIt just looks this way, it's 90% similar if not more. Since most differences are superficial - get something like C#12 in a Nutshell by Albahari and study the new additions.\n\nThat's like going from WebForms to .Net core. You're in luck buddy cause if it were the other way around, you would be SCREWED.\n\nSo now you have to narrow down on the architecture used to to create the overall architecture one liner (E.G) This is a .Net 9, DDD, CQRS, EF, Monoith. That is where most differences in the applications come from on later versions of .Net and they can vary dramatically.\n\nHere are the main keywords you want to look for;\n\nClean Architecture; is a separation of software layers.\n\nDomain Driven Design (DDD); isolate entities so the application is built around these Entities.\n\nMicroservices; This takes DDD to the next level, where each business domain can be run as it's own application with it's own infrastructure so it can scale.\n\nMonoliths; don't care it's just one big application.\n\nEntity Framework(EF): This is an ORM, basically you write out your data models/entities as C# classes and EF will do the SQL for you so you can focus on C#. You can also get data from your database directly in C# using a .Net framework called LINQ.\n\nCQRS is a transport architecture that's fairly popular and negotiates how data flows through the application.\n\nI recommend you get an Udemy account and just go through the top 5 courses on .Net, build the applications step by step, and you will start to see similarities in the course material, and your work material and the course will give you a little bit of understanding as to how that's built. It wont take you long to have a good feel for modern .Net. Keep asking questions here, be happy at work, and be grateful you have a job, cause I don't and I have 10+ years experience in all forms of .Net, and maybe get ready to pivot cause AI, but keep that on the LOW.\n\nNothing you listed is specific to 9 and has existed well before.net core as part of or used by .net framework implementations. I think they were looking for some tips on learning the language features that have been developed since framework.\n\nTo be realistic, you might create a web applications prototype with ASP.NET Core and Blazor, and then compare with that legacy application. The differences in code base and development experience can lead you to discover what you might want to learn next, and search engines can reveal what might be the good sources of information.\n\nOtherwise, there are almost ten years of .NET Core/.NET evolution to study and you will be exploded.\n\nThanks for your post RemoveFun747. Please note that we don't allow spam, and we ask that you follow the rules available in the sidebar. We have a lot of commonly asked questions so if this post gets removed, please do a search and see if it's already been asked.\n\n*I am a bot, and this action was performed automatically. Please* [*contact the moderators of this subreddit*](/message/compose/?to=/r/dotnet) *if you have any questions or concerns.*\n\nJust make a web application from scratch with it, including the frontend being used. Looking things up while figuring out how to do it is in my opinion one of the better approaches. Just passively consuming doesn't help.\n\nHow is this even a problem?\n\nIt‚Äôs like the same thing, but better",
  "Author": "RemoveFun747",
  "PubDate": "2025-08-07T14:44:05+00:00",
  "Description": "Hello everyone! At my company I recently transferred from a team responsible for supporting a legacy application based on .NET Framework 4.8 to a squad of .NET 9 web developers and I'm feeling like there are so many differences in the new .NET versions that I don't know where to begin, like where do you all get all that information of new features and other things?\n\nCan you guys help me with some recommendations? Can be anything from YT channels to blogs and social media. I'm really trying to run after but don't know where to start"
}
