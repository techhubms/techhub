{
  "FeedName": "Microsoft Developer YouTube",
  "PubDate": "2025-10-30T16:00:31+00:00",
  "FeedUrl": "https://www.youtube.com/feeds/videos.xml?channel_id=UCsMica-v34Irf9KVTh6xx-g",
  "FeedLevelAuthor": "Microsoft Developer",
  "Title": "MCP and Java Apps: Building a Server",
  "OutputDir": "_videos",
  "ProcessedDate": "2025-10-30 17:04:18",
  "Link": "https://www.youtube.com/watch?v=DGNAvVn6WwY",
  "Author": "Microsoft Developer",
  "EnhancedContent": null,
  "Tags": [
    "AIServers",
    "APIIntegration",
    "CloudDevelopment",
    "GitHubCopilot",
    "JavaApps",
    "JavaDevelopment",
    "MCP",
    "ModelContextProtocol",
    "Quarkus",
    "QuarkusJav",
    "ServerDevelopment"
  ],
  "Description": "In this episode, Ayan Gupta is joined by Bruno Borges and Sandra Ahlgrimm, two seasoned developers with over 30 combined years of experience, who will show you how to build an MCP (Model Context Protocol) server. Think of a caf√©, you need a barista who knows the recipes and handles the brewing. In MCP, that barista is the server, and this episode shows you how to create one!\n\nThe Model Context Protocol is a powerful way to extend AI applications by allowing them to interact with external tools, APIs, and services. In this hands-on session, Bruno and Sandra demonstrate how to build an MCP server using Quarkus, a modern Java framework, combined with the intelligence of GitHub Copilot to generate most of the code automatically.\n\nRather than manually writing boilerplate code, you'll learn how to leverage GitHub Copilot's agent mode with custom instructions to scaffold an entire MCP server. Bruno and Sandra create a \"monkey species\" API server that demonstrates real MCP capabilities: listing species, getting details, retrieving random entries, and tracking statistics. The best part? They use Copilot to write the implementation, including both real and fictional monkey species data!\n\nYou'll see how to annotate services with MCP-specific attributes, configure endpoints using server-sent events, test your server using the MCP Inspector tool, and prepare it for client integration. This example may use monkey species, but the patterns apply to any business domain, customer data, inventory systems, financial APIs, and more.\n\nResources: aka.ms/JavaAndAIForBeginners\n\n0:00 - Introduction: MCP Servers as Baristas 0:47 - What Is MCP and Why Use It? 1:05 - Starting with a Quarkus Project 1:37 - Using MCP to Simplify API Changes 2:11 - Leveraging GitHub Copilot Instructions 3:00 - Creating the MCP Server Automatically 3:47 - Understanding the Generated Code 4:30 - Exploring Java Records and Best Practices 5:38 - Building and Testing the Server 6:43 - Starting the MCP Server 7:35 - Testing with MCP Inspector 8:10 - Resolving Port Conflicts 9:01 - Connecting and Listing Tools 9:37 - Running Tool Queries Successfully 10:23 - Session Recap: What We Built 11:04 - Preview of Session 107: Building Clients 11:25 - Wrap-Up and Resources\n\n#MCP #ModelContextProtocol #Quarkus #JavaDevelopment #GitHubCopilot #AIServers #JavaApps #ServerDevelopment #APIIntegration #CloudDevelopment #QuarkusJav"
}
