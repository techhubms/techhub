{
  "EnhancedContent": null,
  "Title": "Context Engineering for Java Ecosystem",
  "FeedLevelAuthor": "Microsoft Developer",
  "PubDate": "2025-10-31T16:01:27+00:00",
  "FeedUrl": "https://www.youtube.com/feeds/videos.xml?channel_id=UCsMica-v34Irf9KVTh6xx-g",
  "ProcessedDate": "2025-10-31 17:06:06",
  "FeedName": "Microsoft Developer YouTube",
  "Tags": [
    "AIAssisted",
    "ChatModes",
    "ContextEngineering",
    "CopilotChat",
    "CustomInstructions",
    "DeveloperProductivity",
    "GitHubCopilot",
    "Java25",
    "JavaDevelopment",
    "PromptEngineering",
    "VSCode"
  ],
  "OutputDir": "_videos",
  "Link": "https://www.youtube.com/watch?v=kSElHY8MWwc",
  "Author": "Microsoft Developer",
  "Description": "In this episode, Ayan Gupta is joined by Bruno Borges, who demonstrates one of the most powerful but often overlooked aspects of AI-assisted development: context engineering. Just like the same coffee beans can produce completely different drinks depending on how you brew them, the same code can yield vastly different AI assistance depending on the context you provide.\n\nContext is everything when working with AI tools like GitHub Copilot. Bruno shows you how to transform your development workflow by leveraging three advanced Visual Studio Code features: custom instructions, chat modes, and prompt files. These tools allow you to provide the right context at the right time, eliminating repetitive prompting and ensuring consistent, high-quality AI assistance across your entire project.\n\nYou'll learn how to create custom instructions that automatically apply to all your Copilot interactions, perfect for project-wide standards like \"always use Java 25 syntax\" or \"include weather jokes in responses.\" Bruno demonstrates building specialized chat modes, including a \"planner\" mode that generates implementation plans rather than writing code directly. This is invaluable when you need to think through architecture before diving into implementation.\n\nThe session includes hands-on demonstrations of the instructions folder, which lets you create context-specific guidance for different frameworks (Hibernate, Spring, etc.) that only activate when editing relevant files. You'll also see how prompt files give you one-click access to common tasks like \"analyze bad practices\" without copy-pasting from notepads.\n\nResources: aka.ms/JavaAndAIForBeginners\n\n0:00 - Introduction: Context Shapes Everything 0:51 - What Is Context Engineering? 1:22 - Three Key VS Code Features Overview 1:56 - Finding the VS Code Documentation 2:11 - Demo: Setting Up the Java Application 2:38 - Exploring Java 25 New Features 3:09 - Understanding Chat Modes 3:29 - Creating a Custom \"Planner\" Chat Mode 4:08 - Writing Chat Mode Instructions 4:44 - Demo: Using Planner Mode to Design Features 5:26 - Seeing the Plan Generated (Not Code) 6:12 - Analyzing Context Integration 6:36 - Custom Instructions with copilot-instructions.md 7:17 - The Instructions Folder: Framework-Specific Context 8:12 - Prompt Files for Reusable Tasks 8:51 - Demo: Bad Practices Detection Prompt 9:37 - Running the Bad Practice Analysis 10:28 - Results: Identifying Code Issues 10:58 - The Java 25 Knowledge Gap Problem 11:21 - Solution: Adding Language Specs to Context 11:46 - Best Practices for Context Engineering 12:03 - Wrap-Up and Resources\n\n#ContextEngineering #GitHubCopilot #VSCode #JavaDevelopment #Java25 #AIAssisted #ChatModes #CustomInstructions #PromptEngineering #DeveloperProductivity #CopilotChat"
}
