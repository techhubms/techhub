{
  "Title": "How to improve my GitHub Copilot results?",
  "FeedName": "Harald Binkle's blog",
  "OutputDir": "_posts",
  "Tags": [],
  "ProcessedDate": "2025-08-05 17:17:08",
  "Description": "Tips and strategies to improve GitHub Copilot results in your projects, including instruction files and chatmode files for large projects.",
  "Author": "Harald Binkle",
  "Link": "https://harrybin.de/posts/improve-github-copilot-results/",
  "PubDate": "2025-07-04T17:00:00+00:00",
  "EnhancedContent": "# How to improve my GitHub Copilot results?\n\nPosted on:July 4, 2025 |  at 05:00 PM\n\n# How to improve my GitHub Copilot results?\n\nThis week I was on the [DWX conference in Mannheim](https://www.developer-world.de/dwx).\n\nI hosted three sessions:\n\n- `GitHub Copilot mit Nachbrenner; Erweiterungen & Power-User Funktionen für smartes Coden`\n(together with [@Nico Orschel](https://www.linkedin.com/in/nico-orschel/))\n- `Nutze das volle Potenzial von Dev-Containern u.a. in Webentwicklungs-Workflows`\n- `It's all greek to me! - Lokalisierung in Web-Apps elegant und einfach`\n\nAs the first one was related to GitHub Copilot, a lot of attendees came to me during those days asking about how to improve the results of Copilot in their projects.\n\nWithout giving a full overview of what’s possible, this is the minimum I do for my projects:\n\n## Create instruction files!\n\nOne of the most effective ways to improve GitHub Copilot’s results in your projects is by creating instruction files. These files provide context and guidelines that help Copilot understand your project structure, your coding standards and specific requirements.\n\n### What are instruction files?\n\nInstruction files are special files that contain information about your project to help GitHub Copilot generate better, more contextually appropriate code. They act as a “README for AI” that describes your project’s architecture, conventions and preferences.\n\n### How to create instruction files\n\n1. **Create a “common instructions” file `.github/copilot-instructions.md`** in your project root\n2. **Use clear, descriptive language** to explain your project and project structure\n3. **Include coding standards** and naming conventions\n4. **Specify frameworks and libraries** you’re using\n5. **Add examples** of your preferred code patterns\n\n![Instruction files folder structure in VS Code](/assets/instructionFiles.webp)\n\n### What to put in instruction files\n\nHere are first lines of the `copilot-instruction.md` of this project:\n\n```\n# GitHub Copilot Instructions for harrybin.github.io\n\n## Project Context\n\nThis is an Astro-based static site using the AstroPaper theme with:\n\n- **TypeScript** for type safety\n- React components for interactive elements\n- Tailwind CSS for styling\n- Astro Content Collections for blog management\n- FuseJS for search functionality\n- Deployment on GitHub Pages\n\n## Purpose\n\nThe purpose of the project to create a **blog** that showcases developer-focused content, tutorials, and insights.\n\n## Blog Post Creation Guidelines\n\nWhen creating new blog posts for this Astro-based developer blog, you **MUST** follow these strict requirements:\n\n### File Location and Format\n\n- **MANDATORY**: All new blog posts must be created as `.md` files in `/src/content/blog/`\n- **NO EXCEPTIONS**: Do not create blog posts in any other directory\n- **File Extension**: Use `.md` for standard markdown or `.mdx` for markdown with JSX components\n- **Naming**: Use kebab-case for filenames (e.g., `my-new-blog-post.md`)\n\n### Content Structure Requirements\n\n- **Reference Document**: Follow ALL guidelines specified in `content-md.instructions.md`\n- **Frontmatter**: Every blog post MUST include complete YAML frontmatter with all required fields\n- **Author**: Always use \"Harald Binkle\" as the author\n- **Date Format**: Use ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ) for `pubDatetime`\n- **Tags**: Include relevant tags from the approved tag list\n- **Description**: Write SEO-friendly descriptions (150-160 characters)\n\n### Enforcement Rules\n\n1. **File Creation**: When asked to create a blog post, ALWAYS create it in `/src/content/blog/`\n2. **Template Usage**: Use the exact template structure from `content-md.instructions.md`\n3. **Validation**: Ensure all required frontmatter fields are present and correctly formatted\n4. **Content Quality**: Follow the writing style and structure guidelines\n5. **SEO Compliance**: Include proper meta descriptions, tags, and heading hierarchy\n\n[...] ```\n\nAnother more generic example:\n\n```\n# Project Instructions for AI Assistant\n\n## Project Overview\n\nThis is a [description of your project type] using [main technologies].\n\n## Architecture\n\n- Frontend: [Framework/Library]\n- Backend: [Framework/Technology]\n- Database: [Database type]\n- Styling: [CSS framework/approach]\n\n## Coding Standards\n\n- Use TypeScript with strict mode\n- Follow ESLint configuration\n- Use functional components in React\n- Prefer composition over inheritance\n- Use descriptive variable names\n\n## File Structure\n\n- `/src/components/` - React components\n- `/src/utils/` - Utility functions\n- `/src/types/` - TypeScript type definitions\n- `/src/hooks/` - Custom React hooks\n\n## Naming Conventions\n\n- Components: PascalCase\n- Files: camelCase\n- Constants: UPPER_SNAKE_CASE\n- Functions: camelCase\n\n## Preferred Patterns\n\n- Use custom hooks for complex state logic\n- Implement error boundaries for React components\n- Use async/await instead of .then() for promises\n```\n\n#### The critical importance of describing your project domain\n\nWhen creating your main instruction file, it’s **absolutely crucial** to clearly describe what type of project you’re working on. This is especially important when your technology stack doesn’t immediately indicate the project’s purpose. - Like in my case, where I’m using React, TypeScript, and Node.js, but the project is not a traditional web application, it’s a blog based on markdown files.\n\n**Why this matters:**\n\n- **Technology doesn’t define purpose**: Just because you’re using React, TypeScript, and Node.js doesn’t mean you’re building a traditional web application\n- **Context shapes suggestions**: Copilot needs to understand your specific use case to provide relevant code suggestions\n- **Domain-specific patterns**: Different project types have different architectural patterns and best practices\n\n**Real-world examples where this is critical:**\n\n```\n# Example 1: VS Code Extension\n\n## Project Overview\n\nThis is a **Visual Studio Code extension** using TypeScript, React, and Node.js. We're building developer tools, not a web application.\n\n## Business Domain\n\nThis extension helps developers manage their project dependencies and provides automated refactoring suggestions for large codebases. ```\n\n```\n# Example 2: Office Add-in\n\n## Project Overview\n\nThis is a **Microsoft Office add-in** using TypeScript, React, and Office.js APIs. We're creating productivity tools that run inside Excel/Word, not a standalone web app.\n\n## Business Domain\n\nThis add-in helps financial analysts create automated reports and data visualizations directly within Excel spreadsheets. ```\n\n```\n# Example 3: Static Site Generator\n\n## Project Overview\n\nThis is a **developer blog** built with Astro, TypeScript, and React components. We're generating static content, not building an interactive web application.\n\n## Business Domain\n\nThis blog focuses on sharing technical knowledge about web development, AI tools, and developer productivity for the software development community. ```\n\n**Key elements to include:**\n\n1. **Technical domain**: What type of project (web app, extension, CLI tool, blog, etc.)\n2. **Business domain**: Who uses it and what problem it solves\n3. **Platform context**: Where it runs (browser, desktop, mobile, server, etc.)\n4. **User interaction patterns**: How users interact with your project\n\nThis context helps Copilot understand whether you need web API patterns, desktop app patterns, CLI tool patterns, or content creation patterns.\n\n### Custom instruction files for specific contexts\n\n![Instruction files folder structure in VS Code](/assets/instructionFiles.webp)\n\nBeyond the general `.github/copilot-instructions.md` file, you can create more targeted instruction files for specific file types or folders using VS Code’s `.instructions.md` files. These are stored in the `.github/instructions` folder and use the `applyTo` frontmatter property to automatically apply to specific files.\n\n**Documentation Instructions** (`.github/instructions/docs.instructions.md` ):\n\n``` --- description: Instructions for documentation and markdown files applyTo: \"**/*.md\" ---\n\n# Documentation Instructions for AI Assistant\n\n## Documentation Style\n\n- Write in clear, beginner-friendly language\n- Use active voice and present tense\n- Include practical examples for every concept\n- Structure content with clear headings and bullet points\n\n## Markdown Guidelines\n\n- Use proper heading hierarchy (H1 for main title, H2 for sections)\n- Include code examples with proper syntax highlighting\n- Add links to related documentation sections\n- Use tables for comparing features or options\n\n## Content Structure\n\n- Start with a brief overview/introduction\n- Provide step-by-step instructions\n- Include troubleshooting sections\n- End with \"Next steps\" or \"See also\" sections\n\n## Technical Writing Best Practices\n\n- Define acronyms and technical terms on first use\n- Use consistent terminology throughout\n- Include prerequisites and assumptions\n- Add warnings or notes for important information\n\n## Examples and Code Snippets\n\n- Provide working, tested code examples\n- Include both basic and advanced usage scenarios\n- Show expected outputs where relevant\n- Use realistic data in examples\n```\n\n**Configuration Files Instructions** (`.github/instructions/config.instructions.md` ):\n\n``` --- description: Instructions for configuration files applyTo: \"**/{config,*.config.*,*.json,*.yml,*.yaml,*.toml,*.env*}\" ---\n\n# Configuration Files Instructions\n\n## Configuration Standards\n\n- Use clear, descriptive property names\n- Include inline comments explaining complex settings\n- Group related configurations together\n- Provide default values and valid ranges\n\n## Environment-Specific Configs\n\n- Separate development, staging, and production configs\n- Use environment variables for sensitive data\n- Document required vs optional settings\n- Include validation rules where applicable\n\n## File Format Guidelines\n\n- For JSON: Use proper formatting and avoid comments in production\n- For YAML: Use consistent indentation (2 spaces)\n- For ENV files: Use UPPER_SNAKE_CASE for variable names\n- Always include example files with documentation\n```\n\n**Test Files Instructions** (`.github/instructions/tests.instructions.md` ):\n\n``` --- description: Instructions for test files applyTo: \"**/{test,tests,spec,__tests__}/**/*.{js,ts,jsx,tsx}\" ---\n\n# Test Files Instructions\n\n## Testing Standards\n\n- Follow AAA pattern (Arrange, Act, Assert)\n- Use descriptive test names that explain the scenario\n- Keep tests focused and isolated\n- Prefer testing behavior over implementation details\n\n## Test Organization\n\n- Group related tests using describe blocks\n- Use beforeEach/afterEach for setup and cleanup\n- Create helper functions for common test patterns\n- Separate unit, integration, and e2e tests\n\n## Framework-Specific Guidelines\n\n- For React: Use React Testing Library patterns\n- For APIs: Test both success and error scenarios\n- For E2E: Focus on critical user journeys\n- Always consider edge cases and error conditions\n\n## Best Practices\n\n- Mock external dependencies appropriately\n- Use meaningful assertions with clear error messages\n- Test error conditions and edge cases\n- Keep tests maintainable and readable\n```\n\n### Advantages of targeted instruction files\n\nTargeted instruction files with `applyTo` patterns offer several advantages over a single global instruction file:\n\n#### More precise context\n\n- **Context-specific instructions**: Each file can contain instructions tailored to specific file types or folders\n- **Less noise**: Only relevant instructions are applied based on the file you’re working on\n- **Less confusion**: Avoids overwhelming the AI with irrelevant information\n- **Smaller base context**: Reduces the chance of exceeding token limits\n\n#### **Automatic Context Application**\n\n- **Smart activation**: Instructions are automatically applied based on file patterns\n- **No manual selection**: VS Code automatically includes relevant instructions based on the files you’re working with\n- **Glob pattern matching**: Use powerful glob patterns to target specific file types, folders, or naming conventions\n- **Flexible matching**: Target files by extension, folder structure, or naming patterns\n\n#### **Team Collaboration**\n\n- **Centralized location**: All instruction files are stored in `.github/instructions`\nfor easy discovery\n- **Version control**: Instructions are versioned alongside your code\n- **Shared understanding**: Team members automatically get the same context when working on specific file types\n\n### Best practices for targeted instruction files\n\n1. **Use descriptive names**: Name files clearly like `docs.instructions.md`\n, `tests.instructions.md` , `config.instructions.md`\n2. **Leverage glob patterns**: Use specific patterns like `**/*.md`\nfor markdown files, `**/{test,spec}/**/*.{js,ts}` for test files\n3. **Include descriptions**: Always add a `description`\nin the frontmatter to explain what the instructions cover\n4. **Keep them focused**: Each instruction file should cover only what’s relevant to its target files\n5. **Test your patterns**: Verify that your `applyTo`\npatterns match the intended files\n6. **Regular maintenance**: Update instruction files as your project standards and file structures evolve\n\n### Examples of effective applyTo patterns\n\n```\n# Target all markdown files\n\napplyTo: \"\\*_/_.md\"\n\n# Target test files in common test directories\n\napplyTo: \"**/{test,tests,spec,**tests**}/**/\\*.{js,ts,jsx,tsx}\"\n\n# Target configuration files\n\napplyTo: \"\\*_/{config,_.config._,_.json,_.yml,_.yaml,_.toml,_.env\\*}\"\n\n# Target specific framework files\n\napplyTo: \"\\*_/_.{component,page,layout}.{js,ts,jsx,tsx}\"\n\n# Target documentation in specific folders\n\napplyTo: \"{docs,documentation}/\\*_/_.{md,mdx}\"\n\n# Target all files (global instructions)\n\napplyTo: \"\\*\\*\" ```\n\n## Next Steps: Custom Chat Modes for Large Projects\n\nWhile instruction files provide an excellent foundation for improving GitHub Copilot results, there’s another powerful technique specifically designed for larger, more complex projects: **custom chat modes**.\n\nCustom chat modes allow you to create specialized AI configurations for different types of workflows - like code reviews, testing, API design, or documentation. They provide task-specific “personalities” that combine focused instructions with specific tool restrictions.\n\nI’ll be covering this advanced technique in detail in my follow-up article **“[GitHub Copilot Custom Chat Modes for Large Projects](/posts/github-copilot-custom-chat-modes)”**. This will show you how to create specialized chat configurations that can dramatically improve your AI interactions for complex development workflows.\n\n*Have you tried using instruction files in your projects? I’d love to hear about your experiences with improving GitHub Copilot results!*\n\n- [github-copilot](/tags/github-copilot)\n- [copilot](/tags/copilot)\n- [github](/tags/github)\n- [vs-code](/tags/vs-code)\n- [ai](/tags/ai)\n- [productivity](/tags/productivity)\n- [development](/tags/development)\n- [dwx](/tags/dwx)\n- [conference](/tags/conference)\n- [instructions](/tags/instructions)\n\nThis site uses cookies for analytics (Microsoft Clarity). By clicking Accept, you consent to the use of cookies for analytics purposes. See our [privacy policy](/privacy).",
  "FeedLevelAuthor": "Harald Binkle",
  "FeedUrl": "https://harrybin.de/rss.xml"
}
