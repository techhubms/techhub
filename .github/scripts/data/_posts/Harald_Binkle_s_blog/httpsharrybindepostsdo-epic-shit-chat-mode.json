{
  "Link": "https://harrybin.de/posts/do-epic-shit-chat-mode/",
  "EnhancedContent": "# Do Epic Shit Chat Mode (Beast Mode for GitHub Copilot)\n\nPosted on:August 15, 2025 |  at 10:30 AM\n\n## Turning GitHub Copilot Chat Into “Beast Mode”\n\nIn my previous article on [custom chat modes](/posts/github-copilot-custom-chat-modes) I showed how specialized modes focus Copilot. Today we go one step further: designing a so‑called **“Beast Mode”**, a maximal autonomy configuration for deep, multi‑step problem solving.\n\n## What Is “Beast Mode” Conceptually?\n\n“Beast Mode” (not an official VS Code name) is a pattern for an **aggressively proactive Copilot Chat configuration** that:\n\n1. Grants broad tool surface (codebase, search, usages, tests, tasks, terminals, fetch, repo introspection).\n2. Enforces a **strict iterative TODO loop** before yielding control.\n3. Requires **fresh validation / research** instead of relying on model memory.\n4. Encourages **recursive expansion** (follow links, fetch more docs) until coverage is high.\n5. Mandates **post‑action verification**: run tests, lint, or inspect artifacts.\n\nIt is best for non‑trivial refactors, exploratory debugging, orchestration across multiple subsystems, or generating first drafts of multi‑file features.\n\n### Why Was “Beast Mode” Created?\n\nCommunity iterations (see also [“Beast Mode v3 is here”](https://www.reddit.com/r/GithubCopilot/comments/1lv4guq/beast_mode_v3_is_here/)) emerged to solve recurring pain points. Another goal: bring Copilot’s default (currently GPT‑4.1) closer to the “persistent reasoning depth” people appreciate in Claude Sonnet without burning premium requests and additionally to mitigate:\n\n1. **Premature agent exit** – Default flows stop after surface answers; strict checklists enforce completion.\n2. **Shallow research** – Prompts sometimes lean on stale internal knowledge; recursive fetch rules force live validation.\n3. **Hidden partial edits** – Multi‑file changes risk inconsistencies; mandated verification (tests / lint) reduces drift.\n4. **Unstructured planning** – Ad hoc steps reduce traceability; a canonical markdown checklist becomes an auditable log.\n5. **Tool over/under-use** – Either terminal spam or neglect; curated tool lists create balanced, intentional capability.\n6. **Untracked evolution** – Version tagging (v1, v2, v3…) allows empirical comparison of behavior changes.\n\nThese drivers shaped the norms later embodied—and extended—in more disciplined variants.\n\n## The Do Epic Shit Mode\n\nThis pattern inspired my colleague [@kasuken](https://github.com/kasuken) and me to create our own version: the **Do Epic Shit Mode**—a hardened, opinionated realization of the Beast Mode idea.\n\n## The Do Epic Shit Mode File (Highlights)\n\nKey traits from `epicshit.chatmode.md` :\n\n- Frontmatter description: versioned (“4.1 Do Epic Shit Mode v1.4”) signalling iterative hardening.\n- Wide tool array: `changes`\n, `codebase` , `editFiles` , `runTasks` , `runTests` , `terminalLastCommand` , `searchResults` , `vscodeAPI` , `github` —&gt; maximizes observable + actionable surface.\n- Model pinned: `GPT-4.1`\n(explicit stability / capability expectation).\n- **Checklist format contract**: exact markdown pattern required, forbidding HTML → predictable parsing for future automation.\n- Explicit autonomy rule: *“do not end your turn until everything is truly complete”* → prevents premature handoff.\n- Embedded operational doctrine: deep research, recursive exploration, reflection between steps, exhaustive verification.\n\n## Beast Mode vs Do Epic Shit Mode\n\n| Capability | Generic “Beast Mode” Pattern | Do Epic Shit Mode | Advantage | | --- | --- | --- | --- | | Tool Scope | Broad, but conceptual | Exhaustively enumerated, including diagnostics & test failure tools | Concrete reproducibility | | Iteration Loop | Encouraged | Hard requirement (no early exit) | Guarantees completion discipline | | Research Mandate | Often implied | Explicit recursive fetch & validation | Reduces stale assumptions | | Versioning | Optional | Version tag in description | Traceability & evolution | | Verification | Recommended | Mandatory (tests, edges) | Higher confidence output | | Tool Governance | Loose | Curated list avoiding ambiguity | Predictable environment |\n\nThe **Do Epic Shit Mode** operationalizes the abstract pattern into a **repeatable, enforceable contract**—the differentiator.\n\n## Why This Matters\n\nWithout a structured autonomy contract, large edits risk:\n\n- Early termination leaving hidden TODOs\n- Unverified assumptions about external APIs\n- Shallow research (first‑page bias)\n- Undocumented decision paths\n\nThe mode bakes safeguards directly into the interaction layer.\n\n## New VS Code Chat Settings & How They Differ\n\nRecent settings surfaced in your editor configuration (see the official [Copilot Chat docs](https://code.visualstudio.com/docs/copilot/copilot-chat), [Copilot configuration overview](https://code.visualstudio.com/docs/copilot/overview#_configure-copilot), plus [VS Code release notes](https://code.visualstudio.com/updates)):\n\n``` \"chat.todoListTool.enabled\": true, \"github.copilot.chat.alternateGptPrompt.enabled\": true ```\n\nHow they relate:\n\n| Setting | What It Does | Relation to Mode’s Internal TODO Contract | | --- | --- | --- | | `chat.todoListTool.enabled` | Enables native structured TODO extraction / management in Chat | Complements the mode: native tracking observes the **markdown checklist** the mode enforces | | `github.copilot.chat.alternateGptPrompt.enabled` | Switches to an alternative system prompt (often more reasoning‑oriented) | Stacks with the mode: alternate base prompt + mode overlay → deeper planning & redundancy in rigor |\n\nDifference vs in‑file checklist instruction: **The mode hard‑codes the REQUIRED checklist format; VS Code’s TODO feature is optional infrastructure.** If the checklist deviates, the mode becomes invalid regardless of tool assistance.\n\n## Designing Your Own High‑Discipline Mode\n\nWhen forking or extending:\n\n1. Keep the **format spec minimal & strict** (single source of parsing truth).\n2. Explicitly list *every* tool—avoid implicit defaults so changes are intentional.\n3. Add a short **version note** in description for auditability.\n4. Require **reflection after each step** (prevents autopilot drift).\n5. Gate exit on: checklist empty + tests pass (if test suite exists) + lint clean.\n\n### Minimal Template Example\n\n``` --- description: \"Beast Mode v0.1\" tools: [\"codebase\", \"search\", \"runTests\", \"runTasks\", \"terminal\", \"editFiles\"] model: GPT-4.1 ---\n\nYou are an autonomous engineering agent. Follow the checklist until all items are completed & verified.\n\nChecklist format:\n\n- [ ] Step 1: ...\n- [ ] Step 2: ...\n```\n\n## Conclusion\n\nThe **Do Epic Shit Chat Mode** turns an aspirational “Beast Mode” notion into a **codified operational framework**: wide tool access, rigid checklist grammar, recursive research, and verification discipline. With new VS Code chat settings assisting (native TODO parsing + alternate base prompt), the mode itself remains the authoritative governance layer.\n\n**Key takeaways:**\n\n- Codify autonomy; don’t rely on model goodwill.\n- Enforce deterministic checklist grammar.\n- Treat research as a loop, not a single fetch.\n- Version your mode—make evolution observable.\n- Verification gates prevent “looks done” drift.\n\nNext, you might explore deeper prompt tuning for quality improvements—see [Improve GitHub Copilot Results](/posts/improve-github-copilot-results) for complementary techniques.\n\n*Have you built your own high‑discipline mode? Share ideas—I may feature interesting evolutions in a future post.*\n\n- [github-copilot](/tags/github-copilot)\n- [copilot](/tags/copilot)\n- [github](/tags/github)\n- [vs-code](/tags/vs-code)\n- [ai](/tags/ai)\n- [productivity](/tags/productivity)\n- [chat-modes](/tags/chat-modes)\n- [automation](/tags/automation)\n\nThis site uses cookies for analytics (Microsoft Clarity). By clicking Accept, you consent to the use of cookies for analytics purposes. See our [privacy policy](/privacy).",
  "FeedName": "Harald Binkle's blog",
  "PubDate": "2025-08-15T10:30:00+00:00",
  "Title": "Do Epic Shit Chat Mode (Beast Mode for GitHub Copilot)",
  "Description": "Discover how the 'Do Epic Shit' chat mode turns GitHub Copilot into Beast Mode with autonomous research, strict TODO loops, and enhanced VS Code chat.",
  "ProcessedDate": "2025-08-15 14:57:27",
  "Tags": [],
  "Author": "Harald Binkle",
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Harald Binkle",
  "FeedUrl": "https://harrybin.de/rss.xml"
}
