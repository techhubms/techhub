{
  "Tags": [
    "aspnet",
    "htmx"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Khalid Abuhakmeh",
  "ProcessedDate": "2025-08-05 14:22:14",
  "FeedUrl": "https://khalidabuhakmeh.com/feed.xml",
  "Title": "Confirmation Dialogs with Htmx and SweetAlert",
  "Description": "When building web experiences, there are safe operations and destructive ones. In the case of dangerous actions, it’s widespread to ask the user if they’d like to continue with the action before ultimately executing it.\n\nIn this post, we’ll explore a valuable feature in the [Htmx documentation](https://htmx.org/events/#htmx:confirm) that allows you to intercept outgoing requests and present a [Sweet Alert confirmation dialog](https://sweetalert.js.org/guides/). This feature can greatly enhance user experience and control in your web applications. Let’s dive in.\n\n## The `htmx:confirm`\nevent\n\nHtmx users are likely familiar with the `hx-confirm` attribute, which is a declarative way to use the `confirm` JavaScript function. This uses your browser’s native functionality to display a confirmation dialog that allows the user one last chance to cancel their action.\n\n```html\n\n```\n\nBut folks likely don’t know that the `htmx:confirm` event is triggered before \\*\\*every \\*\\* request. This allows you to intercept, stop, or continue any Htmx request on the client. This opens up a lot of UX opportunities.\n\nTo register for this event, you will need the following JavaScript referenced in your web application.\n\n```javascript document.body.addEventListener('htmx:confirm', function (evt) { // do something here // you can evt.preventDefault() // or... // evt.details.issueRequest() to continue. });\n\n```\n\nLet’s use the SweetAlert JavaScript library to enhance the dull confirm dialog.\n\n## Add SweetAlert to Htmx Confirmations\n\nI’ll intercept an Htmx request using the event above and slot in a new confirmation dialog. This is the example shown in the Htm documentation. To get started, you’ll need to add a reference to SweetAlert in your web application.\n\n```html\n\n```\n\nYou’ll need to modify your target elements with the following attribute.\n\n```html\n\n```\n\nNote that this attribute is only necessary if you want to be more selective about when and where this new dialog appears. If you aren’t selective, you don’t need this attribute.\n\nFinally, let’s write some JavaScript code.\n\n```javascript // site.js document.body.addEventListener('htmx:confirm', function (evt) { if (evt.target.matches(\"[confirm-with-sweet-alert='true']\")) { evt.preventDefault(); swal({ title: \"Are you sure?\", text: \"Are you sure you are sure?\", icon: \"warning\", buttons: true, dangerMode: true, }).then((confirmed) => { if (confirmed) { evt.detail.issueRequest(); } }); } });\n\n```\n\nThe event will only be handled when the target element has our `confirm-with-sweet-alert` attribute. Otherwise, it falls back to Htmx’s default behavior.\n\nCool! Now, you’ll see the SweetAlert dialog defined in our JavaScript whenever you click the button.\n\n## Conclusion\n\nHtmx continues to surprise me with its flexibility and extension points. I recommend reading through more of the documentation to discover more features you can use in your applications. In this case, we can enhance the user experience of dangerous operations to give users more detailed information about the action they are about to take.\n\nI hope you try this in your applications, and as always, thanks for reading.",
  "Link": "https://khalidabuhakmeh.com/confirmation-dialogs-with-htmx-and-sweetalert",
  "FeedName": "Khalid Abuhakmeh's Blog",
  "Author": "Khalid Abuhakmeh",
  "EnhancedContent": "![Confirmation Dialogs with Htmx and SweetAlert](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/confirmation-dialogs-htmx-sweetalert-html.jpg)\n\nPhoto by [Fabian Gieske](https://unsplash.com/@fbngsk)\n\nWhen building web experiences, there are safe operations and destructive ones. In the case of dangerous actions, it’s widespread to ask the user if they’d like to continue with the action before ultimately executing it.\n\nIn this post, we’ll explore a valuable feature in the [Htmx documentation](https://htmx.org/events/#htmx:confirm) that allows you to intercept outgoing requests and present a [Sweet Alert confirmation dialog](https://sweetalert.js.org/guides/). This feature can greatly enhance user experience and control in your web applications. Let’s dive in.\n\n## The `htmx:confirm`\nevent\n\nHtmx users are likely familiar with the `hx-confirm` attribute, which is a declarative way to use the `confirm` JavaScript function. This uses your browser’s native functionality to display a confirmation dialog that allows the user one last chance to cancel their action.\n\n```html <button class=\"btn btn-danger\" hx-post=\"\" name=\"input\" value=\"DELETE\" hx-confirm=\"Are you sure?\"> Delete Important Stuff </button>\n\n```\n\nBut folks likely don’t know that the `htmx:confirm` event is triggered before \\*\\*every \\*\\* request. This allows you to intercept, stop, or continue any Htmx request on the client. This opens up a lot of UX opportunities.\n\nTo register for this event, you will need the following JavaScript referenced in your web application.\n\n```javascript document.body.addEventListener('htmx:confirm', function (evt) { // do something here // you can evt.preventDefault() // or... // evt.details.issueRequest() to continue. });\n\n```\n\nLet’s use the SweetAlert JavaScript library to enhance the dull confirm dialog.\n\n## Add SweetAlert to Htmx Confirmations\n\nI’ll intercept an Htmx request using the event above and slot in a new confirmation dialog. This is the example shown in the Htm documentation. To get started, you’ll need to add a reference to SweetAlert in your web application.\n\n```html <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\n\n```\n\nYou’ll need to modify your target elements with the following attribute.\n\n```html <button class=\"btn btn-danger\" hx-post=\"\" name=\"input\" value=\"DELETE\" confirm-with-sweet-alert='true'> Delete Important Stuff </button>\n\n```\n\nNote that this attribute is only necessary if you want to be more selective about when and where this new dialog appears. If you aren’t selective, you don’t need this attribute.\n\nFinally, let’s write some JavaScript code.\n\n```javascript // site.js document.body.addEventListener('htmx:confirm', function (evt) { if (evt.target.matches(\"[confirm-with-sweet-alert='true']\")) { evt.preventDefault(); swal({ title: \"Are you sure?\", text: \"Are you sure you are sure?\", icon: \"warning\", buttons: true, dangerMode: true, }).then((confirmed) => { if (confirmed) { evt.detail.issueRequest(); } }); } });\n\n```\n\nThe event will only be handled when the target element has our `confirm-with-sweet-alert` attribute. Otherwise, it falls back to Htmx’s default behavior.\n\nCool! Now, you’ll see the SweetAlert dialog defined in our JavaScript whenever you click the button.\n\n## Conclusion\n\nHtmx continues to surprise me with its flexibility and extension points. I recommend reading through more of the documentation to discover more features you can use in your applications. In this case, we can enhance the user experience of dangerous operations to give users more detailed information about the action they are about to take.\n\nI hope you try this in your applications, and as always, thanks for reading.\n\n![Khalid Abuhakmeh's Picture](/assets/images/authorimage.jpg)\n\n## About Khalid Abuhakmeh\n\nKhalid is a developer advocate at JetBrains focusing on .NET technologies and tooling.\n\n## Read Next\n\n[!\\[How To Pick The Right Constructor When Using ActivatorUtilities In .NET\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/activatorutilities-dotnet-pick-constructor-attributes.jpg)](/how-to-pick-the-right-constructor-when-using-activatorutilities-in-dotnet)\n\n[!\\[Checked and Unchecked Arithmetic Operations in .NET\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/overflow-checked-unchecked-dotnet-math.jpg)](/checked-and-unchecked-arithmetic-operations-in-dotnet)",
  "PubDate": "2024-08-20T00:00:00+00:00"
}
