{
  "Tags": [
    "csharp",
    "dotnet"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Khalid Abuhakmeh",
  "ProcessedDate": "2025-08-05 14:22:14",
  "FeedUrl": "https://khalidabuhakmeh.com/feed.xml",
  "Title": "Intersperse Values for Enumerable Collections",
  "Description": "JavaScript, for better or worse, has a much smaller standard library than what .NET developers are used to with the base class library (BCL). The JavaScript community has made many attempts to build [a standard library](https://www.npmjs.com/search?q=standard%20library), and I’m sure some of them are great. As I was scanning the options, I came across a fascinating method named [`intersperse`](https://js-std.pages.dev/Array/intersperse), which “inserts a separator between the elements of its list argument”.\n\nIn this post, I’ll implement the same method in C# as an extension method on the `IEnumerable` interface.\n\n## Intersperse implementation in C#\n\nLet’s first look at a few examples and the expected output before we look at the implementation of the method.\n\n```csharp var hello = new string(\"Hello\".Intersperse('-').ToArray()); var one = new string(\"1\".Intersperse('x').ToArray()); var @null = ((IEnumerable)null!).Intersperse(',').ToArray(); var array = new[] { 1, 2, 3 }.Intersperse(42).ToArray(); var menu = new [] {\"Home\", \"About\", \"Privacy\" } .Intersperse(\" > \") .Aggregate((a, b) => $\"{a}{b}\");\n\nConsole.WriteLine($\"'{hello}' interspersed with '-' is {hello}\"); Console.WriteLine($\"1 interspersed is {one}\"); Console.WriteLine($\"null interspersed is {@null}\"); Console.WriteLine($\"array interspersed is {string.Join(\", \", array)}\"); Console.WriteLine($\"The menu is {menu}\");\n\n```\n\nRunning this application, we will see the following output.\n\n```text 'H-e-l-l-o' interspersed with '-' is H-e-l-l-o 1 interspersed is 1 null interspersed is System.Object[] array interspersed is 1, 42, 2, 42, 3 The menu is Home > About > Privacy\n\n```\n\nLet’s get to the implementation!\n\n```csharp public static class EnumerableExtensions { public static IEnumerable Intersperse( this IEnumerable? source, T delimiter) { if (source is null) yield break;\n\nusing var enumerator = source.GetEnumerator(); var hasFirstElement = enumerator.MoveNext();\n\nif (hasFirstElement == false) yield break;\n\nyield return enumerator.Current;\n\nwhile (enumerator.MoveNext()) { yield return delimiter; yield return enumerator.Current; } } }\n\n```\n\nI used `yield` to reduce the number of iterations on the collection being passed, as it would add unnecessary overhead. Additionally, I could have used a method like `Zip` , but that would have required more gymnastics than the current implementation.\n\nI hope you enjoyed reading this quick blog post, and as always, thanks for reading. Cheers.",
  "Link": "https://khalidabuhakmeh.com/intersperse-values-for-enumerable-collections",
  "FeedName": "Khalid Abuhakmeh's Blog",
  "Author": "Khalid Abuhakmeh",
  "EnhancedContent": "![Intersperse Values for Enumerable Collections](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/intersperse-values-enumerable-csharp.jpg)\n\nPhoto by [Super Snapper](https://unsplash.com/@supersnapper27)\n\nJavaScript, for better or worse, has a much smaller standard library than what .NET developers are used to with the base class library (BCL). The JavaScript community has made many attempts to build [a standard library](https://www.npmjs.com/search?q=standard%20library), and I’m sure some of them are great. As I was scanning the options, I came across a fascinating method named [`intersperse`](https://js-std.pages.dev/Array/intersperse), which “inserts a separator between the elements of its list argument”.\n\nIn this post, I’ll implement the same method in C# as an extension method on the `IEnumerable` interface.\n\n## Intersperse implementation in C#\n\nLet’s first look at a few examples and the expected output before we look at the implementation of the method.\n\n```csharp var hello = new string(\"Hello\".Intersperse('-').ToArray()); var one = new string(\"1\".Intersperse('x').ToArray()); var @null = ((IEnumerable<object>)null!).Intersperse(',').ToArray(); var array = new[] { 1, 2, 3 }.Intersperse(42).ToArray(); var menu = new [] {\"Home\", \"About\", \"Privacy\" } .Intersperse(\" > \") .Aggregate((a, b) => $\"{a}{b}\");\n\nConsole.WriteLine($\"'{hello}' interspersed with '-' is {hello}\"); Console.WriteLine($\"1 interspersed is {one}\"); Console.WriteLine($\"null interspersed is {@null}\"); Console.WriteLine($\"array interspersed is {string.Join(\", \", array)}\"); Console.WriteLine($\"The menu is {menu}\");\n\n```\n\nRunning this application, we will see the following output.\n\n```text 'H-e-l-l-o' interspersed with '-' is H-e-l-l-o 1 interspersed is 1 null interspersed is System.Object[] array interspersed is 1, 42, 2, 42, 3 The menu is Home > About > Privacy\n\n```\n\nLet’s get to the implementation!\n\n```csharp public static class EnumerableExtensions { public static IEnumerable<T> Intersperse<T>( this IEnumerable<T>? source, T delimiter) { if (source is null) yield break;\n\nusing var enumerator = source.GetEnumerator(); var hasFirstElement = enumerator.MoveNext();\n\nif (hasFirstElement == false) yield break;\n\nyield return enumerator.Current;\n\nwhile (enumerator.MoveNext()) { yield return delimiter; yield return enumerator.Current; } } }\n\n```\n\nI used `yield` to reduce the number of iterations on the collection being passed, as it would add unnecessary overhead. Additionally, I could have used a method like `Zip` , but that would have required more gymnastics than the current implementation.\n\nI hope you enjoyed reading this quick blog post, and as always, thanks for reading. Cheers.\n\n![Khalid Abuhakmeh's Picture](/assets/images/authorimage.jpg)\n\n## About Khalid Abuhakmeh\n\nKhalid is a developer advocate at JetBrains focusing on .NET technologies and tooling.\n\n## Read Next\n\n[!\\[Checked and Unchecked Arithmetic Operations in .NET\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/overflow-checked-unchecked-dotnet-math.jpg)](/checked-and-unchecked-arithmetic-operations-in-dotnet)\n\n[!\\[Htmx and Playwright Tests in C#\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/htmx-playwright-csharp-tests.jpg)](/htmx-and-playwright-tests-in-csharp)",
  "PubDate": "2024-09-10T00:00:00+00:00"
}
