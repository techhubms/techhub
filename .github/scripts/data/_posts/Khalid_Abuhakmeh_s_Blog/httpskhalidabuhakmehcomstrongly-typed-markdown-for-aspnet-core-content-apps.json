{
  "Tags": [
    "aspnet",
    "markdown"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Khalid Abuhakmeh",
  "ProcessedDate": "2025-08-05 14:22:13",
  "FeedUrl": "https://khalidabuhakmeh.com/feed.xml",
  "Title": "Strongly-Typed Markdown for ASP.NET Core Content Apps",
  "Description": "Every development career has milestone moments. One we all likely share is building a custom content management system, or CMS, as developers like to refer to it. A common approach to melding metadata and content is utilizing the old reliable Markdown format, which fuses YAML frontmatter with a simple content format. While YAML is flexible, it can be less than ideal when wanting to use that embedded data in your ASP.NET Core applications.\n\nIn this post, I’ll show you a quick experiment around processing Markdown files and their YAML into a strongly-type C# object. The example allows you to easily modify content while still having access to instances of data that you can strongly type.\n\n## The Magnificent Markdown\n\n[Markdown](https://www.markdownguide.org/) is a very flexible format whose strength comes from its simplicity. Let’s examine a document that defines a person’s profile.\n\n```markdown --- name: \"Khalid Abuhakmeh\" profession: \"Software Developer\" hobbies: [\"video games\", \"movies\", \"boxing\"] ---\n\n## Summary\n\nI am writing a little about myself here and this should appear in the page. Cool! Check me out at my [personal blog](https://khalidabuhakmeh.com).\n\n```\n\nThe top of the document defines a data model with properties for `Name` , `Profession` , and `Hobbies` . The C# data model for this YAML would consist of three properties.\n\n```csharp public class Asset { public string Name { get; set; } = \"\"; public string Profession { get; set; } = \"\"; public string[] Hobbies { get; set; } = []; }\n\n```\n\nLet’s build an object that will parse the Markdown file’s front matter while helping us render the content into HTML for use on a Razor page.\n\n## The MarkdownObject and Parsing Files\n\nFor my experiment, I created a `MarkdownObject` class that takes a content string and parses the document into its parts. The `T` argument is up to the developer to determine.\n\nTo continue with the code, you must add the `Markdig` package and the `YamlDotNet` package.\n\n```xml\n\n```\n\nLet’s look at the implementation next.\n\n```csharp using Markdig; using Markdig.Extensions.Yaml; using Markdig.Syntax; using Microsoft.AspNetCore.Html; using YamlDotNet.Serialization; using Md = Markdig.Markdown;\n\nnamespace SuperContent.Models;\n\npublic class MarkdownObject { private static readonly MarkdownPipeline MarkdownPipeline = new MarkdownPipelineBuilder() .UseYamlFrontMatter() .UseAdvancedExtensions() .Build(); private static readonly IDeserializer Deserializer = new DeserializerBuilder() .WithYamlFormatter(new YamlFormatter()) .WithCaseInsensitivePropertyMatching() .Build();\n\npublic MarkdownObject(string content) { var doc = Md.Parse(content, MarkdownPipeline); FrontMatter = default;\n\nif (doc.Descendants().FirstOrDefault() is { } fm) { var yaml = fm.Lines.ToSlice(); FrontMatter = Deserializer.Deserialize(yaml.Text);\n\n// we don't want front matter after it's processed doc.Remove(fm); }\n\n// turn it into HTML once Html = new HtmlString(doc.ToHtml()); }\n\npublic T? FrontMatter { get; private set; }\n\npublic IHtmlContent Html { get; private set; } }\n\n```\n\nIn the case of this demo, we’ll create an instance of `MarkdownObject` . Let’s see how to use this type in a Razor Page.\n\n## MarkdownObject in a Razor Page\n\nIn my demo, I have all my Markdown files in a `Data` directory. Each file in the data directory has a unique file name that we’ll use in our Razor Page as a `slug` . We’ll also use the Model to output the data and the processed HTML into a structured layout.\n\n```razor @page \"/profile/{slug}\" @model SuperContent.Pages.Profile\n\n@Model.Asset.FrontMatter?.Name\n\nProfession @Model.Asset.FrontMatter?.Profession Hobbies\n\n@if (Model.Asset is { FrontMatter.Hobbies : { } hobbies }) { @foreach (var hobby in hobbies) { @hobby\n\n} }\n\n@Model.Asset.Html\n\n```\n\nSo, what does the page’s model look like?\n\n```csharp using System.Text.RegularExpressions; using Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.Mvc.RazorPages; using SuperContent.Models;\n\nnamespace SuperContent.Pages;\n\npublic partial class Profile : PageModel { [BindProperty(SupportsGet = true)] public string Slug { get; set; } = \"\";\n\npublic MarkdownObject Asset { get; set; } = null!;\n\npublic IActionResult OnGet() { // read a file from the Data directory based on the slug // sanitize the slug first because people are mean var sanitizedSlug = SlugRegex.Replace(Slug, \"\"); var path = Path.Combine(\"Data\", $\"{sanitizedSlug}.md\");\n\nif (System.IO.File.Exists(path)) { var content = System.IO.File.ReadAllText($\"Data/{sanitizedSlug}.md\"); Asset = new(content); return Page(); }\n\nreturn NotFound(); }\n\n[GeneratedRegex(\"[^a-zA-Z0-9_-]\")] private static partial Regex SlugRegex { get; } }\n\npublic class Asset { public string Name { get; set; } = \"\"; public string Profession { get; set; } = \"\"; public string[] Hobbies { get; set; } = []; }\n\n```\n\nThe `OnGet` method contains some protective code to prevent access to other files, but it’s ultimately pretty straightforward. When you go to `/profile/Khalid,` you’ll see a nicely formatted page that mixes data and content into predetermined HTML because we use the new `MarkdownObject` class. Sweet!\n\nI’ve pushed the code to my [GitHub repository so you can try this sample](https://github.com/khalidabuhakmeh/SuperContent) for yourself. Please give it a try and let me know what you think. As always, thanks for reading and sharing my posts. Cheers.",
  "Link": "https://khalidabuhakmeh.com/strongly-typed-markdown-for-aspnet-core-content-apps",
  "FeedName": "Khalid Abuhakmeh's Blog",
  "Author": "Khalid Abuhakmeh",
  "EnhancedContent": "![Strongly-Typed Markdown for ASP.NET Core Content Apps](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/strongly-typed-markdown-aspnetcore-content-apps.jpg)\n\nPhoto by [Charles Gaudreault](https://unsplash.com/@dcdg)\n\nEvery development career has milestone moments. One we all likely share is building a custom content management system, or CMS, as developers like to refer to it. A common approach to melding metadata and content is utilizing the old reliable Markdown format, which fuses YAML frontmatter with a simple content format. While YAML is flexible, it can be less than ideal when wanting to use that embedded data in your ASP.NET Core applications.\n\nIn this post, I’ll show you a quick experiment around processing Markdown files and their YAML into a strongly-type C# object. The example allows you to easily modify content while still having access to instances of data that you can strongly type.\n\n## The Magnificent Markdown\n\n[Markdown](https://www.markdownguide.org/) is a very flexible format whose strength comes from its simplicity. Let’s examine a document that defines a person’s profile.\n\n```markdown --- name: \"Khalid Abuhakmeh\" profession: \"Software Developer\" hobbies: [\"video games\", \"movies\", \"boxing\"] ---\n\n## Summary\n\nI am writing a little about myself here and this should appear in the page. Cool! Check me out at my [personal blog](https://khalidabuhakmeh.com).\n\n```\n\nThe top of the document defines a data model with properties for `Name` , `Profession` , and `Hobbies` . The C# data model for this YAML would consist of three properties.\n\n```csharp public class Asset { public string Name { get; set; } = \"\"; public string Profession { get; set; } = \"\"; public string[] Hobbies { get; set; } = []; }\n\n```\n\nLet’s build an object that will parse the Markdown file’s front matter while helping us render the content into HTML for use on a Razor page.\n\n## The MarkdownObject and Parsing Files\n\nFor my experiment, I created a `MarkdownObject<T>` class that takes a content string and parses the document into its parts. The `T` argument is up to the developer to determine.\n\nTo continue with the code, you must add the `Markdig` package and the `YamlDotNet` package.\n\n```xml <ItemGroup> <PackageReference Include=\"Markdig\" Version=\"0.40.0\" /> <PackageReference Include=\"YamlDotNet\" Version=\"16.3.0\" /> </ItemGroup>\n\n```\n\nLet’s look at the implementation next.\n\n```csharp using Markdig; using Markdig.Extensions.Yaml; using Markdig.Syntax; using Microsoft.AspNetCore.Html; using YamlDotNet.Serialization; using Md = Markdig.Markdown;\n\nnamespace SuperContent.Models;\n\npublic class MarkdownObject<T> { private static readonly MarkdownPipeline MarkdownPipeline = new MarkdownPipelineBuilder() .UseYamlFrontMatter() .UseAdvancedExtensions() .Build(); private static readonly IDeserializer Deserializer = new DeserializerBuilder() .WithYamlFormatter(new YamlFormatter()) .WithCaseInsensitivePropertyMatching() .Build();\n\npublic MarkdownObject(string content) { var doc = Md.Parse(content, MarkdownPipeline); FrontMatter = default;\n\nif (doc.Descendants<YamlFrontMatterBlock>().FirstOrDefault() is { } fm) { var yaml = fm.Lines.ToSlice(); FrontMatter = Deserializer.Deserialize<T>(yaml.Text);\n\n// we don't want front matter after it's processed doc.Remove(fm); }\n\n// turn it into HTML once Html = new HtmlString(doc.ToHtml()); }\n\npublic T? FrontMatter { get; private set; }\n\npublic IHtmlContent Html { get; private set; } }\n\n```\n\nIn the case of this demo, we’ll create an instance of `MarkdownObject<Asset>` . Let’s see how to use this type in a Razor Page.\n\n## MarkdownObject in a Razor Page\n\nIn my demo, I have all my Markdown files in a `Data` directory. Each file in the data directory has a unique file name that we’ll use in our Razor Page as a `slug` . We’ll also use the Model to output the data and the processed HTML into a structured layout.\n\n```razor @page \"/profile/{slug}\" @model SuperContent.Pages.Profile\n\n<div class=\"row\"> <div class=\"col-12\"> <h1>@Model.Asset.FrontMatter?.Name</h1> </div> </div>\n\n<div class=\"row\"> <div class=\"col-3\"> <dl> <dt>Profession</dt> <dd>@Model.Asset.FrontMatter?.Profession</dd> <dt>Hobbies</dt> <dd> <ul> @if (Model.Asset is { FrontMatter.Hobbies : { } hobbies }) { @foreach (var hobby in hobbies) { <li>@hobby</li> } } </ul> </dd> </dl> </div> <div class=\"col-9\"> @Model.Asset.Html </div> </div>\n\n```\n\nSo, what does the page’s model look like?\n\n```csharp using System.Text.RegularExpressions; using Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.Mvc.RazorPages; using SuperContent.Models;\n\nnamespace SuperContent.Pages;\n\npublic partial class Profile : PageModel { [BindProperty(SupportsGet = true)] public string Slug { get; set; } = \"\";\n\npublic MarkdownObject<Asset> Asset { get; set; } = null!;\n\npublic IActionResult OnGet() { // read a file from the Data directory based on the slug // sanitize the slug first because people are mean var sanitizedSlug = SlugRegex.Replace(Slug, \"\"); var path = Path.Combine(\"Data\", $\"{sanitizedSlug}.md\");\n\nif (System.IO.File.Exists(path)) { var content = System.IO.File.ReadAllText($\"Data/{sanitizedSlug}.md\"); Asset = new(content); return Page(); }\n\nreturn NotFound(); }\n\n[GeneratedRegex(\"[^a-zA-Z0-9_-]\")] private static partial Regex SlugRegex { get; } }\n\npublic class Asset { public string Name { get; set; } = \"\"; public string Profession { get; set; } = \"\"; public string[] Hobbies { get; set; } = []; }\n\n```\n\nThe `OnGet` method contains some protective code to prevent access to other files, but it’s ultimately pretty straightforward. When you go to `/profile/Khalid,` you’ll see a nicely formatted page that mixes data and content into predetermined HTML because we use the new `MarkdownObject` class. Sweet!\n\nI’ve pushed the code to my [GitHub repository so you can try this sample](https://github.com/khalidabuhakmeh/SuperContent) for yourself. Please give it a try and let me know what you think. As always, thanks for reading and sharing my posts. Cheers.\n\n![Khalid Abuhakmeh's Picture](/assets/images/authorimage.jpg)\n\n## About Khalid Abuhakmeh\n\nKhalid is a developer advocate at JetBrains focusing on .NET technologies and tooling.\n\n## Read Next\n\n[!\\[The Curious Case of .NET ConcurrentDictionary and Closures\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/dotnet-concurrentdictionary-getoradd-closures.jpg)](/the-curious-case-of-dotnet-concurrentdictionary-and-closures)\n\n[!\\[Generic C# Methods with Enum Constraints for .NET\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/generic-csharp-methods-enums-dotnet.jpg)](/generic-csharp-methods-with-enum-constraints-for-dotnet)",
  "PubDate": "2025-02-25T00:00:00+00:00"
}
