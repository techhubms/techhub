{
  "Tags": [
    "astro",
    "dotnet",
    "javascript"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Khalid Abuhakmeh",
  "ProcessedDate": "2025-08-05 14:22:14",
  "FeedUrl": "https://khalidabuhakmeh.com/feed.xml",
  "Title": "Great .NET Documentation with Astro, Starlight, and MarkdownSnippets",
  "Description": "The hallmark of every great project is equally great documentation, but it can be increasingly difficult for developers to keep both in sync. Luckily, I’ve been experimenting again with a combination of Starlight and MarkdownSnippets to make maintaining code samples and documentation much more convenient.\n\nIn this post, we’ll see how to set up your repository so that MarkdownSnippets pulls samples from your codebase and updates your Starlight documentation.\n\n## Directory Structure and Tools\n\nTo get started, let’s set up our repository for success. Let’s begin with folders. We’ll want to create the following folders at the root of a newly created directory.\n\n```\n- docs\n- src\n\n```\n\nThe `docs` directory will hold our documentation powered by Starlight, and the `src` directory will have all our .NET code.\n\nWe’ll want to run the following dotnet commands within the same directory.\n\n```bash dotnet new tool-manifest\n\n```\n\nNext, let’s install the MarkdownSnippets tool.\n\n```bash dotnet tool install MarkdownSnippets.Tool\n\n```\n\nFinally, let’s create the MarkdownSnippets configuration file of `mdsnippets.json` , which will tune our snippet generation to work with Starlight.\n\n```json { \"$schema\": \"https://raw.githubusercontent.com/SimonCropp/MarkdownSnippets/refs/heads/main/schema.json\", \"Convention\": \"InPlaceOverwrite\", \"WriteHeader\": false, \"ReadOnly\": false, \"LinkFormat\": \"None\", \"OmitSnippetLinks\": true }\n\n```\n\nFollowing the steps correctly, you’ll have the following files and folders.\n\n```\n- docs\n- src\n- .config\n- mdsnippets.json\n\n```\n\nGreat! Let’s write some .NET code in our `src` directory now.\n\n## Our .NET Code Samples\n\nChange to the `src` directory and create a new `Console` application. Any will do. What’s important is using the MarkdownSnippets convention to develop a block of code to be extracted. Here’s the one I’m using in `Program.cs` .\n\n```csharp // begin-snippet: App:HelloWorld // Program.cs Console.WriteLine(\"Hello, Again!\"); // end-snippet\n\n```\n\nThat’s it! Write and decorate as many code samples as you’ll use in the next section.\n\n## Our Starlight Documentation\n\nNow, let’s move into the `docs` directory and run the following command. Note you’ll need both Node and Yarn installed.\n\n``` yarn create astro --template starlight\n\n```\n\nFrom here, follow the Astro wizard to create a new documentation site. From the root, your directory structure should look similar to the following.\n\n```text\n- docs\n- .astro\n- .vscode\n- .yarn\n- src\n- public\n- astro.config.mjs\n- package.json\n- ...\n- src\n- App\n- bin\n- obj\n- App.csproj\n- Program.cs\n- mdsnippets.json\n\n```\n\nNow, let’s update our `package.json` to scan our C# project, find snippets, and update our documentation.\n\n```json { \"type\": \"module\", \"version\": \"0.0.1\", \"scripts\": { \"mdsnippets\": \"cd .. && dotnet mdsnippets\", \"dev\": \"npm run mdsnippets && astro dev\", \"start\": \"npm run dev\", \"build\": \"npm run mdsnippets && astro build\" }, \"dependencies\": { \"@astrojs/starlight\": \"^0.29.3\", \"astro\": \"^4.16.10\", \"sharp\": \"^0.32.5\" } }\n\n```\n\nFeel free to add or remove any additional scripts or dependencies for your particular use case. This is the bare minimum for this post.\n\nNow, let’s write some documentation. Find the `example.md` file under `docs/src/content/docs/guides/` and write the following markdown.\n\n```markdown --- title: Hello, World! description: Creating your first .NET Console Application ---\n\n## Getting Started\n\nYour first .NET application will be a console application, or what the cool folks like to call it, an app. Create a new project using the `dotnet` CLI command `new`.\n\n```bash title=\"Terminal\" dotnet new console -o HelloWorld && cd ./HelloWorld ```\n\nThen, add the following code in the `Program.cs` file.\n\nsnippet: App:HelloWorld\n\nThen run the app by using the following command.\n\n```bash title=\"Terminal\" dotnet run ```\n\nCongratulations!\n\n```\n\nNow, run the `dev` command from the root directory. MarkdownSnippets will transform the `snippet: App:HelloWorld` in your Markdown to the following.\n\n```markdown --- title: Hello, World! description: Creating your first .NET Console Application ---\n\n## Getting Started\n\nYour first .NET application will be a console application, or what the cool folks like to call it, an app. Create a new project using the `dotnet` CLI command `new`.\n\n```bash title=\"Terminal\" dotnet new console -o HelloWorld && cd ./HelloWorld ```\n\nThen, add the following code in the `Program.cs` file. ```cs // Program.cs Console.WriteLine(\"Hello, Again!\"); ``` Then run the app by using the following command.\n\n```bash title=\"Terminal\" dotnet run ```\n\nCongratulations!\n\n```\n\nYou can change the code in `Program.cs` and rerun the command to see the documentation update.\n\n## Conclusion\n\nIf you’re working on code-heavy documentation where samples speak louder than words, then combining MarkdownSnippets with Starlight is a great pairing. You’ll want to develop a good naming convention to make finding and altering samples easier, after which you’ll be sure that any code samples are valid, compiled, and run. After all, as developers, we all want to get it right the first time.\n\nAs always, thanks for reading, and cheers.",
  "Link": "https://khalidabuhakmeh.com/great-dotnet-documentation-with-astro-starlight-and-markdownsnippets",
  "FeedName": "Khalid Abuhakmeh's Blog",
  "Author": "Khalid Abuhakmeh",
  "EnhancedContent": "![Great .NET Documentation with Astro, Starlight, and MarkdownSnippets](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/astro-starlight-dotnet-markdownsnippets-documentation.jpg)\n\nPhoto by [Starlight](https://starlight.astro.build/)\n\nThe hallmark of every great project is equally great documentation, but it can be increasingly difficult for developers to keep both in sync. Luckily, I’ve been experimenting again with a combination of Starlight and MarkdownSnippets to make maintaining code samples and documentation much more convenient.\n\nIn this post, we’ll see how to set up your repository so that MarkdownSnippets pulls samples from your codebase and updates your Starlight documentation.\n\n## Directory Structure and Tools\n\nTo get started, let’s set up our repository for success. Let’s begin with folders. We’ll want to create the following folders at the root of a newly created directory.\n\n```\n- docs\n- src\n\n```\n\nThe `docs` directory will hold our documentation powered by Starlight, and the `src` directory will have all our .NET code.\n\nWe’ll want to run the following dotnet commands within the same directory.\n\n```bash dotnet new tool-manifest\n\n```\n\nNext, let’s install the MarkdownSnippets tool.\n\n```bash dotnet tool install MarkdownSnippets.Tool\n\n```\n\nFinally, let’s create the MarkdownSnippets configuration file of `mdsnippets.json` , which will tune our snippet generation to work with Starlight.\n\n```json { \"$schema\": \"https://raw.githubusercontent.com/SimonCropp/MarkdownSnippets/refs/heads/main/schema.json\", \"Convention\": \"InPlaceOverwrite\", \"WriteHeader\": false, \"ReadOnly\": false, \"LinkFormat\": \"None\", \"OmitSnippetLinks\": true }\n\n```\n\nFollowing the steps correctly, you’ll have the following files and folders.\n\n```\n- docs\n- src\n- .config\n- mdsnippets.json\n\n```\n\nGreat! Let’s write some .NET code in our `src` directory now.\n\n## Our .NET Code Samples\n\nChange to the `src` directory and create a new `Console` application. Any will do. What’s important is using the MarkdownSnippets convention to develop a block of code to be extracted. Here’s the one I’m using in `Program.cs` .\n\n```csharp // begin-snippet: App:HelloWorld // Program.cs Console.WriteLine(\"Hello, Again!\"); // end-snippet\n\n```\n\nThat’s it! Write and decorate as many code samples as you’ll use in the next section.\n\n## Our Starlight Documentation\n\nNow, let’s move into the `docs` directory and run the following command. Note you’ll need both Node and Yarn installed.\n\n``` yarn create astro --template starlight\n\n```\n\nFrom here, follow the Astro wizard to create a new documentation site. From the root, your directory structure should look similar to the following.\n\n```text\n- docs\n- .astro\n- .vscode\n- .yarn\n- src\n- public\n- astro.config.mjs\n- package.json\n- ...\n- src\n- App\n- bin\n- obj\n- App.csproj\n- Program.cs\n- mdsnippets.json\n\n```\n\nNow, let’s update our `package.json` to scan our C# project, find snippets, and update our documentation.\n\n```json { \"type\": \"module\", \"version\": \"0.0.1\", \"scripts\": { \"mdsnippets\": \"cd .. && dotnet mdsnippets\", \"dev\": \"npm run mdsnippets && astro dev\", \"start\": \"npm run dev\", \"build\": \"npm run mdsnippets && astro build\" }, \"dependencies\": { \"@astrojs/starlight\": \"^0.29.3\", \"astro\": \"^4.16.10\", \"sharp\": \"^0.32.5\" } }\n\n```\n\nFeel free to add or remove any additional scripts or dependencies for your particular use case. This is the bare minimum for this post.\n\nNow, let’s write some documentation. Find the `example.md` file under `docs/src/content/docs/guides/` and write the following markdown.\n\n```markdown --- title: Hello, World! description: Creating your first .NET Console Application ---\n\n## Getting Started\n\nYour first .NET application will be a console application, or what the cool folks like to call it, an app. Create a new project using the `dotnet` CLI command `new`.\n\n```bash title=\"Terminal\" dotnet new console -o HelloWorld && cd ./HelloWorld ```\n\nThen, add the following code in the `Program.cs` file.\n\nsnippet: App:HelloWorld\n\nThen run the app by using the following command.\n\n```bash title=\"Terminal\" dotnet run ```\n\nCongratulations!\n\n```\n\nNow, run the `dev` command from the root directory. MarkdownSnippets will transform the `snippet: App:HelloWorld` in your Markdown to the following.\n\n```markdown --- title: Hello, World! description: Creating your first .NET Console Application ---\n\n## Getting Started\n\nYour first .NET application will be a console application, or what the cool folks like to call it, an app. Create a new project using the `dotnet` CLI command `new`.\n\n```bash title=\"Terminal\" dotnet new console -o HelloWorld && cd ./HelloWorld ```\n\nThen, add the following code in the `Program.cs` file.\n\n<!-- snippet: App:HelloWorld -->\n\n```cs // Program.cs Console.WriteLine(\"Hello, Again!\"); ```\n\n<!-- endSnippet -->\n\nThen run the app by using the following command.\n\n```bash title=\"Terminal\" dotnet run ```\n\nCongratulations!\n\n```\n\nYou can change the code in `Program.cs` and rerun the command to see the documentation update.\n\n## Conclusion\n\nIf you’re working on code-heavy documentation where samples speak louder than words, then combining MarkdownSnippets with Starlight is a great pairing. You’ll want to develop a good naming convention to make finding and altering samples easier, after which you’ll be sure that any code samples are valid, compiled, and run. After all, as developers, we all want to get it right the first time.\n\nAs always, thanks for reading, and cheers.\n\n![Khalid Abuhakmeh's Picture](/assets/images/authorimage.jpg)\n\n## About Khalid Abuhakmeh\n\nKhalid is a developer advocate at JetBrains focusing on .NET technologies and tooling.\n\n## Read Next\n\n[!\\[Alpine.Js Polling ASP.NET Core APIs For Updates\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/alpinejs-aspnet-core-api-updates-polling.jpg)](/alpinejs-polling-aspnet-core-apis-for-updates)\n\n[!\\[Writing a String Numeric Comparer with .NET 9\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/string-numeric-comparer-dotnet-9.jpg)](/writing-a-string-numeric-comparer-with-dotnet-9)",
  "PubDate": "2024-12-31T00:00:00+00:00"
}
