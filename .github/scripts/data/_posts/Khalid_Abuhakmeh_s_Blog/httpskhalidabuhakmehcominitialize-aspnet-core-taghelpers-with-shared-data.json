{
  "Tags": [
    "aspnet"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Khalid Abuhakmeh",
  "ProcessedDate": "2025-08-05 14:22:14",
  "FeedUrl": "https://khalidabuhakmeh.com/feed.xml",
  "Title": "Initialize ASP.NET Core TagHelpers with Shared Data",
  "Description": "ASP.NET Core has a superpower that few other frameworks have, largely thanks to the Razor engine. Razor syntax is a mix of HTML and C#, and most Razor syntax implementations will skew heavily towards HTML over C#. However, C# syntax offers the most value in control flow mechanics using if, for, and switch statements. Razor’s power is that *evenHTML* syntax is processed by C# and converted into compiled artifacts. This gives Razor a unique opportunity to do some amazing tricks.\n\nIn this post, we’ll see how to use the TagHelpers infrastructure to initialize all tag helper usage across your application and inject necessary shared data.\n\n## The TagHelper In Question\n\nLet’s start by writing a simple tag helper that will replace the contents of a `span` tag when a `text` attribute is set.\n\n```csharp using Microsoft.AspNetCore.Mvc.Razor; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace WebApplication2.Models;\n\n[HtmlTargetElement(\"span\")] public class MyTagHelper: TagHelper { [HtmlAttributeName(\"text\")] public string Text { get; set; } = \"\";\n\n[HtmlAttributeNotBound] public string Version { get; set; } = \"\";\n\npublic override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) { output.Content.SetHtmlContent(Text); output.Attributes.Add(\"data-version\", Version); return Task.CompletedTask; } }\n\n```\n\nUsage of this tag helper is straightforward. In a Razor view, add the following tag.\n\n```html ...\n\n```\n\nAs you may have noticed in the `MyTagHelper` implementation, there is another property of `Version` , which I decorated with the `HtmlAttributeNotBound` attribute. This value will be initialized with the tag helper initialization infrastructure.\n\n## TagHelper Initializers\n\nWe’ll implement the `ITagHelperInitializer` generic interface, which has an `Initialize` method that takes an instance of a tag helper and a `ViewContext` .\n\n```csharp public class MyTagHelperInitializer(string defaultText, string version) : ITagHelperInitializer { public void Initialize(MyTagHelper helper, ViewContext context) { helper.Text = defaultText; helper.Version = version; } }\n\n```\n\nHere, the data passed into our implementation can be used to hydrate all tag helpers of `MyTagHelper` . This is awesome for multiple reasons.\n\n- Expensive data can be calculated once and set globally, reducing resource utilization and speeding up page rendering.\n- We have access to the\n`ViewContext` , so we can modify and enhance all request/response lifecycle elements if necessary.\n- We have direct access to the tag helper, so the initialization code is as straightforward as possible.\n- The `ViewContext`\ngives us access to `HttpContext` , so we can also handle request-specific values from cookies, user information, etc.\n- Also, we can request other services that are already registered in our services collection.\n\nHow do we use this initializer? In `Program` , add the following line to register our initializer with our services collection.\n\n```csharp builder.Services.AddSingleton >(new MyTagHelperInitializer(\"Default Text\", \"1.0.0\"));\n\n```\n\nIn our case, we’re passing in the initial values. However, this type could also take in application configuration and read values from the `IConfiguration` implementation of an ASP.NET Core application. It’s important to note that this type is registered as a \\*\\*Singleton \\*\\*, which means any data passed to it in the constructor is the data for the rest of the application’s lifetime.\n\nWhen we run our application, the tag helper will result in the following HTML.\n\n```html Hello, World! Default Text\n\n```\n\nWow, so easy!\n\n## Conclusion\n\nPart of building web experiences is handling requests efficiently and returning responses as quickly as possible. With tag helpers, you can help create more buffer space in your performance budgets by reducing and isolating the work needed to process data for HTML tags. Additionally, this technique of global initialization might also be helpful for test-driven UI tests, as attributes and their data can be added or removed depending on build flags. This approach is exciting, and I hope you try it in your applications.\n\nAs always, thanks for reading and sharing my blog posts. Cheers.",
  "Link": "https://khalidabuhakmeh.com/initialize-aspnet-core-taghelpers-with-shared-data",
  "FeedName": "Khalid Abuhakmeh's Blog",
  "Author": "Khalid Abuhakmeh",
  "EnhancedContent": "![Initialize ASP.NET Core TagHelpers with Shared Data](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/aspnet-core-shared-data-tag-helpers-initialize.jpg)\n\nPhoto by [David Clode](https://unsplash.com/@davidclode)\n\nASP.NET Core has a superpower that few other frameworks have, largely thanks to the Razor engine. Razor syntax is a mix of HTML and C#, and most Razor syntax implementations will skew heavily towards HTML over C#. However, C# syntax offers the most value in control flow mechanics using if, for, and switch statements. Razor’s power is that *evenHTML* syntax is processed by C# and converted into compiled artifacts. This gives Razor a unique opportunity to do some amazing tricks.\n\nIn this post, we’ll see how to use the TagHelpers infrastructure to initialize all tag helper usage across your application and inject necessary shared data.\n\n## The TagHelper In Question\n\nLet’s start by writing a simple tag helper that will replace the contents of a `span` tag when a `text` attribute is set.\n\n```csharp using Microsoft.AspNetCore.Mvc.Razor; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace WebApplication2.Models;\n\n[HtmlTargetElement(\"span\")] public class MyTagHelper: TagHelper { [HtmlAttributeName(\"text\")] public string Text { get; set; } = \"\";\n\n[HtmlAttributeNotBound] public string Version { get; set; } = \"\";\n\npublic override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) { output.Content.SetHtmlContent(Text); output.Attributes.Add(\"data-version\", Version); return Task.CompletedTask; } }\n\n```\n\nUsage of this tag helper is straightforward. In a Razor view, add the following tag.\n\n```html <span class=\"fs-1 d-block\" text=\"Hello, World!\">...</span> <span class=\"fs-1 d-block\"></span>\n\n```\n\nAs you may have noticed in the `MyTagHelper` implementation, there is another property of `Version` , which I decorated with the `HtmlAttributeNotBound` attribute. This value will be initialized with the tag helper initialization infrastructure.\n\n## TagHelper Initializers\n\nWe’ll implement the `ITagHelperInitializer` generic interface, which has an `Initialize` method that takes an instance of a tag helper and a `ViewContext` .\n\n```csharp public class MyTagHelperInitializer(string defaultText, string version) : ITagHelperInitializer<MyTagHelper> { public void Initialize(MyTagHelper helper, ViewContext context) { helper.Text = defaultText; helper.Version = version; } }\n\n```\n\nHere, the data passed into our implementation can be used to hydrate all tag helpers of `MyTagHelper` . This is awesome for multiple reasons.\n\n- Expensive data can be calculated once and set globally, reducing resource utilization and speeding up page rendering.\n- We have access to the\n`ViewContext` , so we can modify and enhance all request/response lifecycle elements if necessary.\n- We have direct access to the tag helper, so the initialization code is as straightforward as possible.\n- The `ViewContext`\ngives us access to `HttpContext` , so we can also handle request-specific values from cookies, user information, etc.\n- Also, we can request other services that are already registered in our services collection.\n\nHow do we use this initializer? In `Program` , add the following line to register our initializer with our services collection.\n\n```csharp builder.Services.AddSingleton< ITagHelperInitializer<MyTagHelper> >(new MyTagHelperInitializer(\"Default Text\", \"1.0.0\"));\n\n```\n\nIn our case, we’re passing in the initial values. However, this type could also take in application configuration and read values from the `IConfiguration` implementation of an ASP.NET Core application. It’s important to note that this type is registered as a \\*\\*Singleton \\*\\*, which means any data passed to it in the constructor is the data for the rest of the application’s lifetime.\n\nWhen we run our application, the tag helper will result in the following HTML.\n\n```html <span class=\"fs-1 d-block\" data-version=\"1.0.0\">Hello, World!</span> <span class=\"fs-1 d-block\" data-version=\"1.0.0\">Default Text</span>\n\n```\n\nWow, so easy!\n\n## Conclusion\n\nPart of building web experiences is handling requests efficiently and returning responses as quickly as possible. With tag helpers, you can help create more buffer space in your performance budgets by reducing and isolating the work needed to process data for HTML tags. Additionally, this technique of global initialization might also be helpful for test-driven UI tests, as attributes and their data can be added or removed depending on build flags. This approach is exciting, and I hope you try it in your applications.\n\nAs always, thanks for reading and sharing my blog posts. Cheers.\n\n![Khalid Abuhakmeh's Picture](/assets/images/authorimage.jpg)\n\n## About Khalid Abuhakmeh\n\nKhalid is a developer advocate at JetBrains focusing on .NET technologies and tooling.\n\n## Read Next\n\n[!\\[Writing a String Numeric Comparer with .NET 9\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/string-numeric-comparer-dotnet-9.jpg)](/writing-a-string-numeric-comparer-with-dotnet-9)\n\n[!\\[Vogen and Value Objects with C# and .NET\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/vogen-value-objects-csharp-dotnet.jpg)](/vogen-and-value-objects-with-csharp-and-dotnet)",
  "PubDate": "2025-01-14T00:00:00+00:00"
}
