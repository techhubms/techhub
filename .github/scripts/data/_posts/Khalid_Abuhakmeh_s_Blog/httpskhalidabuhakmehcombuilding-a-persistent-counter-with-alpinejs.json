{
  "Tags": [
    "html",
    "javascript"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Khalid Abuhakmeh",
  "ProcessedDate": "2025-08-05 14:22:14",
  "FeedUrl": "https://khalidabuhakmeh.com/feed.xml",
  "Title": "Building a Persistent Counter with Alpine.Js",
  "Description": "If you read this blog, you likely know I predominantly work with .NET technologies and use web technologies such as HTML, CSS, and JavaScript. The web is an excellent space for new and exciting ways to solve age-old problems. I recently thought about the Blazor “Counter” example that ships with the Blazor Wasm template and how I’ve solved the same problem using Htmx. The issue with Htmx is that it still requires a backend to manage the state; in the case of a counter, this state is the current count. What if you wanted to build a self-contained client-side experience?\n\n[Alpine.js](https://alpinejs.dev/) is a declarative library aimed at helping developers build client-side interactivity using HTML attributes on DOM elements. This post will show you how to create the same Blazor Counter example with very little JavaScript and network payloads.\n\n## Installing Alpine.js\n\nSince Alpine.js is a JavaScript library, you only need to reference the necessary files in your HTML pages. In an ASP.NET Core application, that’s typically in your layout files.\n\nAdd the following `script` tag to the `head` portion of your page.\n\n```html\n\n```\n\nThat’s it. You can also use NPM to bundle the dependency into an existing build process, but we’ll leave that out of this post for now.\n\n## Building an inline Counter with Alpine\n\nAlpine uses attributes, and one of the most important attributes is the `x-data` attribute. The `x-data` attribute sets up the context for our current scope. In most cases, that scope is the DOM element you decorate with the attribute.\n\n```html\n\n```\n\nWow, that’s easy, right? So, how do we persist this information on reloads? Local storage of course!\n\n## Making the inline counter persistent\n\nAlpine.js has a persistence plugin, which we’ll need to install. While you can write the local storage code, this plugin makes it much nicer to use stored values and update them as users make changes.\n\nModify the reference to Alpine.js on the page to include these two `script` tags.\n\n```html\n\n```\n\nCool, we’re ready to update the HTML to persist the value across page refreshes.\n\n```html\n\n```\n\nRefreshing the page now maintains the previous count. What if we want to use that value in other page parts? In other words, what if we want to keep a globally accessible value? That’s where Alpine.js stores come in.\n\n## Persisting state in an Alpine Store\n\nAlpine.js allows you to create a global state using a **store**. Stores are created when Alpine.js initializes the page, allowing you to write more complex logic using JavaScript. Let’s modify our page to use a `counter` store with persistent values and methods.\n\n```html\n\n```\n\nIt’s a bit more JavaScript code, but now other page elements can access the counter store, and the concepts of `increment` and `reset` are incapsulated into the store, allowing us to change behavior in a single location. That’s pretty cool!\n\nHere’s the full HTML file so you can try it out for yourself.\n\n```html\n\n```\n\n## Conclusion\n\nAlpine.js is an excellent library for building client-side experiences, and mixing it with Htmx or plain old JavaScript is a winning combination. I hope you try this and experiment with changing the behavior of `increment` and `reset` .\n\nAs always, thanks for reading and sharing my posts with others. Cheers.",
  "Link": "https://khalidabuhakmeh.com/building-a-persistent-counter-with-alpinejs",
  "FeedName": "Khalid Abuhakmeh's Blog",
  "Author": "Khalid Abuhakmeh",
  "EnhancedContent": "![Building a Persistent Counter with Alpine.Js](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/building-persistent-counter-alpinejs-javascript.jpg)\n\nPhoto by [Paul Pastourmatzis](https://unsplash.com/@pueblovista)\n\nIf you read this blog, you likely know I predominantly work with .NET technologies and use web technologies such as HTML, CSS, and JavaScript. The web is an excellent space for new and exciting ways to solve age-old problems. I recently thought about the Blazor “Counter” example that ships with the Blazor Wasm template and how I’ve solved the same problem using Htmx. The issue with Htmx is that it still requires a backend to manage the state; in the case of a counter, this state is the current count. What if you wanted to build a self-contained client-side experience?\n\n[Alpine.js](https://alpinejs.dev/) is a declarative library aimed at helping developers build client-side interactivity using HTML attributes on DOM elements. This post will show you how to create the same Blazor Counter example with very little JavaScript and network payloads.\n\n## Installing Alpine.js\n\nSince Alpine.js is a JavaScript library, you only need to reference the necessary files in your HTML pages. In an ASP.NET Core application, that’s typically in your layout files.\n\nAdd the following `script` tag to the `head` portion of your page.\n\n```html <!-- Alpine Core --> <script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n\n```\n\nThat’s it. You can also use NPM to bundle the dependency into an existing build process, but we’ll leave that out of this post for now.\n\n## Building an inline Counter with Alpine\n\nAlpine uses attributes, and one of the most important attributes is the `x-data` attribute. The `x-data` attribute sets up the context for our current scope. In most cases, that scope is the DOM element you decorate with the attribute.\n\n```html <main class=\"container\" x-data=\"{ count : 0 }\"> <article class=\"card\"> <header> <h3>Counter Value</h3> </header> <section> <p x-text=\"count\"></p> </section> </article>\n\n<button type=\"button\" x-on:click=\"count++\"> Increment </button> <button type=\"button\" x-on:click=\"count = 0\"> Reset </button> </main>\n\n```\n\nWow, that’s easy, right? So, how do we persist this information on reloads? Local storage of course!\n\n## Making the inline counter persistent\n\nAlpine.js has a persistence plugin, which we’ll need to install. While you can write the local storage code, this plugin makes it much nicer to use stored values and update them as users make changes.\n\nModify the reference to Alpine.js on the page to include these two `script` tags.\n\n```html <!-- Alpine Plugins --> <script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js\"></script> <!-- Alpine Core --> <script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n\n```\n\nCool, we’re ready to update the HTML to persist the value across page refreshes.\n\n```html <main class=\"container\" x-data=\"{ count : $persist(0) }\"> <article class=\"card\"> <header> <h3>Counter Value</h3> </header> <section> <p x-text=\"count\"></p> </section> </article>\n\n<button type=\"button\" x-on:click=\"count++\"> Increment </button> <button type=\"button\" x-on:click=\"count = 0\"> Reset </button> </main>\n\n```\n\nRefreshing the page now maintains the previous count. What if we want to use that value in other page parts? In other words, what if we want to keep a globally accessible value? That’s where Alpine.js stores come in.\n\n## Persisting state in an Alpine Store\n\nAlpine.js allows you to create a global state using a **store**. Stores are created when Alpine.js initializes the page, allowing you to write more complex logic using JavaScript. Let’s modify our page to use a `counter` store with persistent values and methods.\n\n```html <body> <main class=\"container\" x-data> <article class=\"card\"> <header> <h3>Counter Value</h3> </header> <section> <p x-text=\"$store.counter.value\"></p> </section> </article>\n\n<button type=\"button\" x-on:click=\"$store.counter.increment()\"> Increment </button> <button type=\"button\" x-on:click=\"$store.counter.reset()\"> Reset </button> </main> <script> document.addEventListener('alpine:initializing', () => { Alpine.store('counter', { value: Alpine.$persist(0), increment() { this.value++ }, reset() { this.value = 0; } }) }) </script> </body>\n\n```\n\nIt’s a bit more JavaScript code, but now other page elements can access the counter store, and the concepts of `increment` and `reset` are incapsulated into the store, allowing us to change behavior in a single location. That’s pretty cool!\n\nHere’s the full HTML file so you can try it out for yourself.\n\n```html <!DOCTYPE html> <html lang=\"en\" xmlns:x-on=\"http://www.w3.org/1999/xhtml\"> <head> <meta charset=\"UTF-8\"> <title>PicoCSS Boilerplate</title> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\" /> <link rel=\"stylesheet\" href=\"/css/site.css\"/> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <meta name=\"color-scheme\" content=\"light dark\"/> <title>Hello World!</title> <!-- Alpine Plugins --> <script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js\"></script> <!-- Alpine Core --> <script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script> </head> <body> <main class=\"container\" x-data> <article class=\"card\"> <header> <h3>Counter Value</h3> </header> <section> <p x-text=\"$store.counter.value\"></p> </section> </article>\n\n<button type=\"button\" x-on:click=\"$store.counter.increment()\"> Increment </button> <button type=\"button\" x-on:click=\"$store.counter.reset()\"> Reset </button> </main> <script> document.addEventListener('alpine:initializing', () => { Alpine.store('counter', { value: Alpine.$persist(0), increment() { this.value++ }, reset() { this.value = 0; } }) }) </script> </body> </html>\n\n```\n\n## Conclusion\n\nAlpine.js is an excellent library for building client-side experiences, and mixing it with Htmx or plain old JavaScript is a winning combination. I hope you try this and experiment with changing the behavior of `increment` and `reset` .\n\nAs always, thanks for reading and sharing my posts with others. Cheers.\n\n![Khalid Abuhakmeh's Picture](/assets/images/authorimage.jpg)\n\n## About Khalid Abuhakmeh\n\nKhalid is a developer advocate at JetBrains focusing on .NET technologies and tooling.\n\n## Read Next\n\n[!\\[Dynamic Htmx Islands with ASP.NET Core\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/dynamic-htmx-islands-aspnet-core-taghelpers.jpg)](/dynamic-htmx-islands-with-aspnet-core)\n\n[!\\[Alpine.Js Polling ASP.NET Core APIs For Updates\\](https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_500/https://khalidabuhakmeh.com/assets/images/posts/misc/alpinejs-aspnet-core-api-updates-polling.jpg)](/alpinejs-polling-aspnet-core-apis-for-updates)",
  "PubDate": "2024-12-17T00:00:00+00:00"
}
