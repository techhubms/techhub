{
  "OutputDir": "_posts",
  "Link": "https://devclass.com/2025/07/07/zig-lead-makes-extremely-breaking-change-to-std-io-ahead-of-async-and-awaits-return/",
  "FeedLevelAuthor": "DEVCLASS",
  "EnhancedContent": "[Linkedin](https://www.linkedin.com/company/devclass/)\n\n[RSS](https://devclass.com/feed/)\n\n[Twitter](https://twitter.com/d3vclass?lang=en)\n\n[Youtube](https://www.youtube.com/channel/UCEk1p4Omxqi0E0ij6Bfy4HQ)\n\n- [Newsletter](https://devclass.com/newsletter/)\n- [Archive](https://devclass.com/archive/)\n- [The Register](https://www.theregister.com/)\n- [Blocks&Files](https://blocksandfiles.com/)\n- [The Next Platform](https://www.nextplatform.com/)\n\nSearch\n\n[!\\[DevClass\\](https://devclass.com/wp-content/uploads/2018/08/DevClass_logo_White_small-Horizontal.png)NewsPaperDeveloper News](https://devclass.com/)\n\n- [Newsletter](https://devclass.com/newsletter/)\n- [Archive](https://devclass.com/archive/)\n- [The Register](https://www.theregister.com/)\n- [Blocks&Files](https://blocksandfiles.com/)\n- [The Next Platform](https://www.nextplatform.com/)\n\n- [Newsletter](https://devclass.com/newsletter/)\n- [Archive](https://devclass.com/archive/)\n- [The Register](https://www.theregister.com/)\n- [Blocks&Files](https://blocksandfiles.com/)\n- [The Next Platform](https://www.nextplatform.com/)\n\n[!\\[DevClass\\](https://devclass.com/wp-content/uploads/2018/08/DevClass_logo_White_small-Horizontal.png)DevClassDeveloper News](https://devclass.com/)\n\n- [Home](https://devclass.com/)\n- [DevOps](https://devclass.com/devops/)\n- [Serverless](https://devclass.com/serverless/)\n- [Containers](https://devclass.com/containers/)\n- [CI/CD](https://devclass.com/ci-cd/)\n- [ML/AI](https://devclass.com/ml-ai/)\n\n[Home](https://devclass.com/) [Development](https://devclass.com/category/development/) Zig lead makes ‘extremely breaking’ change to std.io ahead of Async and Await’s return\n\n- [Development](https://devclass.com/category/development/)\n\n![Zig lead makes &#8216;extremely breaking&#8217; change to std.io ahead of Async and Await&#8217;s return](https://devclass.com/wp-content/uploads/2025/07/shutterstock_break.jpg \"Zig lead makes &#8216;extremely breaking&#8217; change to std.io ahead of Async and Await&#8217;s return\")\n\nZig programming language inventor and lead developer Andrew Kelley has pushed a breaking change to std.io.Reader and std.io.Writer, as part of a series of changes that will lead to the return of Async and Await, keywords for asynchronous programming that were in early builds of the compiler but then removed.\n\nThe [pull request](https://github.com/ziglang/zig/pull/24329) (PR), which Kelley called Writergate, deprecates “all existing std.io readers and writers” in favour of new non-generic std.io.Reader and std.io.Writer.\n\nThese are core functions in the Zig standard library. “These changes are extremely breaking,” said Kelley. “I am sorry for that, but I have carefully examined the situation and acquired confidence that this is the direction that Zig needs to go.”\n\nZig is pre-release software, the latest release being 0.14.1. That said, it is used in production by some bold organisations, with one prominent example being the bun JavaScript toolkit.\n\nThere are further major I/O changes on the way for Zig, including reworking code for tls (transport layer security), http, json (JavaScript object notation), compression and expansion libraries, and complete removal of the deprecated APIs. Kelly said these will follow in individual PRs, gradually removing dependencies on the old streaming APIs.\n\nThese changes are also needed for the return of Async and Await, Suspend and Resume to the language. These did exist in early builds of Zig, but were of experimental quality and later removed.\n\nIn an [online presentation of the Zig roadmap](https://www.youtube.com/watch?v=x3hOiOcbgeA) last week, Kelley said “the stuff that I did with Async/Await before, it never felt finished, it never felt like it was good enough. I feel like there is a path towards realizing my vision with this new thing.”\n\nWhen this series of changes, including I/O as an interface and others, is complete, it will have numerous benefits, Kelley said, including resource leak checking, better testing, and even “bring your own operating system … you can take a package that used to have a dependency on the operating system, and now it only has a dependency on the I/O interface. If you make your own operating system, all you have to do is implement this interface .. I can make a reusable package that doesn’t decide which operating system it has to run on, and doesn’t decide what order things have to be run in.”\n\nThe price of these improvements is that “changing std.io.Reader and Writer makes you fully rewrite any code that touches it, and it’s a huge pain, so I’m sorry, but I’m strongly convicted that this is the future. It’s going to be great. I’m sorry that I didn’t get it first try,” Kelley said.\n\nInitial response from Zig developers is positive though there is anxiety about breaking existing code. “This new I/O interface is a missing piece for complete reusability of all code in ‘std’ and every other library implemented in Zig going forward. What a brilliant idea and execution,” said one comment to the presentation; though another said that “the reality is that [Zig] is already used in big projects, like Bun. Breaking changes don’t seem possible at this point.”\n\nAnother said that while it was exciting to find out what is happening with Zig, “it feels like the language is in perpetual early access hell; when is it ever going to be in a stable 1.0 state?”\n\nKelley [said](https://news.ycombinator.com/item?id=44465077) on Hacker News that he is “looking at the example set by hare with interest.” Hare is another programming language currently in preview, and the reference is to a tool called [hare-update](https://harelang.org/blog/2025-06-11-hare-update/) which will walk through breaking changes in code and automatically suggest solutions.\n\n[## Google VP of development explains how 'citizen developers' must be tempered by the pros](https://devclass.com/2025/07/18/google-vp-of-development-explains-how-citizen-developers-must-be-tempered-by-the-pros/)[## Hands on with Kiro, the AWS preview of an agentic AI IDE driven by specifications](https://devclass.com/2025/07/15/hands-on-with-kiro-the-aws-preview-of-an-agentic-ai-ide-driven-by-specifications/)[## Microsoft shovels extra Copilot features into VS Code amid dev complaints of 'more AI bloat'](https://devclass.com/2025/07/14/microsoft-shovels-extra-copilot-features-into-vs-code-amid-dev-complaints-of-more-ai-bloat/)[## Despite 30 months work, core developer says Python's JIT compiler is often slower than the interpret...](https://devclass.com/2025/07/09/despite-30-months-work-core-developer-says-pythons-jit-compiler-is-often-slower-than-the-interpreter/)[## Things Go better with telemetry: Microsoft adds phone home to its Go build](https://devclass.com/2025/07/08/things-go-better-with-telemetry-microsoft-adds-phone-home-to-its-go-build/)[## Microsoft SQL Server MCP tool: 'Leap in data interaction' or limited and frustrating?](https://devclass.com/2025/07/02/microsoft-sql-server-mcp-tool-leap-in-data-interaction-or-limited-and-frustrating/)[## Cloudflare container platform in public preview with scale to zero pricing, some initial limitations](https://devclass.com/2025/07/01/cloudflare-container-platform-in-public-preview-with-scale-to-zero-pricing-some-initial-limitations/)[## Microsoft to finally expunge the Azure AD Graph API](https://devclass.com/2025/06/30/microsoft-to-finally-expunge-the-azure-ad-graph-api/)[## Avalonia UI sponsorship 'completely removes' open source vs commercial conflict claims CEO](https://devclass.com/2025/06/26/avalonia-ui-sponsorship-completely-removes-open-source-vs-commercial-conflict-claims-ceo/)[## Google positions itself for 'next decade' of AI as Gemini CLI arrives with generous free tier](https://devclass.com/2025/06/25/google-positions-itself-for-next-decade-of-ai-as-gemini-cli-arrives-with-generous-free-tier/)[## \"Serious\" MySQL bug celebrates 20 years unfixed - another reason to switch to PostgreSQL?](https://devclass.com/2025/06/24/serious-mysql-bug-celebrates-20-years-unfixed-another-reason-to-switch-to-postgresql/)[## React ecosystem is fractured but Vercel is not the villain, argues Redux maintainer](https://devclass.com/2025/06/23/react-ecosystem-is-fractured-but-vercel-is-not-the-villain-argues-redux-maintainer/)\n\n[!\\[DevClass\\](https://devclass.com/wp-content/uploads/2018/08/DevClass_logo_White_small-Horizontal.png)DevClassDeveloper News](https://devclass.com/)\n\n### ABOUT US\n\nDevClass is the news and analysis site covering modern software development issues, from the team behind the Continuous Lifecycle, Serverless Computing and MCubed conferences\n\nContact us: [devclass@sitpub.com](mailto:devclass@sitpub.com)\n\n### FOLLOW US\n\n[Linkedin](https://www.linkedin.com/company/devclass/)\n\n[RSS](https://devclass.com/feed/)\n\n[Twitter](https://twitter.com/d3vclass?lang=en)\n\n[Youtube](https://www.youtube.com/channel/UCEk1p4Omxqi0E0ij6Bfy4HQ)\n\n© Situation Publishing, 2018-2024\n\n- [About](https://devclass.com/about/)\n- [Contribute](https://devclass.com/contribute/)\n- [Contact](https://devclass.com/contact-us/)\n- [Sales](https://situationpublishing.com/home/contact-us/)\n- [Privacy](https://devclass.com/privacy/)\n- [Cookies](https://devclass.com/cookies/)\n- [Terms & Conditions](https://devclass.com/tc/)\n- [Do not sell my personal information](https://devclass.com/devclass-privacy-policy-for-california-residents/)",
  "Description": "Zig programming language inventor and lead developer Andrew Kelley has pushed a breaking change to std.io.Reader and std.io.Writer, […]",
  "Title": "Zig lead makes ‘extremely breaking’ change to std.io ahead of Async and Await’s return",
  "FeedUrl": "https://devclass.com/feed/",
  "PubDate": "2025-07-07T15:24:59+00:00",
  "Author": "Tim Anderson",
  "ProcessedDate": "2025-08-09 20:23:24",
  "Tags": [
    "Async",
    "Await",
    "Development",
    "std.io",
    "Zig"
  ],
  "FeedName": "DevClass"
}
