{
  "Tags": [
    "Async programming",
    "AsyncLocal",
    "C#"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Code Maze",
  "ProcessedDate": "2025-08-05 14:18:56",
  "FeedUrl": "https://code-maze.com/feed/",
  "Title": "Persist Values With AsyncLocal in C# Async Flow",
  "Description": "In this article, we’ll explain the AsyncLocal class and how to persist values across an async flow with the AsyncLocal class in C#. We’ll start by describing the challenge that AsyncLocal solves and continue with examples of how it does that. We’ll scratch the surface of the AsyncLocal inner workings and finish with the cases […]\n\nThe post [Persist Values With AsyncLocal in C# Async Flow](https://code-maze.com/csharp-persist-values-with-asynclocal-in-async-flow/) appeared first on [Code Maze](https://code-maze.com).",
  "Link": "https://code-maze.com/csharp-persist-values-with-asynclocal-in-async-flow/",
  "FeedName": "Code Maze Blog",
  "Author": "Bozo Spoljaric",
  "EnhancedContent": "# Persist Values With AsyncLocal in C# Async Flow\n\nPosted by [Bozo Spoljaric](https://code-maze.com/author/bozo-spoljaric/) | Updated Date Jan 6, 2025 | [0](https://code-maze.com/csharp-persist-values-with-asynclocal-in-async-flow/#comments)\n\n![Persist Values With AsyncLocal in C# Async Flow](https://code-maze.com/wp-content/uploads/2021/12/social-csharp.png)\n\n[!\\[Code Maze Book Collection\\](https://code-maze.com/wp-content/uploads/2024/10/courses-template-wide.png)](https://courses.code-maze.com/courses/?source=tbanner&p=csharp-persist-values-with-asynclocal-in-async-flow/)\n\nReady to take your skills to the next level? Jump into our high-impact courses in web development and software architecture, all with a focus on mastering the .NET/C# framework. Whether you're **building sleek web applications or designing scalable software solutions**, our expert-led training will give you the tools to succeed. Visit our **[COURSES](https://courses.code-maze.com/courses/?source=tbanner&p=csharp-persist-values-with-asynclocal-in-async-flow/)** page now and kickstart your journey!\n\nIn this article, we’ll explain the AsyncLocal class and how to persist values across an async flow with the AsyncLocal class in C#. We’ll start by describing the challenge that AsyncLocal solves and continue with examples of how it does that. We’ll scratch the surface of the AsyncLocal inner workings and finish with the cases when we can use it.\n\nTo download the source code for this article, you can visit our [GitHub repository](https://github.com/CodeMazeBlog/CodeMazeGuides/tree/main/csharp-intermediate-topics/PersistValuesInAsyncFlowUsingAsyncLocalInCSharp).\n\nLet’s dive in!\n\n## The AsyncLocal Class\n\n**During the development of asynchronous .NET applications, we often come across the need to pass values through the entire asynchronous flow**. Good examples are data of authenticated users or correlation identifiers for logging that help us identify all logs related to one request.\n\nSupport Code Maze on Patreon to get rid of ads and get the best discounts on our products!\n\n[![Become a patron at Patreon!](https://code-maze.com/wp-content/plugins/patron-plugin-pro/plugin/lib/patron-button-and-widgets-by-codebard/images/become_a_patron_button.png)](https://www.patreon.com/oauth2/become-patron?response_type=code&amp;min_cents=100&amp;client_id=9_akhcsDQMGo-FTlVmNpM_uxSV4fbW3vnrz7CBRV9RxwjMPCLfWgodhrcE0UuHH4&amp;scope=identity%20identity[email]&amp;redirect_uri=https://code-maze.com/patreon-authorization/&amp;state=eyJmaW5hbF9yZWRpcmVjdF91cmkiOiJodHRwczpcL1wvY29kZS1tYXplLmNvbVwvaGF0ZW9hcy1hc3BuZXQtY29yZS13ZWItYXBpXC8ifQ%3D%3D&amp;utm_source=https%3A%2F%2Fcode-maze.com%2Fhateoas-aspnet-core-web-api%2F&amp;utm_medium=patreon_wordpress_plugin&amp;utm_campaign=11086160&amp;utm_term=&amp;utm_content=post_unlock_button)\n\nThe obvious solution would be adding additional parameters to our methods and passing these values as an argument. Such an approach can lead to numerous parameters in methods that we don’t necessarily need in each of them and are present only to pass this data to the methods that this method calls. Besides this tramp data, this also leads to unnecessary coupling of the classes.\n\n### AsyncLocal as a Way to Modify the ExecutionContext Class\n\nA better solution would be storing such data in variables or classes accessible from all other classes in the async flow. In other words, to persist data in the particular async flow.\n\nWe could store these data in thread-local storage, but task-based asynchronous programming doesn’t guarantee that each task executes on the same thread.\n\n**To solve this problem, .NET provides a built-in global context where we can store data specific to single requests. And that is the `ExecutionContext` class.**\n\nTo learn more about the differences between `Task` and `Thread` , read our article [Tasks vs Threads in C#](https://code-maze.com/csharp-tasks-vs-threads/).\n\nThe `ExecutionContext` class attaches to a task and loads into a thread before the execution of a task. **The `ExecutionContext` class serves as a value bag for a single request.** We can’t manipulate the `ExecutionContext` directly. Instead, we get and set data on it using `AsyncLocal` fields. It is recommended to declare that field as `static` .\n\n### The AsyncLocal Class Implementation\n\nThe `AsyncLocal` class is a generic class, that implements two constructors: parameterless `AsyncLocal<T>()` , and `AsyncLocal<T>(Action>AsyncLocalValueChangedArgs<T>>)` . The second constructor accepts an `Action` argument. This action triggers when the instance value changes.\n\n**The `AsyncLocal` class has only one property, `Value`, which enables us to get or set the data.** It doesn’t implement any additional methods besides inherited methods from objects.\n\n## Using the AsyncLocal Class to Persist Values in Async Flow in C#\n\nLet’s look at how we can implement `AsyncLocal` using two examples.\n\n### AsyncLocal Class Value in Async Flow\n\nThe `AsyncLocalExample` class is a simple static class that implements the `DoWork()` public method. It uses the `AsyncFlow<int>` class to store the integer value in different async methods that we call in an async flow:\n\n``` public static class AsyncLocalExample { public static readonly AsyncLocal<int> AsyncLocalInt = new();\n\npublic static async Task DoWork() { AsyncLocalInt.Value = 1; Console.WriteLine($\"AsyncLocal value in DoMainWork method: {AsyncLocalInt.Value}\");\n\nawait DoSubTaskLevel1();\n\nConsole.WriteLine($\"AsyncLocal value in DoMainWork method after executing \" + $\"DoSubTaskLevel1 method: {AsyncLocalInt.Value}\"); }\n\nprivate static async Task DoSubTaskLevel1() { Console.WriteLine($\"AsyncLocal value when entering DoSubTaskLevel1 method: {AsyncLocalInt.Value}\");\n\nAsyncLocalInt.Value++; Console.WriteLine($\"AsyncLocal value after changing in DoSubTaskLevel1 method: {AsyncLocalInt.Value}\");\n\nawait DoSubTaskLevel2();\n\nConsole.WriteLine($\"AsyncLocal value in DoSubTaskLevel1 method after executing \" + $\"DoSubTaskLevel2 method: {AsyncLocalInt.Value}\"); }\n\nprivate static async Task DoSubTaskLevel2() { Console.WriteLine($\"AsyncLocal value when entering DoSubTaskLevel2 method: {AsyncLocalInt.Value}\");\n\nAsyncLocalInt.Value++; Console.WriteLine($\"AsyncLocal value after changing in DoSubTaskLevel2 method: {AsyncLocalInt.Value}\");\n\nawait Task.Delay(100); } } ```\n\nIn the `DoWork()` method, we set the value of `AsyncLocalInt` to 1. Within this method, we call the child task `DoSubTaskLevel1()` . The called method increments the value of the `AsyncLocalInt` and calls yet another child task, `DoSubTaskLevel2()` , which increments the `AsyncLocalInt` value again.\n\nIs this material useful to you? Consider subscribing and get **ASP.NET Core Web API Best Practices** eBook for [FREE!](https://code-maze.com/free-ebook-aspnetcore-webapi-best-practices/)\n\nIn every method execution, we log the values of the `AsyncLocalInt` class:\n\n``` AsyncLocalExample execution: AsyncLocal value in DoMainWork method: 1 AsyncLocal value when entering DoSubTaskLevel1 method: 1 AsyncLocal value after changing in DoSubTaskLevel1 method: 2 AsyncLocal value when entering DoSubTaskLevel2 method: 2 AsyncLocal value after changing in DoSubTaskLevel2 method: 3 AsyncLocal value in DoSubTaskLevel1 method after executing DoSubTaskLevel2 method: 2 AsyncLocal value in DoMainWork method after executing DoSubTaskLevel1 method: 1 ```\n\n**We can see that the `AsyncLocalInt` value is copied to `ExecutionContext` of the task we execute**. This copy is shallow and uses the copy-on-write technique as `ExecutionContext` is immutable. In other words, the new copy of the `ExecutionContext` is created for every task executed in async flow.\n\nEvery task in flow changes the value of `AsyncLocalInt` . But when tasks are executed, the changed value of `AsyncLocalInt` is not visible for the parent task and stays as set in this method. We can observe that in the last two lines of the output.\n\n### AsyncLocal Class With Value Change Notification Action\n\nThe `AsyncLocalNotifyExample` class follows the execution logic of our `AsyncLocalExample` class. The difference is that we create an `AsyncLocal` class with string as a type argument, and we pass the `Action` that executes when the value of the `AsyncLocal` class changes:\n\n``` public static class AsyncLocalNotifyExample { public static readonly AsyncLocal<string> AsyncLocalString = new(AsyncLocalValueChangedAction);\n\nstatic Action<AsyncLocalValueChangedArgs<string>> AsyncLocalValueChangedAction => asyncLocalValueChangedArgs => Console.WriteLine($\"Current: {asyncLocalValueChangedArgs.CurrentValue}, \" + $\"Previous: {asyncLocalValueChangedArgs.PreviousValue}, \" + $\"Thread: {Environment.CurrentManagedThreadId}, \" + $\"ThreadContextChanged: {asyncLocalValueChangedArgs.ThreadContextChanged}\");\n\npublic static async Task DoWork() { AsyncLocalString.Value = \"Enter DoWork method\";\n\nawait DoSubTaskLevel1();\n\nAsyncLocalString.Value = \"Exit DoWork method\"; }\n\nprivate static async Task DoSubTaskLevel1() { AsyncLocalString.Value = \"Enter DoSubTaskLevel1 method\";\n\nawait DoSubTaskLevel2();\n\nAsyncLocalString.Value = \"Exit DoSubTaskLevel1 method\"; }\n\nprivate static async Task DoSubTaskLevel2() { AsyncLocalString.Value = \"Enter DoSubTaskLevel2 method\";\n\nawait Task.Delay(100);\n\nAsyncLocalString.Value = \"Exit DoSubTaskLevel2 method\"; } } ```\n\nThe action `AsyncLocalValueChangedAction` gets triggered whenever the `AsyncLocalString` value changes. The type parameter of the action is a struct `AsyncLocalValueChangedArgs` that holds the previous and current values of the `AsyncLocalString` , as well as the information on whether the thread context changed:\n\n``` AsyncLocalNotifyExample execution: Current: Enter DoWork method, Previous: , Thread: 5, ThreadContextChanged: False Current: Enter DoSubTaskLevel1 method, Previous: Enter DoWork method, Thread: 5, ThreadContextChanged: False Current: Enter DoSubTaskLevel2 method, Previous: Enter DoSubTaskLevel1 method, Thread: 5, ThreadContextChanged: False Current: Enter DoSubTaskLevel1 method, Previous: Enter DoSubTaskLevel2 method, Thread: 5, ThreadContextChanged: True Current: Enter DoWork method, Previous: Enter DoSubTaskLevel1 method, Thread: 5, ThreadContextChanged: True Current: , Previous: Enter DoWork method, Thread: 5, ThreadContextChanged: True Current: Enter DoSubTaskLevel2 method, Previous: , Thread: 5, ThreadContextChanged: True Current: Exit DoSubTaskLevel2 method, Previous: Enter DoSubTaskLevel2 method, Thread: 5, ThreadContextChanged: False Current: Enter DoSubTaskLevel1 method, Previous: Exit DoSubTaskLevel2 method, Thread: 5, ThreadContextChanged: True Current: Exit DoSubTaskLevel1 method, Previous: Enter DoSubTaskLevel1 method, Thread: 5, ThreadContextChanged: False Current: Enter DoWork method, Previous: Exit DoSubTaskLevel1 method, Thread: 5, ThreadContextChanged: True Current: Exit DoWork method, Previous: Enter DoWork method, Thread: 5, ThreadContextChanged: False Current: , Previous: Exit DoWork method, Thread: 5, ThreadContextChanged: True Current: Exit DoWork method, Previous: , Thread: 5, ThreadContextChanged: True Current: Exit DoSubTaskLevel1 method, Previous: Exit DoWork method, Thread: 5, ThreadContextChanged: True Current: Exit DoSubTaskLevel2 method, Previous: Exit DoSubTaskLevel1 method, Thread: 5, ThreadContextChanged: True Current: , Previous: Exit DoSubTaskLevel2 method, Thread: 5, ThreadContextChanged: True ```\n\nWe can see that the action triggers whenever we set the value of the `AsyncLocalString` . Additionally, we can observe the control flow to the calling function when awaiting some tasks and appropriate values of the `AsyncLocal` class. Besides that, as we move along the async flow, we get a notification about `ExecutionContext` changes with the boolean value of the `ThreadContextChanges` .\n\n## When to Use AsyncLocal\n\nThe `AsyncLocal` generic class doesn’t limit type parameters to simple data types. We can construct it with any argument, such as dictionaries, lists, stacks, etc.\n\n**The most obvious usage is for storing request-specific data, such as user identity-related data, session data, and transaction identifiers.** It is convenient for storing the data for logging, such as correlation ID, which is used in structured logging to trace the flow of the single request through executing methods in different classes.\n\nIs this material useful to you? Consider subscribing and get **ASP.NET Core Web API Best Practices** eBook for [FREE!](https://code-maze.com/free-ebook-aspnetcore-webapi-best-practices/)\n\nThe `AsyncLocal` class is not appropriate for storing data across unrelated asynchronous operations. The values don’t change when the execution thread changes, which differs from the thread context. Finally, we don’t use the `AsyncLocal` class in the global context of the application.\n\n## Conclusion\n\nTo persist values across the async flow, the AsyncLocal class represents a convenient implementation. It enables writing cleaner code and avoiding using some less elegant solutions to pass the data down the async flow to the methods that may need this data.\n\nHowever, we should be aware of the inner workings and behavior of the AsyncLocal class, such as persisting value only on the task level where we set the value and down the async flow to its child tasks to avoid unwanted consequences.\n\n[!\\[Code Maze Book Collection\\](https://code-maze.com/wp-content/uploads/2024/10/courses-template-wide.png)](https://courses.code-maze.com/courses/?source=bbanner&p=csharp-persist-values-with-asynclocal-in-async-flow/)\n\nReady to take your skills to the next level? Jump into our high-impact courses in web development and software architecture, all with a focus on mastering the .NET/C# framework. Whether you're **building sleek web applications or designing scalable software solutions**, our expert-led training will give you the tools to succeed. Visit our **[COURSES](https://courses.code-maze.com/courses/?source=bbanner&p=csharp-persist-values-with-asynclocal-in-async-flow/)** page now and kickstart your journey!\n\nLiked it? Take a second to support Code Maze on Patreon and get the ad free reading experience!\n\n[![Become a patron at Patreon!](https://code-maze.com/wp-content/plugins/patron-plugin-pro/plugin/lib/patron-button-and-widgets-by-codebard/images/become_a_patron_button.png)](https://www.patreon.com/oauth2/become-patron?response_type=code&min_cents=100&client_id=9_akhcsDQMGo-FTlVmNpM_uxSV4fbW3vnrz7CBRV9RxwjMPCLfWgodhrcE0UuHH4&scope=identity%20identity[email]&redirect_uri=https://code-maze.com/patreon-authorization/&state=eyJmaW5hbF9yZWRpcmVjdF91cmkiOiJodHRwczpcL1wvY29kZS1tYXplLmNvbVwvY3NoYXJwLXBlcnNpc3QtdmFsdWVzLXdpdGgtYXN5bmNsb2NhbC1pbi1hc3luYy1mbG93XC8ifQ%3D%3D&utm_source=https%3A%2F%2Fcode-maze.com%2Fcsharp-persist-values-with-asynclocal-in-async-flow%2F&utm_medium=patreon_wordpress_plugin&utm_campaign=11086160&utm_term=&utm_content=post_unlock_button)\n\nShare:\n\nhttp://www.facebook.com/sharer.php?u=https://code-maze.com/csharp-persist-values-with-asynclocal-in-async-flow/&#038;t=Persist%20Values%20With%20AsyncLocal%20in%20C%23%20Async%20Flowhttp://twitter.com/intent/tweet?text=Persist%20Values%20With%20AsyncLocal%20in%20C%23%20Async%20Flow%20https://code-maze.com/csharp-persist-values-with-asynclocal-in-async-flow/http://www.linkedin.com/shareArticle?mini=true&#038;url=https://code-maze.com/csharp-persist-values-with-asynclocal-in-async-flow/&#038;title=Persist%20Values%20With%20AsyncLocal%20in%20C%23%20Async%20Flow\n\n### Leave a reply [Cancel reply](/csharp-persist-values-with-asynclocal-in-async-flow/#respond)\n\nYour email address will not be published. Required fields are marked \\*\n\nCOMMENT\n\nName \\*\n\nEmail \\*\n\nWebsite\n\n#### Courses – Code Maze\n\n[!\\[code maze courses side\\](https://code-maze.com/wp-content/uploads/2024/10/code-maze-courses-template-v3.png)](https://courses.code-maze.com/courses/)\n\nWhether you want to master web development or software architecture you should check our [COURSES](https://courses.code-maze.com/courses/) and pick the one that you like.\n\n#### Ad 1\n\n#### Ad 2\n\n#### Ad 3\n\n#### Ad 4",
  "PubDate": "2025-01-06T05:55:32+00:00"
}
