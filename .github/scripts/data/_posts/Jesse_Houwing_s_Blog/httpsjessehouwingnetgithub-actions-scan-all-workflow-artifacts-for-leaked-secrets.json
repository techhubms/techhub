{
  "ProcessedDate": "2025-08-05 09:50:13",
  "FeedUrl": "https://jessehouwing.net/rss/",
  "EnhancedContent": "In response to:\n\n[Major GitHub repos leak access tokens putting code and clouds at risk Build artifacts generated by GitHub Actions often contain access tokens that can be abused by attackers to push malicious code into projects or compromise cloud infrastructure. !\\[\\](https://www.csoonline.com/wp-content/uploads/2023/06/cropped-CSO-favicon-1-1.png?w=192)CSO OnlineLucian Constantin !\\[\\](https://www.csoonline.com/wp-content/uploads/2024/08/3487311-0-78598600-1723764263-shutterstock_2454042991.jpg?quality=50&amp;strip=all&amp;w=1024)](https://www.csoonline.com/article/3487311/major-github-repos-leak-access-tokens-putting-code-and-clouds-at-risk.html?ref=jessehouwing.net) I've created a quick powershell script that will scan your GitHub org for leaked secrets using [TruffleHog](https://github.com/trufflesecurity/trufflehog?ref=jessehouwing.net).\n\n```pwsh\n# Scan all your workflow runs for accidental leaks of secrets in artifacts\n#\n# Created by: Jesse Houwing - Xebia\n# License: MIT\n#\n# ATTRIBUTION REQUIRED\n#\n# Consider sponsoring the author: https://github.com/sponsors/jessehouwing/\n\n# relies on trufflehog for secrets detection: https://github.com/trufflesecurity/trufflehog\n# relies on github cli for auth: https://github.com/cli/cli\n# relies on jq for combining paginated results: https://jqlang.github.io/jq/download/\n\nfunction scan-artifacts { param( [Parameter(Mandatory = $true)] [string]$org, [string[]]$repos )\n\nbegin { if (($null -eq $repos) -and ($repos.Count -eq 0)) { $repos = get-repos -org $org } }\n\nprocess { foreach ($repo in $repos) { $downloaded = $false\n# Query all workflow runs for the repo\nwrite-host \"$org/$repo\" $workflowRuns = (& gh api /repos/$org/$($repo)/actions/runs --paginate --jq '.workflow_runs[].id' 2>$null | & jq -s | ConvertFrom-Json)\n\n#query all artifacts for each workflow run foreach ($workflowRun in $workflowRuns) { $tempfolder = \"./runs/$org/$repo/$workflowRun\" $_ = New-Item -Path . -Name $tempfolder -ItemType Directory -Force\n\nif (test-path \"$tempfolder/*\") { $downloaded = $true continue }\n\n$_ = gh run download $workflowRun --dir \"$tempfolder\" --pattern \"*\" --repo \"$org/$repo\" 2>$null if ($LASTEXITCODE -ne 0) { continue } $downloaded = $true }\n\nif ($downloaded) { docker run --rm -it -v \"${PWD}:/pwd\" trufflesecurity/trufflehog:latest filesystem \"/pwd/runs/$org/$repo\" --no-update --fail --json --exclude-paths=/pwd/scan-artifacts-ignore.txt if ($LASTEXITCODE -ne 0) { write-host \"Found secrets in artifacts for /$org/$repo\" -ForegroundColor red } } } } } function get-repos { param( [Parameter(Mandatory = $true)] [string]$org )\n\nreturn (& gh api /orgs/$org/repos --paginate --jq '.[].name' 2>$null) }\n\n# scan-artifacts -org \"your-org\" [-repos @(\"your-repo\")]\n```\n\nSave the script as `scan-artifacts.ps1` and scan a whole org from a `pwsh` prompt using:\n\n```plaintext . .\\scan-artifacts.ps1 scan-artifacts -org \"your-org\"\n\n```\n\nOr scan one or more specific repositories using:\n\n```plaintext . .\\scan-artifacts.ps1 scan-artifacts -org \"your-org\" -repos @(\"repo1\", \"repo2\") ```\n\nI've excluded `/node_modules` as it generates too many false positives. To exclude files or folder, you can add a file in the scripts directory called `scan-artifacts-ignore.txt` and add a regular expression for each thing you want to exclude:\n\n```plaintext /node_modules/ ```\n\nThe script will download all workflow artifacts to local disk, depending on the size of your org, that may take up a considerable amount of disk space, in our case 50GB. As is, it will skip previously downloaded runs, so you can run it again in case something goes wrong.\n\nIf needed, throw away the scan results after each repo is scanned by deleting the `./runs` directory.\n\nTo protect yourself:\n\n1. Rotate secrets found.\n2. Verify the tokens weren't used to tamper with artifacts or repos.\n3. Delete the workflow runs.\n\nIf this script helped you protect your data, consider sponsoring me:\n\n[Sponsor @jessehouwing on GitHub Sponsors My name is Jesse Houwing. I love good coffee, meaning strong, dark espresso! Regular Expressions are like word-puzzles to me. I take pictures everywhere I go. I am married and a father of 2. I work… !\\[\\](https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg)GitHub !\\[\\](https://avatars.githubusercontent.com/u/4173387?s=400&amp;v=4)](https://github.com/sponsors/jessehouwing/?ref=jessehouwing.net)",
  "FeedLevelAuthor": "Scrum Bug",
  "OutputDir": "_posts",
  "Tags": [
    "GitHub",
    "GitHub Actions",
    "Security"
  ],
  "Author": "Jesse Houwing",
  "FeedName": "Jesse Houwing's Blog",
  "Link": "https://jessehouwing.net/github-actions-scan-all-workflow-artifacts-for-leaked-secrets/",
  "Description": "In response to:\n\n[Major GitHub repos leak access tokens putting code and clouds at risk Build artifacts generated by GitHub Actions often contain access tokens that can be abused by attackers to push malicious code into projects or compromise cloud infrastructure. !\\[\\](https://www.csoonline.com/wp-content/uploads/2023/06/cropped-CSO-favicon-1-1.png?w=192)CSO OnlineLucian Constantin !\\[\\](https://www.csoonline.com/wp-content/uploads/2024/08/3487311-0-78598600-1723764263-shutterstock_2454042991.jpg?quality=50&strip=all&w=1024)](https://www.csoonline.com/article/3487311/major-github-repos-leak-access-tokens-putting-code-and-clouds-at-risk.html?ref=jessehouwing.net) I've created a",
  "Title": "Scan all workflow artifacts for leaked secrets",
  "PubDate": "2024-08-19T21:24:47+00:00"
}
