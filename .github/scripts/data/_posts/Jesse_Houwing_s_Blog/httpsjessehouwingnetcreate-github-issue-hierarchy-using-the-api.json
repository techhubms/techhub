{
  "ProcessedDate": "2025-08-05 09:49:02",
  "FeedUrl": "https://jessehouwing.net/rss/",
  "EnhancedContent": "I tried using a direct REST API call, but unfortunately, I haven't been able to get that to work, even though it's documented, whatever I throw at the API, it returns 404:\n\n```pwsh\n> \"{\"\"sub_issue_id\"\": 12 }\" | gh api https://api.github.com/repos/xebia/temp/issues/165/sub_issues -X post --input -\n{ \"message\": \"The provided sub-issue does not exist\", \"documentation_url\": \"https://docs.github.com/rest/issues/sub-issues#add-sub-issue\", \"status\": \"404\" } gh: The provided sub-issue does not exist (HTTP 404) ```\n\nSome more searching, brought me to the post introducing the feature, which lists a number of GraphQL API calls you can make.\n\nThese API calls don't use the issue number, but instead rely on the issue ID. To get the ID, you'll first need to query the issue details, and you need to pass in an additional preview header to enable the `sub_issues` feature in GraphQL:\n\n```pwsh function create-hierarchy { param(\n# https://github.com/{org}/{repo}/issues/{id}\n[string]$parent,\n# https://github.com/{org}/{repo}/issues/{id}\n[string]$child )\n\n$ErrorActionPreference = \"Stop\"\n\n$parent = gh issue view $parent --json id --jq \".id\" $child = gh issue view $child --json id --jq \".id\"\n\n$_ = gh api graphql -H \"GraphQL-Features: sub_issues\" -f \"query=mutation addSubIssue { addSubIssue(input: { issueId: \"\"$parent\"\", subIssueId: \"\"$child\"\" }) { issue { title } subIssue { title } } }\" } ```\n\nYou can call this in the following manner:\n\n```pwsh create-hierarchy ` -parent https://github.com/jessehouwing/sample/1 ` -child https://github.com/jessehouwing/sample/2 ```\n\nAnd you'll end up with this nice list of sub-issues:\n\n![](https://jessehouwing.net/content/images/2025/04/image.png)GitHub UI showing an issue #1 titled \"parent\" with a sub-issue #2 called \"child\" You can nest issues as well; they'll be visible on each level of the hierarchy:\n\n![](https://jessehouwing.net/content/images/2025/04/image-1.png)GitHub UI showing the same parent/child issues, now with an added #3 grandchild And you can visualize progress in GitHub Projects as well by adding the **Parent** and **Sub issues progress** fields to the selected fields:\n\n![](https://jessehouwing.net/content/images/2025/04/image-2.png)GitHub Project configured with Parent and Sub-issues status fields enabled.\n### Update\n\nSome more digging lead me to the correct information, it turns out that `gh issue view --json id` doesn't return the correct value to pass as `sub_issue_id` , if I do a raw REST API all for the issue instead, I receive a different set of numbers where the `node_id` is what `gh issue view` actually returns:\n\n```json { \"url\": \"https://api.github.com/repos/jessehouwing/sample/issues/1\", \"id\": 3000028010, \"node_id\": \"I_kwDOOakzpM6yyU6H\", \"number\": 1 ... } ```\n\nSo to use the REST API call, instead of the GraphQL call, you'll still need to query the `id` of the child issue, but then you should be able to directly assign the value:\n\n```pwsh\n> gh api https://api.github.com/repos/jessehouwing/sample/issues/1 --jq .id\n3000028010 ```\n\nFollowed by:\n\n```pwsh\n> gh api https://api.github.com/repos/jessehouwing/sample/issues/1/sub_issues -X post -F sub_issue_id=3000028010\n\n```\n\nNote that the URL contains the issue's `number` and the `sub_issue_id` is the issue's internal `id` .",
  "FeedLevelAuthor": "Scrum Bug",
  "OutputDir": "_posts",
  "Tags": [
    "GitHub",
    "GitHub Projects"
  ],
  "Author": "Jesse Houwing",
  "FeedName": "Jesse Houwing's Blog",
  "Link": "https://jessehouwing.net/create-github-issue-hierarchy-using-the-api/",
  "Description": "The newly introduced GitHub Issues updates have added support for issue types as well as parent-child hierarchies. Unfortunately, the GitHub CLI hasn't yet been updated to support setting up this tree structure.",
  "Title": "Create GitHub issue hierarchy using the API",
  "PubDate": "2025-04-16T15:50:33+00:00"
}
