{
  "Author": "Durojaye Olusegun",
  "FeedLevelAuthor": "DevOps.com",
  "ProcessedDate": "2025-10-08 10:03:34",
  "FeedUrl": "https://devops.com/feed/",
  "Link": "https://devops.com/common-iac-security-issues-and-how-to-fix-them/",
  "OutputDir": "_posts",
  "Title": "Common IaC Security Issues and How to Fix Them",
  "PubDate": "2025-10-08T08:55:21+00:00",
  "Tags": [
    "audit logging",
    "automated compliance",
    "Blogs",
    "Business of DevOps",
    "CI/CD pipeline security",
    "cloud infrastructure",
    "cloud misconfiguration",
    "cloud security incidents",
    "CloudFormation",
    "configuration drift",
    "Contributed Content",
    "devsecops",
    "drift detection",
    "hardcoded secrets",
    "IaC automation",
    "IaC best practices",
    "IaC governance",
    "IaC security",
    "IaC vulnerabilities",
    "infrastructure as code",
    "least privilege access",
    "policy as code",
    "secrets management",
    "Social - Facebook",
    "Social - LinkedIn",
    "Social - X"
  ],
  "Description": "![](https://devops.com/wp-content/uploads/2020/02/IAC-cloud1.jpg)\n\n![](https://devops.com/wp-content/uploads/2020/02/IAC-cloud1-150x150.jpg)Learn the top five Infrastructure as Code (IaC) security vulnerabilities, their fixes, and best practices to prevent misconfigurations, drifts, and breaches.",
  "EnhancedContent": "[![](https://devops.com/wp-content/uploads/2025/02/cropped-devops-logo.png)](https://devops.com/)\n\n# Sign up for our newsletter! Stay informed on the latest DevOps news\n\nCommon IaC Security Issues and How to Fix Them\n\nInfrastructure as code (IaC) has changed the way we manage our cloud infrastructure but has also [introduced new security vulnerabilities](https://devops.com/controlmonkey-adds-dashboard-to-manage-iac-risk/) that many teams are overlooking. [According to SentinelOne Cloud Security in 2025](https://www.sentinelone.com/cybersecurity-101/cloud-security/cloud-security-statistics/), 83% of organizations experienced at least one cloud security incident in 2024, and 23% of cloud breaches were due to misconfigurations. The security gaps in IaC implementations are costing organizations millions.\n\nThe automated nature of IaC increases both benefits and risks. While infrastructure can be provisioned in minutes, security misconfigurations can also spread across entire environments in minutes. Most IaC security failures stem from fundamental differences in how infrastructure automation approaches manage security. The comparison between [configuration management and](https://cloudray.io/articles/configuration-management-versus-infrastructure-as-code)[IaC](https://cloudray.io/articles/configuration-management-versus-infrastructure-as-code) reveals that each approach handles security differently, with some emphasizing continuous state monitoring and others focusing on declarative provisioning. This creates severe security gaps, including a lack of [drift detection](https://spacelift.io/blog/drift-detection), missing policy enforcement, no audit trails, insufficient access controls and hardcoded secrets in code repositories.\n\nThis article will cover five critical IaC security vulnerabilities, provide practical remediation and outline best practices to prevent future incidents.\n\n### Security Issues in IaC\n\nIaC solves many operational problems but introduces specific security challenges that require tailored solutions. The automated and templated nature of IaC can amplify security issues across multiple environments at once, therefore, certain types of problems can have a significant impact. Here are the top five critical security issues in IaC:\n\n**1. Configuration Drift Without Detection**\n\n[Configuration drift](https://securityboulevard.com/2020/04/what-is-configuration-drift/) occurs when your actual infrastructure state differs from what your IaC templates define — often without any visibility into these changes. This creates a dangerous gap between what you think your infrastructure looks like and what it actually is.\n\n[![Techstrong Gang Youtube](https://securityboulevard.com/wp-content/uploads/2024/12/Techstrong-Gang-Youtube-PodcastV2-770.png)](https://youtu.be/Fojn5NFwaw8)\n\n[![Techstrong Gang Youtube](https://devops.com/wp-content/uploads/2025/03/770X330-DevOps-AppDev-Mar2025D.jpg)](https://info.futurumgroup.com/devops_appdev?utm_source=referral&utm_medium=in-article&utm_campaign=DevOps-Application-Report)\n\n[![Techstrong Gang Youtube](https://devops.com/wp-content/uploads/2025/03/770X330-DevOps-AppDev-Mar2025-2D.jpg)](https://info.futurumgroup.com/devops_appdev?utm_source=referral&utm_medium=in-article&utm_campaign=DevOps-Application-Report)\n\nFor example, consider a Terraform configuration that defines security groups allowing only ports 80 and 443 for web traffic. During a production issue, a developer manually opens port 22 through the Amazon Web Services (AWS) console to troubleshoot connectivity issues. The immediate problem is resolved, but the secure shell (SSH) port remains open indefinitely. However, your Terraform state file still shows the original secure configuration, while your actual infrastructure now includes an unmonitored access point. This scenario occurs frequently across organizations, where emergency changes bypass normal IaC workflows. Manual quick fixes are rarely documented, and automated system updates often modify configurations outside the defined templates.\n\nThe security impact is significant. These invisible changes can create backdoors, complicate incident response because the documentation does not match reality and make compliance auditing nearly impossible. Organizations often discover drift only during security incidents — when attackers exploit the gaps between intended and actual configurations.\n\n**2. Missing Policy as Code**\n\nMost organizations manage security policies through static documentation, spreadsheets or manual review processes that cannot keep up with automated IaC deployments. This creates a fundamental gap between security requirements and actual infrastructure implementation.\n\nConsider a company security policy that mandates all simple storage service (S3) buckets must have encryption enabled and public access blocked. In traditional environments, this might be enforced through manual reviews or periodic audits. However, with IaC, engineers can deploy dozens of S3 buckets daily through automated pipelines — making manual policy enforcement impractical. Without automated policy enforcement, security violations accumulate silently. An engineer under pressure to meet a deadline might deploy a bucket with default settings that violate company policy, simply because there is no automated check to prevent it. The Terraform or CloudFormation template runs successfully, even though the resulting infrastructure violates established security requirements.\n\nThis gets worse over time. Teams deploy hundreds of resources across multiple environments, each potentially violating different security policies. Database instances might lack encryption, Elastic Compute Cloud (EC2) instances might have overly permissive security groups or identity and access management (IAM) roles might grant excessive permissions — all because policies exist only as documentation rather than enforceable code. The result is systematic policy drift across the entire infrastructure estate, making compliance audits expensive and revealing widespread security gaps that require manual remediation.\n\n**3. Inadequate Audit Trails**\n\nMost IaC implementations do not provide complete audit trails that capture who made changes, what was changed, when and why. This creates blind spots for security investigations and compliance reporting. While [v](https://www.geeksforgeeks.org/git/version-control-systems/)[ersion control systems](https://www.geeksforgeeks.org/git/version-control-systems/) track code changes, they often miss the full picture of infrastructure modifications. A standard Git log might show that a developer committed Terraform changes, but it will not indicate which resources were affected or why emergency changes were made outside normal workflows. When a security incident occurs six months later, teams struggle to figure out what happened.\n\nFor example, consider an IAM policy modified during a weekend deployment to grant broader S3 permissions. The Git commit might read ‘fix deployment issue’, but there is no record of which production systems were affected or whether the change was meant to be temporary. Months later, during a compliance audit, investigators are unable to determine if this was a legitimate business requirement or a security oversight.\n\nThe problem worsens when teams make emergency changes directly through cloud consoles during incidents, bypassing all audit mechanisms. Here is an obvious scenario: A database security group is opened to additional Internet Protocol (IP) ranges during an outage, but no record of this change exists. Without audit trails, security investigations become manual reconstructions that may miss critical evidence of which infrastructure changes preceded an incident and who had the authority to make those changes.\n\n**4. Insufficient Access Control**\n\nMany IaC implementations grant excessive permissions to both human users and automated systems, creating unnecessary exposure when accounts are compromised. Teams often assign broad administrative rights during initial setup and fail to refine them over time, violating the [principle of least privilege](https://securityboulevard.com/2025/01/understanding-the-principle-of-least-privilege-polp/).\n\nFor example, consider a continuous integration/continuous delivery (CI/CD) pipeline that deploys a simple web application but runs with full AWS AdministratorAccess. In reality, the pipeline only needs permission to update Lambda functions and application programming interface (API) gateway configurations. However, it can create, modify or delete any resource across all AWS services and regions. If an attacker compromises this pipeline through code injection or stolen credentials, they gain full administrative access to the entire AWS account. Additionally, developers working on front-end applications are often given the same IAM permissions as infrastructure engineers. This happens because maintaining granular access controls requires continuous effort — something many teams indefinitely postpone.\n\n**5. Hardcoded Secrets**\n\nSome engineers embed sensitive credentials directly into IaC templates or configuration files, exposing them to anyone with access to the repository. Database passwords, API keys and access tokens are often hardcoded into Terraform variables or CloudFormation parameters because it’s the fastest way to get infrastructure running during development.\n\nConsider a Terraform configuration that creates a relational database service (RDS) with the password defined as ‘password = “MySecretPassword123″’ in the template file. This credential is committed to version control, shared across team repositories and potentially exposed through CI/CD logs or infrastructure outputs. Even if the repository is private, every developer, contractor and automated system with access can view these credentials. The risk compounds when teams reuse templates across projects or share infrastructure code with external consultants — unknowingly distributing sensitive credentials across multiple systems and organizations.\n\n### How to Fix IaC Security Issues\n\nFixing these security vulnerabilities requires automated solutions that match the scale and speed of modern IaC deployments. Manual processes simply cannot keep up with infrastructure changes occurring multiple times a day across different environments. Below are some effective strategies for addressing IaC security issues:\n\n**1. Automated Drift Detection and Alerting**\n\nDrift detection tools continuously compare your actual infrastructure state against your IaC templates and alert you when discrepancies are detected. This helps close the visibility gap between intended and actual configurations.\n\nCloud-native services such as AWS Config Rules or Azure Policy can detect when resources deviate from defined standards. In multi-cloud environments, tools such as Checkov or Terrascan integrate with CI/CD pipelines to scan for drift during deployments.\n\nHere is an example of an AWS Config rule that detects unencrypted S3 buckets:\n\n“`json\n\n{\n\n“ConfigRuleName”: “s3-bucket-server-side-encryption-enabled”,\n\n“Source”: {\n\n“Owner”: “AWS”,\n\n“SourceIdentifier”: “S3\\_BUCKET\\_SERVER\\_SIDE\\_ENCRYPTION\\_ENABLED”\n\n},\n\n“Scope”: {\n\n“ComplianceResourceTypes”: [“AWS::S3::Bucket”]\n\n}\n\n}\n\n“`\n\nFor Terraform users, tools like [Driftctl](https://docs.driftctl.com/next/) compare Terraform state files to actual cloud resources and generate reports showing exactly what has changed outside your templates. You can also schedule automated scans to run daily and integrate alerts with your incident management system, ensuring that the drift is addressed quickly rather than accumulating over time. The key is continuous monitoring, not periodic checks — so you can detect unauthorized changes within hours, not months.\n\n**2. Setting Up Policy as Code**\n\nPolicy as code transforms security requirements from static documentation into executable rules that block non-compliant infrastructure deployments. The most widely adopted solution is Open Policy Agent[(OPA)](https://www.openpolicyagent.org/), which integrates with Terraform, Kubernetes and CI/CD pipelines.\n\nTo implement policy as code, start by identifying your most critical security requirements and converting them into OPA’s Rego language. Below is a practical example of a policy that prevents the creation of unencrypted S3 buckets and public access blocks:\n\n“`rego\n\npackage terraform.s3\n\ndeny[msg] {\n\ninput.resource\\_type == “aws\\_s3\\_bucket”\n\nnot input.server\\_side\\_encryption\\_configuration\n\nmsg := sprintf(“S3 bucket ‘%s’ must have encryption enabled”, [input.name])\n\n}\n\ndeny[msg] {\n\ninput.resource\\_type == “aws\\_s3\\_bucket\\_public\\_access\\_block”\n\ninput.block\\_public\\_read\\_buckets != true\n\nmsg := sprintf(“S3 bucket ‘%s’ must block public read access”, [input.name])\n\n}\n\ndeny[msg] {\n\ninput.resource\\_type == “aws\\_s3\\_bucket”\n\ninput.acl == “public-read”\n\nmsg := sprintf(“S3 bucket ‘%s’ cannot have public-read ACL”, [input.name])\n\n}\n\n“`\n\nIntegrate policy as code into your CI/CD pipeline using tools such as Conftest or OPA’s Terraform plugin. Add a policy check step before the Terraform apply phase to fail deployments that violate your security rules.\n\nFor teams using GitHub Actions, the setup might look like this:\n\n“`yaml\n\n– name: Run OPA Policy Check\n\nuses: open-policy-agent/[\\[email protected\\]](/cdn-cgi/l/email-protection)\n\nwith:\n\npolicy: policies/\n\ninput: terraform/\n\n“`\n\nThe key advantage here is to start with three to five critical policies that cover encryption, public access and IAM permissions. Begin small and expand gradually as your teams become familiar with policy-driven workflows. Each policy should include clear error messages that guide engineers toward compliant configurations.\n\n**3. Implementing Least-Privilege Access Controls**\n\nAlways replace broad administrative permissions with role-based access control (RBAC) that grants only the permission required for each task. Start by auditing existing policies and defining specific roles for different use cases.\n\nFor CI/CD pipelines, use targeted IAM policies instead of admin access. Here is an example of AWS IAM policy that enables Lambda deployment without granting unnecessary permissions:\n\n“`json\n\n{\n\n“Version”: “2012-10-17”,\n\n“Statement”: [\n\n{\n\n“Effect”: “Allow”,\n\n“Action”: [\n\n“lambda:UpdateFunctionCode”,\n\n“lambda:UpdateFunctionConfiguration”,\n\n“lambda:GetFunction”\n\n],\n\n“Resource”: “arn:aws:lambda:\\*:\\*:function:myapp-\\*”\n\n},\n\n{\n\n“Effect”: “Allow”,\n\n“Action”: [\n\n“apigateway:GET”,\n\n“apigateway:PATCH”,\n\n“apigateway:PUT”\n\n],\n\n“Resource”: “arn:aws:apigateway:\\*::/restapis/\\*/deployments/\\*”\n\n}\n\n]\n\n}\n\n“`\n\nYou can use role-based permissions with tools such as AWS IAM Access Analyzer to identify and remove unused permissions. Additionally, create environment-specific roles that restrict production access for engineers working only on staging systems. As a best practice, use temporary credentials through AWS Security Token Service (STS) AssumeRole instead of long-lived access keys.\n\nFor example, if you are using Terraform, you can apply resource-specific permissions with conditionals to control access:\n\n“`hcl\n\nresource “aws\\_iam\\_policy” “developer\\_s3\\_access” {\n\nname = “developer-s3-limited”\n\npolicy = jsonencode({\n\nStatement = [{\n\nEffect = “Allow”\n\nAction = [“s3:GetObject”, “s3:PutObject”]\n\nResource = “arn:aws:s3:::dev-bucket/\\*”\n\nCondition = {\n\nStringEquals = {\n\n“s3:ExistingObjectTag/Environment” = “development”\n\n}\n\n}\n\n}]\n\n})\n\n}\n\n“`\n\nConclusively, always review and remove unused permissions using cloud provider access analyzers, so that permission scopes decrease over time.\n\n**4. Secrets Management Solutions and Scanning Tools**\n\nReplace hardcoded credentials with dedicated secrets management systems that encrypt, rotate and audit access to sensitive data. Modern cloud providers offer native solutions that integrate into IaC workflows. Use tools such as AWS Secrets Manager, Azure Key Vault or HashiCorp Vault to securely store credentials outside your templates. Here is how to reference secrets in Terraform instead of hardcoding them:\n\n“`hcl\n\n# Instead of: password = “MySecretPassword123”\n\ndata “aws\\_secretsmanager\\_secret\\_version” “db\\_password” {\n\nsecret\\_id = “prod/database/password”\n\n}\n\nresource “aws\\_db\\_instance” “main” {\n\nengine = “mysql”\n\npassword = data.aws\\_secretsmanager\\_secret\\_version.db\\_password.secret\\_string\n\n# other configuration…\n\n}\n\n“`\n\nFor Kubernetes environments, use native secrets with external secrets operators:\n\n“`yaml\n\napiVersion: external-secrets.io/v1beta1\n\nkind: ExternalSecret\n\nmetadata:\n\nname: database-secret\n\nspec:\n\nsecretStoreRef:\n\nname: vault-backend\n\nkind: SecretStore\n\ntarget:\n\nname: db-credentials\n\ndata:\n\n– secretKey: password\n\nremoteRef:\n\nkey: database\n\nproperty: password\n\n“`\n\nAdditionally, you can use automated scanning tools such as GitLeaks, TruffleHog or cloud native solutions that scan commits before they hit production. Configure pre-commit hooks that prevent credential commits:\n\n“`yaml\n\n​​# .pre-commit-config.yaml\n\nrepos:\n\n– repo: https://github.com/Yelp/detect-secrets\n\nrev: v1.4.0\n\nhooks:\n\n– id: detect-secrets\n\nargs: [‘–baseline’, ‘.secrets.baseline’]\n\n“`\n\nSet up automated credential rotation policies that change passwords and API keys regularly. This limits the exposure window in case credentials are compromised.\n\n**5. Comprehensive Audit Logging and Monitoring**\n\nImplement centralized logging that captures both infrastructure changes and the context behind those changes. This requires combining version control logs with cloud provider audit trails and deployment pipeline logs to achieve full visibility.\n\nFor example, you can configure AWS CloudTrail, Azure Activity Log or Google Cloud Platform (GCP) Audit Logs to capture all infrastructure API calls. These logs can be exported to centralized systems such as Splunk, the ELK stack or cloud-native solutions for analysis:\n\n“`json\n\n{\n\n“eventVersion”: “1.08”,\n\n“userIdentity”: {\n\n“type”: “IAMUser”,\n\n“principalId”: “AIDACKCEVSQ6C2EXAMPLE”,\n\n“arn”: “arn:aws:iam::123456789012:user/developer”,\n\n“userName”: “developer”\n\n},\n\n“eventTime”: “2025-01-15T12:34:56Z”,\n\n“eventSource”: “ec2.amazonaws.com”,\n\n“eventName”: “AuthorizeSecurityGroupIngress”,\n\n“resources”: [{\n\n“resourceName”: “sg-1a2b3c4d”,\n\n“resourceType”: “AWS::EC2::SecurityGroup”\n\n}]\n\n}\n\n“`\n\nCreate automated alerts for high-risk changes such as IAM modifications, security group updates or emergency console access. You can also use AWS Config or custom [automation scripts](https://cloudray.io/articles/script-automation-guide) to correlate infrastructure changes with deployment pipelines, linking every change back to specific commits, pull requests and approvers.\n\n### Conclusion\n\nIaC security requires proactive automation — not reactive fixes. The five vulnerabilities outlined in this guide are preventable with the right combination of tooling and processes. Implement automated drift detection, policy as code, least-privilege access controls, secrets management and logging to create a defense-in-depth strategy that scales with your infrastructure growth. Start by addressing the highest impact issues in your environment and build these security practices into your IaC workflows from day one, rather than retrofitting them after incidents occur.\n\nhttps://www.addtoany.com/add_to/x?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Themhttps://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Themhttps://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Themhttps://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Themhttps://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Themhttps://www.addtoany.com/share\n\nhttps://www.addtoany.com/add_to/x?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Them%20-%20DevOps.comhttps://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Them%20-%20DevOps.comhttps://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Them%20-%20DevOps.comhttps://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Them%20-%20DevOps.comhttps://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevops.com%2Fcommon-iac-security-issues-and-how-to-fix-them%2F&amp;linkname=Common%20IaC%20Security%20Issues%20and%20How%20to%20Fix%20Them%20-%20DevOps.comhttps://www.addtoany.com/share\n\n[« Report: Full-Stack Observability Cuts Downtime Costs](https://devops.com/report-full-stack-observability-cuts-downtime-costs/)\n\n[![](https://devops.com/wp-content/uploads/2024/11/Copy-of-DO-Banners-1540x660-1.png)](https://webinars.devops.com/in-article-newsletter-popup)\n\n×\n\nExecutive Security as a Strategic Priority\n\nStep 1 of 8\n\n12%\n\nWhich best describes your level of influence on cybersecurity, risk and/or data protection in your organization?(Required) I make decisions about or have influence over cybersecurity strategy\n\nI make decisions about or have influence over risk strategy\n\nI am responsible for protecting data at my organization\n\nI am responsible for building and/or implementing solutions that protect the PII of employees and customers\n\nI am responsible for building and/or implementing solutions to underpin our cybersecurity strategy\n\nI am responsible for building and/or implementing solutions to manage and mitigate risk\n\nOther/NA\n\nHave you or members of your family or other executives and members of their families been targets of social engineering attacks? (Select All That Apply)(Required) I have personally been targeted\n\nA member of my family has been targeted\n\nExecutives at my organization have been targets of AI social engineering attacks\n\nWere any of the attacks successful?(Required) Yes\n\nNo\n\nDon’t know\n\nN/A\n\nWhich best describes your organization’s efforts to protect executives and their families against AI social engineering attacks?(Required) Has not addressed the impact of these attacks\n\nHas made protecting executive PII a strategic priority and has a fully executed plan in place\n\nHas developed a strategy to protect executives and has begun to execute it\n\nHas taken rudimentary steps to protect executives and their families\n\nHas discussed the potential impact of such attacks but has not executed a strategy\n\nWhat challenges have prevented you from more fully securing the PII of executives and their families?(Required) Poor visibility into what should be protected\n\nIntegration into existing security strategies\n\nLack of executive/board support\n\nPotential disruption to business operations\n\nTech spend is too high\n\nEase of use\n\nWhich of the following do you think are true about the level of threat posed by AI social engineering attacks?(Required) Obtaining executives’ available personal data online and that of their families can create extremely important leverage for threat actors seeking access to corporate assets\n\nAI social engineering attacks against executives and their families are on the rise, and we struggle to stay ahead of them\n\nMy organization doesn’t have a firm understanding of the risk from AI social engineering attacks\n\nAI social engineering attacks raise my organization’s risk exposure\n\nExecutives have often handled the most sensitive data—often on the fly—and have access to a company’s most valuable assets from their homes and personal devices\n\nProtecting executives—and their families—should be a critical risk management priority\n\nWhat steps has your organization taken to protect executives and their families from AI social engineering attacks? (Select All That Apply)(Required) Protect the integrity of confidential information and communications\n\nReduce attack surface\n\nInvest in training\n\nBlock lateral movement\n\nHow valuable do you think it would it be to have an easy to integrate and use tool that protects the PII of executives and their families from AI social engineering attacks?(Required) Extremely valuable\n\nVery valuable\n\nSomewhat valuable\n\nSlightly valuable\n\nNot valuable\n\nΔ\n\n×",
  "FeedName": "DevOps Blog"
}
