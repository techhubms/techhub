{
  "Author": "Alan Shimel",
  "Title": "Tackling the DevSecOps Gap in Software Understanding",
  "Tags": [
    "DevSecOps",
    "Features",
    "SBOMs",
    "Social - Facebook",
    "Social - LinkedIn",
    "Social - X",
    "Software Visibility",
    "supply chain security"
  ],
  "FeedLevelAuthor": "DevOps.com",
  "PubDate": "2025-08-22T02:45:22+00:00",
  "EnhancedContent": "[![](https://devops.com/wp-content/uploads/2025/02/cropped-devops-logo.png)](https://devops.com/)\n\n# Sign up for our newsletter! Stay informed on the latest DevOps news\n\nTackling the DevSecOps Gap in Software Understanding\n\nWhen I first read the recent article from CISA titled [“Tackling the National Gap in Software Understanding,”](https://www.cisa.gov/news-events/news/tackling-national-gap-software-understanding) I had the same reaction I imagine many of you did: *Well, of course this is necessary*. Who in their right mind doesn’t want better visibility into the software used in our most mission-critical systems?\n\nBut then I thought a bit more. It’s not just necessary—it’s overdue. And not only for national security systems. This gap in software understanding exists across nearly every enterprise and agency in the public and private sector. The real challenge is not recognizing the problem. It’s addressing it early, systemically and sustainably—especially in a DevSecOps context.\n\nLet’s dig into what this really means, why it matters, and where we go from here.\n\n### **The Software Visibility Gap is a National Risk**\n\nThe CISA article—and the reports it references from MITRE, NSA, ONCD, and others—highlights a fundamental issue: We don’t know enough about the software running inside our critical infrastructure. We lack the ability to fully understand what’s in our software, how it’s built, and where the risks lie.\n\nThis isn’t a new problem. But with the rise of supply chain attacks, component vulnerabilities and ever-expanding software dependencies, the risk is no longer theoretical. It’s existential.\n\nHere’s the kicker: You can’t secure what you don’t understand. You can’t defend what you can’t see.\n\n[![Techstrong Gang Youtube](https://securityboulevard.com/wp-content/uploads/2024/12/Techstrong-Gang-Youtube-PodcastV2-770.png)](https://youtu.be/Fojn5NFwaw8)\n\n[![Techstrong Gang Youtube](https://devops.com/wp-content/uploads/2025/03/770X330-DevOps-AppDev-Mar2025D.jpg)](https://info.futurumgroup.com/devops_appdev?utm_source=referral&utm_medium=in-article&utm_campaign=DevOps-Application-Report)\n\n[![Techstrong Gang Youtube](https://devops.com/wp-content/uploads/2025/03/770X330-DevOps-AppDev-Mar2025-2D.jpg)](https://info.futurumgroup.com/devops_appdev?utm_source=referral&utm_medium=in-article&utm_campaign=DevOps-Application-Report)\n\nSo yes, we need to close the gap in software understanding—urgently. But the gap isn’t just about national security. It’s a DevSecOps problem at its core.\n\n### **DevSecOps: Where the Gap Can Actually Be Closed**\n\nThe big idea in DevSecOps has always been this: shift security left, embed it early and often, and make it everyone’s responsibility.\n\nThis makes DevSecOps the perfect context for addressing the software understanding gap. Why? Because the best time to capture visibility into your software’s inner workings isn’t after it’s shipped—it’s while it’s being built.\n\n### **SBOMs and Supply Chain Security Are Just the Start**\n\nSoftware Bill of Materials (SBOMs) are getting a lot of attention—and rightly so. They provide a machine-readable inventory of every component in a piece of software, down to the library level. SBOMs are a baseline requirement for software visibility, but they’re not the whole story.\n\nWhat we need is end-to-end traceability—from code to artifact to runtime. That includes:\n\n- Component provenance: Where did this library come from, and who maintains it?\n- Build pipelines: What tools and environments were used to compile the software?\n- Deployment metadata: When and where was this version deployed, and under what conditions?\n\nThis kind of visibility is what lets you “understand” software in the true sense—not just scan it for CVEs.\n\nAnd the only way to build this visibility in without slowing everything down is to integrate it directly into DevSecOps workflows.\n\n### **The Role of Policy—and the Promise of Collaboration**\n\nI’ll give credit where credit is due: CISA and its federal partners are thinking bigger. They’re not trying to do this in a silo. They’re bringing in multiple agencies—ONCD, NSA, and others—and they’re inviting the cybersecurity and open source communities to the table.\n\nThat’s a smart move. Because this isn’t a compliance exercise. It’s a transformation effort.\n\nToo often, the conversation around software security gets stuck on source code access. But as anyone in DevSecOps knows, access to source code alone doesn’t solve the visibility problem. You need insight into artifacts, pipelines, environment variables, configurations, and more. We’re talking about a whole-of-lifecycle approach—not a repo review.\n\nThe fact that this is now a coordinated, multi-agency initiative is encouraging. If done right, it could set the standard not only for how the federal government secures software, but how the private sector does too.\n\n### **Will We See It Through?**\n\nAnd yet… I’ve been around long enough to know how these things go. Big announcement, slick webpage, maybe even a press conference. And then?\n\nCrickets.\n\nWe’ve seen this script before. Promising initiatives that fizzle out after leadership changes, priorities shift, or budgets get squeezed. Federal agencies—CISA included—have a revolving door problem. Continuity is hard when your champions keep leaving. You need people who aren’t afraid to speak the truth and do what is right.\n\nSo here’s the real question: Will we stick with it? Will the teams behind this initiative have the mandate—and the stamina—to drive this effort forward once the spotlight dims?\n\nBecause make no mistake: closing the software understanding gap is not a one-and-done project. It’s a multi-year slog. It requires rewriting procurement policies, updating build systems, retraining teams, and investing in open standards. It’s not glamorous, but it’s vital.\n\n### **Why It Matters—For DevSecOps and Beyond**\n\nIf we do see it through, this won’t just be a win for federal cybersecurity. It’ll be a win for the DevSecOps movement.\n\nIt will reinforce the idea that visibility, traceability, and accountability are not add-ons—they’re first principles. It will accelerate the adoption of SBOMs, secure build pipelines, artifact attestation, and zero trust architectures.\n\nMost importantly, it will help us build software we can trust. And in today’s world, that’s not just a technical achievement. It’s a national imperative.\n\nLet’s hope we have the will to match the ambition.\n\nhttps://www.addtoany.com/add_to/x?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understandinghttps://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understandinghttps://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understandinghttps://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understandinghttps://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understandinghttps://www.addtoany.com/share\n\nhttps://www.addtoany.com/add_to/x?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understanding%20-%20DevOps.comhttps://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understanding%20-%20DevOps.comhttps://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understanding%20-%20DevOps.comhttps://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understanding%20-%20DevOps.comhttps://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevops.com%2Ftackling-the-devsecops-gap-in-software-understanding%2F&amp;linkname=Tackling%20the%20DevSecOps%20Gap%20in%20Software%20Understanding%20-%20DevOps.comhttps://www.addtoany.com/share\n\n[« White Paper: The Future of DevSecOps in a Fully Autonomous CI/CD Pipeline](https://devops.com/white-paper-the-future-of-devsecops-in-a-fully-autonomous-ci-cd-pipeline/)\n\n[![](https://devops.com/wp-content/uploads/2024/11/Copy-of-DO-Banners-1540x660-1.png)](https://webinars.devops.com/in-article-newsletter-popup)\n\n×",
  "Link": "https://devops.com/tackling-the-devsecops-gap-in-software-understanding/?utm_source=rss&utm_medium=rss&utm_campaign=tackling-the-devsecops-gap-in-software-understanding",
  "FeedName": "DevOps Blog",
  "FeedUrl": "https://devops.com/feed/",
  "OutputDir": "_posts",
  "Description": "![](https://devops.com/wp-content/uploads/2021/05/How-to-Bring-DevOps-and-Security-Teams-Closer-Together.jpg)\n\n![](https://devops.com/wp-content/uploads/2021/05/How-to-Bring-DevOps-and-Security-Teams-Closer-Together-150x150.jpg)When I first read the recent article from CISA titled “Tackling the National Gap in Software Understanding,” I had the same reaction I imagine many of you did: Well, of course this is necessary. Who in their right mind doesn’t want better visibility into the software used in our most mission-critical systems? But then I […]",
  "ProcessedDate": "2025-08-22 03:36:29"
}
