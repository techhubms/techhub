{
  "Tags": [
    "Blogs",
    "Business of DevOps",
    "CI/CD security",
    "container registry security",
    "container vulnerabilities",
    "Contributed Content",
    "devsecops",
    "hardened images",
    "Kubernetes security",
    "secure build pipelines",
    "Social - Facebook",
    "Social - LinkedIn",
    "Social - X",
    "Software Supply Chain Security"
  ],
  "FeedLevelAuthor": "DevOps.com",
  "Description": "![supply chain, software, Checkmarx, data, Endor, SCA, supply chain, security, workflows, supply chain, software, supply chain security, appsec, polyfill, software, supply chains, DevOps, DevSecOps, Google supply chain](https://devops.com/wp-content/uploads/2020/08/Overheard-at-CloudBees-Connect-The-Reality-of-Delivering-Modern-Software.jpg)\n\n![supply chain, software, Checkmarx, data, Endor, SCA, supply chain, security, workflows, supply chain, software, supply chain security, appsec, polyfill, software, supply chains, DevOps, DevSecOps, Google supply chain](https://devops.com/wp-content/uploads/2020/08/Overheard-at-CloudBees-Connect-The-Reality-of-Delivering-Modern-Software-150x150.jpg)When it comes to securing the software supply chain, engineering teams often assume that the choice between building their own hardened images or buying a solution is straightforward…until they try to build the images themselves. As the programmer’s credo goes: “We do these things not because they are easy, but because we thought they’d be easy.” The decision […]",
  "EnhancedContent": "[![](https://devops.com/wp-content/uploads/2025/02/cropped-devops-logo.png)](https://devops.com/)\n\n# Sign up for our newsletter! Stay informed on the latest DevOps news\n\nBuild vs. Buy: What it Really Takes to Harden Your Software Supply Chain\n\nWhen it comes to [securing the software supply chain](https://devops.com/survey-surfaces-software-supply-chain-security-gains/), engineering teams often assume that the choice between building their own hardened images or buying a solution is straightforward…until they try to build the images themselves. As the programmer’s credo goes: “We do these things not because they are easy, but because we thought they’d be easy.”\n\nThe decision has only grown more important as build pipelines increasingly become prime targets for attackers. The risk was first articulated decades ago in Ken Thompson’s 1984 lecture “[Reflections on Trusting Trust](https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf),” which showed how compilers and build systems themselves could be subverted. For years, it remained a theoretical concern until [SolarWinds](https://www.techtarget.com/whatis/feature/SolarWinds-hack-explained-Everything-you-need-to-know) made it real in 2020. The breach, born from a compromised software build system, became one of the most widespread and damaging supply chain attacks in history. In its aftermath, securing the entire build and distribution process down to the container image level has become an urgent priority for organizations across every industry.\n\nAt first glance, the DIY approach seems simple enough: Start with a base image, patch the vulnerabilities and set up automation to keep things up to date. The problem is that most upstream distributions aren’t fully doing this themselves, so even diligent teams are only applying last-mile fixes on top of already outdated images. What looks like a quick win often evolves into a superficial solution that misses critical upstream issues, while still creating engineering toil. From constantly chasing vulnerability disclosures to testing, distribution and access control, what’s manageable for one image quickly becomes unmanageable at scale.\n\nFor teams considering whether to build or buy, it’s important to look beyond the initial effort and assess what it really takes to maintain secure, production-grade images over time. Below are four areas to be aware of where true cost and complexity often reveal themselves.\n\n### The Hidden Costs of Maintaining Your Own Images\n\nYou cannot take the “set it and forget it” approach with hardened images. The maintenance clock starts ticking the second you ship your first hardened container. Approximately [90% of codebases](https://www.blackduck.com/content/dam/black-duck/en-us/reports/rep-ossra.pdf) contain open–source components that are more than 10 versions behind the most recent release. CVEs don’t wait for convenient timing. Libraries and dependencies release updates on their own schedule and regulatory requirements evolve constantly.\n\nWhat begins as a single engineering sprint can become a persistent responsibility: Tracking vulnerabilities, responding to alerts, updating and validating packages and ensuring that the changes don’t break anything downstream. On average, developers spend just under [six hours per week](https://media.jfrog.com/wp-content/uploads/2024/09/24210102/idc-report-asset.pdf) sourcing, selecting and updating open–source packages. In larger organizations, this becomes a central function, requiring dedicated owners, repeatable processes and support across multiple teams.\n\n[![Techstrong Gang Youtube](https://securityboulevard.com/wp-content/uploads/2024/12/Techstrong-Gang-Youtube-PodcastV2-770.png)](https://youtu.be/Fojn5NFwaw8)\n\n[![Techstrong Gang Youtube](https://devops.com/wp-content/uploads/2025/03/770X330-DevOps-AppDev-Mar2025D.jpg)](https://info.futurumgroup.com/devops_appdev?utm_source=referral&utm_medium=in-article&utm_campaign=DevOps-Application-Report)\n\n[![Techstrong Gang Youtube](https://devops.com/wp-content/uploads/2025/03/770X330-DevOps-AppDev-Mar2025-2D.jpg)](https://info.futurumgroup.com/devops_appdev?utm_source=referral&utm_medium=in-article&utm_campaign=DevOps-Application-Report)\n\nEven with automation in place, someone on the engineering team needs to ensure that the updates are timely, correct and secure. Without this ongoing investment, even well-built images quickly get outdated and become a liability.\n\n### Why Automation Alone Isn’t Enough\n\nAutomation is essential, but it doesn’t eliminate the need for hands-on engineering oversight. Certain tools can help detect upstream changes, open pull requests and even patch common vulnerabilities, but not every update is clean or predictable. What happens when the upstream releases a new version with breaking API changes?\n\nAutomation breaks when inputs change unexpectedly and someone has to step in to find out why. A good example is Kubernetes v1.18, when the project added a required context parameter to nearly all SDK calls in its client-go library. What looked like a minor upstream change broke thousands of downstream projects and forced teams to spend significant time refactoring just to stay current. That is why engineers must not only understand the automation itself, but also compilers, build flags, dependency managers and upstream open–source communities. Without that context, “automated” updates can quickly snowball into downstream disruption.\n\nAutomation requires consistent upkeep. As projects grow and tools evolve, the pipelines and systems you’ve built need to evolve with them. Without that ongoing care, your automation risks becoming a fragile black box.\n\n### Preventing Bottlenecks in Hardened Image Pipelines\n\nSuccessful image builds are only one part of the equation. Equally important is validating that those images work as expected and don’t introduce problems elsewhere in the stack.\n\nBasic unit testing isn’t enough — hardened images need thorough integration tests that mimic real-world environments. That might mean standing up a local Kubernetes cluster to test a suite of services or deploying to a real cloud environment to ensure compatibility with the underlying infrastructure. For some images, especially those that touch external services or use GPU resources, test setups can be resource-intensive and slow to run.\n\nWithout proper testing, it’s easy to miss subtle issues that only appear under real-world conditions. That’s a risk most security-conscious organizations can’t afford to take.\n\n### Delivering Hardened Images Without Introducing New Risks\n\nEven the most hardened images can become attack vectors if distribution isn’t secure. A striking example: in late 2024, attackers used a compromised DockerHub access token to push a malicious v3.4.0 image of the Kong Ingress Controller, injecting a cryptominer directly into users’ systems. Kong responded swiftly by revoking credentials, removing the malicious image, releasing a patched v3.4.1 and telling users to verify by digest and redeploy.\n\nThis incident shows why access must be auditable and revocable and tooling must strike the right balance between usability and security. Otherwise, the efforts invested in building secure software are immediately undermined at the point of delivery.\n\n### A Practice, Not a Feature\n\nBuilding your own hardened images can offer flexibility and control, but it comes with a steep and ongoing cost. The effort extends far beyond the initial build process into automation, testing, distribution and long-term maintenance. These are not simple side tasks; they become a permanent and fundamental part of your engineering workload.\n\nBefore choosing to build, teams should take a hard look at what they can sustainably support over time. Hardened images are not just a feature; they’re a practice. And as software supply chain attacks grow in frequency and sophistication, the ability to maintain that practice at scale is what separates secure systems from exposed ones.\n\nhttps://www.addtoany.com/add_to/x?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0https://www.addtoany.com/share\n\nhttps://www.addtoany.com/add_to/x?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0%20-%20DevOps.comhttps://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0%20-%20DevOps.comhttps://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0%20-%20DevOps.comhttps://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0%20-%20DevOps.comhttps://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevops.com%2Fbuild-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain%2F&amp;linkname=Build%20vs.%20Buy%3A%20What%20it%20Really%20Takes%20to%20Harden%20Your%20Software%20Supply%20Chain%C2%A0%20-%20DevOps.comhttps://www.addtoany.com/share\n\n[« Shortcut Adds AI Agent to Orchestrate Management of Software Development Projects](https://devops.com/shortcut-adds-ai-agent-to-orchestrate-management-of-software-development-projects/)\n\n[![](https://devops.com/wp-content/uploads/2024/11/Copy-of-DO-Banners-1540x660-1.png)](https://webinars.devops.com/in-article-newsletter-popup)\n\n×",
  "Link": "https://devops.com/build-vs-buy-what-it-really-takes-to-harden-your-software-supply-chain/",
  "FeedUrl": "https://devops.com/feed/",
  "PubDate": "2025-10-03T06:30:32+00:00",
  "Author": "Matt Moore",
  "ProcessedDate": "2025-10-06 04:03:45",
  "Title": "Build vs. Buy: What it Really Takes to Harden Your Software Supply Chain",
  "OutputDir": "_posts",
  "FeedName": "DevOps Blog"
}
