{
  "FeedName": "Randy Pagels's Blog",
  "ProcessedDate": "2025-10-04 23:07:18",
  "EnhancedContent": "[← Back to Main Page](../index.html)\n\n# Supercharge Your Prompts with .prompt.md\n\n*Posted on Oct 3, 2025*\n\nUsage\n\nSometimes you want more than style rules. You want GitHub Copilot to reuse rich, detailed prompts that guide its behavior for a specific repo or workflow.\n\nThat is where the **.prompt.md** file comes in. It lets you define reusable prompts that can be referenced across your project, giving you consistent, structured instructions without rewriting them each time.\n\nProTip\n\n**Keep Your Best Prompts Close to the Code**\n\nInstead of storing prompts in a doc or typing them fresh each time, define them once in `.prompt.md` so GitHub Copilot can load and reuse them whenever you need.\n\nTry These Approaches\n\n**1️⃣ Define Project Specific Prompts**\n\n`\n# .prompt.md\n## Generate API Docs\nGenerate documentation for every public function in this repo. Use a markdown format with clear examples. `\n\nGitHub Copilot can reuse this prompt whenever you trigger documentation work.\n\n**2️⃣ Add Testing Prompts**\n\n`\n# .prompt.md\n## Write Unit Tests\nFor each service, generate Jest tests that cover success and failure paths. `\n\nKeeps your test writing flow consistent across the project.\n\n**3️⃣ Include Refactoring Prompts**\n\n`\n# .prompt.md\n## Refactor for Clarity\nSimplify code without changing functionality. Add inline comments to explain the final version. `\n\nUseful when handing code off to teammates who need quick readability.\n\nNow That You’ve Created Prompts, How to Use Them\n\n- Once `.prompt.md`\nis in your repo, you can call these prompts directly in GitHub Copilot Chat.\n- Use the **#** command in chat to insert a saved prompt by name. Example, `#Write Unit Tests`\n.\n- Use the **/** command to browse available prompts and select one interactively. Example, `/Generate API Docs`\n.\n- No copy pasting required. They are reusable shortcuts that keep your workflow consistent.\n\nExtra Ideas to Try\n\n- Add a section for commit messages, “Write clear, Conventional Commit messages based on staged changes.”\n- Add a section for security reviews, “Check this file for hardcoded secrets or unsafe dependencies.”\n- Add a section for UI components, “Generate React components using hooks and TypeScript.”\n\nQuick Takeaway\n\nThe `.prompt.md` file is like a recipe card for your favorite GitHub Copilot prompts.\n\nKeep them with your code, call them quickly with **#** or **/**, and save time retyping instructions.",
  "Link": "https://www.cooknwithcopilot.com/blog/supercharge-your-prompts-with-prompt-md.html",
  "Title": "Supercharge Your Prompts with .prompt.md",
  "Author": "randy.pagels@xebia.com (Randy Pagels)",
  "OutputDir": "_posts",
  "FeedUrl": "https://www.cooknwithcopilot.com/rss.xml",
  "Tags": [],
  "Description": "Store reusable prompts in .prompt.md so Copilot can load them on demand and keep your workflow consistent.",
  "PubDate": "2025-10-03T00:00:00+00:00",
  "FeedLevelAuthor": "randy.pagels@xebia.com (Randy Pagels)"
}
