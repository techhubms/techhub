{
  "EnhancedContent": "[‚Üê Back to Main Page](../index.html)\n\n# Guide Your AI with copilot-instructions.md\n\n*Posted on Sep 26, 2025*\n\nUsage\n\nConsistency is tough on a team, code style, naming rules, or how to handle comments can easily drift.\n\nThat‚Äôs where the **copilot-instructions.md** file comes in. By placing this file at the root of your repo, you can guide GitHub Copilot with project specific rules, so it generates suggestions that fit your team‚Äôs standards automatically.\n\nProTip\n\n**Set the Ground Rules Once, Then Let GitHub Copilot Follow Them**\n\nInstead of reminding GitHub Copilot in every prompt, define your preferences once in `copilot-instructions.md` .\n\nCopilot reads the file for context when making suggestions.\n\nTry These Approaches\n\n**1Ô∏è‚É£ Standardize Naming Conventions**\n\n`# copilot-instructions.mdUse camelCase for variables, PascalCase for classes, and ALL_CAPS_WITH_UNDERSCORES for constants.`\n\nGitHub Copilot will generate names that match the pattern, reducing cleanup later.\n\n**2Ô∏è‚É£ Document Style Choices**\n\n`# copilot-instructions.mdUse JSDoc format for function documentation. Each function must include parameters, return type, and one example.`\n\nCopilot will produce docstrings in the right style without you prompting each time.\n\n**3Ô∏è‚É£ Add Security or Performance Notes**\n\n`# copilot-instructions.mdNever log sensitive data such as passwords, API keys, or tokens. Always use async/await for database calls.`\n\nHelps prevent risky or outdated patterns from creeping into code.\n\nüîë Now That You‚Äôve Created Instructions: How to Apply Them\n\n- Place `copilot-instructions.md`\nin the `.github` folder at the root of your repo. Copilot automatically considers it for completions in that repository.\n- If you update the file, Copilot follows the new rules the next time it generates code.\n- You can combine `copilot-instructions.md`\nwith `.prompt.md` to guide both style rules and task specific prompts.\n\nExtra Ideas to Try\n\n- Define test frameworks, ‚ÄúUse Jest for unit tests with describe and it blocks.‚Äù\n- Add formatting preferences, ‚ÄúUse 2 spaces for indentation, no semicolons in JavaScript.‚Äù\n- Specify domain conventions, ‚ÄúFor React components, always use function components with hooks.‚Äù\n\nQuick Takeaway\n\nThe `copilot-instructions.md` file is like a style guide that GitHub Copilot actually listens to.\n\nDefine your rules once, drop the file into your repo, and Copilot will follow them automatically.",
  "PubDate": "2025-09-26T00:00:00+00:00",
  "ProcessedDate": "2025-09-29 10:08:14",
  "Author": "randy.pagels@xebia.com (Randy Pagels)",
  "Description": "Define project rules once in copilot-instructions.md and Copilot will follow them for names, docs, and safer patterns.",
  "Title": "Guide Your AI with copilot-instructions.md",
  "FeedLevelAuthor": "randy.pagels@xebia.com (Randy Pagels)",
  "OutputDir": "_posts",
  "FeedUrl": "https://www.cooknwithcopilot.com/rss.xml",
  "Link": "https://www.cooknwithcopilot.com/blog/guide-your-ai-with-copilot-instructions-md.html",
  "Tags": [],
  "FeedName": "Randy Pagels's Blog"
}
