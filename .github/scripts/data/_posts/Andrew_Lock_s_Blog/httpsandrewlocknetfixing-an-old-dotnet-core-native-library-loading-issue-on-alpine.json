{
  "Description": "In this post I walk through the process of solving a native library loading issue on alpine with an old .NET runtime, showing the steps we took and the solution",
  "FeedLevelAuthor": "Andrew Lock | .NET Escapades",
  "Title": "Fixing an old .NET Core native library loading issue on Alpine",
  "PubDate": "2025-08-26T10:00:00+00:00",
  "ProcessedDate": "2025-08-26 11:10:58",
  "FeedUrl": "https://andrewlock.net/rss.xml",
  "EnhancedContent": "In this post I describe an issue I ran into at work when we were trying to test an app using *Microsoft.Data.SQLite* on [Alpine Linux](https://www.alpinelinux.org/), and were running into this error: `Unhandled exception. System.DllNotFoundException: Unable to load shared library 'e_sqlite3' or one of its dependencies` .\n\nThis post is primarily a walkthrough of the steps I took to solve the issue. I describe the problem itself, the environment in which it happened, the things we tried to isolate the issue, the eventual root cause, and how we resolved it.\n\n## The background: .NET 10 requires alpine 3.17+\n\nWe ran into the issue while working on [the Datadog .NET tracer](https://github.com/DataDog/dd-trace-dotnet) in a branch where we were adding [provisional support for .NET 10](https://github.com/DataDog/dd-trace-dotnet/pull/7170). One of the issues we ran into in this branch was that .NET 10 no longer runs on the version of alpine we were previously using, `alpine:3.14` .\n\n>\n> One of the issues we have to deal with in general is that we support a *wide* range of target frameworks and deployment platforms, which generally means we need to use and test on \"old\" versions of both distros and target frameworks.\n> >\n\nInitial attempts to run .NET 10 on `alpine:3.14` fails at runtime with the following error:\n\n```bash Failed to load /usr/share/dotnet/host/fxr/10.0.0-preview.5.25277.114/libhostfxr.so, error: Error relocating /usr/share/dotnet/host/fxr/10.0.0-preview.5.25277.114/libhostfxr.so: _ZSt28__throw_bad_array_new_lengthv: symbol not found\n\nThe library libhostfxr.so was found, but loading it from /usr/share/dotnet/host/fxr/10.0.0-preview.5.25277.114/libhostfxr.so failed\n\n```\n\n[We subsequently confirmed](https://github.com/dotnet/runtime/issues/117608) that this is expected: [.NET 10 has updated its support matrix](https://github.com/dotnet/runtime/issues/117608), and now requires Alpine 3.17 or higher.\n\nAfter jumping through the various hoops to confirm that we *could* update the base image of alpine without breaking anything, we updated our build and test images to use `alpine:3.17` . And that's when we started hitting the issue that is the focus of this post.\n\n## The problem: `Unable to load shared library 'e_sqlite3'`\n\nAs part of CI tests, we run over a hundred different sample applications, across a variety of different package version combinations and target frameworks. After updating to the new version of alpine, we started seeing issues in one application in particular, [*Samples.Microsoft.Data.Sqlite*](https://github.com/DataDog/dd-trace-dotnet/tree/835d79f94261ca1cbf5177c50ebc442329bbb057/tracer/test/test-applications/integrations/Samples.Microsoft.Data.Sqlite). This was failing in two specific target frameworks, `netcoreapp3.1` and `net5.0` , and was failing with the following error:\n\n```bash Unhandled exception. System.DllNotFoundException: Unable to load shared library 'e_sqlite3' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: Error loading shared library libe_sqlite3: No such file or directory at SQLitePCL.SQLite3Provider_e_sqlite3.NativeMethods.sqlite3_libversion_number() at SQLitePCL.SQLite3Provider_e_sqlite3.SQLitePCL.ISQLite3Provider.sqlite3_libversion_number() at SQLitePCL.raw.SetProvider(ISQLite3Provider imp) at SQLitePCL.Batteries_V2.Init() at SQLitePCL.Batteries.Init() at Samples.Microsoft.Data.Sqlite.Program.OpenConnection() in D:\\a\\_work\\1\\s\\tracer\\test\\test-applications\\integrations\\Samples.Microsoft.Data.Sqlite\\Program.cs:line 29 at Samples.Microsoft.Data.Sqlite.Program.Main() in D:\\a\\_work\\1\\s\\tracer\\test\\test-applications\\integrations\\Samples.Microsoft.Data.Sqlite\\Program.cs:line 17 at Samples.Microsoft.Data.Sqlite.Program.<Main>()\n\n```\n\nAs you might expect, this app uses [the *Microsoft.Data.Sqlite* package](https://www.nuget.org/packages/Microsoft.Data.Sqlite) package, which transitively references various SQLite packages. The question was:\n\n- Why is the library unable to load the `libe_sqlite3`\n?\n- Why does it only affect .NET Core 3.1 and .NET 5?\n\n## Narrowing down the issue\n\nOne of the difficulties with solving the problem was that we were changing multiple variables at once: we updated the base image to `alpine:3.17` *and* we were building with the .NET 10 preview SDK too. Unfortunately, for technical reasons, it wasn't easy for us to separate these two steps entirely, so we took a slightly different approach.\n\nOur base suspicion was that the updated alpine base image was the problem. There were lots of possible reasons this *could* be the case, such as missing native dependencies, but before we narrowed our focus, we wanted to isolate the issue to alpine.\n\nTo confirm our suspicions, we used a build of the sample taken from the `master` branch's CI, and ran it on both `alpine:3.14` and `alpine:3.17` , *without* the .NET tracer attached, running against .NET Core 3.1. The results were:\n\n- On `alpine:3.14`\n, the app ran without issue.\n- On `alpine:3.17`\n, the app crashed with `Unable to load shared library 'e_sqlite3' or one of its dependencies` .\n\nOK, so the problem was *definitely* the new `alpine:3.17` image. Now to try to understand *why* it was a problem.\n\n## Checking for missing dependencies with `ldd`\n\nSo at this point, we know the app itself is correct, and that the `libe_sqlite3` exists and is in the right location, because it works with `alpine:3.14` . So then why can't the library be loaded?\n\nI started by running the [`ldd` (List Dynamic Dependencies) command](http://linux.die.net/man/1/ldd) inside the `alpine:3.17` project, passing in the path to the SQLite library. This then lists the dynamic dependencies of the library:\n\n```bash $ ldd ./runtimes/linux-musl-x64/native/libe_sqlite3.so /lib/ld-musl-x86_64.so.1 (0x741dab2ae000) libc.so => /lib/ld-musl-x86_64.so.1 (0x741dab2ae000)\n\n```\n\nThis shows that the SQLite library is linked only against [musl](https://en.wikipedia.org/wiki/Musl)'s `libc` , and that the library is present. So that means the issue is likely *not* due to a missing dependency.\n\n## Debugging native library loading issues with `LD_DEBUG`\nand `LD_LIBRARY_PATH`\n\nThe next thing I tried was doing what the error message said:\n\n``` In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable\n\n```\n\nThe `LD_DEBUG` variable is a feature of the Linux dynamic linker that [allows dumping information](https://bnikolic.co.uk/blog/linux-ld-debug.html) about how it's functioning. This is great for debugging, and there's lots of options you can pass to it. For the example below, I used the `libs` option which displays native library search paths:\n\n```bash $ LD_DEBUG=libs ls 295: find library=libselinux.so.1 [0]; searching 295: search cache=/etc/ld.so.cache 295: trying file=/lib/x86_64-linux-gnu/libselinux.so.1 295: 295: find library=libc.so.6 [0]; searching 295: search cache=/etc/ld.so.cache 295: trying file=/lib/x86_64-linux-gnu/libc.so.6 295: 295: find library=libpcre2-8.so.0 [0]; searching 295: search cache=/etc/ld.so.cache 295: trying file=/lib/x86_64-linux-gnu/libpcre2-8.so.0 295: 295: calling init: /lib64/ld-linux-x86-64.so.2 295: calling init: /lib/x86_64-linux-gnu/libc.so.6 295: calling init: /lib/x86_64-linux-gnu/libpcre2-8.so.0 295: calling init: /lib/x86_64-linux-gnu/libselinux.so.1 295: initialize program: ls 295: transferring control: ls 295:\n\n```\n\nUnfortunately, running our app with `LD_DEBUG=libs dotnet Samples.Microsoft.Data.Sqlite.dll` doesn't reveal anything interesting. That's because the `libe_sqlite.so` native library *isn't* loaded as a dynamic dependency, so `LD_DEBUG` doesn't give us any information. Rather, the SQLite library is explicitly loaded by the .NET runtime, so it's the *runtime* that's unable to load the library.\n\n>\n> Another useful tool for debugging linking issues is [`strace`](https://linux.die.net/man/1/strace) which provides insights into all system calls.\n> >\n\nThe next thing I tried was explicitly setting `LD_LIBRARY_PATH` to include the path to `libe_sqlite.so` . `LD_LIBRARY_PATH ` is a set of additional paths to search for dynamically linked libraries, in addition to the standard locations. As a hack, I tried setting the variable to include the directory containing the SQLite library:\n\n```bash $ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/project/runtimes/linux-musl-x64/native/ \\ dotnet Samples.Microsoft.Data.Sqlite.dll\n\n```\n\nAnd sure enough, it worked! The sample successfully found the `libe_sqlite.so` library, and ran correctly!\n\nSo at this point, we're pretty certain that it's purely a problem with .NET *finding* the native library when we're running on `alpine:3.17` , not an issue with loading the library itself.\n\n## The root cause: .NET runtime ID resolution\n\nSo what's going on here?\n\nAt this point, my best guess was essentially that .NET Core 3.1 and .NET 5 simply didn't support `alpine:3.17` based on the fact:\n\n- Alpine 3.17 wasn't released until 2022\n- .NET Core 3.1 was release in 2019 and .NET 5 in 2020\n\nWhat's more, Microsoft [added dockerfiles for `alpine:3.17`](https://github.com/dotnet/dotnet-docker/pull/4221) but they *only* added them for .NET 6+. Microsoft never updated .NET Core 3.1 images to use `alpine:3.17` , [even though they were still updating 3.1 at this time](https://github.com/dotnet/dotnet-docker/commit/5408c0cc39a3ed8d2847fec075223eedee9bd4eb). So even though .NET Core 3.1 and .NET 5 [officially support Alpine 3.13+](https://github.com/dotnet/core/blob/main/release-notes/3.1/3.1-supported-os.md#linux), it seems the native library lookup rules are just broken on Alpine 3.17.\n\nAnd that pretty much sums it up: the native-library lookup rules are broken for Alpine 3.17+ on .NET Core 3.1 and .NET 5.\n\nI had actually forgotten that in earlier versions of .NET Core, there were [hardcoded lists](https://github.com/dotnet/runtime/pull/62938/files) mapping from distro names like `alpine:3.17` to runtime IDs, like `linux-musl-x64` . If the mapping was missing, then .NET didn't know which runtime ID to use, and instead of choosing the correct `linux-musl-x64` runtime ID, it would fallback to `linux-x64` . And choosing the wrong runtime ID is why the app was failing previously.\n\nThis problem of a missing runtime ID entry causing native failures on alpine was actually [a problem](https://github.com/dotnet/runtime/issues/65152) that happened repeatedly:\n\n- [add RID for Alpine 3.15](https://github.com/dotnet/runtime/pull/62938)\n- [add RID for Alpine 3.16](https://github.com/dotnet/runtime/pull/68505)\n- [Add RID for alpine-3.17 + alpine-{armv6,x86,s390x,ppc64le}](https://github.com/dotnet/runtime/pull/75396)\n- [add RID for Alpine 3.18](https://github.com/dotnet/runtime/pull/86276)\n\nEventually, a new [fallback was added](https://github.com/dotnet/runtime/pull/65339) for alpine that explicitly used `linux-musl-x64` artifacts for unknown alpine versions, so this shouldn't be a problem for .NET 7+.\n\n## The solution: `DOTNET_RUNTIME_ID`\n\nOK, so now we understood *why* the problem is happening. But how could we fix it?\n\nLuckily, the .NET host allows [explicitly setting the runtime ID](https://github.com/dotnet/runtime/blob/v5.0.0/src/installer/corehost/cli/hostmisc/utils.cpp#L206C25-L206C42) via an environment variable, `DOTNET_RUNTIME_ID` . If this variable is set, the runtime uses that in preference to its usual fallbacks, so even these old runtime versions can work on newer versions of alpine.\n\nSo in this scenario, we can set `DOTNET_RUNTIME_ID=linux-musl-x64` and the app runs perfectly:\n\n```bash $ DOTNET_RUNTIME_ID=linux-musl-x64 dotnet Samples.Microsoft.Data.Sqlite.dll\n\n```\n\nProblem solved!\n\nSo the solution was very simple in the end, but I thought it was worth describing the process we went through to narrow it down. And maybe it will help someone who (like me) has forgotten that this was a thing😅\n\n## Summary\n\nIn this post I walkthrough how we solved an error running .NET Core 3.1 and .NET 5 on Alpine Linux 3.17: `Unable to load shared library 'e_sqlite3' or one of its dependencies` . I describe the problem itself—the failure to load the SQLite native library—the environment in which it happened, the things we tried to isolate the issue, the eventual root cause, and how we resolved it.\n\nIn the end, we traced the issue to a fallback path in the .NET runtime, which would result in the runtime using the `linux-x64` runtime ID instead of the required `linux-musl-x64` on Alpine for newer versions of Alpine. This fallback path has been fixed in newer versions of .NET, but in older versions you must force the runtime to use the correct runtime ID by setting `DOTNET_RUNTIME_ID=linux-musl-x64` .\n\n## Tags\n\nAndrew Lock | .Net Escapades\n\n![](/assets/img/icons/apple/apple-touch-icon-180x180.png) Want an email when there's new posts?\n\nStay up to the date with the latest posts!\n\nOops! Check your details and try again.\n\nThanks! Check your email for confirmation.",
  "Tags": [
    ".NET Core"
  ],
  "Link": "https://andrewlock.net/fixing-an-old-dotnet-core-native-library-loading-issue-on-alpine/",
  "FeedName": "Andrew Lock's Blog",
  "Author": "Andrew Lock",
  "OutputDir": "_posts"
}
