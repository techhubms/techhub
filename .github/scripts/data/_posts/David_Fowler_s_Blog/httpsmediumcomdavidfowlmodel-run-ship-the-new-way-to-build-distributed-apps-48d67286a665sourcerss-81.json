{
  "Title": "Model. Run. Ship. The New Way to Build Distributed Apps",
  "FeedName": "David Fowler's Blog",
  "OutputDir": "_posts",
  "Tags": [
    "aspire",
    "cloud-native",
    "software-development",
    "web-development"
  ],
  "ProcessedDate": "2025-08-05 17:20:07",
  "Description": "Most developers build apps by stitching together different pieces: a frontend project here, an API over there, maybe a Redis container and a Postgres database. You run them locally using Docker Compose or some custom script, set some environment variables, maybe forward a few ports, and hope everything holds together when it’s time to deploy.\n\nThat glue — the stuff between your services — is often the most brittle part of the system. Aspire exists to make that glue *explicit*.\n\nAspire isn’t your frontend. It isn’t your API. It’s not your infrastructure-as-code either. Aspire is your **app host**. It’s the thing that connects your projects, services, and environment into something coherent and repeatable.\n\nThis post is about *that* — how Aspire helps you move from a pile of projects to a deployable product.\n\n### Your application is made up of many parts\n\nHere’s the mental shift: Aspire doesn’t care what’s inside your app. You could be using Blazor, MVC, Minimal APIs, React, Svelte, or whatever. Aspire just wants to know:\n\n- What are the parts?\n- How do they connect?\n- What do they need to run?\n\nYou’re not building *in* Aspire. You’re describing your app *to* Aspire.\n\n``` var builder = DistributedApplication.CreateBuilder(args);var redis = builder.AddRedis(\"cache\");var db = builder.AddPostgres(\"db\");var api = builder.AddProject(\"api\") .WithReference(redis) .WithReference(db);var ui = builder.AddNpmApp(\"frontend\", \"../frontend\") .WithNpmPackageInstallation() .WithHttpEndpoint(env: \"PORT\") .WithReverseProxy(api.GetEndpoint(\"http\")) .WithExternalHttpEndpoints(); ```\n\nThis doesn’t replace your Dockerfile or your infrastructure scripts — it gives you a model that can power *both*.\n\nFor a real-world example you can clone and run, check out [aspire-ai-chat-demo](https://github.com/davidfowl/aspire-ai-chat-demo). It’s a simple AI chat app modeled using Aspire, and shows how to wire up multiple services and run them together as a single system.\n\n### One model, multiple environments\n\nThe same model can drive both local development and production deployments.\n\nHere’s a pattern you’ll see in real-world apps like [aspire-ai-chat-demo](https://github.com/davidfowl/aspire-ai-chat-demo):\n\n``` if (builder.ExecutionContext.IsPublishMode){ ui.PublishAsDockerFile(config => { config.WithReverseProxy(api.GetEndpoint(\"http\")); });}else{ ui.WithEnvironment(\"BACKEND_URL\", api.GetEndpoint(\"http\"));} ```\n\nIn dev, you run:\n\n``` aspire run ```\n\nAspire wires up containers, runs your services, and connects everything together.\n\nIn production or CI, you run:\n\n``` aspire publish -p docker-compose -o artifacts ```\n\nThe Dockerfile is authored manually to include a reverse proxy to your API endpoint.\n\nThis lets you switch environments with no code changes — just aspire run or aspire publish.\n\n### Publishing to Production (Using a VPS)\n\nWhen you’re ready to deploy, Aspire turns your model into real deployment artifacts. In this case, we’re publishing to a simple VPS running on DigitalOcean (or anywhere that can host a VPS) — no Azure, no Kubernetes, just basic infrastructure you control.\n\nThis is the simplest possible deployment strategy and it highlights one of Aspire’s strengths: it’s not locked into any specific cloud provider or platform. Aspire helps you model the system, not where it runs. This kind of setup is also great for home labs, hobby projects, or smaller teams that just want a repeatable way to deploy software without managing complex infrastructure. For example, the [aspire-ai-chat-demo](https://github.com/davidfowl/aspire-ai-chat-demo) project uses a GitHub Actions workflow to publish the model to Docker Compose and push container images to GitHub Container Registry:\n\n``` name: Aspire Publish Pipelineon: push: branches: ['*'] pull_request: branches: ['*']permissions: contents: read packages: writejobs: publish: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: '9.x' - name: Install Aspire CLI run: dotnet tool install --global aspire.cli --prerelease - name: Run Aspire Publish run: aspire publish -p docker-compose -o artifacts working-directory: AIChat.AppHost - name: Log in to GitHub Container Registry run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin - name: Tag and Push Container Images run: | BUILD_NUMBER=${{ github.run_number }} BRANCH_NAME=${{ github.ref_name }} SANITIZED_BRANCH_NAME=$(echo \"$BRANCH_NAME\" | sed 's#[^a-zA-Z0-9._-]#-#g') for image in chatui chatapi; do docker tag $image:latest ghcr.io/${{ github.repository_owner }}/$image:${SANITIZED_BRANCH_NAME}-${BUILD_NUMBER} docker push ghcr.io/${{ github.repository_owner }}/$image:${SANITIZED_BRANCH_NAME}-${BUILD_NUMBER} done ```\n\nThis job uses the Aspire CLI to generate Docker Compose output and push container images to GitHub Container Registry.\n\nAspire doesn’t replace your CI — it gives you a model that CI can operate on.\n\nYou can then take the generated Docker Compose files and deploy them to a remote server. For example, here’s how you might copy the files over SSH and bring up the environment:\n\n```\n- name: Copy Compose Artifacts to Remote Server run: | scp -r artifacts user@your-server.com:/home/user/aspire-app- name: Execute Compose on Remote Server run: | ssh user@your-server.com cd /home/user/aspire-app docker login ghcr.io -u $GITHUB_USER -p $GITHUB_TOKEN docker compose down && docker compose up -d EOF\n```\n\nThis assumes Docker is already installed and configured on the target machine. Aspire doesn’t manage your infrastructure — but it makes deploying to it a whole lot easier.\n\n### This is the product\n\nYour API isn’t the product. Your frontend isn’t either.\n\nThe product is the combination of services, infrastructure, environment config, secrets, and runtime behavior that make up the full system.\n\nAspire helps you model *that*.\n\nAnd once it’s a model, it’s something you can validate, mutate, generate, deploy, and reason about.\n\n### Aspire is not just for microservices\n\nOne common misconception is that Aspire is only for microservices. The truth is: Aspire is for **distributed applications** — whether they consist of five services or just two.\n\nIt’s often mentioned in microservice contexts because those systems make the problems more visible: service sprawl, connection complexity, config drift. But those same problems exist in many other kinds of apps too — especially when you introduce a frontend, a backend, a queue, a database, and an external API.\n\nAspire helps you glue those pieces together, no matter how many of them there are.\n\n### What’s Next\n\nAspire doesn’t stop at Docker Compose and container registries. We’re working on deeper integration paths, including:\n\n- **Terraform and Pulumi publishers** to provision infrastructure alongside application modeling.\n- **Reusable CI/CD pipeline generation**, so teams can go from model to deployment without manually wiring up every step.\n\nThe goal is to turn Aspire into a reliable foundation for shipping distributed apps — from hobby projects to production systems.\n\n### Try it out\n\nIf you’ve been looking at Aspire and wondering where it fits, try starting from the outside in. Don’t ask how Aspire fits into your app — ask how your app fits into Aspire.\n\nBecause at the end of the day, the thing you’re shipping isn’t a project — it’s a system.\n\n![](https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=48d67286a665)",
  "Author": "David Fowler",
  "Link": "https://medium.com/@davidfowl/model-run-ship-the-new-way-to-build-distributed-apps-48d67286a665?source=rss-8163234c98f0------2",
  "PubDate": "2025-04-27T22:27:35+00:00",
  "EnhancedContent": "[Sitemap](/sitemap/sitemap.xml)\n\n[Open in app](https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F48d67286a665&amp;%7Efeature=LoOpenInAppButton&amp;%7Echannel=ShowPostUnderUser&amp;%7Estage=mobileNavBar&amp;source=post_page---top_nav_layout_nav-----------------------------------------) [Sign in](/m/signin?operation=login&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmodel-run-ship-the-new-way-to-build-distributed-apps-48d67286a665&amp;source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[Medium Logo](/?source=post_page---top_nav_layout_nav-----------------------------------------)\n\n[Write](/m/signin?operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2Fnew-story&amp;source=---top_nav_layout_nav-----------------------new_post_topnav------------------)\n\n/search?source=post_page---top_nav_layout_nav-----------------------------------------\n\n[Sign in](/m/signin?operation=login&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmodel-run-ship-the-new-way-to-build-distributed-apps-48d67286a665&amp;source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n# Model. Run. Ship. The New Way to Build Distributed Apps\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:64:64/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---byline--48d67286a665---------------------------------------)\n\n[David Fowler](/@davidfowl?source=post_page---byline--48d67286a665---------------------------------------)\n\n5 min read ·\n\nApr 27, 2025\n\n/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F48d67286a665&amp;operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmodel-run-ship-the-new-way-to-build-distributed-apps-48d67286a665&amp;user=David+Fowler&amp;userId=8163234c98f0&amp;source=---header_actions--48d67286a665---------------------clap_footer------------------\n\n--\n\n/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48d67286a665&amp;operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmodel-run-ship-the-new-way-to-build-distributed-apps-48d67286a665&amp;source=---header_actions--48d67286a665---------------------bookmark_footer------------------\n\nMost developers build apps by stitching together different pieces: a frontend project here, an API over there, maybe a Redis container and a Postgres database. You run them locally using Docker Compose or some custom script, set some environment variables, maybe forward a few ports, and hope everything holds together when it’s time to deploy.\n\nThat glue — the stuff between your services — is often the most brittle part of the system. Aspire exists to make that glue *explicit*.\n\nAspire isn’t your frontend. It isn’t your API. It’s not your infrastructure-as-code either. Aspire is your **app host**. It’s the thing that connects your projects, services, and environment into something coherent and repeatable.\n\nThis post is about *that* — how Aspire helps you move from a pile of projects to a deployable product.\n\n# Your application is made up of many parts\n\nHere’s the mental shift: Aspire doesn’t care what’s inside your app. You could be using Blazor, MVC, Minimal APIs, React, Svelte, or whatever. Aspire just wants to know:\n\n- What are the parts?\n- How do they connect?\n- What do they need to run?\n\nYou’re not building *in* Aspire. You’re describing your app *to* Aspire.\n\n``` var builder = DistributedApplication.CreateBuilder(args);var redis = builder.AddRedis(\"cache\");var db = builder.AddPostgres(\"db\");var api = builder.AddProject<Projects.Api>(\"api\") .WithReference(redis) .WithReference(db);var ui = builder.AddNpmApp(\"frontend\", \"../frontend\") .WithNpmPackageInstallation() .WithHttpEndpoint(env: \"PORT\") .WithReverseProxy(api.GetEndpoint(\"http\")) .WithExternalHttpEndpoints(); ```\n\nThis doesn’t replace your Dockerfile or your infrastructure scripts — it gives you a model that can power *both*.\n\nFor a real-world example you can clone and run, check out [aspire-ai-chat-demo](https://github.com/davidfowl/aspire-ai-chat-demo). It’s a simple AI chat app modeled using Aspire, and shows how to wire up multiple services and run them together as a single system.\n\n# One model, multiple environments\n\nThe same model can drive both local development and production deployments.\n\nHere’s a pattern you’ll see in real-world apps like [aspire-ai-chat-demo](https://github.com/davidfowl/aspire-ai-chat-demo):\n\n``` if (builder.ExecutionContext.IsPublishMode){ ui.PublishAsDockerFile(config => { config.WithReverseProxy(api.GetEndpoint(\"http\")); });}else{ ui.WithEnvironment(\"BACKEND_URL\", api.GetEndpoint(\"http\"));} ```\n\nIn dev, you run:\n\n``` aspire run ```\n\nAspire wires up containers, runs your services, and connects everything together.\n\nIn production or CI, you run:\n\n``` aspire publish -p docker-compose -o artifacts ```\n\nThe Dockerfile is authored manually to include a reverse proxy to your API endpoint.\n\nThis lets you switch environments with no code changes — just `aspire run` or `aspire publish` .\n\n# Publishing to Production (Using a VPS)\n\nWhen you’re ready to deploy, Aspire turns your model into real deployment artifacts. In this case, we’re publishing to a simple VPS running on DigitalOcean (or anywhere that can host a VPS) — no Azure, no Kubernetes, just basic infrastructure you control.\n\nThis is the simplest possible deployment strategy and it highlights one of Aspire’s strengths: it’s not locked into any specific cloud provider or platform. Aspire helps you model the system, not where it runs. This kind of setup is also great for home labs, hobby projects, or smaller teams that just want a repeatable way to deploy software without managing complex infrastructure. For example, the [aspire-ai-chat-demo](https://github.com/davidfowl/aspire-ai-chat-demo) project uses a GitHub Actions workflow to publish the model to Docker Compose and push container images to GitHub Container Registry:\n\n``` name: Aspire Publish Pipelineon: push: branches: ['*'] pull_request: branches: ['*']permissions: contents: read packages: writejobs: publish: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Set up .NET uses: actions/setup-dotnet@v3 with: dotnet-version: '9.x' - name: Install Aspire CLI run: dotnet tool install --global aspire.cli --prerelease - name: Run Aspire Publish run: aspire publish -p docker-compose -o artifacts working-directory: AIChat.AppHost - name: Log in to GitHub Container Registry run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin - name: Tag and Push Container Images run: | BUILD_NUMBER=${{ github.run_number }} BRANCH_NAME=${{ github.ref_name }} SANITIZED_BRANCH_NAME=$(echo \"$BRANCH_NAME\" | sed 's#[^a-zA-Z0-9._-]#-#g') for image in chatui chatapi; do docker tag $image:latest ghcr.io/${{ github.repository_owner }}/$image:${SANITIZED_BRANCH_NAME}-${BUILD_NUMBER} docker push ghcr.io/${{ github.repository_owner }}/$image:${SANITIZED_BRANCH_NAME}-${BUILD_NUMBER} done ```\n\nThis job uses the Aspire CLI to generate Docker Compose output and push container images to GitHub Container Registry.\n\nAspire doesn’t replace your CI — it gives you a model that CI can operate on.\n\nYou can then take the generated Docker Compose files and deploy them to a remote server. For example, here’s how you might copy the files over SSH and bring up the environment:\n\n```\n- name: Copy Compose Artifacts to Remote Server run: | scp -r artifacts user@your-server.com:/home/user/aspire-app- name: Execute Compose on Remote Server run: | ssh user@your-server.com << 'EOF' cd /home/user/aspire-app docker login ghcr.io -u $GITHUB_USER -p $GITHUB_TOKEN docker compose down && docker compose up -d EOF\n```\n\nThis assumes Docker is already installed and configured on the target machine. Aspire doesn’t manage your infrastructure — but it makes deploying to it a whole lot easier.\n\n# This is the product\n\nYour API isn’t the product. Your frontend isn’t either.\n\nThe product is the combination of services, infrastructure, environment config, secrets, and runtime behavior that make up the full system.\n\nAspire helps you model *that*.\n\nAnd once it’s a model, it’s something you can validate, mutate, generate, deploy, and reason about.\n\n# Aspire is not just for microservices\n\nOne common misconception is that Aspire is only for microservices. The truth is: Aspire is for **distributed applications** — whether they consist of five services or just two.\n\nIt’s often mentioned in microservice contexts because those systems make the problems more visible: service sprawl, connection complexity, config drift. But those same problems exist in many other kinds of apps too — especially when you introduce a frontend, a backend, a queue, a database, and an external API.\n\nAspire helps you glue those pieces together, no matter how many of them there are.\n\n# What’s Next\n\nAspire doesn’t stop at Docker Compose and container registries. We’re working on deeper integration paths, including:\n\n- **Terraform and Pulumi publishers** to provision infrastructure alongside application modeling.\n- **Reusable CI/CD pipeline generation**, so teams can go from model to deployment without manually wiring up every step.\n\nThe goal is to turn Aspire into a reliable foundation for shipping distributed apps — from hobby projects to production systems.\n\n# Try it out\n\nIf you’ve been looking at Aspire and wondering where it fits, try starting from the outside in. Don’t ask how Aspire fits into your app — ask how your app fits into Aspire.\n\nBecause at the end of the day, the thing you’re shipping isn’t a project — it’s a system.\n\n[Aspire](/tag/aspire?source=post_page-----48d67286a665---------------------------------------)\n\n[Cloud Native](/tag/cloud-native?source=post_page-----48d67286a665---------------------------------------)\n\n[Software Development](/tag/software-development?source=post_page-----48d67286a665---------------------------------------)\n\n[Web Development](/tag/web-development?source=post_page-----48d67286a665---------------------------------------)\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:96:96/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---post_author_info--48d67286a665---------------------------------------)\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:128:128/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---post_author_info--48d67286a665---------------------------------------)\n\n[## Written by David Fowler](/@davidfowl?source=post_page---post_author_info--48d67286a665---------------------------------------) [4.5K followers](/@davidfowl/followers?source=post_page---post_author_info--48d67286a665---------------------------------------)\n\n·[132 following](/@davidfowl/following?source=post_page---post_author_info--48d67286a665---------------------------------------)\n\nDistinguished Engineer at Microsoft\n\n## Responses (2)\n\nhttps://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page---post_responses--48d67286a665---------------------------------------\n\n[Help](https://help.medium.com/hc/en-us?source=post_page-----48d67286a665---------------------------------------)\n\n[Status](https://medium.statuspage.io/?source=post_page-----48d67286a665---------------------------------------)\n\n[About](/about?autoplay=1&amp;source=post_page-----48d67286a665---------------------------------------)\n\n[Careers](/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----48d67286a665---------------------------------------)\n\n[Press](mailto:pressinquiries@medium.com)\n\n[Blog](https://blog.medium.com/?source=post_page-----48d67286a665---------------------------------------)\n\n[Privacy](https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----48d67286a665---------------------------------------)\n\n[Rules](https://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page-----48d67286a665---------------------------------------)\n\n[Terms](https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----48d67286a665---------------------------------------)\n\n[Text to speech](https://speechify.com/medium?source=post_page-----48d67286a665---------------------------------------)",
  "FeedLevelAuthor": "yourfriends@medium.com",
  "FeedUrl": "https://medium.com/feed/@davidfowl"
}
