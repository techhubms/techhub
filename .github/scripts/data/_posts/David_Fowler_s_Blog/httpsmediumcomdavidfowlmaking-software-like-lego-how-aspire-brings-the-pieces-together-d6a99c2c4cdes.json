{
  "Title": "Making Software Like LEGO: How Aspire Brings the Pieces Together",
  "FeedName": "David Fowler's Blog",
  "OutputDir": "_posts",
  "Tags": [
    "aspire",
    "cloud-computing",
    "software-development",
    "web-development"
  ],
  "ProcessedDate": "2025-08-05 17:20:07",
  "Description": "Recently [Andrej Karpathy posted](https://twitter.com/karpathy/status/1763415743919069462) about the reality of building web apps in 2025. His point was simple: it’s not really about writing code anymore. It’s about integration. Plumbing. Orchestration. Config.\n\n> *“It’s not even code, it’s… configurations, plumbing, orchestration, workflows, best practices.”*\n\nAnd he’s right.\n\nTo build even a basic web app today, you need to stitch together:\n\n- Frontend + backend frameworks\n- Hosting (CDN, HTTPS, domains)\n- A database\n- Auth\n- Blob storage\n- Email\n- Payments\n- Background jobs\n- Monitoring\n- CI/CD\n- Secrets\n- And on and on…\n\nIt’s not just overwhelming — it’s fragile. Every connection point between systems is a potential failure. Every “simple integration” hides config files, CLI flags, environment variables, and docs scattered across five browser tabs.\n\nEven if you know what to do, *getting all the parts to work together* is painful. Especially once you step outside the boundaries of the getting-started guide.\n\n### Why vertical platforms aren’t enough\n\nTo make this easier, many companies have built **vertical platforms** — opinionated, end-to-end experiences that hide the plumbing.\n\nThink Firebase, Heroku, Vercel, or even larger internal developer platforms at big companies. These platforms aim to simplify the full stack: you write some code, push a button, and everything just works.\n\nAnd that approach works — **until it doesn’t.**\n\nThe trade-off is composability. Once you need to do something the platform didn’t anticipate, you’re stuck. There’s no escape hatch. You can’t easily swap out the database or customize the deployment pipeline or hook in your company’s internal tools.\n\nThis is, in my opinion, why **Kubernetes** ended up winning the container orchestration wars. It wasn’t the easiest option. But it was *composable*. It gave teams a system they could extend, adapt, and build on.\n\nAspire is taking that same approach — not to containers, but to the entire application lifecycle.\n\n### A system for composition, not just control\n\nAspire gives you a model for expressing your entire application — not just the code, but everything around it. Every service, every dependency, every piece of infrastructure your app touches.\n\nThe building blocks of this model are **resources**. Each resource describes a component of your system: an executable, a container, a cloud service, a queue, a database, whatever.\n\nThese resources expose clear contracts — how they’re configured, what they connect to, how they get executed or deployed.\n\nAnd then we wire them together.\n\nIn Aspire, connecting a web app to a database isn’t “set this env var and hope it works.” It’s:\n\n``` builder.AddProject(\"web\") .WithReference(postgres); ```\n\nThat reference isn’t just a symbolic link — it’s a contract. The system knows what it means. And when you run or publish the app, Aspire ensures everything gets wired up correctly: secrets, connection strings, port mappings, volumes, and all the platform-specific details that usually live in YAML or documentation.\n\n### Aspire is a system of interlocking resources\n\nThink of Aspire less like a vertical stack, and more like a **set of interlocking pieces**.\n\n- You want to define how your organization uses Redis? Create a **hosting integration**.\n- You want to wrap email sending with observability and retries? Model it as a **resource**.\n- You want to plug in your platform’s database provisioning? Write a custom publisher.\n\nWe’re not trying to hide complexity. We’re trying to **make it composable**. So you can build like you do with LEGO — snap things together and know they’ll fit, even if they come from different vendors or teams.\n\nAspire isn’t a platform with batteries included. It’s a **platform model with extension points**.\n\n### A platform for developers and AI\n\nKarpathy also made another important point:\n\n> *“A lot of glory will go to whoever figures out how to make it accessible and ‘just work’ out of the box, for both humans and, increasingly and especially, AIs.”*\n\nWe think Aspire is that platform.\n\nIt gives humans a system with strong contracts, discoverability, and reusable building blocks.\n\nAnd it gives AIs a structured, inspectable model of the application they’re helping you build.\n\nInstead of asking an LLM “how do I connect a backend to a PostgreSQL container,” you can ask “what resources are defined in this app model?” or “can you help me extend this hosting integration?”\n\nThat’s a fundamentally different experience. It moves us past plumbing and back to design.\n\nThe complexity of modern web apps isn’t in the features — it’s in the connections.\n\nWe’ve spent years building better component models for code. Aspire is about bringing that same rigor and reusability to everything else: infrastructure, configuration, orchestration.\n\nOther platforms offer ease — but at the cost of flexibility.\n\nAspire is aiming for something bigger: a composable, extensible system you can grow with. A platform where your app is built from resources that *snap together*, not duct-taped scripts and guesswork.\n\nThis is how we scale software in 2025 — not just by hiding the complexity, but by modeling it.\n\n![](https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d6a99c2c4cde)",
  "Author": "David Fowler",
  "Link": "https://medium.com/@davidfowl/making-software-like-lego-how-aspire-brings-the-pieces-together-d6a99c2c4cde?source=rss-8163234c98f0------2",
  "PubDate": "2025-03-30T18:44:09+00:00",
  "EnhancedContent": "[Sitemap](/sitemap/sitemap.xml)\n\n[Open in app](https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd6a99c2c4cde&amp;%7Efeature=LoOpenInAppButton&amp;%7Echannel=ShowPostUnderUser&amp;%7Estage=mobileNavBar&amp;source=post_page---top_nav_layout_nav-----------------------------------------) [Sign in](/m/signin?operation=login&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmaking-software-like-lego-how-aspire-brings-the-pieces-together-d6a99c2c4cde&amp;source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[Medium Logo](/?source=post_page---top_nav_layout_nav-----------------------------------------)\n\n[Write](/m/signin?operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2Fnew-story&amp;source=---top_nav_layout_nav-----------------------new_post_topnav------------------)\n\n/search?source=post_page---top_nav_layout_nav-----------------------------------------\n\n[Sign in](/m/signin?operation=login&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmaking-software-like-lego-how-aspire-brings-the-pieces-together-d6a99c2c4cde&amp;source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n# **Making Software Like LEGO: How Aspire Brings the Pieces Together**\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:64:64/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---byline--d6a99c2c4cde---------------------------------------)\n\n[David Fowler](/@davidfowl?source=post_page---byline--d6a99c2c4cde---------------------------------------)\n\n4 min read ·\n\nMar 30, 2025\n\n/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Fd6a99c2c4cde&amp;operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmaking-software-like-lego-how-aspire-brings-the-pieces-together-d6a99c2c4cde&amp;user=David+Fowler&amp;userId=8163234c98f0&amp;source=---header_actions--d6a99c2c4cde---------------------clap_footer------------------\n\n--\n\n/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd6a99c2c4cde&amp;operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fmaking-software-like-lego-how-aspire-brings-the-pieces-together-d6a99c2c4cde&amp;source=---header_actions--d6a99c2c4cde---------------------bookmark_footer------------------\n\nRecently [Andrej Karpathy posted](https://twitter.com/karpathy/status/1763415743919069462) about the reality of building web apps in 2025. His point was simple: it’s not really about writing code anymore. It’s about integration. Plumbing. Orchestration. Config.\n\n>\n> *“It’s not even code, it’s… configurations, plumbing, orchestration, workflows, best practices.”*\n>\n\nAnd he’s right.\n\nTo build even a basic web app today, you need to stitch together:\n\n- Frontend + backend frameworks\n- Hosting (CDN, HTTPS, domains)\n- A database\n- Auth\n- Blob storage\n- Email\n- Payments\n- Background jobs\n- Monitoring\n- CI/CD\n- Secrets\n- And on and on…\n\nIt’s not just overwhelming — it’s fragile. Every connection point between systems is a potential failure. Every “simple integration” hides config files, CLI flags, environment variables, and docs scattered across five browser tabs.\n\nEven if you know what to do, *getting all the parts to work together* is painful. Especially once you step outside the boundaries of the getting-started guide.\n\n# Why vertical platforms aren’t enough\n\nTo make this easier, many companies have built **vertical platforms** — opinionated, end-to-end experiences that hide the plumbing.\n\nThink Firebase, Heroku, Vercel, or even larger internal developer platforms at big companies. These platforms aim to simplify the full stack: you write some code, push a button, and everything just works.\n\nAnd that approach works — **until it doesn’t.**\n\nThe trade-off is composability. Once you need to do something the platform didn’t anticipate, you’re stuck. There’s no escape hatch. You can’t easily swap out the database or customize the deployment pipeline or hook in your company’s internal tools.\n\nThis is, in my opinion, why **Kubernetes** ended up winning the container orchestration wars. It wasn’t the easiest option. But it was *composable*. It gave teams a system they could extend, adapt, and build on.\n\nAspire is taking that same approach — not to containers, but to the entire application lifecycle.\n\n# A system for composition, not just control\n\nAspire gives you a model for expressing your entire application — not just the code, but everything around it. Every service, every dependency, every piece of infrastructure your app touches.\n\nThe building blocks of this model are **resources**. Each resource describes a component of your system: an executable, a container, a cloud service, a queue, a database, whatever.\n\nThese resources expose clear contracts — how they’re configured, what they connect to, how they get executed or deployed.\n\nAnd then we wire them together.\n\nIn Aspire, connecting a web app to a database isn’t “set this env var and hope it works.” It’s:\n\n``` builder.AddProject(\"web\") .WithReference(postgres); ```\n\nThat reference isn’t just a symbolic link — it’s a contract. The system knows what it means. And when you run or publish the app, Aspire ensures everything gets wired up correctly: secrets, connection strings, port mappings, volumes, and all the platform-specific details that usually live in YAML or documentation.\n\n# Aspire is a system of interlocking resources\n\nThink of Aspire less like a vertical stack, and more like a **set of interlocking pieces**.\n\n- You want to define how your organization uses Redis? Create a **hosting integration**.\n- You want to wrap email sending with observability and retries? Model it as a **resource**.\n- You want to plug in your platform’s database provisioning? Write a custom publisher.\n\nWe’re not trying to hide complexity. We’re trying to **make it composable**. So you can build like you do with LEGO — snap things together and know they’ll fit, even if they come from different vendors or teams.\n\nAspire isn’t a platform with batteries included. It’s a **platform model with extension points**.\n\n# A platform for developers and AI\n\nKarpathy also made another important point:\n\n>\n> *“A lot of glory will go to whoever figures out how to make it accessible and ‘just work’ out of the box, for both humans and, increasingly and especially, AIs.”*\n>\n\nWe think Aspire is that platform.\n\nIt gives humans a system with strong contracts, discoverability, and reusable building blocks.\n\nAnd it gives AIs a structured, inspectable model of the application they’re helping you build.\n\nInstead of asking an LLM “how do I connect a backend to a PostgreSQL container,” you can ask “what resources are defined in this app model?” or “can you help me extend this hosting integration?”\n\nThat’s a fundamentally different experience. It moves us past plumbing and back to design.\n\nThe complexity of modern web apps isn’t in the features — it’s in the connections.\n\nWe’ve spent years building better component models for code. Aspire is about bringing that same rigor and reusability to everything else: infrastructure, configuration, orchestration.\n\nOther platforms offer ease — but at the cost of flexibility.\n\nAspire is aiming for something bigger: a composable, extensible system you can grow with. A platform where your app is built from resources that *snap together*, not duct-taped scripts and guesswork.\n\nThis is how we scale software in 2025 — not just by hiding the complexity, but by modeling it.\n\n[Web Development](/tag/web-development?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Cloud Computing](/tag/cloud-computing?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Software Development](/tag/software-development?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Aspire](/tag/aspire?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:96:96/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---post_author_info--d6a99c2c4cde---------------------------------------)\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:128:128/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---post_author_info--d6a99c2c4cde---------------------------------------)\n\n[## Written by David Fowler](/@davidfowl?source=post_page---post_author_info--d6a99c2c4cde---------------------------------------) [4.5K followers](/@davidfowl/followers?source=post_page---post_author_info--d6a99c2c4cde---------------------------------------)\n\n·[132 following](/@davidfowl/following?source=post_page---post_author_info--d6a99c2c4cde---------------------------------------)\n\nDistinguished Engineer at Microsoft\n\n## Responses (2)\n\nhttps://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page---post_responses--d6a99c2c4cde---------------------------------------\n\n[Help](https://help.medium.com/hc/en-us?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Status](https://medium.statuspage.io/?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[About](/about?autoplay=1&amp;source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Careers](/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Press](mailto:pressinquiries@medium.com)\n\n[Blog](https://blog.medium.com/?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Privacy](https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Rules](https://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Terms](https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d6a99c2c4cde---------------------------------------)\n\n[Text to speech](https://speechify.com/medium?source=post_page-----d6a99c2c4cde---------------------------------------)",
  "FeedLevelAuthor": "yourfriends@medium.com",
  "FeedUrl": "https://medium.com/feed/@davidfowl"
}
