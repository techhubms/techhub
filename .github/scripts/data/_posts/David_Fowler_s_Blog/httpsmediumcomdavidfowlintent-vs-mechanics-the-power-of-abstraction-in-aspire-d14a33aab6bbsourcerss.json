{
  "Title": "Intent vs. Mechanics: The Power of Abstraction in Aspire",
  "FeedName": "David Fowler's Blog",
  "OutputDir": "_posts",
  "Tags": [
    "aspire",
    "azure",
    "cloud-development",
    "software-development"
  ],
  "ProcessedDate": "2025-08-05 17:20:07",
  "Description": "One of the most powerful ideas in software is **abstraction** — hiding implementation details so you can focus on *intent*. But getting abstraction right is an art. Too low, and you’re buried in boilerplate. Too high, and it becomes magic you can’t control.\n\nAspire helps you express intent — the *what* — while deferring or adapting the *how* depending on where your app runs. That distinction matters more than you might think.\n\nLet’s look at a concrete example.\n\n### Same Intent, Different Environments\n\n``` var builder = DistributedApplication.CreateBuilder(args);var kv = builder.AddAzureKeyVault(\"kv\");builder.AddProject(\"apiservice\") .WithExternalHttpEndpoints() .WithEnvironment(\"TOP_SECRET\", kv.Resource.GetSecret(\"secret\"));builder.Build().Run(); ```\n\nThis line says exactly what you mean:\n\n> *“My app needs a secret from Azure Key Vault called* *secret, and it should be available in the* *TOP\\_SECRET environment variable.”*\n\nYou didn’t say:\n\n- How to authenticate\n- What roles are needed\n- Whether to inject the value directly or as a reference\n- How to deal with networks, private endpoints, or firewall rules\n\nAspire handles those mechanics — automatically adapting to each environment.\n\nLet’s see what that means.\n\n### Local Development\n\nIn local dev, your project runs on your machine, but the Key Vault might live in Azure. Aspire uses the Azure SDK and your local developer identity (via DefaultAzureCredential) to access the secret at runtime. The value is resolved by the Key Vault client and injected into the process before startup.\n\nNo Key Vault references, no deployment needed — just a clean dev loop that works.\n\n### Azure Container Apps\n\nIn ACA, secrets can be referenced by name directly from Key Vault without Aspire writing them into the container image. Aspire emits the correct Bicep for this, like:\n\n``` // Trimmed for brevityparam kv_outputs_name stringresource kv_outputs_name_kv 'Microsoft.KeyVault/vaults@2023-07-01' existing = { name: kv_outputs_name}resource kv_outputs_name_kv_secret 'Microsoft.KeyVault/vaults/secrets@2023-07-01' existing = { name: 'secret' parent: kv_outputs_name_kv}resource apiservice 'Microsoft.App/containerApps@2024-03-01' = { name: 'apiservice' location: location properties: { configuration: { secrets: [ { name: 'top-secret' identity: apiservice_identity_outputs_id keyVaultUrl: kv_outputs_name_kv_secret.properties.secretUri } ] // Trimmed for brevity } environmentId: aca_outputs_azure_container_apps_environment_id template: { containers: [ { image: apiservice_containerimage name: 'apiservice' // Trimmed for brevity env: [ { name: 'TOP_SECRET' secretRef: 'top-secret' } { name: 'AZURE_CLIENT_ID' value: apiservice_identity_outputs_clientid } ] } ] scale: { minReplicas: 1 } } } identity: { type: 'UserAssigned' userAssignedIdentities: { '${apiservice_identity_outputs_id}': { } '${aca_outputs_azure_container_registry_managed_identity_id}': { } } }} ```\n\nThis uses Key Vault secret references at the platform level — **not the app level** — to inject the secret securely without your code ever seeing the raw value.\n\n### Azure App Service\n\nApp Services has a different format for Key Vault secret references. Aspire understands that difference too:\n\n``` // Trimmed for brevityparam kv_outputs_name stringresource kv_outputs_name_kv 'Microsoft.KeyVault/vaults@2023-07-01' existing = { name: kv_outputs_name}resource kv_outputs_name_kv_secret 'Microsoft.KeyVault/vaults/secrets@2023-07-01' existing = { name: 'secret' parent: kv_outputs_name_kv}resource webapp 'Microsoft.Web/sites@2024-04-01' = { name: take('${toLower('apiservice')}-${uniqueString(resourceGroup().id)}', 60) location: location properties: { serverFarmId: appsvc_outputs_planid keyVaultReferenceIdentity: apiservice_identity_outputs_id siteConfig: { linuxFxVersion: 'DOCKER|${apiservice_containerimage}' acrUseManagedIdentityCreds: true acrUserManagedIdentityID: appsvc_outputs_azure_container_registry_managed_identity_client_id appSettings: [ // Trimmed for brevity { name: 'TOP_SECRET' value: '@Microsoft.KeyVault(SecretUri=${kv_outputs_name_kv_secret.properties.secretUri})' } { name: 'AZURE_CLIENT_ID' value: apiservice_identity_outputs_clientid } ] } } identity: { type: 'UserAssigned' userAssignedIdentities: { '${appsvc_outputs_azure_container_registry_managed_identity_id}': { } '${apiservice_identity_outputs_id}': { } } }} ```\n\nSame intent. Different implementation. Zero code changes.\n\n### What About Docker Compose?\n\nCompose doesn’t support key vault secret references natively, so Aspire treats it as an external variable. This lets you test locally while still describing secrets declaratively.\n\n``` services: apiservice: image: \"${APISERVICE_IMAGE}\" environment: HTTP_PORTS: \"8000\" TOP_SECRET: \"${KV_SECRETS_SECRET}\" ports: - \"8001:8000\" - \"8003:8002\" networks: - \"aspire\"networks: aspire: driver: \"bridge\" ```\n\n### Why This Matters\n\nThis is just one example. There are dozens of these micro-decisions:\n\n- Should I use managed identity or a secret?\n- Should I inline the secret or use a platform reference?\n- How do I control access to the Key Vault?\n- Should I restrict network access to the vault?\n\nIn most systems, those decisions *leak* into your application logic or derail your flow.\n\nAspire lets you defer them. You can start with safe defaults and layer in policies or overrides later, when you’re ready. And because it’s all code, you can apply those rules globally or per-resource.\n\n### Code as System Definition\n\nThis is one of Aspire’s superpowers: **using code to define not just apps, but infrastructure and environment wiring too**. That lets you:\n\n- Express intent cleanly\n- Evolve mechanics over time\n- Support different environments with the same model\n\nThe result? You move faster. You prototype without regret. And your system stays adaptable.\n\nThis is what it means to raise the level of abstraction *just enough*. Aspire doesn’t hide the world — it gives you a clear map of it, with knobs you can turn when you need to.\n\nThis example is just the tip of the iceberg.\n\nAnd that’s the point.\n\n![](https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d14a33aab6bb)",
  "Author": "David Fowler",
  "Link": "https://medium.com/@davidfowl/intent-vs-mechanics-the-power-of-abstraction-in-aspire-d14a33aab6bb?source=rss-8163234c98f0------2",
  "PubDate": "2025-05-11T19:33:22+00:00",
  "EnhancedContent": "[Sitemap](/sitemap/sitemap.xml)\n\n[Open in app](https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd14a33aab6bb&amp;%7Efeature=LoOpenInAppButton&amp;%7Echannel=ShowPostUnderUser&amp;%7Estage=mobileNavBar&amp;source=post_page---top_nav_layout_nav-----------------------------------------) [Sign in](/m/signin?operation=login&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fintent-vs-mechanics-the-power-of-abstraction-in-aspire-d14a33aab6bb&amp;source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[Medium Logo](/?source=post_page---top_nav_layout_nav-----------------------------------------)\n\n[Write](/m/signin?operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2Fnew-story&amp;source=---top_nav_layout_nav-----------------------new_post_topnav------------------)\n\n/search?source=post_page---top_nav_layout_nav-----------------------------------------\n\n[Sign in](/m/signin?operation=login&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fintent-vs-mechanics-the-power-of-abstraction-in-aspire-d14a33aab6bb&amp;source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n# Intent vs. Mechanics: The Power of Abstraction in Aspire\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:64:64/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---byline--d14a33aab6bb---------------------------------------)\n\n[David Fowler](/@davidfowl?source=post_page---byline--d14a33aab6bb---------------------------------------)\n\n3 min read ·\n\nMay 11, 2025\n\n/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Fd14a33aab6bb&amp;operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fintent-vs-mechanics-the-power-of-abstraction-in-aspire-d14a33aab6bb&amp;user=David+Fowler&amp;userId=8163234c98f0&amp;source=---header_actions--d14a33aab6bb---------------------clap_footer------------------\n\n--\n\n/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd14a33aab6bb&amp;operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2F%40davidfowl%2Fintent-vs-mechanics-the-power-of-abstraction-in-aspire-d14a33aab6bb&amp;source=---header_actions--d14a33aab6bb---------------------bookmark_footer------------------\n\nOne of the most powerful ideas in software is **abstraction** — hiding implementation details so you can focus on *intent*. But getting abstraction right is an art. Too low, and you’re buried in boilerplate. Too high, and it becomes magic you can’t control.\n\nAspire helps you express intent — the *what* — while deferring or adapting the *how* depending on where your app runs. That distinction matters more than you might think.\n\nLet’s look at a concrete example.\n\n# Same Intent, Different Environments\n\n``` var builder = DistributedApplication.CreateBuilder(args);var kv = builder.AddAzureKeyVault(\"kv\");builder.AddProject<Projects.Api>(\"apiservice\") .WithExternalHttpEndpoints() .WithEnvironment(\"TOP_SECRET\", kv.Resource.GetSecret(\"secret\"));builder.Build().Run(); ```\n\nThis line says exactly what you mean:\n\n>\n> *“My app needs a secret from Azure Key Vault called* `secret`\n> *, and it should be available in the* `TOP_SECRET`\n> *environment variable.”*\n>\n\nYou didn’t say:\n\n- How to authenticate\n- What roles are needed\n- Whether to inject the value directly or as a reference\n- How to deal with networks, private endpoints, or firewall rules\n\nAspire handles those mechanics — automatically adapting to each environment.\n\nLet’s see what that means.\n\n# Local Development\n\nIn local dev, your project runs on your machine, but the Key Vault might live in Azure. Aspire uses the Azure SDK and your local developer identity (via `DefaultAzureCredential` ) to access the secret at runtime. The value is resolved by the Key Vault client and injected into the process before startup.\n\nNo Key Vault references, no deployment needed — just a clean dev loop that works.\n\n# Azure Container Apps\n\nIn ACA, secrets can be referenced by name directly from Key Vault without Aspire writing them into the container image. Aspire emits the correct Bicep for this, like:\n\n``` // Trimmed for brevityparam kv_outputs_name stringresource kv_outputs_name_kv 'Microsoft.KeyVault/vaults@2023-07-01' existing = { name: kv_outputs_name}resource kv_outputs_name_kv_secret 'Microsoft.KeyVault/vaults/secrets@2023-07-01' existing = { name: 'secret' parent: kv_outputs_name_kv}resource apiservice 'Microsoft.App/containerApps@2024-03-01' = { name: 'apiservice' location: location properties: { configuration: { secrets: [ { name: 'top-secret' identity: apiservice_identity_outputs_id keyVaultUrl: kv_outputs_name_kv_secret.properties.secretUri } ] // Trimmed for brevity } environmentId: aca_outputs_azure_container_apps_environment_id template: { containers: [ { image: apiservice_containerimage name: 'apiservice' // Trimmed for brevity env: [ { name: 'TOP_SECRET' secretRef: 'top-secret' } { name: 'AZURE_CLIENT_ID' value: apiservice_identity_outputs_clientid } ] } ] scale: { minReplicas: 1 } } } identity: { type: 'UserAssigned' userAssignedIdentities: { '${apiservice_identity_outputs_id}': { } '${aca_outputs_azure_container_registry_managed_identity_id}': { } } }} ```\n\nThis uses Key Vault secret references at the platform level — **not the app level** — to inject the secret securely without your code ever seeing the raw value.\n\n# Azure App Service\n\nApp Services has a different format for Key Vault secret references. Aspire understands that difference too:\n\n``` // Trimmed for brevityparam kv_outputs_name stringresource kv_outputs_name_kv 'Microsoft.KeyVault/vaults@2023-07-01' existing = { name: kv_outputs_name}resource kv_outputs_name_kv_secret 'Microsoft.KeyVault/vaults/secrets@2023-07-01' existing = { name: 'secret' parent: kv_outputs_name_kv}resource webapp 'Microsoft.Web/sites@2024-04-01' = { name: take('${toLower('apiservice')}-${uniqueString(resourceGroup().id)}', 60) location: location properties: { serverFarmId: appsvc_outputs_planid keyVaultReferenceIdentity: apiservice_identity_outputs_id siteConfig: { linuxFxVersion: 'DOCKER|${apiservice_containerimage}' acrUseManagedIdentityCreds: true acrUserManagedIdentityID: appsvc_outputs_azure_container_registry_managed_identity_client_id appSettings: [ // Trimmed for brevity { name: 'TOP_SECRET' value: '@Microsoft.KeyVault(SecretUri=${kv_outputs_name_kv_secret.properties.secretUri})' } { name: 'AZURE_CLIENT_ID' value: apiservice_identity_outputs_clientid } ] } } identity: { type: 'UserAssigned' userAssignedIdentities: { '${appsvc_outputs_azure_container_registry_managed_identity_id}': { } '${apiservice_identity_outputs_id}': { } } }} ```\n\nSame intent. Different implementation. Zero code changes.\n\n# What About Docker Compose?\n\nCompose doesn’t support key vault secret references natively, so Aspire treats it as an external variable. This lets you test locally while still describing secrets declaratively.\n\n``` services: apiservice: image: \"${APISERVICE_IMAGE}\" environment: HTTP_PORTS: \"8000\" TOP_SECRET: \"${KV_SECRETS_SECRET}\" ports: - \"8001:8000\" - \"8003:8002\" networks: - \"aspire\"networks: aspire: driver: \"bridge\" ```\n\n# Why This Matters\n\nThis is just one example. There are dozens of these micro-decisions:\n\n- Should I use managed identity or a secret?\n- Should I inline the secret or use a platform reference?\n- How do I control access to the Key Vault?\n- Should I restrict network access to the vault?\n\nIn most systems, those decisions *leak* into your application logic or derail your flow.\n\nAspire lets you defer them. You can start with safe defaults and layer in policies or overrides later, when you’re ready. And because it’s all code, you can apply those rules globally or per-resource.\n\n# Code as System Definition\n\nThis is one of Aspire’s superpowers: **using code to define not just apps, but infrastructure and environment wiring too**. That lets you:\n\n- Express intent cleanly\n- Evolve mechanics over time\n- Support different environments with the same model\n\nThe result? You move faster. You prototype without regret. And your system stays adaptable.\n\nThis is what it means to raise the level of abstraction *just enough*. Aspire doesn’t hide the world — it gives you a clear map of it, with knobs you can turn when you need to.\n\nThis example is just the tip of the iceberg.\n\nAnd that’s the point.\n\n[Software Development](/tag/software-development?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Cloud Development](/tag/cloud-development?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Azure](/tag/azure?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Aspire](/tag/aspire?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:96:96/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---post_author_info--d14a33aab6bb---------------------------------------)\n\n[!\\[David Fowler\\](https://miro.medium.com/v2/resize:fill:128:128/1*xIMgAFfe7TtYOd2L_Mrrgw.jpeg)](/@davidfowl?source=post_page---post_author_info--d14a33aab6bb---------------------------------------)\n\n[## Written by David Fowler](/@davidfowl?source=post_page---post_author_info--d14a33aab6bb---------------------------------------) [4.5K followers](/@davidfowl/followers?source=post_page---post_author_info--d14a33aab6bb---------------------------------------)\n\n·[132 following](/@davidfowl/following?source=post_page---post_author_info--d14a33aab6bb---------------------------------------)\n\nDistinguished Engineer at Microsoft\n\n## No responses yet\n\nhttps://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page---post_responses--d14a33aab6bb---------------------------------------\n\n[Help](https://help.medium.com/hc/en-us?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Status](https://medium.statuspage.io/?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[About](/about?autoplay=1&amp;source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Careers](/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Press](mailto:pressinquiries@medium.com)\n\n[Blog](https://blog.medium.com/?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Privacy](https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Rules](https://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Terms](https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d14a33aab6bb---------------------------------------)\n\n[Text to speech](https://speechify.com/medium?source=post_page-----d14a33aab6bb---------------------------------------)",
  "FeedLevelAuthor": "yourfriends@medium.com",
  "FeedUrl": "https://medium.com/feed/@davidfowl"
}
