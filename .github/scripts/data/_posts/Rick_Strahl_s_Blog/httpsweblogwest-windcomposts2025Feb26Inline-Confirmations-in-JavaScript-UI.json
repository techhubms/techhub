{
  "Tags": [
    "ASP.NET",
    "Html",
    "JavaScript"
  ],
  "OutputDir": "_posts",
  "FeedLevelAuthor": "Rick Strahl's Web Log",
  "ProcessedDate": "2025-08-05 14:25:42",
  "FeedUrl": "https://feeds.feedburner.com/rickstrahl",
  "Title": "Inline Confirmations in JavaScript UI",
  "Description": "Confirmation dialogs or modal popups can be annoying in HTML applications. What if you could instead use an inline UI to confirm an operation? In this post I describe a simple way you can use an inline UI to confirm an operation that can be easily implemented with a few lines of code and a couple of binding directives.",
  "Link": "https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI",
  "FeedName": "Rick Strahl's Blog",
  "Author": "Rick Strahl",
  "EnhancedContent": "![](/images/HeroImages/RickHero18.jpg) ![](/images/rick175x175.jpg)\n\nhttps://twitter.com/rickstrahl https://feeds.feedburner.com/rickstrahl\n\n[Contact](https://west-wind.com/contact/)   • [Articles](https://west-wind.com/articles.aspx)   • [Products](https://store.west-wind.com)   • [Support](https://support.west-wind.com)   • [Advertise](https://weblog.west-wind.com/advertise)\n\nSponsored by:\n\n[!\\[\\](https://websurge.west-wind.com/images/WebSurgeLogo.png) **West Wind WebSurge**](https://websurge.west-wind.com?utm_campaign=westwind-weblog-sponsored)\n- Rest Client and Http Load Testing for Windows\nhttps://websurge.west-wind.com?utm_campaign=westwind-weblog-sponsored\n\n[advertise here](/advertise)\n\nShare on:\n\nhttps://twitter.com/intent/tweet?url=https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI&amp;text=Inline%20Confirmations%20in%20JavaScript%20UI&amp;via=RickStrahl https://www.facebook.com/sharer/sharer.php?u=https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI&amp;t=Inline%20Confirmations%20in%20JavaScript%20UI http://www.reddit.com/submit?url=https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI&amp;title=Inline%20Confirmations%20in%20JavaScript%20UI\n\nFebruary 26, 2025 • from Maui, Hawaii\n\n•   2 comments\n\n:P\n\nOn this page:\n\n[Edit this Post](https://github.com/RickStrahl/BlogPosts/blob/master/2025-02/Inline-Confirmations-in-JavaScript-UI/InlineDeletesInJavascriptUi.md)\n\n![Post Bannner](https://weblog.west-wind.com/images/2025/Inline-Confirmations-in-JavaScript-UI/DeleteUI.jpg)\n\nConfirmation dialogs or modal popups can be annoying in HTML applications. What if you could instead use an inline UI to confirm an operation? In this post I describe a simple way you can use an inline UI to confirm an operation that can be easily implemented with a few lines of code and a couple of binding directives.\n\nI recently ran into an app that was using a nice and simple UI to handle confirmation of deletions by using a dual interface for the confirmation prompt - a button - to both start and confirm a delete operation. I've seen this in passing in the past, but today I was actually working on some similar code and I went ahead implemented it. It's a surprisingly simple solution both in terms of the UI interactivity and what it takes to implement.\n\n[!\\[\\](/images/sponsors/banner-example.png?v=1.2)](https://markdownmonster.west-wind.com?ut=weblog)\n\n## My Scenario\n\nI've been working on an application that deals with image uploads that need to be managed by uploading and potentially deleting images. For deleting images, I applied the inline confirmation button approach instead of using `confirm()` dialog or some sort of modal popup which is always a pain in the ass.\n\nWhat I ended up with is this:\n\n![Inline Button Confirmation UI](https://weblog.west-wind.com/images/2025/Inline-Confirmations-in-JavaScript-UI/DeleteUI.gif)\n\n**Figure 1** - An inline confirmation prompt to delete files is quick, slick and unobtrusive.\n\nYou can play around with a [simplified CodePen version](https://codepen.io/rstrahl/pen/yyLVweL) of the above here:\n\n[Inline Delete Button Confirmation CodePen](https://codepen.io/rstrahl/pen/yyLVweL)\n\nI love the simplicity of this approach and the fact that you don't have to click around, but can simply click and click again to confirm. It's a much smoother UI as opposed to a modal interface. On the downside, this simple button transformation UI doesn't leave room for a message, but that could be handled easily with a separately rendered UI widget that displays the confirm prompt along with a message.\n\nThe concept is simple enough - you click the button and then are prompted to confirm the operation - in this case deleting of the image. So rather than immediately deleting the image the button (or other confirmation UI) is updated. The delete operation is deferred and instead the first click triggers a state change that displays the confirmation UI. The click on the confirmation button then performs the actual operation.\n\nIf you wait too long - 5 seconds in this case - the button reverts back to it's original state.\n\n### Implementation with VueJs\n\nThe example in **Figure 1** uses VueJs in an embedded Vue component in the middle of an otherwise server rendered form. The image management component handles the upload, quantity adjustments and deletion of the images that are uploaded.\n\n### Html and VueJs expressions\n\nThe image component essentially has a list of images that are being displayed and rendered using Vue bindings. They are server rendered and then displayed in a loop, but that's an implementation detail in this particular hybrid page implementation.\n\nThe server side code that renders the list:\n\n```html @{ // C# Server Side Razor rendered client variables var scriptVars = new ScriptVariables { ClientObjectName = \"page\", UseCamelCase = true }; scriptVars.Add(\"imageList\", Model.Fundraiser.UploadedImages .Select(i=> new { i.Id, i.Notes, i.ContentType, i.Filename, i.Quantity, i.Approved, i.FundraiserId, i.Reviewed })); scriptVars.Add(\"fundraiserId\", Model.Fundraiser.Id); } <script> // this creates `page = { imageList: [], fundRaiserId: \"xxxxx\" }` // bound to the Vue model @scriptVars.ToHtmlString(); var vueData = {}; </script>\n\n```\n\nThe key items in the rendered output are the image loop container (a flexbox list), and the delete button as shown below:\n\n```html <div v-for=\"image in images\" :key=\"image.id\" class=\"flex-item\"> <img :src=\"...\" /> <div class=\"action-box\"> ... <!-- the Delete Button that doubles as a confirm propmpt --> <button type=button v-on:click=\"deleteImage(image)\" class=\"btn btn-sm float-end\" v-bind:class=\"{ 'btn-danger': image.deleteConfirm, 'btn-secondary': !image.deleteConfirm }\"> <i class=\"fad fa-trash-alt me-1 fa-beat\" ></i> <span v-if=\"!image.deleteConfirm\">Delete</span> <span v-if=\"image.deleteConfirm\">Confirm?</span> </button> </div> </div>\n\n```\n\nThe image list data contains a state field called `deleteConfirm` which by default is `false`\n- actually the server doesn't render it so initially it's missing.\n\nIf you look at the `<button>` you see that the `deleteConfirm` is used to dynamically style the button using the default secondary color if `false` or the danger color when `true` . Likewise the text is displayed as `Delete` or `Confirm` depending on the state of `deleteConfirm` . In effect, the single button is transformed in place based on the state of `deleteConfirm` .\n\nAs mentioned, you don't have to do this with a single button, but instead you could create two buttons or a button and some other widget and conditionally display one or the other for each state.\n\n> >\n> Note: The original data retrieved from the server doesn't have to contain the deleteConfirm. Due to JavaScript's handling of `null`\n> and truthiness the above expressions using the null conditional operation (ie. `image.deleteConfirm`\n> ) works as non-truthy value even when `deleteConfirm`\n> is not present.\n> >\n\n### JavaScript Code (VueJs)\n\nUsing a reactive framework like Vue, the code to toggle between the two modes is now almost trivial as it only needs to toggle the `image.deleteConfirm` prop:\n\n```js // image instance passed from Html deleteImage(image) { if (!image.deleteConfirm) { image.deleteConfirm = true; // now displays confirm UI setTimeout(()=> image.deleteConfirm = false, 5000); // clear in 5 secs return; }\n\n// ... delete the image here }\n\n```\n\nAnd that's just about it.\n\n### Server Controls or No Framework? No Problem!\n\nIf you'd rather not use some sort of reactive framework, you can also do this with plain HTML and few lines of Javascript code.\n\nThe following is a server submitted form with a Delete button:\n\n```html <button id=\"btnSubmitDelete\" class=\"btn btn-secondary mt-3\" type=\"button\"> <i class=\"fa fa-xmark-circle \"></i> Delete Fundraiser </button>\n\n<button name=\"btnSubmitDelete\" id=\"btnSubmitDeleteConfirm\" class=\"btn btn-danger mt-3 hidden\" type=\"submit\"> <i class=\"fad fa-trash-circle fa-beat\"></i> Are you sure? </button>\n\n<script> var el = document.getElementById(\"btnSubmitDelete\"); var el2 = document.getElementById(\"btnSubmitDeleteConfirm\");\n\nel.addEventListener(\"click\",(e)=> { el.classList.add(\"hidden\") el2.classList.remove(\"hidden\"); setTimeout(()=> { el2.classList.add(\"hidden\") el.classList.remove(\"hidden\"); }, 5000); }); </script>\n\n```\n\nThis code uses two swappable controls that show the desired state. Since this form submits, the original button is a client side `Button` , while the Confirm button is the actual `Submit` button. The Confirm button is initially hidden - here via `hidden` CSS class - and then made visible when the initial button is clicked. A few lines of JS code do trick of swapping the two controls to the desired state with the 6 second timeout reverting back to the original state.\n\nYou can use similar code for pure client side handling, but you need a second event handler to handle the Confirm click instead of submitting the form to the server.\n\n[!\\[\\](/images/sponsors/TheMastersOfDisaster-Display.png)](https://open.spotify.com/track/174gSk2IavDs7h8d715468)\n\n## Summary\n\nI really like this simple UI implementation as it's nice and unobtrusive in the user's work flow. You can avoid nasty `confirm()` dialogs, or having to code up some sort of modal confirmation box.\n\nAssuming you are using a reactive framework, the code for this is minimal as you can assign the value and update the UI conditionally. It's a bit more work if you don't use a reactive framework as you have to manually update each of the UI components - in that case it's probably easier to use two separate components that you can just toggle respectively.\n\nThe in-place implementation requires literally a single add-on property and a few binding attributes on the button that conditionally draw the button in the right mode. You take this a little further too, by actually creating a more complex inline UI that displays and hides the button instead. This might be useful if you have to display a message, rather than a simple `Confirm?` prompt I'm using here.\n\nI know I'll be using this approach in a lot more places in the future in my own apps...\n\n## Resources\n\n- [CodePen Example: Inline Delete Button Confirmation](https://codepen.io/rstrahl/pen/yyLVweL)\n\n### Other Posts you might also like\n\n- [Adding minimal OWIN Identity Authentication to an Existing ASP.NET MVC Application](https://weblog.west-wind.com/posts/2015/Apr/29/Adding-minimal-OWIN-Identity-Authentication-to-an-Existing-ASPNET-MVC-Application)\n- [Keeping Content Out of the Publish Folder for WebDeploy](https://weblog.west-wind.com/posts/2022/Aug/24/Keeping-Content-Out-of-the-Publish-Folder-for-WebDeploy)\n- [Map Physical Paths with an HttpContext.MapPath() Extension Method in ASP.NET](https://weblog.west-wind.com/posts/2023/Aug/15/Map-Physical-Paths-with-an-HttpContextMapPath-Extension-Method-in-ASPNET)\n- [Back to Basics: UTC and TimeZones in .NET Web Apps](https://weblog.west-wind.com/posts/2015/Feb/10/Back-to-Basics-UTC-and-TimeZones-in-NET-Web-Apps)\n\nShare on:\n\nhttps://twitter.com/intent/tweet?url=https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI&amp;text=Inline%20Confirmations%20in%20JavaScript%20UI&amp;via=RickStrahl\n\nhttps://www.facebook.com/sharer/sharer.php?u=https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI&amp;t=Inline%20Confirmations%20in%20JavaScript%20UI http://www.reddit.com/submit?url=https://weblog.west-wind.com/posts/2025/Feb/26/Inline-Confirmations-in-JavaScript-UI&amp;title=Inline%20Confirmations%20in%20JavaScript%20UI\n\n![Make Donation](/images/donation.png \"Find this content useful? Consider making a small donation.\")\n\nIs this content useful to you? **Consider making a small donation** to show your support.\n\nPosted in **[Html](/ShowPosts.aspx?Category=Html)  [JavaScript](/ShowPosts.aspx?Category=JavaScript)  [ASP.NET](/ShowPosts.aspx?Category=ASP.NET)**\n\n## The Voices of Reason\n\n![](https://www.gravatar.com/avatar.php?gravatar_id=3389260144de672a734882ab86275c2a&size=100&rating=R)\n\nAndy\n\nFebruary 28, 2025\n\n### # re: Inline Confirmations in JavaScript UI\n\nI like that. I like that a lot. Such a simple idea I'm surprised I haven't come across it before. I may try to add an animation to the confirm button to give an indication as to how long the user has left to confirm before it reverts state. First time I clicked it I wasn't sure how to un-set it, but yours is a great idea I'll try to run with (not something I often say when reading articles TBH!). Great work Rick.\n\n![](https://www.gravatar.com/avatar.php?gravatar_id=beb7fdd4bcd15e35472a96ab8182f034&size=100&rating=R)\n\n[Rick Strahl](https://west-wind.com)\n\nFebruary 28, 2025\n\n### # re: Inline Confirmations in JavaScript UI\n\nYup - that's why I posted it. I hadn't thought of this either before until I saw it in an app in practice.",
  "PubDate": "2025-02-27T09:02:10+00:00"
}
