{
  "Link": "https://devblogs.microsoft.com/semantic-kernel/smarter-sk-agents-with-contextual-function-selection/",
  "ProcessedDate": "2025-08-24 16:30:43",
  "PubDate": "2025-06-05T09:28:47+00:00",
  "FeedLevelAuthor": "Semantic Kernel",
  "Title": "Smarter SK Agents with Contextual Function Selection",
  "FeedUrl": "https://devblogs.microsoft.com/semantic-kernel/feed/",
  "EnhancedContent": "# Smarter SK Agents with Contextual Function Selection\n\nIn today’s fast-paced AI landscape, developers are constantly seeking ways to make AI interactions more efficient and relevant. The new **Contextual Function Selection** feature in the Semantic Kernel Agent Framework is here to address this need. By dynamically selecting and advertising only the most relevant functions based on the current conversation context, this feature ensures that your AI agents are smarter, faster, and more effective than ever before.\n\n## Why Contextual Function Selection Matters\n\nWhen dealing with a large number of available functions, AI models often struggle to choose the right one, leading to confusion and inefficiency. Contextual Function Selection solves this problem by leveraging **Retrieval-Augmented Generation (RAG)** to filter and present only the most pertinent functions for each interaction. This not only improves the accuracy of AI responses but also reduces token consumption and enhances overall performance.\n\n## Key Benefits of Contextual Function Selection\n\nThis feature is particularly useful for scenarios where agents have access to a broad set of plugins or tools. Here are some key capabilities:\n\n- **Dynamic Function Filtering**: Automatically select the top relevant functions based on the conversation context.\n- **Enhanced AI Performance**: Reduce confusion and improve response accuracy by narrowing down function choices.\n- **Token Efficiency**: Minimize input token usage by advertising only the necessary functions.\n\n### Example Use Case: Summarizing Customer Reviews\n\nImagine you’re building an AI agent to summarize customer reviews. With Contextual Function Selection, the agent dynamically selects only the relevant functions, such as retrieving reviews, summarizing them, and analyzing sentiments. Here’s how it works:\n\n```csharp // Create an embedding generator for function vectorization var embeddingGenerator = new AzureOpenAIClient(new Uri(\"<endpoint>\"), new ApiKeyCredential(\"<api-key>\")) .GetEmbeddingClient(\"<deployment-name>\") .AsIEmbeddingGenerator();\n\n// Create a chat completion agent ChatCompletionAgent agent = new() { Name = \"ReviewGuru\", Instructions = \"You are a friendly assistant that summarizes key points and sentiments\" + \"from customer reviews. For each response, list available functions\", Kernel = kernel, Arguments = new(new PromptExecutionSettings { FunctionChoiceBehavior = FunctionChoiceBehavior.Auto() }) };\n\n// Register the contextual function provider agentThread.AIContextProviders.Add( new ContextualFunctionProvider( vectorStore: new InMemoryVectorStore(new InMemoryVectorStoreOptions() { EmbeddingGenerator = embeddingGenerator }), vectorDimensions: 1536, functions: GetAvailableFunctions(), maxNumberOfFunctions: 3 ) );\n\n// Invoke the agent ChatMessageContent message = await agent .InvokeAsync(\"Get and summarize customer review.\", agentThread) .FirstAsync(); Console.WriteLine(message.Content);\n\nprivate IReadOnlyList<AIFunction> GetAvailableFunctions() { // Returns 16 functions across 6 categories: customer reviews (1), sentiment analysis (2), // summaries (2), communication (3), date/time (2), and Azure services (6) } ```\n\n### Example Output:\n\n``` Customer Reviews: -----------------\n1. John D. - ★★★★★\nComment: Great product and fast shipping! Date: 2023-10-01\n\n2. Jane S. - ★★★★\nComment: Good quality, but delivery was a bit slow. Date: 2023-09-28\n\n3. Mike J. - ★★★\nComment: Average. Works as expected. Date: 2023-09-25\n\nSummary: -------- The reviews indicate overall customer satisfaction, with highlights on product quality and shipping efficiency. While some customers experienced excellent service, others mentioned areas for improvement, particularly regarding delivery times.\n\nAvailable functions: --------------------\n- Tools-GetCustomerReviews\n- Tools-Summarize\n- Tools-CollectSentiments\n\n```\n\nNote: Only these 3 functions (GetCustomerReviews, Summarize, and CollectSentiments) out of 16 available functions were selected and advertised to the model based on the conversation context.\n\n## Why This Matters to You\n\nFor developers, this feature simplifies the process of building intelligent, context-aware agents. Whether you’re managing customer interactions, automating workflows, or analyzing data, Contextual Function Selection ensures your AI agents are always on point.\n\n## Learn More\n\nReady to dive deeper? Check out the [official documentation on Microsoft Learn](https://learn.microsoft.com/en-us/semantic-kernel/frameworks/agent/agent-contextual-function-selection?pivots=programming-language-csharp) and explore the [sample code on GitHub](https://github.com/microsoft/semantic-kernel/blob/main/dotnet/samples/Concepts/Agents/ChatCompletion_ContextualFunctionSelection.cs).",
  "Tags": [
    ".NET",
    "Agents",
    "Announcement",
    "Semantic Kernel",
    "Tools"
  ],
  "Description": "Smarter SK Agents with Contextual Function Selection In today’s fast-paced AI landscape, developers are constantly seeking ways to make AI interactions more efficient and relevant. The new Contextual Function Selection feature in the Semantic Kernel Agent Framework is here to address this need. By dynamically selecting and advertising only the most relevant functions based on […]\n\nThe post [Smarter SK Agents with Contextual Function Selection](https://devblogs.microsoft.com/semantic-kernel/smarter-sk-agents-with-contextual-function-selection/) appeared first on [Semantic Kernel](https://devblogs.microsoft.com/semantic-kernel).",
  "OutputDir": "_news",
  "FeedName": "Microsoft Semantic Kernel Blog",
  "Author": "Sergey Menshykh"
}
