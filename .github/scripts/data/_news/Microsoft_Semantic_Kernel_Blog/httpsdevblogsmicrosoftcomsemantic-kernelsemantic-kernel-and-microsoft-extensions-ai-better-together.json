{
  "Link": "https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-and-microsoft-extensions-ai-better-together-part-1/",
  "ProcessedDate": "2025-08-24 16:30:43",
  "PubDate": "2025-05-21T14:47:05+00:00",
  "FeedLevelAuthor": "Semantic Kernel",
  "Title": "Semantic Kernel and Microsoft.Extensions.AI: Better Together, Part 1",
  "FeedUrl": "https://devblogs.microsoft.com/semantic-kernel/feed/",
  "EnhancedContent": "This is the start of a series highlighting the integration between Microsoft Semantic Kernel and Microsoft.Extensions.AI. Future parts will provide detailed examples of using Semantic Kernel with Microsoft.Extensions.AI abstractions.\n\nThe most common questions are:\n\n- “Do Microsoft’s AI extensions replace Semantic Kernel?”\n\n- “When should I use Microsoft’s AI extensions instead of Semantic Kernel?”\n\nThis blog post will address these questions and offer guidance on when and how to use them. First, we will explore what Microsoft Extensions AI is and its relationship with Semantic Kernel.\n\n## The Evolution of AI Integration in .NET with Microsoft Extensions AI\n\nArtificial Intelligence, or AI, is evolving at a rapid pace that many developers struggle to keep up with. The Semantic Kernel team responded to this shift in how apps are written with a suite of solutions that run on multiple platforms and support most popular languages, leading with C#.\n\nThe .NET team recognized the importance and impact of AI and built a set of foundational building blocks to support a thriving ecosystem and ease the burden of learning and integrating AI into applications for .NET developers. This foundation is based on established patterns, and in many cases Semantic Kernel used as the prototype. This foundation exists in the Microsoft.Extensions.AI namespace and provides AI extensions for .NET.\n\nThe AI extensions not only catalyzed a thriving and rapidly growing ecosystem but also simplified many common interactions developers have with LLMs such as bidirectional chat and image analysis. The team worked closely with Semantic Kernel to ensure that once the building blocks were released, Semantic Kernel could easily migrate from their built-in primitives to use AI extensions. Due to the timing needed to make this possible, the interim state led to some confusion amongst developers wondering whether the AI extensions would replace the corresponding concepts in Semantic Kernel.\n\nThe release of the AI extensions for .NET (the types and interfaces provided by the Microsoft.Extensions.AI.\\* set of packages) set an important catalyst for the evolution of Intelligent Apps in .NET. The AI extensions are intended to provide the grounds of common primitives and building blocks that the .NET ecosystem can use to build higher level AI applications and solutions including orchestrators and agentic frameworks. They serve as “exchange types”, types .NET libraries can and should expose and consume so that many such libraries can be composed and easily interoperate. Semantic Kernels is such a set of libraries.\n\nThe concept of the .NET AI extensions is based on successful patterns from other popular .NET frameworks including ASP.NET. If you are a web developer, you may be familiar with some of the concepts that ASP.NET supports, including dependency injection, middleware, and support for multiple providers. The extensions for AI in .NET are based on these proven patterns.\n\n## How Microsoft Extensions AI relates to Semantic Kernel\n\nTo better understand the relationship between **Microsoft Extensions AI** and **Semantic Kernel**, consider the analogy of a foundational SDK and a specialized SDK built on top of it.\n\n**Microsoft Extensions AI** serves as a foundational SDK, providing low-level abstractions and APIs for integrating AI capabilities into your applications. It offers flexible tools that enable you to build custom AI workflows tailored to your specific needs.\n\n**Semantic Kernel**, on the other hand, is a specialized SDK built on top of Microsoft Extensions AI. It extends the foundational capabilities by introducing higher-level features designed for more advanced AI scenarios, such as agents, plugins, prompt templates, and workflow automation. Semantic Kernel simplifies tasks that would otherwise require significant effort if built purely with the foundational SDK.\n\nA useful analogy within the C# ecosystem is the relationship between **System.Net.Http** and **ASP.NET Core MVC**:\n\n- **System.Net.Http** is a foundational SDK that provides the tools for sending and receiving HTTP requests. It allows developers to work directly with the HTTP protocol, enabling full control over how data is sent and received.\n- **ASP.NET Core**, while not a framework in this analogy, can be thought of as a specialized SDK that builds upon foundational tools like System.Net.Http. It abstracts away many of the lower-level details of making HTTP requests and provides additional features such as routing, model binding, and view rendering, tailored specifically for building web applications.Similarly:\n- **Microsoft Extensions AI** is the foundational SDK, offering the core abstractions for building AI-enabled applications.\n- **Semantic Kernel** is the specialized SDK that builds on Microsoft Extensions AI, simplifying advanced AI workflows and enabling features like agents, plugins, and automation. By leveraging both, developers can choose the right level of abstraction for their application, whether they need the flexibility of Microsoft Extensions AI or the higher-level capabilities of Semantic Kernel for complex AI scenarios.Because many of the current **Microsoft Extensions AI** abstractions were inspired by the initial abstractions in **Semantic Kernel**, some overlap exists in terms of functionality. To address this, **Semantic Kernel** has recently been updated to natively support **Microsoft Extensions AI** abstractions in its APIs, such as `IChatClient`\nand others. This alignment ensures a smoother integration experience and allows developers to leverage the strengths of both SDKs seamlessly.\n\n## When to use Microsoft Extensions AI and Semantic Kernel?\n\nMicrosoft Extensions AI provides a lower-level abstraction layer. By creating your code on top of Microsoft Extensions AI, you automatically can use those implementations with Semantic Kernel.\n\nIn cases where overlapping abstractions exist between Semantic Kernel and Microsoft Extensions AI, we recommend transitioning your code to use **Microsoft Extensions AI** abstractions. Over time, the overlapping abstractions in Semantic Kernel will be phased out in favor of the newer, more standardized abstractions in Microsoft Extensions AI. Detailed migration guidance will be shared in upcoming blog posts to help you make this transition smoothly.\n\nFor most applications, you will begin development using libraries implemented on top of **Microsoft.Extensions.AI**, which provide foundational AI capabilities. **Semantic Kernel** should be used when your application requires higher-level features such as Agents, Plugins, Prompt Templates, or Workflow Automation. Semantic Kernel builds on the foundational abstractions of Microsoft Extensions AI to simplify advanced AI scenarios and streamline development for more complex use cases.\n\n## How Semantic Kernel Supports Microsoft.Extensions.AI Types\n\n### Chat Completion\n\nSemantic Kernel’s chat completion functionality now natively supports Microsoft.Extensions.AI types:\n\n1. **Kernel Builder Extensions**\n- The `AddOpenAIChatClient()`\n, `AddAzureOpenAIChatClient()` , and other connector extension methods were added and now register the new Microsoft.Extensions.AI’s `IChatClient` implementations\n- This allows you easily migrate to the new API with the same configuration\n2. **Service Collection Extensions**\n- Similar to KernelBuilder, DI extensions like `services.AddOpenAIChatClient()`\nnow register the new `IChatClient`\n- This enables seamless integration in dependency injection scenarios\n3. **ChatCompletionAgent**\n- Can now work with either `IChatCompletionService`\nor `IChatClient`\n\n### Embedding Generation\n\nSemantic Kernel has moved from its own `ITextEmbeddingGenerationService` to Microsoft.Extensions.AI’s `IEmbeddingGenerator<string, Embedding<float>>` :\n\n1. **Embedding Service Registration**\n- Methods like `AddOpenAIEmbeddingGenerator()`\nand `AddAzureOpenAIEmbeddingGenerator()` now register Microsoft.Extensions.AI’s `IEmbeddingGenerator<string, Embedding<float>>`\n- The older interfaces are marked as obsolete\n2. **Automatic Conversion**\n- Semantic Kernel provides extension methods to convert between its older embedding interfaces and the new Microsoft.Extensions.AI interfaces\n- This ensures backward compatibility while encouraging migration to the new types\n3. **Vector Operations**\n- Vector operations in Semantic Kernel now work with Microsoft.Extensions.AI’s `Embedding<float>`\ntype\n- This provides a standardized way to work with embeddings across different providers\n- For more information check our [vector data extensions blog post](https://devblogs.microsoft.com/semantic-kernel/vector-data-extensions-are-now-generally-available-ga).\n\n### Function Calling\n\nSemantic Kernel’s function calling capabilities now integrate with Microsoft.Extensions.AI types:\n\n1. **UseKernelFunctionInvocation**\n- Allows any `IChatClient`\nto be configured to invoke Kernel functions\n- Automatically handles function calling protocol conversion\n2. **AIFunction Integration**\n- Semantic Kernel’s `KernelFunction`\nis now a `AIFunction` and can be used with Microsoft.Extensions.AI’s compatible environment.\n- Extension methods like `AsKernelFunction()`\nare also available to allow specializing your existing `AIFunction` for easy conversion\n3. **Function Arguments**\n- Semantic Kernel’s `KernelArguments`\nare now Microsoft.Extensions.AI’s `AIFunctionArguments`\n\n### Content Types\n\nSemantic Kernel now supports retrieval of Microsoft.Extensions.AI content types:\n\n1. **ChatMessageContent**\n- Can be converted to/from Microsoft.Extensions.AI’s `ChatMessage`\n- Supports all the same content types (text, images, function calls, etc.)\n2. **Streaming Support**\n- Semantic Kernel’s streaming interfaces now work with Microsoft.Extensions.AI’s `ChatResponseUpdate`\n- This enables consistent streaming behavior across different providers\n3. **Kernel InvokeAsync&lt;T&gt;**\n- Providing a T of Microsoft.Extensions.AI type is now supported when retrieving kernel contents.\n\n### Service Selection\n\nSemantic Kernel’s service selection mechanism now works with Microsoft.Extensions.AI services:\n\n1. Added a new **IChatClientSelector**abstraction\n- Specialized selector for chat clients\n- Kernel instances now also rely on this new interface for Microsoft.Extensions.AI’s `IChatClient`\ndiscovery and selection\n\n### Dependency Injection\n\nSemantic Kernel’s DI support now includes Microsoft.Extensions.AI types:\n\n1. **Service Registration**\n- `IChatClient`\nadded to your service collection will be automatically visible to the Kernel selector.\n2. **Automatic Adaptation**\n- When using DI, Semantic Kernel automatically adapts between its own types and Microsoft.Extensions.AI types\n- This ensures a consistent experience regardless of which API style you prefer\n\nThis native support for Microsoft.Extensions.AI types means you can now use Semantic Kernel with the broader Microsoft AI ecosystem more seamlessly, with consistent programming models and easy interoperability between different components.\n\nEager to explore the new **Microsoft.Extensions.AI with Semantic Kernel?** Please check out these packages and samples:\n\n**Package**:\n\n- [NuGet Gallery | Microsoft.Extensions.AI.Abstractions](https://www.nuget.org/packages/Microsoft.Extensions.AI.Abstractions/latest%22%20/o%20%22https://www.nuget.org/packages/microsoft.extensions.ai/9.0.0-preview.9.24507.7%22%20/t%20%22_blank)\n\n- [NuGet Gallery | Microsoft.Extensions.AI](https://www.nuget.org/packages/Microsoft.Extensions.AI/latest%22%20/o%20%22https://www.nuget.org/packages/microsoft.extensions.ai/9.0.0-preview.9.24507.7%22%20/t%20%22_blank)\n\n**References**:\n\n- Semantic Kernel [Agent Framework | Microsoft Learn](https://learn.microsoft.com/en-us/semantic-kernel/frameworks/agent/?pivots=programming-language-csharp)\n\n- Semantic Kernel [Process Framework | Microsoft Learn](https://learn.microsoft.com/en-us/semantic-kernel/frameworks/process/process-framework)\n\n- Semantic Kernel [Samples](https://github.com/microsoft/semantic-kernel/tree/main/dotnet/samples)\n- Vector Data Extensions – [Blog Post](https://devblogs.microsoft.com/semantic-kernel/vector-data-extensions-are-now-generally-available-ga)\n\n- Microsoft.Extensions.AI [Microsoft.Extensions.AI libraries – .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/ai/microsoft-extensions-ai)\n\n- EShop Support with Microsoft.Extensions.AI –  [eShop Support](https://github.com/dotnet/eShopSupport/tree/main)\n\n- .NET AI Samples – [https://github.com/dotnet/ai-samples](https://github.com/dotnet/ai-samples)",
  "Tags": [
    ".NET",
    "Agents",
    "Announcement",
    "Extensions AI",
    "Samples",
    "Semantic Kernel"
  ],
  "Description": "This is the start of a series highlighting the integration between Microsoft Semantic Kernel and Microsoft.Extensions.AI. Future parts will provide detailed examples of using Semantic Kernel with Microsoft.Extensions.AI abstractions. The most common questions are: “Do Microsoft’s AI extensions replace Semantic Kernel?” “When should I use Microsoft’s AI extensions instead of Semantic Kernel?” This blog post […]\n\nThe post [Semantic Kernel and Microsoft.Extensions.AI: Better Together, Part 1](https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-and-microsoft-extensions-ai-better-together-part-1/) appeared first on [Semantic Kernel](https://devblogs.microsoft.com/semantic-kernel).",
  "OutputDir": "_news",
  "FeedName": "Microsoft Semantic Kernel Blog",
  "Author": "Roger Barreto"
}
