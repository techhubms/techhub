{
  "PubDate": "2025-05-09T16:56:41+00:00",
  "EnhancedContent": "When it comes to design systems, every organization tends to be at a different place in their accessibility journey. Some have put a great deal of work into making their design system accessible while others have a long way to go before getting there. To help on this journey, many organizations rely on [accessibility annotations](https://tangible.is/en/thinking/2024/10/the-value-of-accessibility-annotations-in-inclusive-design) to make sure there are no access barriers when a design is ready to be built.\n\nHowever, it’s a common misconception (especially for organizations with mature design systems) that accessible components will result in accessible designs. While design systems are fantastic for scaling standards and consistency, they can’t prevent every issue with our designs or how we build them. Access barriers can still slip through the cracks and make it into production.\n\nThis is the root of the problem our Accessibility Design team set out to solve.\n\nIn this two-part series, we’ll show you exactly how accessible design system components can produce inaccessible designs. Then we’ll demonstrate our solution: integrating annotations with our [Primer](https://primer.style/) components. This allows us to spend less time annotating, increases design system adoption, and reaches teams who may not have accessibility support. And in our next post, we’ll walk you through how you can do the same for your own components.\n\nLet’s dig in.\n\n## What are annotations and their benefits?\n\nAnnotations are notes included in design projects that help make the unseen explicit by conveying design intent that isn’t shown visually. They improve the usability of digital experiences by providing a holistic picture for developers of how an experience should function. Integrating annotations into our design process helps our teams work better together by closing communication gaps and preventing quality issues, [accessibility audit issues](https://www.w3.org/WAI/test-evaluate/), and expensive re-work.\n\nSome of the questions annotations help us answer include:\n\n- How is [assistive technology](https://tetralogical.com/blog/2021/12/24/browsing-with-assistive-technology-videos/) meant to navigate a page from one element to another?\n- What’s the alternative text for informative images and buttons without labels?\n- How does content shift depending on viewport size, screen orientation, or zoom level?\n- Which [virtual keyboard](https://developer.apple.com/design/human-interface-guidelines/virtual-keyboards#Best-practices) should be used for a form input on mobile?\n- How should focus be managed for complex interactions?\n\nOur answers to questions like this—or the lack thereof—can **make or break** the experience of the web for a lot of people, especially users with disabilities. Some annotation tools are built specifically to help with this by guiding designers to include key details about web standards, platform functionality, and accessibility (a11y).\n\nMost public annotation kits are well suited for teams who are creating new design system components, teams who aren’t already using a design system, or teams who don’t have specialized accessibility knowledge. They usually help annotate things like:\n\n- Controls such as buttons and links\n- Structural elements such as headings and [landmarks](https://developer.mozilla.org/en-US/blog/aria-accessibility-html-landmark-roles/)\n- [Decorative images](https://tetralogical.com/blog/2022/01/24/text-descriptions/) and informative descriptions\n- Forms and other elements that require labels and semantic roles\n- Focus order for assistive technology and keyboard navigation\n\n### GitHub’s annotation’s toolkit\n\nOne of our top priorities is to **meet our colleagues where they’re at**. We wanted all our designers to be able to use annotations out of the box because we believe they shouldn’t need to be a certified accessibility specialist in order to get things built in an accessible way.\n\n![ A browser window showing the Web Accessibility Annotation Kit in the cvs-health/annotations repository.](https://github.blog/wp-content/uploads/2025/05/Figure-1-Web-Accessibility-Annotation-Kit.png?resize=1024%2C538)\n\nTo this end, last year we began creating an internal Figma library—the [GitHub Annotation Toolkit](https://primer.style/accessibility/tools/#annotation-toolkit-internal) (which we aim to release to the public soon). Our toolkit builds on the legacy of the former Inclusive Design team at CVS Health. Their two [open source annotation kits](https://github.com/cvs-health/annotations) help make documentation that’s easy to create and consume, and are among the most widely used annotation libraries in the Figma Community.\n\nWhile they add clarity, annotations can also add overhead. If teams are only relying on specialists to interpret designs and technical specifications for developers, the hand-off process can take longer than it needs to. To create our annotation toolkit, we rebuilt its predecessor from the ground up to avoid that overhead, making extensive improvements and adding inline documentation to make it more intuitive and helpful for all of our designers—not just accessibility specialists.\n\nDesign systems can also help reduce that overhead. When you [audit your design systems for accessibility](https://www.deque.com/blog/auditing-design-systems-for-accessibility/), there’s less need for specialist attention on every product feature, since you’re using annotations to add technical semantics and specialist knowledge into every component. This means that designers and developers only need to adhere to the usage guidelines consistently, right?\n\n## The problems with annotations and design system components\n\nUnfortunately, it’s not that simple.\n\n### Accessibility is not binary\n\nWhile design systems can help drive more accessible design at scale, they are constantly evolving and the work on them is never done. The accessibility of any component isn’t binary. Some may have a few severe issues that create access barriers, such as being inoperable with a keyboard or missing alt text. Others may have a few trivial issues, such as generic control labels.\n\nMost of the time, it will be a misnomer to claim that your design system is “fully accessible.” There’s always more work to do—it’s just a question of how much. The [Web Content Accessibility Guidelines](https://www.a11yproject.com/posts/wcag2-documents/) (WCAG) are a great starting point, but their “Success Criteria” isn’t tailored for the unique context that is your website or product or audience.\n\nWhile the WCAG should be used as a foundation to build from, it’s important to understand that it [can’t capture every nuance](https://cerovac.com/a11y/2021/12/how-to-know-that-a-website-or-app-is-really-accessible/) of disabled users’ needs because **your** users’ needs are not **every** user’s needs. It would be very easy to believe that your design system is “fully accessible” if you never look past WCAG to talk to **your** users. If Primer has accessible components, it’s because we feel that direct participation and input from daily assistive technology users is [the most important aspect of our work](https://github.blog/engineering/user-experience/how-were-building-more-inclusive-and-accessible-components-at-github/). Testing plans with real users—with and without disabilities—is where you really find what matters most.\n\n### Accessible *components* do not guarantee accessible *designs*\n\nArranging a series of accessible components on a page does not automatically create an accurate and informative heading hierarchy. There’s a good chance that without additional documentation, the heading structure won’t make sense visually—nor as a medium for [navigating with assistive technology.](https://tetralogical.com/blog/2021/09/29/browsing-with-a-desktop-screen-reader/)\n\n![A page wireframe showing a linear layout of an H1 title, an H2 in a banner below it, and a row of several cards below with headings of H4. The caption reads: this accessible card has an H4, breaking the page structure by skipping heading levels. Next to the wireframe is a diagram showing the page structure as a tree view, highlighting the level skipping from H2 to H4.](https://github.blog/wp-content/uploads/2025/05/Figure-2.png?resize=1024%2C538)\n\nIt’s great when accessible components are flexible and responsive, but what about when they’re placed in a layout that the component guidance doesn’t account for? Do they adapt to different zoom levels, viewport sizes, and screen orientations? Do they lose any functionality or context when any of those things change?\n\nComponent usage is contextual. You can add an image or icon to your design, but the design system docs can’t write descriptive text for you. You can use the same image in multiple places, but the image description may need to change depending on context.\n\nSimilarly, forms built using the same input components may do different things and require different error validation messages. It’s no wonder that [adopting design system components doesn’t get rid of all audit issues.](https://www.a11yquest.com/blog/2024-11-13-component-libraries)\n\n### Design system components in Figma don’t include all the details\n\nAnnotation kits don’t include components for specific design systems because almost every organization is using their own. When annotation kits are adopted, teams often add ways to label their design system components.\n\nThis labeling lets developers know they can use something that’s already been built, and that they don’t need to build something from scratch. It also helps identify any design system components that get ‘detached’ in Figma. And it reduces the number of things that need to be annotated.\n\nLet’s look at an example:\n\n![A green Primer button with a lightning bolt icon and a label that says: this button does something. To the right is a set of Figma component properties that control the button&rsquo;s visual appearance.](https://github.blog/wp-content/uploads/2025/05/Figure-3-A-Mysterious-Button.png?w=1024&#038;resize=1024%2C401)\n\nIf we’re using this Primer [Button](https://primer.style/react/storybook/?path=/story/components-button-features--primary) component from the [Primer Web Figma library](https://www.figma.com/community/file/854767373644076713), there are a few important things that we won’t know just by looking at the design or the component properties:\n\n- **Functional differences when components are implemented.** Is this a link that just looks visually like a button? If so, a developer would use the `<LinkButton>`\nReact component instead of `<Button>` .\n- **Accessible labels for folks using assistive technology.** The icon may need alt text. In some cases, the button text might need some [visually-hidden text](https://webaim.org/techniques/css/invisiblecontent/) to differentiate it from similar buttons. How would we know what that text is? Without annotations, the Figma component doesn’t have a place to display this.\n- **Whether user data is submitted.** When a design doesn’t include an obvious form with input fields, how do we convey that the button needs specific attributes to submit data?\n\nIt’s risky to leave questions like this unanswered, hoping someone notices and guesses the correct answer.\n\n## A solution that streamlines the annotation process while minimizing risk\n\nWhen creating new components, a set of detailed annotations can be a huge factor in how robust and accessible they are. Once the component is built, design teams can start to add instances of that component in their designs. When those designs are ready to be annotated, those new components shouldn’t need to be annotated again. In most cases, it would be redundant and unnecessary—but not in every case.\n\nThere are some important details in many Primer components that may change from one instance to another. If we use the CVS Health annotation kit out of the box, we should be able to capture those variations, but we wouldn’t be able to avoid those redundant and unnecessary annotations. As we built our own annotation toolkit, we built a set of annotations for each Primer component to do both of those things at once.\n\n![An annotated Primer Brand accordion with six Stamps and four Detail notes in the margins.](https://github.blog/wp-content/uploads/2025/05/Figure-4-Annotated-Primer-Brand-Accordion.png?resize=1024%2C427)\n\nThis accordion component has been thoroughly annotated so that an engineer has everything they need to build it the first time. These include heading levels, semantics for `<detail>` and `<summary>` elements, landmarks, and decorative icons. All of this is built into the component so we don’t need to annotate most of this when adding the accordion to our new designs.\n\nHowever, there are two important things we need to annotate, as they can change from one instance to another:\n\n1. The optional title at the top.\n2. The heading level of each item within the accordion.\n\nIf we don’t specify these things, we’re leaving it to chance that the page’s heading structure will break or that the experience will be confusing for people to understand and navigate the page. The risks may be low for a single button or basic accordion, but they grow with pattern complexity, component nesting, interaction states, duplicated instances, and so on.\n\n![An annotated Primer Brand accordion with one Stamp and one Detail note in the margins.](https://github.blog/wp-content/uploads/2025/05/Figure-5-Primer-Brand-Accordion-with-Preset-annotations.png?resize=1024%2C427)\n\nInstead of annotating what’s already built into the component or leaving these details to chance, we can add two quick annotations. One Stamp to point to the component, and one Details annotation where we fill in some blanks to make the heading levels clear.\n\nBecause the prompts for specific component details are **pre-set** in the annotation, we call them Preset annotations.\n\n![A mosaic of preset annotation for various Primer components.](https://github.blog/wp-content/uploads/2025/05/Figure-6-Primer-A11y-Presets.png?resize=1024%2C538)\n\n## Introducing our Primer A11y Preset annotations\n\nWith this proof of concept, we selected ten frequently used Primer components for the same treatment and built a new set of Preset annotations to document these easily missed accessibility details—our Primer A11y Presets.\n\nThose Primer components tend to contribute to more accessibility audit issues when key details are missing on implementation. Issues for these components relate to things like lack of proper labels, error validation messages, or missing HTML or [ARIA attributes](https://tetralogical.com/blog/2023/02/10/foundations-wai-aria/).\n\n![IconButton Preset annotation, with guidance toggled on.](https://github.blog/wp-content/uploads/2025/05/Figure-7-IconButton-with-guidance.png?resize=1024%2C538)\n\nEach of our Preset annotations is linked to component docs and [Storybook](https://primer.style/react/storybook/) demos. This will hopefully help developers get straight to the technical info they need without designers having to find and add links manually. We also included guidance for how to fill out each Preset, as well as how to use the component in an accessible way. This helps designers get support inline without leaving their Figma canvas.\n\n## Want to create your own? Check out Design system annotations, part 2\n\nButton components in Google’s [Material Design](https://m3.material.io/) and Shopify’s [Polaris](https://polaris.shopify.com/), IBM’s [Carbon](https://carbondesignsystem.com/), or our Primer design system are all very different from one another. Because Preset annotations are based on specific components, they only work if you’re also using the design system they’re made for.\n\n**[In part 2 of this series](https://github.blog/engineering/user-experience/design-system-annotations-part-2-advanced-methods-of-annotating-components/)**, we’ll walk you through how you can build your own set of Preset annotations for your design system, as well as some different ways to document important accessibility details before development starts.\n\n## You may also like:\n\nIf you’re more of a visual learner, you can watch [Alexis Lucio](https://primer.style/about/#alexislucio) explore Preset annotations during GitHub’s [Dev Community Event](https://githubday0.splashthat.com/) to kick off Figma’s Config 2024.",
  "FeedUrl": "https://github.blog/engineering/feed/",
  "Title": "Design system annotations, part 1: How accessibility gets left out of components",
  "FeedLevelAuthor": "The latest from GitHub's engineering team - The GitHub Blog",
  "Link": "https://github.blog/engineering/user-experience/design-system-annotations-part-1-how-accessibility-gets-left-out-of-components/",
  "Tags": [
    "accessibility",
    "annotations",
    "ARIA",
    "Components",
    "design",
    "design systems",
    "Engineering",
    "Figma",
    "Primer",
    "User experience"
  ],
  "OutputDir": "_news",
  "Author": "Jan Maarten",
  "ProcessedDate": "2025-08-05 11:15:29",
  "Description": "The Accessibility Design team created a set of annotations to bridge the gaps that design systems alone can’t fix and proactively addresses accessibility issues within Primer components.\n\nThe post [Design system annotations, part 1: How accessibility gets left out of components](https://github.blog/engineering/user-experience/design-system-annotations-part-1-how-accessibility-gets-left-out-of-components/) appeared first on [The GitHub Blog](https://github.blog).",
  "FeedName": "GitHub Engineering Blog"
}
