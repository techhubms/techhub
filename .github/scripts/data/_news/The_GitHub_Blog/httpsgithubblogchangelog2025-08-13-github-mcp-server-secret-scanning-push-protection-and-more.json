<<<<<<< HEAD
{
  "ProcessedDate": "2025-08-15 14:29:23",
  "PubDate": "2025-08-13T17:31:10+00:00",
  "Link": "https://github.blog/changelog/2025-08-13-github-mcp-server-secret-scanning-push-protection-and-more",
  "FeedUrl": "https://github.blog/changelog/feed/",
  "Author": "Allison",
  "FeedName": "The GitHub Blog",
  "EnhancedContent": "The remote GitHub MCP server now scans all of its tool call inputs in public repositories. If an exposed secret is detected, the call is blocked by default with clear details and bypass links if you want to intentionally proceed.\n\n### What’s included\n\n- 🛑 Users can block or bypass the secret block in all GitHub Remote MCP tool calls to detectable public repositories. Users that have opted out of push protection for their account will be unable to bypass the block.\n- 🤖 The remote MCP server provides clear, agent-usable responses.\n\n### Why this helps against prompt injection 🛡️\n\nPublic content (READMEs, issues, PR comments) can embed instructions that trick agents into pasting credentials into MCP tool calls. By inspecting data flowing to and from public repositories, this feature cuts off a common exfiltration path before secrets leave your control.\n\n### Benefits\n\n- ✅ **Mitigates the primary secret-leak vector** for MCP in public-repo workflows: secrets embedded in tool-call payloads (both write and read paths)\n- 🔐 **Reduces exposure from prompt-injected attempts to exfiltrate tokens** via tool parameters or responses\n\n### Availability & licensing\n\n- Works only for tool calls involving public repositories\n- Free for all plan types — no Copilot or GitHub Secret Protection license required\n\nSupport for private repositories with a GitHub Secret Protection license is coming soon.\n\nNote that this feature doesn’t eliminate all risk. It won’t stop non-secret data leaks, model-only behaviors outside tool calls, or channels that are not scanned. Continue to follow security best practices, such as using least-privileged tokens and regularly rotating credentials.\n\nCheck out [our documentation](https://docs.github.com/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-and-the-github-mcp-server) to learn more.\n\nJoin the [GitHub Community discussion](https://github.com/orgs/community/discussions/categories/copilot-conversations) to share feedback and questions.\n\n### New tools and improvements for the GitHub MCP server (remote & local) ✨\n\n- **GitHub Actions toolset**: Workflow management from agents to discover/dispatch runs, monitor status, and tail logs for faster CI/CD loops and agentic debugging of failed actions builds\n- **Gist toolset**: Quick snippets and sharable artifacts without touching a repository\n- **Sub-issues tools**: `add_sub_issue`\n, `list_sub_issues` , `remove_sub_issue` , `reprioritize_sub_issue` are now available\n- **PR workflow upgrades**: `update_pull_request`\nnow toggles draft and requests reviewers\n- **Discussions at org scope**: Richer fields & sorting (`author`\n, `updatedAt` , `createdAt` , `title` )\n- **GraphQL & pagination**: `list_issues`\nmigrated from REST and GraphQL tools reliably paginate\n- **File retrieval quality**: Smarter path matching, `/`\nas default dir, SHA in `get_file_contents`\n- **Search clarity**: Separate tools for searching issues and pull requests, separate organization and user search, and tuned `search_code`\nparams\n\n🔗 Learn more on the [GitHub MCP Server releases page](https://github.com/github/github-mcp-server/releases)",
  "Title": "GitHub MCP Server: Secret scanning, push protection, and more",
  "FeedLevelAuthor": "Archive: 2025 - GitHub Changelog",
  "OutputDir": "_news",
  "Description": "The remote GitHub MCP server now scans all of its tool call inputs in public repositories. If an exposed secret is detected, the call is blocked by default with clear…\n\nThe post [GitHub MCP Server: Secret scanning, push protection, and more](https://github.blog/changelog/2025-08-13-github-mcp-server-secret-scanning-push-protection-and-more) appeared first on [The GitHub Blog](https://github.blog).",
  "Tags": []
}
=======
{
  "FeedName": "The GitHub Blog",
  "Author": "Allison",
  "FeedUrl": "https://github.blog/changelog/feed/",
  "OutputDir": "_news",
  "Tags": [],
  "FeedLevelAuthor": "Archive: 2025 - GitHub Changelog",
  "Link": "https://github.blog/changelog/2025-08-13-github-mcp-server-secret-scanning-push-protection-and-more",
  "PubDate": "2025-08-13T17:31:10+00:00",
  "Description": "The remote GitHub MCP server now scans inputs and outputs of tool calls that originate in or target a public repository. If an exposed secret is detected, the call is…\n\nThe post [GitHub MCP Server: Secret scanning, push protection, and more](https://github.blog/changelog/2025-08-13-github-mcp-server-secret-scanning-push-protection-and-more) appeared first on [The GitHub Blog](https://github.blog).",
  "ProcessedDate": "2025-08-13 18:06:16",
  "Title": "GitHub MCP Server: Secret scanning, push protection, and more",
  "EnhancedContent": "The remote GitHub MCP server now scans all tool call inputs in public repositories. If an exposed secret is detected, the call is blocked by default with clear details and bypass links if you want to intentionally proceed.\n\n### What’s included\n\n- 🛑 Users can block or bypass the secret block in MCP tool calls to detectable public repositories. Users that have opted out of push protection for their account will be unable to bypass the block.\n- 🤖 The remote MCP server provides clear, agent-usable responses.\n\n### Why this helps against prompt injection 🛡️\n\nPublic content (READMEs, issues, PR comments) can embed instructions that trick agents into pasting credentials into MCP tool calls. By inspecting data flowing to and from public repositories, this feature cuts off a common exfiltration path before secrets leave your control.\n\n### Benefits\n\n- ✅ **Mitigates the primary secret-leak vector** for MCP in public-repo workflows: secrets embedded in tool-call payloads (both write and read paths)\n- 🔐 **Reduces exposure from prompt-injected attempts to exfiltrate tokens** via tool parameters or responses\n\n### Availability & licensing\n\n- Works only for tool calls involving public repositories\n- Free for all plan types — no Copilot or GitHub Secret Protection license required\n\nSupport for private repositories with a GitHub Secret Protection license is coming soon.\n\nNote that this feature doesn’t eliminate all risk. It won’t stop non-secret data leaks, model-only behaviors outside tool calls, or channels that are not scanned. Continue to follow security best practices, such as using least-privileged tokens and regularly rotating credentials.\n\nCheck out [our documentation](https://docs.github.com/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-and-the-github-mcp-server) to learn more.\n\nJoin the [GitHub Community discussion](https://github.com/orgs/community/discussions/categories/copilot-conversations) to share feedback and questions.\n\n### New tools and improvements for the GitHub MCP server (remote & local) ✨\n\n- **GitHub Actions toolset**: Workflow management from agents to discover/dispatch runs, monitor status, and tail logs for faster CI/CD loops and agentic debugging of failed actions builds\n- **Gist toolset**: Quick snippets and sharable artifacts without touching a repository\n- **Sub-issues tools**: `add_sub_issue`\n, `list_sub_issues` , `remove_sub_issue` , `reprioritize_sub_issue` are now available\n- **PR workflow upgrades**: `update_pull_request`\nnow toggles draft and requests reviewers\n- **Discussions at org scope**: Richer fields & sorting (`author`\n, `updatedAt` , `createdAt` , `title` )\n- **GraphQL & pagination**: `list_issues`\nmigrated from REST and GraphQL tools reliably paginate\n- **File retrieval quality**: Smarter path matching, `/`\nas default dir, SHA in `get_file_contents`\n- **Search clarity**: Separate tools for searching issues and pull requests, separate organization and user search, and tuned `search_code`\nparams\n\n🔗 Learn more on the [GitHub MCP Server releases page](https://github.com/github/github-mcp-server/releases)"
}
>>>>>>> f38d706 (Articles from old repo, styling and some other fixes)
