{
  "Title": "Our plan for a more secure npm supply chain",
  "EnhancedContent": "Open source software is the bedrock of the modern software industry. Its collaborative nature and vast ecosystem empower developers worldwide, driving efficiency and progress at an unprecedented scale. This scale also presents unique vulnerabilities that are continually tested and under attack by malicious actors, making the security of open source a critical concern for all.\n\nTransparency is central to maintaining community trust. Today, we’re sharing details of recent npm registry incidents, the actions we took towards remediation, and how we’re continuing to invest in npm security.\n\n## Recent attacks on the open source ecosystem\n\nThe software industry has faced a recent surge in damaging account takeovers on package registries, including npm. These ongoing attacks have allowed malicious actors to gain unauthorized access to maintainer accounts and subsequently distribute malicious software through well-known, trusted packages.\n\nOn September 14, 2025, we were notified of the [Shai-Hulud attack](https://socket.dev/blog/ongoing-supply-chain-attack-targets-crowdstrike-npm-packages), a self-replicating worm that infiltrated the npm ecosystem via compromised maintainer accounts by injecting malicious post-install scripts into popular JavaScript packages. By combining self-replication with the capability to steal multiple types of secrets (and not just npm tokens), this worm could have enabled an endless stream of attacks had it not been for timely action from GitHub and open source maintainers.\n\nIn direct response to this incident, GitHub has taken swift and decisive action including:\n\n- Immediate removal of 500+ compromised packages from the npm registry to prevent further propagation of malicious software.\n- npm blocking the upload of new packages containing the malware’s IoCs (Indicators of Compromise), cutting off the self-replicating pattern.\n\nSuch breaches erode trust in the open source ecosystem and pose a direct threat to the integrity and security of the entire software supply chain. They also highlight why raising the bar on authentication and secure publishing practices is essential to strengthening the npm ecosystem against future attacks.\n\n## npm’s roadmap for hardening package publication\n\nGitHub is committed to investigating these threats and mitigating the risks that they pose to the open source community. To address token abuse and self-replicating malware, we will be changing authentication and publishing options in the near future to only include:\n\n1. Local publishing with [required two-factor authentication](https://docs.npmjs.com/requiring-2fa-for-package-publishing-and-settings-modification) (2FA).\n2. [Granular tokens](https://docs.npmjs.com/about-access-tokens#about-granular-access-tokens) which will have a limited lifetime of seven days.\n3. [Trusted publishing](https://repos.openssf.org/trusted-publishers-for-all-package-repositories).\n\nTo support these changes and further improve the security of the npm ecosystem, we will:\n\n- Deprecate legacy classic tokens.\n- Deprecate time-based one-time password (TOTP) 2FA, migrating users to FIDO-based 2FA.\n- Limit granular tokens with publishing permissions to a shorter expiration.\n- Set publishing access to disallow tokens by default, encouraging usage of trusted publishers or 2FA enforced local publishing.\n- Remove the option to bypass 2FA for local package publishing.\n- Expand eligible providers for trusted publishing.\n\nWe recognize that some of the security changes we are making may require updates to your workflows. We are going to roll these changes out gradually to ensure we minimize disruption while strengthening the security posture of npm. We’re committed to supporting you through this transition and will provide future updates with clear timelines, documentation, migration guides, and support channels.\n\n## Strengthening the ecosystem with trusted publishing\n\n[Trusted publishing](https://repos.openssf.org/trusted-publishers-for-all-package-repositories)is a recommended security capability by the OpenSSF Securing Software Repositories Working Group as it removes the need to securely manage an API token in the build system. It was pioneered by PyPI in [April 2023](https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/) as a way to get API tokens out of build pipelines. Since then, trusted publishing has been added to RubyGems ([December 2023](https://blog.rubygems.org/2023/12/14/trusted-publishing.html)), crates.io ([July 2025](https://blog.rust-lang.org/2025/07/11/crates-io-development-update-2025-07/)), npm (also [July 2025](https://github.blog/changelog/2025-07-31-npm-trusted-publishing-with-oidc-is-generally-available/)), and most recently NuGet ([September 2025](https://learn.microsoft.com/en-us/nuget/nuget-org/trusted-publishing)), as well as other package repositories.\n\nWhen npm released support for trusted publishing, it was our intention to let adoption of this new feature grow organically. However, attackers have shown us that they are not waiting. We strongly encourage projects to adopt trusted publishing as soon as possible, for all supported package managers.\n\n## Actions that npm maintainers can take today\n\nThese efforts, from GitHub and the broader software community, underscore our global commitment to fortifying the security of the software supply chain. The security of the ecosystem is a shared responsibility, and we’re grateful for the vigilance and collaboration of the open source community.\n\n**Here are the actions npm maintainers can take now:**\n\n- Use npm [trusted publishing](https://docs.npmjs.com/trusted-publishers) instead of tokens.\n- Strengthen [publishing settings](https://docs.npmjs.com/requiring-2fa-for-package-publishing-and-settings-modification) on accounts, orgs, and packages to require 2FA for any writes and publishing actions.\n- When [configuring two-factor authentication](https://docs.npmjs.com/configuring-two-factor-authentication), use WebAuthn instead of TOTP.\n\nTrue resilience requires the active participation and vigilance of everyone in the software industry. By adopting robust security practices, leveraging available tools, and contributing to these collective efforts, we can collectively build a more secure and trustworthy open source ecosystem for all.",
  "Description": "Addressing a surge in package registry attacks, GitHub is strengthening npm's security with stricter authentication, granular tokens, and enhanced trusted publishing to restore trust in the open source ecosystem.\n\nThe post [Our plan for a more secure npm supply chain](https://github.blog/security/supply-chain-security/our-plan-for-a-more-secure-npm-supply-chain/) appeared first on [The GitHub Blog](https://github.blog).",
  "Author": "Xavier René-Corail",
  "OutputDir": "_news",
  "FeedLevelAuthor": "The GitHub Blog",
  "FeedUrl": "https://github.blog/feed/",
  "ProcessedDate": "2025-09-23 00:51:52",
  "FeedName": "The GitHub Blog",
  "PubDate": "2025-09-23T00:29:50+00:00",
  "Link": "https://github.blog/security/supply-chain-security/our-plan-for-a-more-secure-npm-supply-chain/",
  "Tags": [
    "GitHub Security Lab",
    "npm",
    "Security",
    "Supply chain security"
  ]
}
