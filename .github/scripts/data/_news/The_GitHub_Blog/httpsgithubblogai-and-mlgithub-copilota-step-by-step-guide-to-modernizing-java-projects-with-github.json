{
  "Description": "Learn how to use GitHub Copilot agent mode to modernize legacy Java projects with guided upgrades, automated fixes, and cloud-ready migrations.\n\nThe post [A step-by-step guide to modernizing Java projects with GitHub Copilot agent mode](https://github.blog/ai-and-ml/github-copilot/a-step-by-step-guide-to-modernizing-java-projects-with-github-copilot-agent-mode/) appeared first on [The GitHub Blog](https://github.blog).",
  "ProcessedDate": "2025-09-23 13:22:29",
  "Link": "https://github.blog/ai-and-ml/github-copilot/a-step-by-step-guide-to-modernizing-java-projects-with-github-copilot-agent-mode/",
  "PubDate": "2025-09-23T13:00:00+00:00",
  "FeedName": "The GitHub Blog",
  "FeedLevelAuthor": "The GitHub Blog",
  "Author": "Andrea Griffiths",
  "Title": "A step-by-step guide to modernizing Java projects with GitHub Copilot agent mode",
  "EnhancedContent": "Whether you’re migrating your app to the cloud or updating Java runtime, modernizing legacy applications is rarely simple. Conflicting or deprecated dependencies, antiquated deployment targets, and lingering security vulnerabilities often block smooth progress.\n\nThat’s when **GitHub Copilot agent mode**, **** paired with the[GitHub Copilot app modernization](https://marketplace.visualstudio.com/items?itemName=vscjava.migrate-java-to-azure) VS Code **** extension, comes in.  This toolset delivers an interactive, step-by-step experience to help you upgrade and migrate your Java projects faster, with fewer errors and more confidence.\n\nWhile this guide highlights Java modernization, we also support end-to-end .NET app modernization within Visual Studio through GitHub Copilot Agent Mode. This includes AI-assisted .NET upgrades, cloud-ready migration paths, and seamless deployment to Azure — delivering a consistent, guided experience across the entire modernization journey that reduces manual effort and accelerates time to value. [Learn more in the docs](https://marketplace.visualstudio.com/items?itemName=ms-appmod.dotnet-modernization).\n\nIn this article, you’ll learn how to use these tools together in Visual Studio Code to:\n\n- Analyze your Java project and generate an upgrade plan\n- Apply changes automatically using GitHub Copilot\n- Fix build issues and validate tests in-loop\n- Detect and fix CVEs post-upgrade\n\n## But first, there are a few things you’ll need\n\nTo follow along, make sure you have:\n\n- [Visual Studio Code](https://github.com/microsoft/vscode-docs)\n- [GitHub Copilot license](https://github.com/features/copilot/plans?cft=copilot_li.features_copilot) (Pro, Pro +, Business and Enterprise subscribers also get access to [Copilot coding agent](https://github.blog/developer-skills/github/less-todo-more-done-the-difference-between-coding-agent-and-agent-mode-in-github-copilot/))\n- [GitHub Copilot app modernization – upgrade for Java extension](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-upgrade)\n- A Git based, legacy Java project built with [Maven](https://learn.microsoft.com/en-us/java/upgrade/quickstart-upgrade) or Gradle (anything using JDK 8 or later will work)\n\nGot it? Now let’s dive into the good stuff.\n\n## Overview\n\nWhen you start an agent session using the **Java upgrade extension**, Copilot performs the following:\n\n1. **Analyzes** your Java codebase\n2. **Generates a customizable upgrade plan**\n3. **Executes code transformations** using tools like OpenRewrite\n4. **Fixes build errors iteratively**\n5. **Validates changes through test execution**\n6. **Scans for CVEs**, provides code validation behavior and proposes secure replacements\n7. **Provides a full summary report**\n\n## Getting started, Step 1: Open your Java project in VS Code\n\nUse a [sample](https://github.com/spring-projects/spring-webflow) legacy Java project (or your own), with source control initialized using Git and a working test suite (ideally with unit tests).\n\n``` git clone https://github.com/your-org/your-legacy-java-app.git cd your-legacy-java-app code ```\n\n## Step 2: Start an agent session in VS Code\n\nLaunch the GitHub Copilot chat sidebar and start a new agent session. Choose **GitHub Copilot app modernization – upgrade for Java** from the available tools.\n\n![A Visual Studio Code window showing a Java project called &lsquo;spring-webflow&rsquo;. The file explorer is open on the left, displaying project files including build.gradle, settings.gradle, and a README.md. The main editor shows the README.md file with text describing Spring Web Flow. At the top, a Copilot agent mode tool selection dropdown is visible with options for upgrading Java projects. On the right sidebar, the Copilot Agent Mode panel is open, explaining how Copilot can edit files, run commands, and handle context.](https://github.blog/wp-content/uploads/2025/09/1.png?resize=1024%2C621)\n\nCopy and paste this inside your agent session to begin:\n\n``` Using Java upgrade tools,upgrade this project to Java 21. Analyze deprecated APIs, update Gradle dependencies, and propose a safe, testable migration plan. ```\n\n## Step 3: Let Copilot scan and plan\n\nCopilot will analyze your project and propose an upgrade plan. The tool begins with a scan of your:\n\n- JDK version usage\n- Build tool configurations (build.gradle for Gradle or pom.xml for Maven)\n- Outdated or insecure dependencies\n- Deprecated APIs and language features\n\nIt then creates a structured upgrade plan, editable in the Copilot chat. You can prompt Copilot to exclude modules from this upgrade or make any necessary adjustments to the plan.\n\n![Visual Studio Code window showing a Java project upgrade plan. In the main editor, the file plan.md is open with sections for Project Information, Java Environments, Upgrade Goals, and Additional Tasks. It specifies upgrading from Java 17 to Java 21 using Gradle Wrapper. On the right-hand Copilot Agent Mode panel, JSON input and output are displayed, showing that a new upgrade session was created with an auto-generated migration plan. The file explorer on the left lists project files including build.gradle, progress.md, and other configuration files.](https://github.blog/wp-content/uploads/2025/09/2.png?resize=1024%2C640)\n\n## Step 4: Apply changes and resolve errors\n\nOnce you approve the plan, Copilot begins upgrading files, adjusting imports, and fixing syntax errors. If build errors pop up, Copilot enters a fix-and-test loop until the project compiles cleanly.\n\n![Visual Studio Code window showing a log file 3.1.upgradeProjectUsingOpenRewrite.log from a Java project upgrade. The log details tasks for upgrading to Java 21, including collecting and applying OpenRewrite recipes, running Gradle builds, and reporting many tasks as UP-TO-DATE. On the right, the Copilot Agent Mode panel displays input and output for the upgrade session, with instructions and notes about executing the plan. The file explorer on the left lists Java project files, including logs, Gradle files, and source folders.](https://github.blog/wp-content/uploads/2025/09/3.png?resize=1024%2C642)\n\nCopilot produces a detailed upgrade report, including:\n\n- Changed files and commit history\n- API and dependency updates\n- Remaining to-dos and next steps\n\n![Visual Studio Code window showing a summary report summary.md for upgrading a Java project to version 21. The report includes project information, goals, test changes showing all 1177 tests passing before and after, and dependency changes with Java upgraded from 17 to 21. On the right sidebar, Copilot Agent Mode displays migration benefits, a risk assessment marked LOW, and next steps for production such as updating environments, CI/CD pipelines, documentation, and monitoring. The file explorer on the left shows project files including plan.md, progress.md, and Gradle configuration files.](https://github.blog/wp-content/uploads/2025/09/4.png?resize=1024%2C623)\n\nExample code changes before and after the upgrade:\n\n``` // Before (deprecated constructor) View view = this.resolver.resolveViewName(\"intro\", new Locale(\"EN\"));\n\n// After Java 21 upgrade View view = this.resolver.resolveViewName(\"intro\", Locale.of(\"EN\")); ```\n\n## Step 5: Migrate to Azure\n\nTo make the app Azure-ready, you can run an app assessment to identify cloud readiness issues. From the GitHub Copilot app modernization extension UI, click on Migrate to Azure.\n\n![Visual Studio Code sidebar showing the GitHub Copilot App Modernization panel. Under &lsquo;Quickstart&rsquo;, it asks how to modernize a Java app, with two blue buttons: &lsquo;Upgrade Runtime &amp; Frameworks&rsquo; and &lsquo;Migrate to Azure&rsquo;. A message below recommends using Claude Sonnet 3.7 or later. Below, an &lsquo;Assessment&rsquo; section links to an &lsquo;Assessment Report.](https://github.blog/wp-content/uploads/2025/09/5.png?resize=756%2C966)\n\nDepending on the deployment target, GitHub Copilot app modernization will identify cloud migration issues with recommended actions. To set the deployment target, modify the assessment-config.yaml file under the appmod-java/appcat folder. In this example, we will choose Azure Kubernetes Service (AKS) as the target. (Other deployment targets include Azure App Service, Azure App Service Managed Instance, Azure Container Apps, Azure Kubernetes Service, and AKS Automatic, etc.)\n\n![Visual Studio Code editor showing a YAML configuration file named assessment-config.yaml. The file defines appcat with a target set to azure-aks and mode set to source-only.](https://github.blog/wp-content/uploads/2025/09/6.png?resize=942%2C300)\n\nAn assessment report is generated, detailing cloud readiness issues. Click on the migrate button associated with the Auth Migration issue category to move from on-premise user authentication to Microsoft Entra ID.\n\n![Cloud Readiness report panel showing an issue under &lsquo;Auth Migration (Spring Security)&rsquo;. Criticality is marked as &lsquo;Potential (1)&rsquo;, code impact is 2, and the solution suggests migrating from on-premises user authentication to Microsoft Entra ID. A blue &lsquo;Migrate&rsquo; button appears in the Action column.](https://github.blog/wp-content/uploads/2025/09/7.png?resize=1024%2C99)\n\nSimilar to the upgrade process, Copilot first makes a plan highlighting the dependency updates and configuration changes. Once you approve the plan, Copilot will go ahead and execute the migration steps.\n\n![Visual Studio Code editor showing a plan.md file under code-migration. The file contains an analysis summary for a Spring WebFlow project with Spring Security integration. It notes use of Spring Security BOM 6.0.8, framework nature, SecurityFlowExecutionListener component, Java 21, and Spring Framework 6.0.23. The &lsquo;Files to be Modified&rsquo; section highlights dependency updates in build.gradle, requiring Microsoft Entra ID dependencies. Changes include adding spring-cloud-azure-starter-active-directory, spring-boot-starter-oauth2-client, and updating the BOM for Spring Cloud Azure dependencies.](https://github.blog/wp-content/uploads/2025/09/8.png?resize=1024%2C527)\n\nCopilot summarizes a list of changes made for this migration scenario. These changes include:\n\n- Added Microsoft Entra ID dependency in the build configuration\n- Added configuration for Microsoft Entra ID in Application.properties\n- Added configuration adapter for Spring security to enable Microsoft Entra ID\n- Added documentation to explain how to implement Microsoft Entra ID authentication with the Spring WebFlow app\n\n![Visual Studio Code editor showing a summary.md file titled &lsquo;Migration Summary: On-premises User Authentication to Microsoft Entra ID&rsquo;. The overview lists project details, migration scenario, session ID, date (September 10, 2025), and a status of &lsquo;Completed Successfully&rsquo;. The summary describes dependency updates, documentation creation, and framework enhancement for Spring WebFlow. On the right, the panel shows files created/modified (build.gradle, entra-id-integration.adoc, SampleEntraIdSecurityConfig.java, and application.properties) along with validation results confirming no vulnerabilities, successful build, and all tests passing.](https://github.blog/wp-content/uploads/2025/09/9.png?resize=1024%2C413)\n\n## Step 6: Validate changes and review the report\n\nWith your code updated, it’s time to confirm everything works as expected. Copilot will guide you through running your test suite using your project’s build system.\n\n**For Maven projects, you can also run tests manually with:**\n\nbash\n\n``` ./mvnw test ```\n\n**For Gradle projects:**\n\nbash\n\n``` ./gradlew test ```\n\nIf there are failures, Copilot will help debug or even write missing tests based on your recent changes. All with the *human-in-the-loop* principle, who has to confirm all proposed steps.\n\n## Automated CVE scanner\n\nGitHub Copilot app modernization automatically performs comprehensive CVE scanning across all changed dependencies, a critical security feature consistently requested by development teams. When vulnerabilities are detected, the agent intelligently proposes safe version replacements or recommends alternative libraries to maintain security compliance.\n\n![Validation report panel titled &lsquo;Iteration 1 &ndash; Stage 1: CVE Validation&rsquo;. It lists newly added dependencies spring-cloud-azure-starter-active-directory:5.22.0 and spring-boot-starter-oauth2-client:3.3.5. The output confirms &lsquo;No known CVEs found for the dependencies.&rsquo; A note at the bottom states that Stage 1 completed successfully with no changes required](https://github.blog/wp-content/uploads/2025/09/10.png?resize=1024%2C995)\n\n## Deploy to Azure\n\nDeploying the app to Azure can be a long, painstaking process, and requires a specific set of skills to craft infrastructure as code. We’ve simplified this step and automated deployment to Azure, so you can go from code to cloud faster.\n\n![Visual Studio Code sidebar showing the GitHub Copilot App Modernization for Java panel. Under &lsquo;Tasks&rsquo;, sections include Upgrade Tasks, Migration Tasks, Quality &amp; Security Tasks, Deployment Tasks, and My Tasks. The Deployment Tasks section is expanded, showing options to deploy to existing Azure infrastructure or provision infrastructure and deploy to Azure.](https://github.blog/wp-content/uploads/2025/09/11.png?resize=325%2C459) ![Deployment summary panel showing key highlights of an Azure deployment. It lists: 6 Azure resources provisioned, a live application running with a container apps URL, total deployment time of 4 minutes 58 seconds, auto-scaling enabled (1&ndash;10 replicas), full monitoring with Application Insights and Log Analytics, and secure deployment using managed identities. A note at the bottom explains this record serves as documentation for future reference and understanding resource relationships.](https://github.blog/wp-content/uploads/2025/09/12.png?resize=475%2C442)\n\n## Java modernization complete\n\nAnd that’s it. With GitHub Copilot app modernization, you can take a legacy Java project and make it cloud ready. It remediates code for Java upgrades and migrations scenarios, resolves build issues, validates changes, and even helps strengthen test coverage — all within a single, guided workflow.\n\n## Try Copilot agent mode today\n\nWhether you’re modernizing Java, upgrading .NET, or planning your next migration, these extensions that enhance Copilot agent mode are ready to help you analyze large codebases, plan upgrades or migrations, fix issues automatically, and save hours of manual debugging.\n\nSpecial thanks to[Sandra Ahlgrimm](https://www.linkedin.com/in/sandraahlgrimm/), senior cloud advocate at Microsoft, and[Nick Zhu](https://www.linkedin.com/in/nick-zhu-24bbb126/), senior program manager at Microsoft, who helped contribute to this blog post.\n\n**To get started,** modernize your[Java](https://aka.ms/ghcp-appmod/Java) and[.NET](https://aka.ms/ghcp-appmod/dotNET) apps, or learn more about the latest[AI-assisted modernization enhancements from Azure](https://aka.ms/mmsannouncement).",
  "OutputDir": "_news",
  "Tags": [
    "agent mode",
    "AI & ML",
    "GitHub Copilot",
    "java"
  ],
  "FeedUrl": "https://github.blog/feed/"
}
