{
  "EnhancedContent": "Since its initial launch in 2021, GitHub Copilot has evolved a lot — and so have the AI models that power it.\n\nWhen we first announced GitHub Copilot as a technical preview, OpenAI hadn’t yet launched ChatGPT. Today, AI dominates headlines and workflows alike. Amid this rapid change, our focus has remained the same: help developers stay in flow and get more done.\n\nAmidst all of that, we have been focused on continually improving GitHub Copilot with developers in mind. That’s meant re-evaluating what models power it, and [building agentic workflows into its core experience, too](https://github.blog/news-insights/product-news/from-pair-to-peer-programmer-our-vision-for-agentic-workflows-in-github-copilot/).\n\nIn this article, we’ll look at the models that drive different parts of GitHub Copilot and the powerful infrastructure that supports Copilot’s agentic capabilities. We’ll also discuss how model selection works across various features, like agent mode, code completions, and chat.\n\nNow, let’s take a look under the hood. ✨\n\n## From Codex to multi-model: The evolution of GitHub Copilot\n\nWhen GitHub Copilot launched in 2021, it was powered by a single model: Codex, a descendant of GPT-3.\n\nAt the time, Codex was a revelation. Capable of understanding and generating code in the IDE with surprising fluency, Codex helped prove that AI could be a valuable tool for developers and showed a future where AI could potentially become a true coding companion.\n\nSince then, Copilot has transitioned away from Codex and now defaults to the latest frontier models, while also giving developers access to their choice of advanced models.\n\nWhere it once lived firmly in the IDE as an extension to help developers with autocomplete and code generation, Copilot has evolved to become part of the GitHub platform available across developer workflows.\n\nCopilot can answer questions, generate tests, debug code, get assigned an issue, generate a pull request, assist with code reviews, analyze codebases, and even fix security vulnerabilities, among other things.\n\nThroughout all of these changes, we have focused on helping developers accomplish more, do less boilerplate work, stay in the flow, focus on the big picture, and ship higher-quality code faster.\n\n### Why offer multiple models?\n\nMoving Copilot to a multi-model architecture wasn’t just about keeping up with AI advancements. It was about allowing developers to choose their preferred LLM for the task at hand, giving them flexibility in a rapidly changing environment.\n\nDifferent models excel at different tasks, and by integrating a variety of them, GitHub Copilot can now deliver more tailored, powerful experiences through features like these:\n\n- **Baseline intelligence:** GitHub Copilot now defaults to GPT-4.1 across chat, agent mode, and code completions. Optimized for speed, reasoning, and context handling, GPT-4.1 is tuned for developer workflows and supports more than 30 programming languages.\n- **Frontier model access:** In Pro+, Business, and Enterprise tiers, developers can choose from a wide range of advanced models via the model picker, including:\n- **Anthropic**: Claude Sonnet 3.5, Claude Sonnet 3.7, Claude Sonnet 3.7 Thinking, Claude Sonnet 4, Claude Opus 4 (preview), **Claude Opus 4.1 (preview)**\n- **OpenAI**: GPT-4.1, GPT-5 (preview), GPT-5 mini (preview), **o3 (preview)**, o3-mini, **o4-mini (preview)**\n- **Google**: Gemini 2.0 Flash, Gemini 2.5 Pro\n\nEach option [offers different trade-offs between speed, reasoning depth, and multimodal capabilities](https://github.blog/ai-and-ml/github-copilot/a-guide-to-deciding-what-ai-model-to-use-in-github-copilot/).\n\n## Why developer choice matters in agentic workflows\n\nBecause Copilot supports multiple models, developers have the autonomy to choose exactly how they build, whether they’re prioritizing speed, precision, or creativity. This flexibility lets developers tailor their experience based on their preferences — and these developer experience (DevEx) improvements translate into real productivity gains.\n\nCopilot’s agentic capabilities mean that:\n\n- Developers no longer need to switch editors or even leave GitHub. Copilot is GitHub native, so it operates directly inside your IDE and in GitHub, which makes it easy to delegate tasks without breaking your flow.\n- Developers can work exactly how they prefer, whether that means automating tasks with Copilot, accepting suggested fixes, or stepping back and letting coding agent take over.\n- Copilot can operate with full context into your repositories, analyze and index your codebases, respect branch protections, and fit seamlessly into your existing review cycles.\n- Copilot handles the busywork — from triaging comments to patching vulnerabilities or chasing down cross-repo blockers — so developers can stay focused on what matters most.\n\nAgentic workflows help reduce complexity and prioritize developer choice at every step, leading to higher-quality code and fewer to-dos. This empowers developers to work the way they want: faster, safer, and with more confidence.\n\n### Delivering real-world impact through better DevEx\n\nGPT-4.1 was recently integrated into Copilot Chat and code completions, offering improved context windows and faster response times. These improvements translate directly into less waiting, more accurate assistance, and a smoother workflow.\n\nAs AI continues to evolve, its role in shaping the developer experience will only grow. From reducing context switching to automating repetitive tasks, AI tools like Copilot are increasingly becoming a “second brain” for developers.\n\nHaving a choice of models lets developers customize exactly how they work. This lets them build with confidence, drive even more impact, and find greater satisfaction in their work.\n\n## How model selection works in Copilot\n\nGitHub Copilot is more than just one single AI model. It’s a dynamic platform that uses intelligence to match the right model with the right task. This flexibility is central to delivering a seamless DevEx, and it’s guided by a deep understanding of how developers work, what they need, and when they need it.\n\n### Matching models to features\n\nEach Copilot feature is powered by a model specifically chosen to meet its unique demands:\n\n- [Code completions](https://docs.github.com/en/copilot/concepts/completions/code-suggestions)\n- Copilot code completions now default to **GPT-4.1**, optimized for speed, accuracy, and relevance across more than 30 programming languages.\n- [Agent mode](https://github.blog/ai-and-ml/github-copilot/agent-mode-101-all-about-github-copilots-powerful-mode/)\n- Designed for more complex, multi-step tasks, agent mode taps into models with advanced reasoning and planning capabilities.\n- Agent mode defaults to GPT-4.1, but developers can select other advanced models for specialized needs, such as Anthropic’s **Claude Sonnet** series, Google’s **Gemini 2.0 Flash**, or OpenAI’s reasoning models (**o1**, **o3-mini**), where available.\n- [Copilot Chat](https://docs.github.com/en/copilot/using-github-copilot/copilot-chat)\n- For natural language queries about code and development concepts, Copilot Chat relies on models with strong language understanding and generation abilities. This is why it runs on GPT-4.1 by default with the option to select other models including Claude 3.5/3.7 Sonnet, Claude 3.7 Sonnet Thinking, Gemini 2.0 Flash, o1, and o3-mini. These are all designed for tailored experiences depending on tier.\n- [Coding agent (new)](https://docs.github.com/en/copilot/concepts/coding-agent/coding-agent)\n- When developers delegate tasks like triaging issues, generating pull requests, or patching vulnerabilities, Copilot coding agent can be a helpful tool by turning Copilot into a peer you can hand off tasks to (it’s [also available via the Agent panel in github.com](https://github.blog/news-insights/product-news/agents-panel-launch-copilot-coding-agent-tasks-anywhere-on-github/)).\n- [Code review (new)](https://docs.github.com/copilot/using-github-copilot/code-review/using-copilot-code-review)\n- Code reviews are a new addition to the GitHub Copilot feature set, and are powered by GPT-4.1, because of how it balances accuracy and responsiveness. For deeper reasoning across large codebases, developers can opt into models like Claude 3.7 Sonnet or Claude 3.7 Sonnet Thinking.\n\n### Choosing the right model for the job\n\nDevelopment tasks vary in complexity and context. That’s why GitHub Copilot empowers users to select the model that best suits their needs, especially in Chat and agent mode.\n\nWhether you’re optimizing for speed, reasoning depth, or multimodal input, there’s a model for you:\n\n| **Model** | **Best for:** | | --- | --- | | **o4-mini** (OpenAI) | Speed, low-latency completions | | **GPT-4.1** (OpenAI) | Balanced performance and multimodal support | | **GPT-5 mini** (OpenAI) | Lightweight reasoning | | **GPT-5** (OpenAI) | High-end reasoning for complex tasks | | **o3** (OpenAI) | Advanced planning and multi-step reasoning | | **Claude Sonnet 3.5** | Reliable, everyday coding tasks | | **Claude Sonnet 3.7** | Deeper reasoning for large codebases | | **Claude Sonnet 3.7 Thinking** | Long-horizon, structured problem-solving | | **Claude Sonnet 4** | Higher reasoning depth | | **Claude Opus 4** | Premium reasoning power | | **Claude Opus 4.1** | Most advanced Anthropic option | | **Gemini 2.0 Flash** (Google) | Fast, multimodal capabilities | | **Gemini 2.5 Pro** | Advanced multimodal reasoning |\n\n### Recent upgrades: GPT-4.1 across the board\n\nCopilot Chat, code completions, and pull request summaries now run on GPT-4.1 from OpenAI.\n\nThis upgrade brings:\n\n- **Faster responses**: ~40% faster response generation than GPT‑4o\n- **Increased context windows:** Supports significantly more context than previous defaults.\n\nWe’ve expanded premium model access for Pro+, Business, and Enterprise plans to include a broad range of powerful AI options. These include Anthropic’s Claude Sonnet 3.5, Claude Sonnet 3.7, Claude Sonnet 3.7 Thinking, Claude Sonnet 4, and Claude Opus 4 (preview); Google’s Gemini 2.0 Flash and Gemini 2.5 Pro; and OpenAI’s GPT‑4.1, GPT‑5 (preview), GPT‑5 mini (preview), o3 (preview), o3‑mini, o4‑mini (preview).\n\nThese models are available via premium requests, in addition to unlimited access to agent mode, context-driven chat, and code completions using our base model. With the new Pro+ tier, individual developers can unlock the full potential of these advanced models.\n\n## Take this with you\n\nAs the world of AI keeps evolving, so will the models that power GitHub Copilot. We’re committed to continuously refining and updating our AI infrastructure to provide you with the best possible developer experience.\n\nWe encourage you to explore all the different models available within Copilot and discover how they can enhance your coding journey. Happy building!\n\n**Interested in trying GitHub Copilot?** [Read the Docs](https://docs.github.com/en/copilot/about-github-copilot/github-copilot-features) to learn more about Copilot features or [get started](https://github.com/features/copilot?ocid=AIDcmmc3fhtaow_SEM__k_Cj0KCQjwsp6pBhCfARIsAD3GZubTXuCGU1hy65GlbZ2fA1YjoRRhw64GoF8UI-lrQsnWSqAWJ7dC3QoaAqQ4EALw_wcB_k_) today.",
  "Author": "Alexandra Lietzke",
  "FeedUrl": "https://github.blog/feed/",
  "OutputDir": "_news",
  "FeedLevelAuthor": "The GitHub Blog",
  "Tags": [
    "AI",
    "AI & ML",
    "generative AI",
    "GitHub Copilot",
    "LLM"
  ],
  "PubDate": "2025-08-29T16:14:42+00:00",
  "ProcessedDate": "2025-08-29 17:09:47",
  "Title": "Under the hood: Exploring the AI models powering GitHub Copilot",
  "Link": "https://github.blog/ai-and-ml/github-copilot/under-the-hood-exploring-the-ai-models-powering-github-copilot/",
  "FeedName": "The GitHub Blog",
  "Description": "Learn how GitHub Copilot’s evolving models and infrastructure center developer choice and power agentic workflows.\n\nThe post [Under the hood: Exploring the AI models powering GitHub Copilot](https://github.blog/ai-and-ml/github-copilot/under-the-hood-exploring-the-ai-models-powering-github-copilot/) appeared first on [The GitHub Blog](https://github.blog)."
}
