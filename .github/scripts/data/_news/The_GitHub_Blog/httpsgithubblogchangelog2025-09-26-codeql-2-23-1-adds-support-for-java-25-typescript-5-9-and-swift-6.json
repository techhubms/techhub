{
  "Description": "CodeQL is the static analysis engine behind GitHub code scanning, which finds and remediates security issues in your code. We’ve recently released CodeQL 2.23.1, which includes the following: Added support…\n\nThe post [CodeQL 2.23.1 adds support for Java 25, TypeScript 5.9 and Swift 6.1.3](https://github.blog/changelog/2025-09-26-codeql-2-23-1-adds-support-for-java-25-typescript-5-9-and-swift-6-1-3) appeared first on [The GitHub Blog](https://github.blog).",
  "FeedUrl": "https://github.blog/changelog/feed/",
  "OutputDir": "_news",
  "Title": "CodeQL 2.23.1 adds support for Java 25, TypeScript 5.9 and Swift 6.1.3",
  "Author": "Allison",
  "PubDate": "2025-09-26T19:28:56+00:00",
  "EnhancedContent": "CodeQL is the static analysis engine behind [GitHub code scanning](https://docs.github.com/code-security/code-scanning/introduction-to-code-scanning/about-code-scanning-with-codeql), which finds and remediates security issues in your code. We’ve recently released [CodeQL 2.23.1](https://codeql.github.com/docs/codeql-overview/codeql-changelog/codeql-cli-2.23.1/), which includes the following:\n\n- Added support for Java 25, TypeScript 5.9, and Swift 6.1.3\n- Introduced a new server-side request forgery (SSRF) query for Rust\n- Modernized several Python quality queries\n- Improved Java null dereference analysis and JavaScript data flow and framework modeling\n\n## Language and framework support\n\n- **Java / Kotlin:** Added support for Java 25, including compact source files (JEP 512) and module import declarations.\n- **JavaScript / TypeScript:** Added support for TypeScript 5.9.\n- **Swift:** Added support for analyzing projects using Swift 6.1.3.\n\n## Query changes\n\nWe have also made improvements and additions to queries across several languages:\n\n- **Rust:** Added a new security query [`rust/request-forgery`](https://codeql.github.com/codeql-query-help/rust/rust-request-forgery/) to detect server-side request forgery (SSRF) vulnerabilities.\n- **Java:** Reimplemented [`java/dereferenced-value-may-be-null`](https://codeql.github.com/codeql-query-help/java/java-dereferenced-value-may-be-null/) reducing false positives.\n- **JavaScript / TypeScript:** Promoted the query [`js/cors-permissive-configuration`](https://codeql.github.com/codeql-query-help/javascript/js-cors-misconfiguration-for-credentials/) from experimental status into the default security suite. This query can detect misconfiguration of CORS HTTP headers that can lead to leaks of secret credentials.\n- **Python:** Modernized the queries [`py/missing-call-to-init`](https://codeql.github.com/codeql-query-help/python/py-missing-call-to-init/), [`py/missing-calls-to-del`](https://codeql.github.com/codeql-query-help/python/py-missing-call-to-delete/), [`py/multiple-calls-to-init`](https://codeql.github.com/codeql-query-help/python/py-multiple-calls-to-init/), and [`py/multiple-calls-to-del`](https://codeql.github.com/codeql-query-help/python/py-multiple-calls-to-delete/), resulting in more precise results, clearer messages, and updated documentation.\n- **Go:**\n\n- The [`go/path-injection`](https://codeql.github.com/codeql-query-help/go/go-path-injection/) query now detects sanitization patterns that prepend `\\`\nto paths, improving accuracy.\n- Adjusted path injection query so the second argument to `os.CreateTemp`\nis no longer treated as a sink due to proper sanitization performed by Go.\n- **C/C++:** Reduced the precision of [`cpp/wrong-type-format-argument`](https://codeql.github.com/codeql-query-help/cpp/cpp-wrong-type-format-argument/), [`cpp/comparison-with-wider-type`](https://codeql.github.com/codeql-query-help/cpp/cpp-comparison-with-wider-type/), [`cpp/integer-multiplication-cast-to-long`](https://codeql.github.com/codeql-query-help/cpp/cpp-integer-multiplication-cast-to-long/), [`cpp/implicit-function-declaration`](https://codeql.github.com/codeql-query-help/cpp/cpp-implicit-function-declaration/), and [`cpp/suspicious-add-sizeof`](https://codeql.github.com/codeql-query-help/cpp/cpp-suspicious-add-sizeof/) from high to medium and moved them to the [security extended](https://docs.github.com/code-security/code-scanning/managing-your-code-scanning-configuration/codeql-query-suites#security-extended-query-suite) query suite. This will close all alerts identified by these queries if a default query suite is used. The alerts can be brought back by enabling the security extended query suite.\n- **C#:** Improved `cs/call-to-object-tostring`\nto suppress false positives for enum types.\n\nFor GitHub Actions, file coverage information is now surfaced on the [code scanning tool status page](https://docs.github.com/code-security/code-scanning/managing-your-code-scanning-configuration/about-the-tool-status-page#viewing-the-tool-status-page-for-a-repository), improving observability of analysis completeness.\n\nFor a full list of changes, please refer to the complete [changelog for version 2.23.1](https://codeql.github.com/docs/codeql-overview/codeql-changelog/codeql-cli-2.23.1/). Every new version of CodeQL is automatically deployed to users of GitHub code scanning on github.com. The new functionality in CodeQL 2.23.1 will also be included in a GitHub Enterprise Server (GHES) 3.20 release. If you use an older version of GHES, you can [manually upgrade your CodeQL version](https://docs.github.com/enterprise-server@3.17/admin/managing-code-security/managing-github-advanced-security-for-your-enterprise/configuring-code-scanning-for-your-appliance#configuring-codeql-analysis-on-a-server-without-internet-access).",
  "FeedName": "The GitHub Blog",
  "FeedLevelAuthor": "Archive: 2025 - GitHub Changelog",
  "ProcessedDate": "2025-09-26 20:12:37",
  "Link": "https://github.blog/changelog/2025-09-26-codeql-2-23-1-adds-support-for-java-25-typescript-5-9-and-swift-6-1-3",
  "Tags": [
    "application security",
    "Improvement"
  ]
}
