{
  "ProcessedDate": "2025-08-15 14:26:42",
  "PubDate": "2025-08-14T16:30:00+00:00",
  "Link": "https://github.blog/ai-and-ml/generative-ai/gpt-5-in-github-copilot-how-i-built-a-game-in-60-seconds/",
  "FeedUrl": "https://github.blog/feed/",
  "Author": "Kedasha Kerr",
  "FeedName": "The GitHub Blog",
  "EnhancedContent": "What an exciting time to be a developer! [GPT-5](https://github.blog/changelog/2025-08-07-openai-gpt-5-is-now-in-public-preview-for-github-copilot/) just dropped and it’s already available in [GitHub Copilot](https://github.com/features/copilot). I was literally watching OpenAI’s livestream when they announced it, and I couldn’t contain my excitement — especially knowing we could start building with it immediately with our favorite AI peer programmer.\n\nIf you’ve been following our Rubber Duck Thursday streams, you know I love exploring new AI models and tools. This stream was all about two game-changing releases: **GPT-5** and the **GitHub Model Context Protocol (MCP) server**. And wow, did we cover some ground!\n\nLet me walk you through what we built, what we learned, and how you can start using these powerful tools in your own development workflow today.\n\n## GPT-5: Bringing increased reasoning capabilities to your workflows\n\nGPT-5 is OpenAI’s most advanced model yet, and the best part? **It’s now available to use in your favorite IDE.** You can access it in ask, edit, and agent modes in VS Code — which is incredible because not all models are available across all modes.\n\nWhat really impressed me was the **speed**. This is a reasoning model, and the response time was genuinely faster than I expected. When I was building with it, suggestions came back almost instantly, and the quality was noticeably different.\n\n### How to enable GPT-5 in GitHub Copilot:\n\n1. Open the model picker in your Copilot interface\n2. Select **GPT-5** from the available options\n3. Start building!\n\n![A screenshot showing GPT-5 (Preview) available in the model picker drop-down menu within GitHub Copilot.](https://github.blog/wp-content/uploads/2025/08/gpt5.png?resize=521%2C501)\n\n| **Enterprise note**: If you’re using GitHub Copilot through your company, enterprise and business administrators need to opt in to enable GPT-5 access. Chat with your IT team if you don’t see it available yet. | | --- |\n\n## Live test: Building a Magic Tiles game in under 60 seconds\n\nI wanted to put GPT-5 to the test immediately, so I asked my stream audience what I should build. The overwhelming response? **A game!** Someone suggested Magic Tiles (which, I’ll be honest, I had no idea how to play). But that’s where GPT-5 really shined.\n\nHere’s my approach when building with AI (what I call **spec-driven development**):\n\n### Step 1: Let AI create the product requirements\n\nInstead of jumping straight into code, I asked GPT-5:\n\n``` Do you know the game Magic Tiles? If you do, can you describe the game in simple MVP terms? No auth, just core functionality. ```\n\nGPT-5 delivered an incredibly detailed response with:\n\n- Task breakdown and core gameplay loop\n- Minimal feature set requirements\n- Data model structure\n- Clear checklist for building the game\n\n**This is exactly why context is king with LLMs.** By asking for a spec first, I gave GPT-5 enough context to build something cohesive and functional.\n\n### Step 2: Build with a simple prompt\n\nWith the MVP spec ready, I simply said:\n\n``` Build this. ```\n\nThat’s it. No framework specifications, no technology stack requirements — just “build this.” And you know what? GPT-5 made smart choices:\n\n- Using HTML, CSS, and JavaScript for a simple MVP\n- Creating a canvas-based game with proper input handling\n- Adding scoring, combo tracking, and speed progression\n- Implementing game over functionality\n\n**The entire build took less than a minute.** I’m not exaggerating; GPT-5 delivered a working prototype that quickly.\n\n### Step 3: Iterate with natural language\n\nWhen I realized the game needed better user instructions, I asked:\n\n``` Can you provide user instructions on how to play the game before the user clicks start? ```\n\nGPT-5 immediately updated the HTML with clear instructions and even gave me suggestions for next features. This iterative approach felt incredibly natural, like having a conversation with a very smart coding partner.\n\nNext, let’s take a look at the GitHub MCP Server!\n\n## GitHub MCP server: Automating GitHub with natural language\n\nNow, let’s talk about something that’s going to **change how you interact with GitHub**: the [Model Context Protocol (MCP) server](https://github.blog/ai-and-ml/generative-ai/a-practical-guide-on-how-to-use-the-github-mcp-server/).\n\n### What is MCP and why should you care?\n\n[MCP](https://github.blog/ai-and-ml/llms/what-the-heck-is-mcp-and-why-is-everyone-talking-about-it/) is a standard for connecting AI assistants to external tools and applications. Think of it as a bridge that lets your large language model (LLM) talk to:\n\n- GitHub repositories and issues\n- Gmail accounts\n- SQL servers\n- Figma projects\n- And so much more\n\n**Without MCP, your LLMs live in isolation. With MCP, they become powerful automation engines** that can interact with your entire development ecosystem.\n\nMCP follows a client-server architecture, similar to REST APIs. In VS Code, for example, VS Code acts as both the host (providing the environment) and the client (connecting to MCP servers).\n\n### Setting up GitHub MCP server (surprisingly simple!)\n\nGetting started with GitHub’s MCP server takes less than 5 minutes:\n\n#### 1. Create the configuration file\n\nCreate a `.vscode/mcp.json` file in your workspace root:\n\n``` { \"servers\": { \"github\": { \"command\": \"npx\", \"args\": [\"-y\", \"@github/mcp-server-github\"] } } } ```\n\n#### 2. Authenticate with GitHub\n\nClick the “Start” button in your MCP configuration. You’ll go through a standard GitHub OAuth flow (with passkey support!).\n\n#### 3. Access your tools\n\nOnce authenticated, you’ll see GitHub MCP server tools available in your Copilot interface.\n\n**That’s it!** No complex setup, no API keys to manage, just simple configuration and authentication.\n\n## Real-world MCP automation that will blow your mind\n\nDuring the stream, I demonstrated some genuinely useful MCP workflows that you can start using today.\n\n### Creating a repository with natural language\n\nI previously built a project called “Teenyhost” (a clone of Tiinyhost for temporarily deploying documents to the web), and I want to create a repository for it. Instead of manually creating a GitHub repo, I simply asked Copilot:\n\n``` Can you create a repository for this project called teenyhost? ```\n\nGPT-5 asked for the required details:\n\n```\n- Repository name: teenyhost\n- Owner: my GitHub username\n- Visibility: public\n- Optional description\n```\n\nI provided these details, and **within seconds**, Copilot used the MCP server to:\n\n- Create the repository on GitHub\n- Push my local code to the new repo\n- Set up the proper Git remotes\n\nThis might seem simple, but think about the workflow implications. How many times have you been deep in a coding session and wanted to quickly push a project to GitHub? Instead of context-switching to the browser, **you can now handle it with natural language right in your editor.**\n\n### Bulk issue creation from natural language\n\nHere’s where things get really interesting. I asked Copilot:\n\n``` What additional features and improvements can I implement in this app? ```\n\nIt came back with categorized suggestions:\n\n- Low effort quick wins\n- Core robustness improvements\n- Enhanced user experience features\n- Advanced functionality\n\nThen I said:\n\n``` Can you create issues for all the low effort improvements in this repo? ```\n\nAnd just like that, Copilot created **five properly formatted GitHub issues** with:\n\n- Descriptive titles\n- Detailed descriptions\n- Implementation suggestions\n- Appropriate labels\n\n**Think about how powerful this is for capturing project ideas.** Instead of losing great suggestions in Slack threads or meeting notes, you can immediately convert conversations into actionable GitHub issues.\n\n## What makes this workflow revolutionary\n\nAfter using both GPT-5 and the GitHub MCP server extensively, here’s what stood out:\n\n### Speed and context retention\n\nGPT-5’s processing speed is genuinely impressive. This isn’t just about faster responses — **it’s about maintaining flow state while building.** When your AI assistant can keep up with your thought process, the entire development experience becomes more fluid.\n\n### Natural language as a development interface\n\nThe GitHub MCP server eliminates the friction between having an idea and taking action. No more:\n\n- Switching between VS Code and github.com\n- Manually formatting issue descriptions\n- Context-switching between coding and project management\n\n### Human-in-the-loop automation\n\nWhat I love about this setup is that **you maintain control.** When Copilot wanted to push directly to the main branch, I could cancel that action. The AI handles the tedious parts while you make the important decisions.\n\n## Your action plan: Start building today\n\nWant to dive in? Here’s exactly what to do:\n\n### Try GPT-5 immediately\n\n1. Open GitHub Copilot in your IDE\n2. Switch to the GPT-5 model in your model picker\n3. Start with agent mode for complex builds\n4. Try the spec-driven approach: ask for requirements first, then build\n\n### Set up GitHub MCP server\n\n1. Create `.vscode/mcp.json`\nin your workspace\n2. Add the GitHub MCP server configuration\n3. Authenticate with GitHub\n4. Start automating your GitHub workflows with natural language\n5. Experiment with automation workflows:\n- Create repositories for side projects\n- Generate issues from brainstorming sessions\n- Automate branch creation and pull request workflows\n- Explore the full range of MCP tools available\n\n## On the horizon\n\nThe combination of GPT-5 and GitHub MCP server represents a **significant shift in how we interact with our development tools.** We’re moving from manual, interface-driven workflows to conversational, intent-driven automation.\n\n**On our next Rubber Duck Thursday**, I’m planning to build our first custom MCP server from scratch. I’ve never built one before, so we’ll learn together — which is always the most fun way to explore new technology.\n\nIn the meantime, I encourage you to:\n\n- Install the [GitHub MCP server](https://github.com/github/github-mcp-server) and experiment with it.\n- Try building something with GPT-5 using the spec-driven approach.\n- Share your experiments and results with the community.\n\n**The tools are here, they’re accessible, and they’re ready to supercharge your development workflow.** What are you going to build first?\n\n**Get started** with [GitHub Copilot &gt;](https://github.com/features/copilot)",
  "Title": "GPT-5 in GitHub Copilot: How I built a game in 60 seconds",
  "FeedLevelAuthor": "The GitHub Blog",
  "OutputDir": "_news",
  "Description": "How GitHub's new MCP server and GPT-5 are revolutionizing developer workflows — with live build examples.\n\nThe post [GPT-5 in GitHub Copilot: How I built a game in 60 seconds](https://github.blog/ai-and-ml/generative-ai/gpt-5-in-github-copilot-how-i-built-a-game-in-60-seconds/) appeared first on [The GitHub Blog](https://github.blog).",
  "Tags": [
    "AI & ML",
    "Generative AI"
  ]
}
