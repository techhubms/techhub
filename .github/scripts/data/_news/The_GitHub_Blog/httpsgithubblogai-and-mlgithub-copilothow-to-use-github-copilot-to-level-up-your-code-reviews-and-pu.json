{
  "FeedUrl": "https://github.blog/feed/",
  "Link": "https://github.blog/ai-and-ml/github-copilot/how-to-use-github-copilot-to-level-up-your-code-reviews-and-pull-requests/",
  "Tags": [
    "AI & ML",
    "code review",
    "GitHub Copilot",
    "pull requests"
  ],
  "OutputDir": "_news",
  "FeedName": "The GitHub Blog",
  "ProcessedDate": "2025-08-08 19:12:23",
  "Title": "How to use GitHub Copilot to level up your code reviews and pull requests",
  "FeedLevelAuthor": "The GitHub Blog",
  "EnhancedContent": "Since I joined GitHub as a software engineer on the billing team almost three years ago, I’ve had a front row seat to the evolution of AI coding tools including [Github Copilot](https://github.com/features/copilot). What started out as code completions has evolved into so much more including [agentic workflows](https://github.blog/news-insights/product-news/from-pair-to-peer-programmer-our-vision-for-agentic-workflows-in-github-copilot/https://github.blog/news-insights/product-news/from-pair-to-peer-programmer-our-vision-for-agentic-workflows-in-github-copilot/) and [refactoring suggestions](https://github.blog/ai-and-ml/github-copilot/github-for-beginners-code-review-and-refactoring-with-github-copilot). When I first started using Copilot, I was mainly using it in VSCode. As Copilot has grown and expanded, I’ve extended my use cases beyond my code editor and into all parts of my day-to-day work, including pull requests, code reviews, and more.\n\nGitHub Copilot is now available in all parts of the software development life cycle and one place where it can be extremely useful is when you’re creating pull requests and doing [code reviews](https://github.blog/developer-skills/github/how-to-review-code-effectively-a-github-staff-engineers-philosophy/). During my time at GitHub, I’ve discovered some practical ways Copilot can make a difference during the pull request and code review processes. Here are a few things I’ve started doing that have made my workflow smoother and more efficient.\n\n## Using Copilot suggestions when reviewing code\n\nOften, when I’m reviewing a teammate’s pull request, I’ll have an idea for how their code could be improved, or I’ll want to confirm the code is following best practices. However, I don’t always have time to write the suggested refactored code myself. In these cases, I’ll usually click the Copilot icon next to the file I’m reviewing and ask Copilot to suggest a specific improvement about the lines of code I’m currently reviewing. Then I’ll add that suggestion in my review comment along with some explanation of why I think the suggestion would improve the code.\n\nRecently while reviewing a teammate’s code, I noticed some repetitive code in a Ruby file. I clicked the Copilot icon next to the relevant code and prompted it with:\n\n```\n> “Can you refactor this Ruby on Rails code to reduce repetition?”\n```\n\nCopilot’s suggestion matched what I would have written and saved me several minutes, which allowed me to focus on higher-level feedback.\n\nSince I frequently switch context and review code in different languages like Ruby, TypeScript and Go, sometimes I’ll need a reminder on best practices for each language. I recently used this prompt to help me review some Go code:\n\n```\n> “Is this code addition following Go best practices for variable assignment? If not, can you suggest improvements?”\n```\n\nCopilot quickly generated a suggestion that I reviewed and used as part of my code review comment. It saved me time and made my feedback more actionable.\n\n![Screenshot of a GitHub pull request for a Go file, suggesting a change to use the short variable declaration &ldquo;result := add(1, 2)&rdquo; instead of &ldquo;var result int&rdquo;. A Copilot panel on the right summarizes the changes and explains the reasoning behind the suggestion.](https://github.blog/wp-content/uploads/2025/08/Screenshot-2025-07-09-at-4.31.23-PM.png?resize=1024%2C448)\n\n## Formatting tables and data for pull requests\n\nI like to add images, screen recordings, and occasionally spreadsheets to my pull request descriptions to add context to help reviewers understand my changes. Adding this type of information in Markdown can be tedious! In these cases, I ask Copilot to do the formatting for me.\n\nRecently, I was working on some improvements to help decrease the load time of a React page, and I wanted to show the improvements that my changes were making. I had been keeping a spreadsheet detailing the the page load times before and after my changes, and I wanted to include it in my pull request description, so I gave Copilot this prompt:\n\n``` Format this data into a GitHub flavored markdown table that I can paste into a GitHub pull request description:\n\nLoad Time Before (in seconds) Load Time After Updates (in seconds) 1.3 1.2 1.2 1.1 1.1 0.885 1.3 1.3 1.2 0.918\n\nAverage 1.22 1.0806 ```\n\nAnd Copilot gave this response:\n\n``` Here’s your data formatted as a GitHub-flavored markdown table, ready to paste into a pull request description: Markdown | Test Run | Load Time Before (seconds) | Load Time After Updates (seconds) | |----------|---------------------------|-----------------------------------| | 1 | 1.3 | 1.2 | | 2 | 1.2 | 1.1 | | 3 | 1.1 | 0.885 | | 4 | 1.3 | 1.3 | | 5 | 1.2 | 0.918 | | **Average** | **1.22** | **1.0806**\n\nLet me know if you’d like any adjustments! ```\n\nThis simple trick has made it much easier for me to clearly share data in my pull request descriptions and comments.\n\n## Letting Copilot help write pull request summaries\n\nI often use Copilot [to help me write pull request summaries](https://docs.github.com/en/copilot/using-github-copilot/creating-a-pull-request-summary-with-github-copilot). We’ve all been there: you finally open your pull request after fixing a bug or introducing a new feature and the last hurdle is writing the pull request description. Copilot can help kickstart this process for you by using the Copilot icon in the pull request description editor bar. Even if I end up editing the text, having a starting point makes it less daunting.\n\n![Screenshot of a GitHub pull request page titled \"Test PR #1\" showing the conversation tab, with a Copilot menu offering options to generate a summary or an outline of the pull request changes.](https://github.blog/wp-content/uploads/2025/08/Screenshot-2025-07-09-at-4.31.54-PM.png?resize=1024%2C438)\n\n## Using Copilot for code reviews and understanding unfamiliar code\n\nCopilot is very good at reviewing and explaining code and two ways I leverage this in my day-to-day work are requesting initial code reviews from Copilot and asking questions about unfamiliar code.\n\nBefore I mark a pull request as ready for review, I’ll use Copilot to do a quick pass over my changes by requesting [a code review from Copilot](https://docs.github.com/en/copilot/how-tos/use-copilot-agents/request-a-code-review/use-code-review). It often catches things I might have missed or suggests a better way to write something. And don’t forget to add some notes in [the custom instructions in your repository](https://docs.github.com/en/copilot/how-tos/agents/copilot-code-review/using-copilot-code-review#customizing-copilots-reviews-with-custom-instructions) on what you want Copilot to focus on when reviewing pull requests.\n\nIf I’m reviewing someone else’s code and I don’t understand a change, I’ll ask Copilot to explain it. This helps me get context quickly, especially when I’m less familiar with that part of the codebase. This better understanding of the code allows me to provide more thoughtful and thorough code reviews for my teammates and ensures that I fully understand the potential impact of any pull request that I’m approving.\n\n## Copilot’s impact on code reviews and pull requests\n\nWhile Copilot isn’t a replacement for thoughtful, engaged code reviews, it has become an indispensable tool in my daily workflow as a software engineer. From generating smart suggestions and code refactors, to quick Markdown formatting and drafting pull request summaries, Copilot helps streamline the work that surrounds writing code by making feedback more actionable and the code review process faster and more thorough. By integrating Copilot into every stage of the software development life cycle, I’m able to focus on higher-level engineering problems and collaboration. As Copilot continues to evolve, I’m excited to see how it will further transform not just my workflow, but the way developers everywhere build software together.\n\n**Get started** with [GitHub Copilot &gt;](https://github.com/features/copilot)",
  "Author": "Melissa Pastore",
  "PubDate": "2025-08-08T16:00:00+00:00",
  "Description": "Discover practical ways GitHub Copilot streamlines code reviews, pull requests, and daily engineering tasks with real prompts, examples, and workflow tips from our engineering team.\n\nThe post [How to use GitHub Copilot to level up your code reviews and pull requests](https://github.blog/ai-and-ml/github-copilot/how-to-use-github-copilot-to-level-up-your-code-reviews-and-pull-requests/) appeared first on [The GitHub Blog](https://github.blog)."
}
