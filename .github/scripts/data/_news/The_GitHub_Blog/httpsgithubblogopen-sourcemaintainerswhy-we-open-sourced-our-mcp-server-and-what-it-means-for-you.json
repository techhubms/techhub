{
  "FeedUrl": "https://github.blog/feed/",
  "Link": "https://github.blog/open-source/maintainers/why-we-open-sourced-our-mcp-server-and-what-it-means-for-you/",
  "OutputDir": "_news",
  "EnhancedContent": "Imagine you‚Äôre coding in VS Code with Copilot agent mode. You ask it: ‚ÄúWhat‚Äôs the status of PR #72?‚Äù But instead of fetching the details from GitHub, the model hallucinates an answer based on outdated context or guessed semantics. It sounds convincing, but it‚Äôs just wrong. Models, after all, are only as good as the context given to them. If large language models (LLMs) don‚Äôt have the ability to connect to other apps and tools, they‚Äôre not as useful as they can be.\n\nThis is the core problem that [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol) was built to solve.\n\nMCP is an open protocol that standardizes how LLM apps connect to and work with your external tools and data sources. It is similar to the Language Server Protocol (LSP) in that both follow client-server architecture, they simplify interaction between systems, and they provide standardized communication patterns. In essence, MCP is the LSP of LLMs.\n\nAnd now, GitHub has open-sourced its own MCP server. It acts as a source-of-truth interface between GitHub and any LLM, reducing hallucinations and unlocking new automation workflows.\n\n*We cover this (and more!) in our latest episode of the GitHub Podcast! Listen below üëá*\n\n## MCP architecture\n\nMCP is based on a client-server architecture where an MCP host¬† ‚Äî an AI app like Copilot Chat ‚Äî maintains a dedicated 1:1 connection with MCP servers. Some key concepts to understand:\n\n- **MCP host**: an LLM app that wants to access data via MCP (eg. VS Code, Copilot Chat)\n- **MCP clients**: maintain a 1:1 connection with MCP servers, inside the host app\n- **MCP servers**: lightweight programs that expose specific capabilities through MCP\n\n## GitHub‚Äôs MCP Server\n\nThe GitHub MCP Server connects AI tools directly to GitHub‚Äôs platform. Instead of performing REST or GraphQL API calls, you point your MCP-compatible client or agent to the server, and request exactly what you need. For example, you could ask it to:\n\n- List all open issues in a repository\n- Show pull requests waiting for review\n- Fetch metadata about a repo or file\n- Create or comment on issues\n\nThe magic is that you can now use natural language to make requests that are automagically converted into structured, semantically meaningful API calls. You‚Äôre no longer creating custom¬† API endpoints or parsing markdown descriptions. Ask for what you need in natural language to fetch real-time data from GitHub.\n\nAnd because the server speaks MCP, it can work with any compatible host. Copilot Workspace, VS Code plugins, LLM-based products, custom chat UIs, and homegrown agents can all request context or trigger actions using the same standardized interface.\n\n## How it works\n\nThe architecture is conceptually simple, but powerful:\n\n1. **Server**: GitHub‚Äôs MCP Server is a standalone service that listens for structured MCP requests.\n2. **Client**: A connector between the host and server. It knows how to translate user intent into valid MCP requests.\n3. **Host**: The AI front-end (like an IDE assistant or chat UI) that surfaces the conversation and sends structured prompts downstream.\n\nWhen a user asks a question, the host translates the question into a semantic request, the client packages it as an MCP request, and the server fetches the real data from GitHub and returns it as structured JSON.\n\nThis creates a clean separation between the language model, the UX, and the data or tools it can access. Each layer is modular, testable, and swappable.\n\n## How to get started using the GitHub Remote MCP Server\n\nThe best part: You can start using GitHub‚Äôs MCP server today! Here‚Äôs what you need:\n\n- **MCP Host**: VS Code or any other LLM application that supports MCP\n- **MCP Client**: Copilot agent, LLM chat UI, or custom client that speaks MCP\n- **GitHub MCP Server**: Available from the [official GitHub MCP Server repo](https://github.com/github/github-mcp-server)\n\nTo install the GitHub MCP Server in VS Code follow these steps:\n\n1. **Add the server configuration** by copying this code snippet:\n\n``` { \"servers\": { \"github\": { \"type\": \"http\", \"url\": \"https://api.githubcopilot.com/mcp/\" } } } ```\n\n1. **Create the configuration file:**\n\n- In your project root, create a directory named /vscode\n- Inside that directory, create a file named mcp.json\n- Paste the above code into the file\n\n1. **Complete setup:**\n\n- Click the start button that appears\n- Complete the OAuth flow when prompted\n\nYou‚Äôre now ready to use the GitHub MCP server in VS Code!\n\n## Start automating with the GitHub MCP now\n\nWatch this video where I installed the GitHub MCP Server and automagically created five issues with natural language!\n\n## Real-world use cases\n\nEarly adopters have used MCP servers to create useful tools.\n\n- **Markdown automation:** One team used the MCP server to turn dozens of GitHub Issues into Markdown content files for a community microsite. The issues had been collected as part of a campaign. Previously, converting them into site-ready content required tedious and manual reformatting. With MCP, the team created a script that fetched all labeled issues, cleaned and formatted the text, and committed the files automatically. It turned the process into a quick, repeatable job.\n- **Weekly team digests**: Another team built a lightweight bot that scans specific GitHub repos and compiles a weekly digest. It pulls recent pull requests, issues, and merged changes, and summarizes them in Markdown. The report is posted to Slack every Monday morning, keeping distributed teams aligned without needing a meeting. Because it uses MCP, the bot isn‚Äôt tied to hard-coded GitHub queries; the same code could run against any MCP-compliant server.\n- **Conversational project assistants**: A small open source team built a chat-based interface where contributors could ask natural-language questions like ‚ÄúWhat issues are waiting on review?‚Äù or ‚ÄúWhat changed in the last release?‚Äù The agent uses MCP to translate those questions into structured GitHub queries, fetch real-time data, and return conversational summaries.\n- **Personal LLM dashboards**: One developer connected their own GitHub account to an MCP-aware agent running on a local dashboard. The assistant provides proactive prompts each morning: pull requests they need to review, stale issues in owned repos, and even draft release notes based on merged changes. It‚Äôs like a personalized Copilot that watches GitHub for them.\n\nBy providing real, structured context to AI models, MCP servers enable tools that are both smarter and safer.\n\n## Take this with you\n\nRead our practical guide on [how to use the MCP server](https://github.blog/ai-and-ml/generative-ai/a-practical-guide-on-how-to-use-the-github-mcp-server/) for a detailed walkthrough. Want to dive deeper? See how to build a [secure and scalable remote MCP server](https://github.blog/ai-and-ml/generative-ai/how-to-build-secure-and-scalable-remote-mcp-servers/) in this guide.\n\n**Catch the next episode** of the GitHub Podcast by [subscribing today &gt;](https://gh.io/podcast)",
  "Title": "Why we open sourced our MCP server, and what it means for you",
  "FeedName": "The GitHub Blog",
  "Tags": [
    "GitHub Podcast",
    "Maintainers",
    "MCP",
    "Open Source"
  ],
  "FeedLevelAuthor": "The GitHub Blog",
  "Description": "Learn how maintainers are using the GitHub MCP Server and what they are building in this episode of the GitHub Podcast.\n\nThe post [Why we open sourced our MCP server, and what it means for you](https://github.blog/open-source/maintainers/why-we-open-sourced-our-mcp-server-and-what-it-means-for-you/) appeared first on [The GitHub Blog](https://github.blog).",
  "PubDate": "2025-08-12T13:52:49+00:00",
  "ProcessedDate": "2025-08-12 14:06:40",
  "Author": "Kedasha Kerr"
}
