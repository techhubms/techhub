{
  "Author": "Allison",
  "ProcessedDate": "2025-10-14 21:03:12",
  "FeedLevelAuthor": "Archive: 2025 - GitHub Changelog",
  "FeedUrl": "https://github.blog/changelog/feed/",
  "Description": "We’ve added support for Rust and scanning C/C++ projects without builds in CodeQL, the engine powering GitHub code scanning. Both of these initiatives have ended their public preview and are…\n\nThe post [CodeQL scanning Rust and C/C++ without builds is now generally available](https://github.blog/changelog/2025-10-14-codeql-scanning-rust-and-c-c-without-builds-is-now-generally-available) appeared first on [The GitHub Blog](https://github.blog).",
  "Tags": [
    "application security",
    "Release"
  ],
  "EnhancedContent": "We’ve added support for Rust and scanning C/C++ projects without builds in CodeQL, the engine powering GitHub code scanning. Both of these initiatives have ended their public preview and are now generally available.\n\n## Rust\n\nRust joins the list of generally available languages (C/C++, Java/Kotlin, JS/TS, Python, Ruby, C#, Go, GitHub Actions, and Swift) for CodeQL. Developers working on Rust libraries and apps can now benefit from our best-in-class code security analysis. We now identify issues for all OWASP Top 10 categories, except *A06:2021-Vulnerable and Outdated Components* where we rely on [Dependabot](https://docs.github.com/code-security/getting-started/dependabot-quickstart-guide) to find and fix vulnerable components. A complete list of the queries available for Rust, is available in the [CodeQL documentation](https://codeql.github.com/codeql-query-help/rust/).\n\nCode scanning for Rust repositories is supported for both [default setup](https://docs.github.com/code-security/code-scanning/enabling-code-scanning/configuring-default-setup-for-code-scanning#configuring-default-setup-for-a-repository) and [advanced setup](https://docs.github.com/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/configuring-advanced-setup-for-code-scanning), and alerts will benefit from fix recommendations generated by [Copilot Autofix](https://github.blog/news-insights/product-news/found-means-fixed-introducing-code-scanning-autofix-powered-by-github-copilot-and-codeql/).\n\n## C/C++\n\nThe ability for CodeQL to scan C/C++ projects without building the code is also now generally available. During the [public preview](https://github.blog/changelog/2025-06-03-codeql-can-be-enabled-at-scale-on-c-c-repositories-in-public-preview-using-build-free-scanning/) period, we enabled over 10,000 repositories with a success rate of over 70% and no manual intervention.\n\nThe changes introduced during the public preview will remain in effect going forward: default setup will continue to use [`build mode none`](https://docs.github.com/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages#about-build-mode-none-for-codeql) for all newly configured repositories.\n\nThis transition to a new way of scanning C/C++ has enabled customers to significantly improve the speed of adoption. One of our customers has been able to successfully enable and scan over 1,400 repositories with CodeQL in less than 48 hours. A similar effort would have taken significantly longer before this change.\n\n![A line graph showing the number of C/C++ repositories enabled with CodeQL over a period of time ranging from August 17, 2025 to October 12, 2025. The graph has a jump of approximately 1,400 repositories over a two day period, from August 26 to August 28](https://github.com/user-attachments/assets/f3a46d0e-4388-485b-b6bc-d9f9d77a4028)\n\nSupport for Rust and scanning C/C++ without builds is now available on github.com, CodeQL CLI `2.23.3` , and on GitHub Enterprise Server starting with version 3.20.",
  "Title": "CodeQL scanning Rust and C/C++ without builds is now generally available",
  "PubDate": "2025-10-14T19:52:02+00:00",
  "Link": "https://github.blog/changelog/2025-10-14-codeql-scanning-rust-and-c-c-without-builds-is-now-generally-available",
  "FeedName": "The GitHub Blog",
  "OutputDir": "_news"
}
