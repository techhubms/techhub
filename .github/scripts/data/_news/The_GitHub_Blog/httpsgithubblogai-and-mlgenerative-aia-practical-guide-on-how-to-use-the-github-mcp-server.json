{
  "Description": "Upgrade from a local MCP Docker image to GitHub‚Äôs hosted server and automate pull requests, continuous integration, and security triage in minutes ‚Äî no tokens required.\n\nThe post [A practical guide on how to use the GitHub MCP server](https://github.blog/ai-and-ml/generative-ai/a-practical-guide-on-how-to-use-the-github-mcp-server/) appeared first on [The GitHub Blog](https://github.blog).",
  "ProcessedDate": "2025-08-05 07:42:29",
  "OutputDir": "_news",
  "Title": "A practical guide on how to use the GitHub MCP server",
  "Author": "Andrea Griffiths",
  "Link": "https://github.blog/ai-and-ml/generative-ai/a-practical-guide-on-how-to-use-the-github-mcp-server/",
  "FeedName": "The GitHub Blog",
  "EnhancedContent": "Running the [Model‚ÄØContext‚ÄØProtocol (MCP)](https://github.com/modelcontextprotocol) server locally works, but managing Docker, rotating access tokens, and pulling updates is a hassle. GitHub‚Äôs managed MCP endpoint eliminates these infrastructure headaches, letting you focus on what you love ‚Äî shipping code.\n\nIn this 201-level tutorial, we‚Äôll walk through upgrading from the local MCP setup to GitHub‚Äôs managed endpoint. You‚Äôll get OAuth authentication, automatic updates, and access to toolsets that open the door to richer AI workflows you simply can‚Äôt pull off with a bare‚Äëbones local runtime.\n\nYou‚Äôll also learn how to customize tool access with read-only modes, streamline your AI workflows with dynamic toolsets, and get ready for agent-to-agent collaboration using GitHub Copilot.\n\n## But first, why switch to our hosted server?\n\nRunning the open source MCP server locally works, but it carries hidden costs. Here‚Äôs what changes when you go remote:\n\n| **Local Docker server** | **Hosted MCP endpoint** | | --- | --- | | Maintain a Docker image, upgrade manually | GitHub patches and upgrades automatically | | Manage personal‚Äëaccess tokens (PATs) | Sign in once with OAuth; scopes handled for you | | Expose the server on localhost only | Reachable from any IDE or remote‚Äëdev box | | Full write access unless you customise the binary | Built-in read‚Äëonly switch and per‚Äëtoolset flags |\n\nIf you need an air‚Äëgapped environment, stick with local. For most teams, the hosted server eliminates infrastructure work and lets you focus on automation. With that, let‚Äôs dive in.\n\n### A few things you need before you get started:\n\n- GitHub Copilot or Copilot‚ÄØEnterprise seat\n- VS Code‚ÄØ1.92+ (or another MCP‚Äëcapable client)\n- Network access to [`https://api.githubcopilot.com`](https://api.githubcopilot.com)\n- A test repository to experiment with\n\n## Step 1: Install the remote MCP server\n\nSetting up [GitHub‚Äôs remote MCP server](https://github.com/github/github-mcp-server) server is a breeze compared to local Docker-based installations. Hosted by GitHub, it eliminates the need for managing Docker containers or manually handling updates, offering a streamlined, cloud-native experience.\n\n### How to install the remote server on VS Code or VS Code Insiders:\n\n1. Open the command palette and run:\n`> GitHub MCP: Install Remote Server`\n2. Complete the **OAuth flow** to connect your GitHub account.\n3. Restart the server to finish setup.\n\n### For any other client\n\nSet the server URL to: [`https://api.githubcopilot.com/mcp/`](https://api.githubcopilot.com/mcp/)\n\nThen authenticate when prompted.\n\n### Validate your connection with a quick check\n\n``` curl -I https://api.githubcopilot.com/mcp/_ping\n# HTTP/1.1 200 OK\n```\n\nIf you see **`200 OK`**, you‚Äôre good to go.\n\nOnce installed, the remote server replaces the local one, and you‚Äôre ready to roll. That means no more Docker or tokens, just a simple integration.\n\n## Step 2: Configure access controls\n\n### Use read-only mode for safe exploration.\n\nWorking in a sensitive environment? Testing in production? Demoing to stakeholders? Flip the server to read-only mode:\n\n``` { \"servers\": { \"github\": { \"type\": \"http\", \"url\": \"https://api.githubcopilot.com/mcp/\", \"headers\": { \"X-MCP-Readonly\": \"true\" } } } } ```\n\nThe agent can read issues, pull requests, and code but can‚Äôt push changes. Perfect for code reviews where you want context without risk.\n\n### Use case: Pull request viewer\n\nNeed to review pull requests without modifying anything? This setup gives you safe, read-only access ‚Äî perfect for browsing changes, leaving comments, or gathering context without risk of altering code.\n\n1. Go to the[GitHub MCP server repo.](https://github.com/github/github-mcp-server)\n2. Navigate to the ‚ÄúRemote Server‚Äù section.\n3. Choose the **pull request read-only** variant.\n4. Click **Install Read Only.**\n\nYou‚Äôll now see tools like `listPullRequests` , `getPullRequest` , and `searchPullRequests` , but no write access. And since these tools don‚Äôt make changes, VS Code skips the permission prompts for a seamless experience.\n\n## Step 3: Try it out with these three hands-on examples\n\nWant to see how Copilot agent mode works in practice? These real-world examples show how the agent can handle everyday developer tasks ‚Äî like managing pull requests, debugging workflows, and triaging security alerts ‚Äî without needing local setup or manual digging. Just prompt and go.\n\n### Example 1: Add a CODEOWNERS file and open a pull request\n\n1. Open your repo **‚ûú** Ask Copilot Agent.\n2. Prompt your agent: `\"Add a CODEOWNERS file for /api/** assigning @backend-team, then open a draft pull request.\"`\n3. The agent will:\n\n- Use `repos.create_file`\nto add the CODEOWNERS file.\n- Call `pull_requests.open`\nto create the pull request.\n- Execute `pull_requests.request_reviewers`\nto assign reviewers.\n\nNo local cloning, no manual file creation. Just prompt and ship.\n\n### Example 2: Debug a failed workflow\n\n*Prompt:* *‚ÄúWhy did the `release.yml` job fail last night?‚Äù*The agent pulls logs with `actions.get_workflow_run_logs` , analyzes the stack trace, and suggests fixes. It‚Äôs like having a senior engineer review your CI/CD failures.\n\n### Example 3: Triage security alerts\n\n*Prompt:* *‚ÄúList critical Dependabot alerts across all my repos and create issues for each.‚Äù*\n\nThe server returns alerts via `dependabot.list_dependabot_alerts` , then the agent creates focused issues only where needed.\n\n## Step 4: Troubleshooting tips with the GitHub remote MCP server\n\n| **Symptom** | **Likely cause** | **Fix** | | --- | --- | --- | | **401 Unauthorized** on install | Left‚Äëover `GITHUB_TOKEN`<br> env var | Unset the var and rerun OAuth flow | | Tools don‚Äôt appear | Corporate proxy blocks `api.githubcopilot.com` | Add proxy settings or allowlist the domain | | Model times out | Large toolset enabled | Restrict to needed toolsets only |\n\n## Step 5: What‚Äôs next with security and agentic workflows\n\nThe GitHub MCP server is actively evolving. Here‚Äôs what‚Äôs coming next:\n\n### Secret scanning in MCP\n\nSoon, the MCP server will detect and block AI-generated secrets, just like GitHub prevents you from pushing secrets in pull requests. You can override if needed, but the default protects your data, whether from a prompt injection or by accident.\n\n### Assign issues to Copilot\n\nDirect integration with [Copilot‚Äôs coding agent](https://github.blog/news-insights/product-news/github-copilot-meet-the-new-coding-agent/) means you‚Äôll be able to:\n\n- Assign issues directly to Copilot.\n- Trigger completions from VS Code.\n- Watch as agent-to-agent workflows unfold across tools.\n\nThe future is agents collaborating with agents, and GitHub MCP is the foundation.\n\n## Want to contribute?\n\nThe GitHub MCP project is fully open source and growing fast.\n\nüìå[Explore the repo](https://github.com/github/github-mcp-server): See how tools are built and contribute your own. üìå File issues: Help shape the protocol and tooling. üìå Join discussions: Connect with other builders on GitHub and Discord.\n\nWhether you‚Äôre building tools, providing feedback, or exploring AI-powered development, there‚Äôs a place for you in the MCP ecosystem.\n\n## Ready to Ship?\n\nThe GitHub remote MCP server removes infrastructure overhead so you can focus on building better automations. No more Docker babysitting, no more token rotation, just OAuth once and start shipping.\n\n**Remember: the best infrastructure is the infrastructure you don‚Äôt have to manage.**\n\n[Read the full documentation](https://github.com/github/github-mcp-server) to get started, or dive into the examples above and start experimenting today.\n\n**Read our guide** to building [secure and scalable remote MCP servers &gt;](https://github.blog/ai-and-ml/generative-ai/how-to-build-secure-and-scalable-remote-mcp-servers/)",
  "FeedLevelAuthor": "The GitHub Blog",
  "PubDate": "2025-07-30T16:00:00+00:00",
  "Tags": [
    "AI & ML",
    "AI agents",
    "Generative AI",
    "MCP"
  ],
  "FeedUrl": "https://github.blog/feed/"
}
