{
  "FeedLevelAuthor": "The GitHub Blog",
  "Tags": [
    "Log4j",
    "Open Source",
    "Security"
  ],
  "EnhancedContent": "When Christian Grobmeier went to help his son with a Minecraft problem, he found the game displaying a warning: “We are suffering from a security hole from Log4J, please be careful and update immediately.”\n\n> >\n> I stared at the screen and told my son, **‘I’m sorry, it’s my fault.’**\n> >\n> Christian Grobmeier, Log4j maintainer\n\nThis is the untold story of how one maintainer and the [Log4j](https://github.com/apache/logging-log4j2) team navigated a crisis that exposed critical gaps in our digital infrastructure and demonstrated the importance of open source security and sustainability. Now, initiatives like the [GitHub Secure Open Source Fund](https://resources.github.com/github-secure-open-source-fund/) are working to make sure it never happens again.\n\nIt all started a few hours earlier on a cold November day, when Christian, who is a maintainer of the open source project Log4j, planned to spend time playing games with his son. Instead, he found himself staring at his phone, watching notifications pile up in his inbox—10, then 20 emails flooding in. When he saw the words “remote code execution,” his first thought was: “Maybe I’m on the wrong mailing list.”\n\nHe wasn’t. And within hours, Christian would be at the center of what became known as Log4Shell: the most severe vulnerability in internet history, affecting billions of devices from Fortune 500 companies to Minecraft servers worldwide.\n\n“I told my son, I will play with you in like five minutes,” Christian recalls. “But he didn’t see me for the next couple of days.”\n\n| **Watch the full interview with Christian Grobmeier and Gregg Cochran, staff program manager at GitHub, above. 👆** | | --- |\n\n## The ubiquity that made Log4Shell a perfect storm\n\nLog4j is foundational software. This 20+ year-old Java logging library quietly powers system events in applications worldwide, like user logins and calculation results. But this small piece of software had quietly become a dependency in thousands of projects across the Java ecosystem.\n\n> >\n> Log4j is such a small, tiny library. But everybody can use it in their software.\n> >\n> Christian Grobmeier\n\nThat ubiquity made Log4Shell devastating. Financial services companies relied on it for compliance auditing. E-commerce systems used it to track security incidents. Insurance companies needed it to monitor their software behavior. In a 2022 Tidelift survey, 49% of open source developers reported that their organization relies on Java—and most of them were using Log4j without even knowing it.\n\nWhen Christian realized the scope of the vulnerability, the weight hit him immediately: “Literally all Java applications in the world could be affected. Even 10% would be a major problem. This would be catastrophic.”\n\n## A vulnerability that scored a perfect 10\n\nLog4Shell reveals how a seemingly innocent feature became an attack vector. Log4j used [Java’s Naming and Directory Interface](https://docs.oracle.com/cd/E19747-01/819-0076/jndi.html) (JNDI) to provide flexibility, allowing developers to load software components from remote servers. But the library didn’t validate whether JNDI lookup strings were coming from trusted sources.\n\n“How can a string break the internet?” Christian asks.\n\nThe exploitation was frighteningly simple. An attacker could input a malicious JNDI string into any application field that gets logged—a username field, a search box, even a Minecraft chat message—and execute remote code on the target system.\n\n``` jndi:<protocol>://<server-name>:<port>/<path-to-object> ```\n\n“You don’t even need to have special knowledge,” Christian notes. “You just run around and push the string wherever you want it.”\n\n**The Common Vulnerability Scoring System (CVSS) gave Log4Shell a perfect 10: the highest possible score.**\n\n“The first time I heard about this score, I thought, maybe it’s not so bad,” Christian remembers. “And then after a couple of days, I thought, yeah, **maybe we should extend this to a score of 15 or 20.**“\n\n## The human cost of maintaining critical infrastructure\n\nThe personal toll on maintainers during the Log4Shell crisis reveals the hidden human cost of our software supply chain. Christian and his team, mostly volunteers, suddenly found themselves responsible for patching a vulnerability affecting half the internet. The pressure was immense and deeply personal.\n\n> >\n> Some of us stopped sleeping. We all felt that either we fix it right now in the next few days, or we close this project.\n> >\n> Christian Grobmeier\n\nFixing the initial vulnerability led to the discovery of additional issues, creating what Christian describes as “a bag of water with a hole. When you patch the hole, you see another one.”\n\nMeanwhile, the community response was mixed. “On the one hand, you have people who really hate you, and on the other hand, you have people who are really behind you,” Christian explains.\n\nPerhaps most telling:\n\n> >\n> Nobody stops in to check on you. They check on the project. There’s also nobody standing up and saying, ‘hey, thank you for the good work you’re doing to remediate this issue.’\n> >\n> Christian Grobmeier\n\n## How the GitHub Secure Open Source Fund is strengthening security\n\nThe Log4Shell incident highlighted a critical gap in open source security: Maintainers often lack the training and resources to build security into their projects from the ground up. This realization sparked initiatives like the GitHub Secure Open Source Fund, which provides both funding and security training to critical open source projects.\n\nThe fund has been effective and efficient as a form of proactive protection, pooled resources, and shared responsibility. Think of it as “insurance” for the open source supply chain—helping make the digital ecosystem safer and reducing risks that could impact billions of users.\n\nChristian participated in the [GitHub Secure Open Source Fund](https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/) security training program, and the impact was transformative.\n\nThe training didn’t just provide technical knowledge—it shifted his perspective. Christian explains, “With this training, developers are no longer the weakest link. Instead, they’re the first line of defense.”\n\nThis change in mindset is crucial. As Christian puts it:\n\n> >\n> Ignorance is by far the worst and most critical security hole. It will basically break all software.\n> >\n> Christian Grobmeier\n\nWhen asked if the GitHub Secure Open Source Fund training could have prevented Log4Shell, Christian is direct: “If this training had existed five years ago, maybe Log4Shell wouldn’t be here today.”\n\n## Technical lessons: Building security by default\n\nThe Log4Shell incident taught the industry several critical lessons about secure development practices:\n\n**1. Validate all external input**: Never trust data that crosses trust boundaries, especially in foundational libraries that process user input.\n\n**2. Disable dangerous features by default**: Log4j now ships with JNDI lookups disabled by default.\n\n**3. Implement defense in depth**: Modern applications need multiple layers of protection, from input validation to runtime protections.\n\n**4. Automate security scanning**: Tools like GitHub’s code scanning and Dependabot can catch vulnerabilities before they reach production.\n\n**5. Maintain a software bills of materials (SBOMs)**: When Log4Shell hit, many organizations couldn’t determine if they were affected because they didn’t know their dependencies.\n\n“I got phone calls from colleagues, asking me: ‘Am I really affected?’ SBOMs give you a technical way to find out what dependencies you’re using in a project,” Christian explains.\n\n## Industry-wide lessons for sustainable open source\n\nWhile the technical lessons from Log4Shell are crucial, technology changes aren’t enough. The deeper challenge lies in how we support the humans who maintain the open source infrastructure our world depends on. This crisis exposed several systemic issues in how we approach open source sustainability and security:\n\n**Community is crucial**: “If you’re maintaining open source software, just as one single person, that’s a risk,” Christian emphasizes.\n\n**Security training needs to be accessible**: Traditional security education often doesn’t reach the maintainers who need it most.\n\n**Funding alone isn’t enough**: While financial support helps, Christian found that training and community were equally important. When offered funding to pay team members, many declined due to tax implications or existing jobs.\n\n**Kindness matters**: “Behind every small open source library, there’s a human writing the code,” Christian reminds us. “If you find something that’s not right, help out instead of being angry.”\n\n**Security can be improved for every project**: During the program, Christian implemented multiple new security improvements, including hardening GitHub Actions against script injections, developing a new threat model, and collaborating with ScanCode to identify hidden Log4j artifacts in third-party code.\n\n## Your role in securing the software supply chain\n\nThe Log4Shell story isn’t just about one vulnerability; it’s about the collective responsibility we all share in maintaining the open source ecosystem that powers the modern internet.\n\n**For maintainers**: Apply to programs like the [GitHub Secure Open Source Fund](https://resources.github.com/github-secure-open-source-fund/). [Enable built-in security tools](http://gh.io/protect-your-project) like GitHub’s [code scanning](https://docs.github.com/en/code-security/code-scanning/introduction-to-code-scanning/about-code-scanning) and [Dependabot](https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide). [Export SBOMs](https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/exporting-a-software-bill-of-materials-for-your-repository) to help downstream users understand their dependencies, and [publish security advisories](https://docs.github.com/en/code-security/security-advisories/working-with-repository-security-advisories/about-repository-security-advisories) for all vulnerabilities found in your project.\n\n**For enterprises:** Become a Funding or Ecosystem Partner of the [GitHub Secure Open Source Fund.](https://resources.github.com/github-secure-open-source-fund/) Invest engineering time in the upstream projects you depend on. Don’t just consume open source—contribute with code, documentation, security reviews, and funding.\n\n**For individual developers**: Select carefully the new dependencies that you pull in, for example by [checking their security posture](https://scorecard.dev/). Consider the data you process may be attacker controlled and strictly validate untrusted inputs to prevent unintended behavior. Contribute test cases and documentation.\n\n## The path forward\n\nToday, [Log4j](https://github.com/apache/logging-log4j2) has an 8.3 OpenSSF score, which demonstrates good security practices.\n\nBut the broader lesson extends beyond any single project. As Christian puts it:\n\n> >\n> Learning is the only cure for ignorance. So just keep learning.\n> >\n> Christian Grobmeier\n\nThe Log4Shell incident showed us how quickly our digital world can be threatened by a single vulnerability. But it also demonstrated the power of the open source community to respond, adapt, and improve. The question isn’t whether the next critical vulnerability will emerge—it’s whether we’ll be ready for it.\n\n**Ready to strengthen your open source project’s security?** The GitHub Secure Open Source Fund provides funding, training, and resources to help maintainers build more secure software:\n\n- **Projects and Maintainers:** [Apply now](https://resources.github.com/github-secure-open-source-fund/) to the GitHub Secure Open Source Fund and help make open source safer for everyone.\n- **Funding and Ecosystem Partners:** [Become a Funding or Ecosystem Partner](https://docs.google.com/forms/d/e/1FAIpQLSeLMDmnxjbrneIPKlX8u3vK4I9ym6vRZPtWzMpT27apx6h9dw/viewform) and support a more secure open source future. Join us on this mission to secure the software supply chain — at scale!\n\n### Thank you to all of our partners\n\nWe couldn’t do this without our incredible network of partners. Together, we are helping secure the open source ecosystem for everyone!\n\n**Funding Partners:** Alfred P. Sloan Foundation, American Express, Chainguard, Datadog, Herodevs, Kraken, Mayfield, Microsoft, Shopify, Stripe, Superbloom, Vercel, Zerodha, 1Password\n\n**Ecosystem Partners:** Ecosyste.ms, CURIOSS, Digital Data Design Institute Lab for Innovation Science, Digital Infrastructure Insights Fund, Microsoft for Startups, Mozilla, OpenForum Europe, Open Source Collective, OpenUK, Open Technology Fund, OpenSSF, Open Source Initiative, OpenJS Foundation, University of California, Santa Cruz OSPO, Sovereign Tech Agency, SustainOSS",
  "Description": "Log4Shell proved that open source security isn't guaranteed and isn’t just a code problem. It's about supporting, enabling, and empowering the people behind the projects that build our digital infrastructure.\n\nThe post [Inside the breach that broke the internet: The untold story of Log4Shell](https://github.blog/open-source/inside-the-breach-that-broke-the-internet-the-untold-story-of-log4shell/) appeared first on [The GitHub Blog](https://github.blog).",
  "Title": "Inside the breach that broke the internet: The untold story of Log4Shell",
  "Link": "https://github.blog/open-source/inside-the-breach-that-broke-the-internet-the-untold-story-of-log4shell/",
  "Author": "Gregg Cochran",
  "ProcessedDate": "2025-10-20 16:03:23",
  "FeedName": "The GitHub Blog",
  "PubDate": "2025-10-20T16:00:16+00:00",
  "FeedUrl": "https://github.blog/feed/",
  "OutputDir": "_news"
}
