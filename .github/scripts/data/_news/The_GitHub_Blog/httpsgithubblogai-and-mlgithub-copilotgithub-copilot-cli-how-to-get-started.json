{
  "OutputDir": "_news",
  "ProcessedDate": "2025-10-13 23:02:51",
  "Tags": [
    "AI & ML",
    "CLI",
    "GitHub Copilot",
    "GitHub Copilot CLI"
  ],
  "FeedLevelAuthor": "The GitHub Blog",
  "Description": "Discover how to use GitHub Copilot directly in the terminal. From cloning a repository to opening a pull request, hereâ€™s how to streamline your workflow with Copilot CLI.\n\nThe post [GitHub Copilot CLI: How to get started](https://github.blog/ai-and-ml/github-copilot/github-copilot-cli-how-to-get-started/) appeared first on [The GitHub Blog](https://github.blog).",
  "EnhancedContent": "You already live in the terminal. You clone repositories there, install dependencies, debug issues, and run builds. But until now, when you needed AI help, you had to leave the CLI and open your editor or browser. Not anymore.\n\n[GitHub Copilot CLI](https://docs.github.com/en/copilot/how-tos/use-copilot-for-common-tasks/use-copilot-in-the-cli) brings that same assistance straight to your shell. No switching contexts, no breaking flow. Just you, your terminal, and an AI that can actually help you get things done.\n\n## Install once, authenticate, and start working\n\nWith [Copilot CLI](https://github.com/github/copilot-cli), you donâ€™t have to juggle your API keys. Just install the assistant, sign in with your existing GitHub Copilot Pro, Pro+, Business, or Enterprise plan, and go.\n\n```\n# 1. Install via npm\nnpm install -g @github/copilot-cli\n\n# 2. Launch Copilot CLI\ncopilot\n\n# Authenticate with your GitHub account\n/login ```\n\n**Requirements:**\n\n- Node v22+\n- npm version 10 or later\n- Launch Copilot CLI\n- Log in with your GitHub account\n\nFrom here, you can get hands-on immediatelyâ€”debugging tests, spinning up preview deploys, or writing one-off scriptsâ€”without leaving your terminal.\n\n## Use case: From clone to pull request in the terminal\n\nImagine this: Youâ€™ve just cloned a repository you want to contribute to. Normally, youâ€™d spend time reading through the README, manually checking dependencies, and combing through open issues to find a place to start. But with Copilot CLI, you can offload all of that.\n\n### 1. Clone and launch Copilot\n\nFirst things first. Grab the repository you want to work on and run Copilot CLI in your terminal.\n\n``` gh repo clone github/spec-kit cd spec-kit copilot ```\n\nCopilot greets you in the terminal. Type `/` at any time to see available commands, or use **Ctrl+R** to see logs of the commands Copilot has run on your behalf.\n\n### 2. Get oriented in a new codebase\n\nOnce youâ€™re inside the project, the first step is understanding how everything fits together. Instead of scrolling through files manually or piecing it together from the README, ask Copilot to explain it for you.\n\n**You say:** *Explain the layout of this project.*\n\nCopilot inspects the repository using find, tree, and the README, then returns a clean Markdown summary. No more hunting through nested directories trying to figure out where things live.\n\n### 3. Check your environment\n\nAfter you know the lay of the land, the next question is: can you actually build it? Normally, youâ€™d spend time hunting for dependencies and making sure youâ€™ve installed the right versions. Copilot now handles that.\n\n**You say:** *Make sure my environment is ready to build this project.*\n\nCopilot verifies dependencies, installs missing tools (like Go for the GitHub CLI), and confirms you can build locally. All without you having to comb through setup docs or run trial-and-error commands.\n\n### 4. Find a good first issue\n\nNow that youâ€™re set up, youâ€™ll want to start contributing. Instead of browsing through dozens of open issues, let Copilot surface the ones that make sense for you.\n\n**You say:** *Find good first issues in this repository and rank them by difficulty.*\n\nCopilot queries GitHub Issues with its built-in [GitHub MCP server](https://github.blog/changelog/2025-04-04-github-mcp-server-public-preview/) and suggests a curated list, complete with difficulty levels. Instead of scanning dozens of issues, you can dive straight into a task that matches your comfort zone.\n\n### 5. Start implementing\n\nNow comes the real work. Normally, after finding an issue to work on, youâ€™d create a branch, open the right files, make edits, and double-check your changes before committing. With Copilot CLI, you can let it draft the fix for you while you stay in control at every step.\n\n**You say:** *Start implementing issue #1234. Show me the diff before applying.*\n\nCopilot drafts a plan, makes the edits, and presents the diff. You stay in control, review, and approve before changes are applied.\n\n**ðŸ‘€ Pro tip**: You can `@-mention` files in your prompt if you want Copilot to focus on specific parts of the code.\n\n### 6. Commit and open a draft pull request\n\nOnce the changes look good, the next step is packaging them up and sharing your work. Normally, that means staging files, writing a commit message, pushing a branch, and opening a pull request, which is all a bit of a dance in Git. Copilot CLI streamlines the whole flow so you can stay focused on the code.\n\n**You say:** *Stage changes, write a commit referencing #1234, and open a draft PR.*\n\nCopilot will then stage files, write the commit message, and open a draft pull request for you to review.\n\n### 7. Bonus: Kill that process hogging your port\n\nLetâ€™s say youâ€™ve hit another common headache: a process hogging a port. You know, that moment when you try to start your dev server and it tells you a port (letâ€™s say 8080 for this example) is already in use, and you have to go hunting for the right lsof command and flags.\n\n**You say:** *What process is using port 8080? Kill it and verify the port is free.*\n\nCopilot runs the right lsof command, shows the PID, kills the process, and verifies itâ€™s gone. No more Googling arcane flags or trying to remember if itâ€™s lsof -i :8080 or lsof -t -i:8080 or something else entirely.\n\nIâ€™m horrible at remembering commands, especially ones I use infrequently. With Copilot CLI, I just defer these tasks straight to it. Maybe Iâ€™ll remember the command next time, or maybe (probably) not. But Iâ€™ll definitely ask Copilot again.\n\n## Stay in control\n\nCopilot always asks before running commands or accessing directories. This is critical when youâ€™re giving an AI access to run things on your machine.\n\nBefore Copilot can execute anything, it will prompt you to:\n\n- Allow once\n- Allow always for this command\n- Deny\n\nYou can also:\n\n- Use `/session`\nto view whatâ€™s currently allowed\n- Reset permissions at any time with `/reset`\n- Add directories to your allowed list with `/add-directory`\n\n## Extend with MCP servers\n\nCopilot CLI ships with the GitHub MCP server already installed and running. This is what powers the issue search and repository interactions. But you can add any MCP server you want from the registry using /mcp.\n\nWant to add Playwright for browser testing? Or integrate with your companyâ€™s internal tools? You can customize and extend Copilot CLI to match your workflow.\n\n![A terminal window showing the GitHub Copilot CLI interface where a user is adding a new MCP (Model Context Protocol) server. The screen includes input fields for server name, type (Local, HTTP, or SSE), command, arguments, environment variables, and tools to include. The interface indicates the user is logged in as &ldquo;Andrea@Griffiths11&rdquo; and offers navigation shortcuts for saving or canceling.](https://github.blog/wp-content/uploads/2025/10/image1_8dda93.png?resize=1024%2C785)\n\n## Why this matters\n\nHereâ€™s what I appreciate most about Copilot CLI: It meets me where I already work. I spend a lot of time in the terminal anyway, jumping between repositories, checking logs, running builds. Having Copilot right there means Iâ€™m not constantly switching contexts between my IDE, browser, and command line just to get AI help.\n\nWhen Iâ€™m onboarding contributors to our projects or exploring a new codebase myself, I can stay in that flow. I can ask about the project structure, verify dependencies, find issues to work on, and start implementing without bouncing around between tools. That consistency matters when youâ€™re trying to maintain momentum.\n\nThis isnâ€™t about replacing your IDE. Itâ€™s about having the right tool in the right place.\n\n## Whatâ€™s next\n\nCopilot CLI is in **public preview**, and your feedback will shape our roadmap. We have ideas for whatâ€™s coming next, but we want to know what matters most to you.\n\nðŸ‘‰ Install it today with:\n\n``` npm install -g copilot ```\n\nThen share your experience using `/feedback` .\n\n**Start using** [GitHub Copilot CLI](https://github.com/github/copilot-cli?) &gt;",
  "FeedName": "The GitHub Blog",
  "Title": "GitHub Copilot CLI: How to get started",
  "Link": "https://github.blog/ai-and-ml/github-copilot/github-copilot-cli-how-to-get-started/",
  "Author": "Andrea Griffiths",
  "FeedUrl": "https://github.blog/feed/",
  "PubDate": "2025-10-13T22:40:04+00:00"
}
