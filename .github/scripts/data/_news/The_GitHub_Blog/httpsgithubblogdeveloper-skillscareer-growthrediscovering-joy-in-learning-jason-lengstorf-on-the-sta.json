{
  "Title": "Rediscovering joy in learning: Jason Lengstorf on the state of development",
  "OutputDir": "_news",
  "Author": "Andrea Griffiths",
  "Description": "We sit down with Jason Lengstorf on the GitHub Podcast, where he shares his perspective on education, AI, open source, and more.\n\nThe post [Rediscovering joy in learning: Jason Lengstorf on the state of development](https://github.blog/developer-skills/career-growth/rediscovering-joy-in-learning-jason-lengstorf-on-the-state-of-development/) appeared first on [The GitHub Blog](https://github.blog).",
  "Link": "https://github.blog/developer-skills/career-growth/rediscovering-joy-in-learning-jason-lengstorf-on-the-state-of-development/",
  "ProcessedDate": "2025-08-26 16:13:52",
  "FeedName": "The GitHub Blog",
  "Tags": [
    "Career growth",
    "Developer skills",
    "GitHub Podcast"
  ],
  "FeedLevelAuthor": "The GitHub Blog",
  "PubDate": "2025-08-26T16:10:14+00:00",
  "EnhancedContent": "I’ve been there. Staring at my screen at 11 p.m., panicked, trying to learn the latest framework because I’m convinced it’ll make or break my career. Jason Lengstorf thinks we’ve got this all wrong.\n\n> >\n> It feels like we’re scrambling to learn whatever thing we’re worried is gonna cost us our job if we don’t learn it really fast. A huge motivation for me is to try to remind everybody that this stuff can be fun. **And having fun isn’t not working.**\n> >\n> Jason Lengstorf, creator of CodeTV\n\nWe had the pleasure of hosting Jason Lengstorf, creator of “Learn with Jason” and the mastermind behind Code TV, where he makes what he calls “reality television for developers,” on a recent episode of [The GitHub Podcast](https://the-github-podcast.simplecast.com/). With over 20 years in the industry, Jason’s perspective on learning, AI, and open source got me thinking about where we’ve been and where we’re headed.\n\n*Listen to the full podcast episode👇*\n\nJason’s take resonates with me because I see (and feel) this anxiety everywhere. Every Slack channel I’m in, every conference hallway conversation. Some of us are running a bit scared instead of running curious. But Jason’s perspective, combined with his predictions about AI integration and the critical role of open source maintainers, paints a picture of an industry on the cusp of significant change.\n\n## Why I stopped panic-learning (and you should too)\n\nHere’s Jason’s thesis: “Having fun isn’t not working. Having fun actually makes you more likely to retain stuff and more likely to stick through a project and finish it.”\n\nWhen I first started building with AI tools, I treated every new model release like a pop quiz I hadn’t studied for. Sound familiar? But Jason’s approach with “Learn with Jason” flips this completely. Instead of cramming knowledge into developers’ heads, he creates space for exploration and discovery.\n\nThe difference shows up everywhere. When developers approach learning with curiosity rather than desperation, they absorb concepts more thoroughly. They contribute more meaningfully to projects. They actually finish what they start. And they share their knowledge instead of hoarding it.\n\n> >\n> Having fun actually makes you more likely to retain stuff and more likely to stick through a project and finish it and share it.\n> >\n\nI’m guilty of this too. How many times have you bookmarked a tutorial “for later” because you were too stressed about keeping up to actually enjoy learning it? When we give ourselves permission to enjoy the process, we model healthy behaviors for the next generation of developers.\n\n## AI as a force multiplier (not a replacement)\n\nJason nailed it with this analogy: “A can of caulk and a plunger can get you part of the way there, but at some point, you need to hire a plumber.” That’s AI and developers in a nutshell.\n\n> >\n> All the YouTube videos in the world aren’t going to teach me how this stuff really works in 25 minutes. What we’re seeing in practice is that the tooling is acting similarly to the way that something like TypeScript suddenly enabled developers to intuit things about a code base.\n> >\n\nHere’s what happened when Jason and Jack Harrington built an MCP (Model Context Protocol) server [live on stream](https://codetv.dev/series/learn-with-jason/s8/what-the-heck-is-mcp). The AI churned out code automatically. Everything looked perfect until they hit a bug:  One missing component name in a config file.\n\nJack fixed it in seconds because he knew the system. Jason, despite 20 years of experience, would’ve needed to reverse-engineer the entire AI-generated codebase to debug it.\n\n> >\n> If you’re a skilled developer, this is gonna make you unbelievably fast. If you are not a skilled developer, it’s gonna give you a lot of tools to learn very quickly. If you have no interest in learning, it is going to get you into a big bad mess really, really fast.\n> >\n\nThat’s the difference AI makes: It amplifies what you already know, but can’t replace domain knowledge.\n\nFor skilled developers, it creates incredible leverage. For those learning, it accelerates the process. But for those hoping to bypass learning entirely? Jason’s right — it creates bigger problems faster.\n\nThe fact that MCP emerged as a shared standard gives me hope. Instead of every company launching their own incompatible AI integration system, we’re seeing convergence around shared protocols. This suggests the AI tooling ecosystem is maturing beyond the “new framework every week” phase.\n\n## The developers keeping our world running (and why they need our help)\n\nZod is the TypeScript schema validation library that’s become foundational to so much of our ecosystem. Yet, very few people know who builds Zod and how much of the AI stuff it’s powering, Jason says.\n\nThis brings to mind the [XKCD comic](https://xkcd.com/2347/) about critical infrastructure maintained by “some random person in Nebraska who’s thanklessly maintaining it.” The reality is even more stark than the comic suggests:\n\n- SQLite, which runs most local databases globally, is maintained by four people\n- The global timezone database is managed by two people\n- Colin McDonald maintains Zod, which powers countless AI applications and framework integrations\n\nDuring Jason’s live coding challenges on CodeTV, participants consistently reach for the same open source tools: Tailwind, ShadCN/UI, Vue, Nuxt, React. We deploy to proprietary services and use proprietary AI models, but the building blocks, the things that actually create value, are largely gifts from individual maintainers and small teams.\n\nThis creates both opportunity and responsibility. As Jason notes, Zod is one of the few projects he sponsors on GitHub because he considers it “load bearing” for his work. Check your package.json right now. I bet you’ll find at least three dependencies maintained by people you’ve never heard of. More of us need to identify our own load-bearing dependencies and if able to, support them financially through [GitHub Sponsors](https://github.com/sponsors) or other means.\n\nThe sustainability of open source isn’t just about individual kindness. It’s about the health of our entire industry. When critical infrastructure depends on unpaid volunteers, we’re building on unstable foundations.\n\n## The next wave of web innovation\n\n> >\n> I have a hunch that we are in a bit of a temporary lull that’s gonna lead to something really interesting.\n> >\n\nThe JavaScript ecosystem is in a curious state. We’ve hit what Jason calls “a weird spot” where instead of innovating, “we’re just arguing about whether or not the innovation we had was horrific.” Meanwhile, CSS is experiencing a boom with new browser capabilities arriving regularly.\n\nBut this apparent stagnation might be the calm before a significant storm. Jason looks at how AI will change UX fundamentals: “You don’t necessarily need as many navigation buttons and nested dropdowns and all this really complex information architecture stuff anymore. It’s gonna be more conversational.”\n\nThis doesn’t mean everything becomes a chat interface. People want varied interaction methods. Instead, we’ll need new approaches to component-based architecture that integrate with autonomous agents operating different parts of websites.\n\nThe convergence of local AI models running in browsers, standardized protocols like MCP, and the web’s necessity to adapt while maintaining core technologies creates a unique moment. We’re seeing early patterns emerge around bringing AI capabilities directly into web applications as first-class features.\n\nFor indie developers, this moment offers opportunities similar to the early JavaScript framework days. The same way edge functions made enterprise-level capabilities accessible to individual developers, AI tools are democratizing capabilities that were previously available only to large organizations.\n\n## Looking forward\n\nHere’s what I’m taking from Jason: Stop learning out of fear. Start building with curiosity. Support the maintainers who power your apps. And when the next wave of web innovation hits (and it will), you’ll be ready because you’ve been having fun the whole time.\n\nThe developers who embrace learning for joy rather than fear will be best positioned to use AI tools effectively. Those who understand and support the open source infrastructure enabling their work will build on more stable foundations. And those who stay curious about emerging patterns will help shape what comes next.\n\nThe question isn’t whether you can keep up. It’s whether you’re enjoying the ride.\n\n**Listen to our full conversation** with Jason Lengstorf on [The GitHub Podcast](https://the-github-podcast.simplecast.com/). And don’t miss the next episode by subscribing today!",
  "FeedUrl": "https://github.blog/feed/"
}
