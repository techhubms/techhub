{
  "FeedUrl": "https://github.blog/feed/",
  "Link": "https://github.blog/ai-and-ml/generative-ai/junior-developers-arent-obsolete-heres-how-to-thrive-in-the-age-of-ai/",
  "Tags": [
    "AI & ML",
    "developer skills",
    "Generative AI",
    "GitHub Copilot"
  ],
  "OutputDir": "_news",
  "FeedName": "The GitHub Blog",
  "ProcessedDate": "2025-08-08 15:34:06",
  "Title": "Junior developers aren’t obsolete: Here’s how to thrive in the age of AI",
  "FeedLevelAuthor": "The GitHub Blog",
  "EnhancedContent": "| *Editor’s note: This piece was originally published in our LinkedIn newsletter, Branching Out\\_.* [*Sign up now for more career-focused content &gt;*](https://www.linkedin.com/newsletters/branching-out-6958196028076429312/) | | --- |\n\nEveryone’s talking about it: AI is changing how we work. And nowhere is that more true than in the field of software engineering.\n\nIf you’re just getting started as a developer, you might be wondering: *is AI ruining my chances of getting a junior-level role?* After all, a 2023 study by ServiceNow and Pearson projects that [nearly 26% of tasks performed by \\[current\\] junior application developers will be augmented or fully automated by 2027](https://www.servicenow.com/workflow/learn/impact-ai-junior-application-developer-skills.html).\n\nIn a word: No. Quite the contrary. New learners are well positioned to **thrive** as junior developers because they’re coming into the workforce already savvy with AI tools, which is just what companies need to adapt to the changing ways software is being developed.\n\nOur CEO [Thomas Domke](https://www.linkedin.com/in/ashtom/) says:\n\n>\n> We’re entering an era where interns and junior developers are showing up already fluent in the best tools for AI code-gen on the market. Why? They vibe with AI. They build with it. Fresh talent ➡ better ideas ➡ the best tools. :robot\\_face:\n>\n> Thanks [@GergelyOrosz](https://twitter.com/GergelyOrosz?ref_src=twsrc%5Etfw) for the story on how we’re… [https://t.co/Sj6KAbq7dz](https://t.co/Sj6KAbq7dz)\n>\n> — Thomas Dohmke (@ashtom) [May 27, 2025](https://twitter.com/ashtom/status/1927445955659301044?ref_src=twsrc%5Etfw)\n\n[*Hear more from Thomas on The Pragmatic Engineer podcast &gt;*](https://newsletter.pragmaticengineer.com/p/github)\n\nSo what does that mean for you? According to [Miles Berry](https://milesberry.net/2024/11/creativity-curiosity-ai/#:~:text=AI%20literacy%20is%20essential%2C%20but,think%20critically%20about%20their%20outputs.), professor of computing education at the University of Roehampton, today’s learners must develop the skills to **work with** AI rather than worry about being replaced by it. As a junior developer, you need to [think critically about the code your AI tool gives you](https://www.linkedin.com/pulse/why-developer-expertise-matters-more-than-ever-age-ai-github-yrxnc/?trackingId=eApAmPb2ThOKYgJvlMen%2BA%3D%3D), stay curious when things feel unfamiliar, and collaborate with AI itself in addition to senior team members.\n\nAs Berry puts it:\n\n**“Creativity and curiosity are at the heart of what sets us apart from machines.”**\n\nWith that in mind, here are five ways to stand out as a junior developer in the AI era:\n\n## 1. Use AI to learn faster, not just code faster\n\nMost developers use [GitHub Copilot](https://github.com/features/copilot/?utm_source=newsletter&amp;utm_medium=linkedin&amp;utm_campaign=branching_out&amp;utm_content=junior_devs) for autocomplete. But if you’re just starting out, you can turn it into something more powerful: a coding coach.\n\n### Get Copilot to tutor you\n\nYou can set personal instructions so Copilot guides you through concepts instead of handing you full solutions. Here’s how:\n\nIn VS Code, open the **Command Palette** and run:\n\n```\n> Chat: New Instructions File\n```\n\nThen paste this into the new file:\n\n``` --- applyTo: \"**\" --- I am learning to code. You are to act as a tutor; assume I am a beginning coder. Teach me concepts and best practices, but don’t provide full solutions. Help me understand the approach, and always add: \"Always check the correctness of AI-generated responses.\" ```\n\nThis will apply your tutoring instructions to any file you work on. You can manage or update your instructions anytime from the **Chat &gt; Instructions** view.\n\n### Ask Copilot questions\n\nOpen Copilot Chat in VS Code and treat it like your personal coach. Ask it to explain unfamiliar concepts, walk through debugging steps, or break down tricky syntax. You can also prompt it to compare different approaches (“Should I use a `for` loop or `map` here?”), explain error messages, or help you write test cases to validate your logic. Every prompt is a learning opportunity and the more specific your question, the better Copilot can guide you.\n\n### Practice problem solving without autocomplete\n\nWhen you’re learning to code, it can be tempting to rely on autocomplete suggestions. But turning off inline completions — at least temporarily — can help strengthen your problem-solving and critical thinking skills. You’ll still have access to Copilot Chat, so you can ask questions and get help without seeing full solutions too early.\n\nJust keep in mind: This approach slows things down by design. It’s ideal when you’re learning new concepts, not when you’re under time pressure to build or ship something.\n\nTo disable Copilot code completion for a project (while keeping chat on), create a folder called `.vscode` in the root of your project, and add a file named `settings.json` with this content:\n\n``` { \"github.copilot.enable\": { \"*\": false } } ```\n\nThis setting disables completions in your current workspace, giving you space to think through solutions before asking Copilot for help.\n\n[Read our full guide on how to use Copilot as a tutor &gt;](https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code)\n\n## 2. Build public projects that showcase your skills (and your AI savvy)\n\nIn today’s AI-powered world, highlighting your AI skills can help you stand out to employers. Your side projects are your portfolio and GitHub gives you the tools to sharpen your skills, collaborate, and showcase your work. Here’s how to get started: In VS Code, open Copilot Chat and type:\n\n``` /new ```\n\nCopilot can scaffold a new project inside your editor to help you get started. Once it’s scaffolded, ask Copilot:\n\n*“Add the MIT license to this project and publish it as a public project on GitHub.”*\n\nOpen a command line in VS Code and send the following prompt to manually push:\n\n``` git init && git add . && git commit -m \"Initial commit\" && git push ```\n\nOr create a new repo using the GitHub web interface and upload your files.\n\nFrom there, you can:\n\n- Track progress with issues, commits, and project boards.\n- Document your journey and milestones in the README.\n- Iterate and improve with feedback and AI assistance.\n\n[Read our full guide on prompting Copilot to create and publish new projects](https://docs.github.com/en/enterprise-cloud@latest/copilot/how-tos/use-chat/get-started-with-chat) and start building your public portfolio &gt;\n\n## 3. Level up your developer toolkit with core GitHub workflows\n\nYes, AI is changing the game, but strong fundamentals still win it. If you’re aiming to level up from student to junior dev, these core workflows are your launchpad:\n\n- **Automate with GitHub Actions**. Automating builds and deployments is a best practice for all developers. Use [GitHub Actions](https://docs.github.com/en/actions/get-started/quickstart) to build, test, and deploy your projects automatically.\n- **Contribute to open source**. Join the global developer community by [contributing to open source](https://github.blog/open-source/new-to-open-source-heres-everything-you-need-to-get-started/). It’s one of the best ways to learn new skills, grow your resume, and build real-world experience.\n- **Collaborate through pull requests**. Coding is a team sport. Practice the same [pull request workflows](https://docs.github.com/en/pull-requests) used by professional teams: Review others’ code, discuss feedback, and merge with confidence.\n\n[Read our full guide on understanding GitHub workflows &gt;](https://docs.github.com/en/get-started/using-github/github-flow)\n\n## 4. Sharpen your expertise by reviewing code\n\nOne of the fastest ways to grow as a developer is to learn from the reviews given by your peers. Every pull request is a chance to get feedback — not just on your code, but on how you think, communicate, and collaborate.\n\nGitHub staff engineer [Sarah Vessels](https://github.com/cheshire137) has reviewed over 7,000 pull requests. She advises not to be afraid to ask questions during code reviews. If you’re unsure why a suggestion was made, speak up. If something isn’t obvious, clarify. Code review is a conversation, not a test.\n\nHere’s how to make the most of it:\n\n- **Ask questions.** Use comments to understand decisions or explore alternate approaches. It shows curiosity and builds shared knowledge.\n- **Look for patterns.** Repeated suggestions often point to best practices you can internalize and reuse.\n- **Take notes.** Keep track of feedback you’ve received and how you’ve addressed it, which is great for personal growth **and** future reference.\n- **Be gracious.** Say thank you, follow up when you make changes, and acknowledge when a comment helped you see something differently.\n\n[Read our full guide on code review best practices and learn how to grow from every review &gt;](https://github.blog/developer-skills/github/how-to-review-code-effectively-a-github-staff-engineers-philosophy/)\n\n## 5. Debug smarter and faster with AI\n\nDebugging is one of the most time-consuming parts of software development. But with GitHub Copilot, you don’t have to do it alone.\n\nUse Copilot Chat to:\n\n- Ask “Why is this function throwing an error?” and get real-time explanations.\n- Use `/fix`\nto highlight code and generate a potential fix.\n- Run `/tests`\nto create test cases and verify your logic.\n- Try `/explain`\non cryptic errors to understand the root cause.\n\nYou can even combine commands for deeper debugging — for example, use `/explain` to understand the problem, then `/fix` to generate a solution, and `/doc` to document it for your team.\n\n[Read our full guide on how to debug code with Copilot &gt;](https://github.blog/ai-and-ml/generative-ai/a-practical-guide-on-how-to-use-the-github-mcp-server/)\n\n## The bottom line\n\nWhether you’re writing your first pull request or building your fifth side project, GitHub is the place to sharpen your skills, collaborate in the open, and build a portfolio that gets you hired.\n\nAI may be reshaping the software world, but, with the right tools and mindset, junior developers can thrive.\n\n[Start building on GitHub today &gt;](https://github.com/new)\n\n[![Learn how to code faster and better with our biweekly developer newsletter. ](https://github.blog/wp-content/uploads/2025/08/GH-Insider.png?resize=1024%2C256)](https://www.google.com/url?q=https://resources.github.com/newsletter/&amp;sa=D&amp;source=docs&amp;ust=1754595950046860&amp;usg=AOvVaw0ajzjKA55qCgxK7afVYpH4)",
  "Author": "Gwen Davis",
  "PubDate": "2025-08-07T21:05:55+00:00",
  "Description": "The role of junior developer is evolving. If you're at this stage in your career, here's how to keep up and stand out.\n\nThe post [Junior developers aren’t obsolete: Here’s how to thrive in the age of AI](https://github.blog/ai-and-ml/generative-ai/junior-developers-arent-obsolete-heres-how-to-thrive-in-the-age-of-ai/) appeared first on [The GitHub Blog](https://github.blog)."
}
