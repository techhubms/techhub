{
  "Link": "https://github.blog/changelog/2025-10-29-github-mcp-server-now-comes-with-server-instructions-better-tools-and-more",
  "OutputDir": "_news",
  "Author": "Allison",
  "Title": "GitHub MCP Server now comes with server instructions, better tools, and more",
  "FeedName": "The GitHub Blog",
  "FeedUrl": "https://github.blog/changelog/feed/",
  "EnhancedContent": "The GitHub MCP Server now comes with server instructions that unlock new and better ways in which it can be used by models.\n\nWe’ve also continued to decrease the footprint of the GitHub MCP Server by consolidating more tools into fewer, more powerful tools.\n\nAnd now, configuring the GitHub MCP Server to your needs just got way easier!\n\nVisit the [GitHub MCP Server repository](https://github.com/github/github-mcp-server) to learn more.\n\n## Server instructions and multitool workflows\n\nServer instructions are a feature of the Model Context Protocol specification which acts like a system prompt that guides the model in effectively using an MCP server. They’re especially useful for things like respecting tool interdependence (“always use tool A before tool B”), following multitool workflows (“when asked to review a pull request, always start off with tool A, then use tool B, and finally tool C”) or giving general guidance for commonalities that underlie most tools (“always use pagination when available”).\n\nWith the addition of server instructions to the GitHub MCP Server, we’ve unlocked new possibilities. Models will now be much better at following precise workflows for tasks like reviewing pull requests and managing issues or discussions. They will also generally use tools more effectively across the board.\n\nNow that server instructions are part of the GitHub MCP Server, we will work on continuously improving them as our MCP server evolves! As always, we are listening closely to feedback from our users on how we can tweak instructions to best serve developer needs.\n\n## Consolidating tools into more powerful multifunctional tools: pull requests, issues, sub-issues\n\nWe’re continuing our work to make the GitHub MCP Server simpler and more performant by merging more related tools into unified, multifunctional ones. Just like before, each consolidated tool supports multiple operations through a single `method` parameter, making configurations leaner, AI reasoning clearer, and performance faster.\n\nSimilar to the consolidation of the pull request tools in the previous release, the following pull request review tools have now been consolidated into a single, powerful `pull_request_review_write` tool:\n\n- `create_and_submit_pull_request_review`\n- `create_pending_pull_request_review`\n- `submit_pending_pull_request_review`\n- `delete_pending_pull_request_review`\n\nThe new tool has a `method` parameter to perform these tasks:\n\n- `create`\n- `submit_pending`\n- `delete_pending`\n\nThe following issue tools have been consolidated into a single, powerful `issue_read` tool:\n\n- `get_issue`\n- `get_issue_comments`\n- `list_labels (with issue_number)`\n- `list_sub_issues`\n\nThe new tool has a `method` parameter to perform these operations:\n\n- `get`\n- `get_comments`\n- `get_labels`\n- `get_sub_issues`\n\nFurthermore, the following issue tools are consolidated into a single `issue_write` tool:\n\n- `create_issue`\n- `update_issue`\n\nThe new tool has a `method` parameter for these operations:\n\n- `create`\n- `update`\n\nFinally, the following sub-issue tools have been consolidated into a single `sub_issue_write` tool:\n\n- `add_sub_issue`\n- `remove_sub_issue`\n- `reprioritize_sub_issue`\n\nThe new tool has a `method` parameter to perform these operations:\n\n- `add`\n- `reprioritize`\n- `remove`\n\nIf you notice that a commonly used tool is missing, it’s likely been consolidated into a new multifunctional tool or moved out of the default configuration.\n\n## Easier server configuration with the new `default`\nkeyword\n\nPreviously, toolsets could only be configured by typing them out one by one when configuring the MCP server. We’ve made this process easier by introducing the `default` keyword. You can use this keyword when configuring your server to refer to the default toolset.\n\nNow, adding a toolset like `code_security` to your default MCP configuration is as simple as `X-MCP-Toolsets:\"default,code_security\"` for the remote MCP server or `--toolsets default,code_security` for the local MCP server.\n\nNote that just as before, the `default` toolset will contain the following toolsets:\n\n- `context`\n– Current user and GitHub context\n- `repos`\n– Repository operations\n- `issues`\n– Issue tracking\n- `pull_requests`\n– Pull request workflows\n- `users`\n– User information",
  "Description": "The GitHub MCP Server now comes with server instructions that unlock new and better ways in which it can be used by models. We’ve also continued to decrease the footprint…\n\nThe post [GitHub MCP Server now comes with server instructions, better tools, and more](https://github.blog/changelog/2025-10-29-github-mcp-server-now-comes-with-server-instructions-better-tools-and-more) appeared first on [The GitHub Blog](https://github.blog).",
  "ProcessedDate": "2025-10-29 21:04:17",
  "Tags": [
    "copilot",
    "Release"
  ],
  "PubDate": "2025-10-29T09:07:43+00:00",
  "FeedLevelAuthor": "Archive: 2025 - GitHub Changelog"
}
