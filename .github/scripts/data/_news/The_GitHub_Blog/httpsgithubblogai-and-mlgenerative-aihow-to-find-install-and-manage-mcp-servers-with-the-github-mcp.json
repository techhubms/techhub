{
  "FeedName": "The GitHub Blog",
  "Link": "https://github.blog/ai-and-ml/generative-ai/how-to-find-install-and-manage-mcp-servers-with-the-github-mcp-registry/",
  "Description": "Learn how to bring structure and security to your AI ecosystem with the GitHub MCP Registry, the single source of truth for managing and governing MCP servers.\n\nThe post [How to find, install, and manage MCP servers with the GitHub MCP Registry](https://github.blog/ai-and-ml/generative-ai/how-to-find-install-and-manage-mcp-servers-with-the-github-mcp-registry/) appeared first on [The GitHub Blog](https://github.blog).",
  "OutputDir": "_news",
  "FeedLevelAuthor": "The GitHub Blog",
  "Author": "Andrea Griffiths",
  "Tags": [
    "AI & ML",
    "Generative AI",
    "MCP"
  ],
  "Title": "How to find, install, and manage MCP servers with the GitHub MCP Registry",
  "FeedUrl": "https://github.blog/feed/",
  "PubDate": "2025-10-24T16:00:00+00:00",
  "ProcessedDate": "2025-10-24 16:03:03",
  "EnhancedContent": "Picture this: you walk into a grocery store and nothing makes sense. The cereal is scattered across three aisles. The milk is hiding in some random cooler near self-checkout. And those produce labels? They haven’t been updated in months.\n\nThat’s exactly what discovering Model Context Protocol (MCP) servers felt like. Until now.\n\nAs a refresher, [MCP is how developers connect tools, APIs, and workflows to their AI systems](https://github.blog/ai-and-ml/llms/what-the-heck-is-mcp-and-why-is-everyone-talking-about-it/). Each MCP server is like an ingredient in your AI stack, whether it’s Playwright for browser automation, Notion for knowledge access, or GitHub’s own MCP server with over a hundred tools.\n\nThe new [GitHub MCP Registry](https://github.blog/ai-and-ml/github-copilot/meet-the-github-mcp-registry-the-fastest-way-to-discover-mcp-servers/) changes everything by giving you a single, canonical source for discovering, installing, and managing MCP servers right on GitHub.\n\nHere’s what you need to know about finding the right tools for your AI stack, publishing your own servers, and setting up governance for your team.\n\nIn this blog, we’ll walk through how to:\n\n- Install an MCP server\n- Publish your own\n- Enable governance and team use\n\nWe’ll also share a few tips and tricks for power users. Let’s go!\n\n## What’s in the registry today\n\nCurrently, the [GitHub MCP Registry](https://github.com/mcp) has **44 MCP servers**, including:\n\n- **Playwright**: Automate and test web apps.\n- **GitHub MCP server**: Access 100+ GitHub API tools.\n- **Context7**, **MarkItDown** (Microsoft), **Terraform** (HashiCorp).\n- Partner servers from **Notion, Unity, Firecrawl, Stripe,** and more.\n\nYou can browse by tags, popularity, or GitHub stars to find the tools you need.\n\n## How to install an MCP server\n\nThe registry makes installation a one-click experience in **VS Code** or **VS Code Insiders**.\n\n### Example: Installing Playwright\n\n1. Navigate to Playwright MCP server in the GitHub MCP Registry.\n2. Click **Install in VS Code**.\n3. VS Code launches with a pre-filled configuration.\n4. Accept or adjust optional parameters (like storage paths).\n\nThat’s it. You’re ready to use Playwright in your agentic workflows.\n\n✅ **Pro tip:** Remote MCP servers (like GitHub’s) use OAuth during install so you don’t need to manually handle tokens or secrets. Just authenticate once and start building.\n\n## How to publish your own MCP server\n\n### 1. Install the MCP Publisher CLI\n\n- macOS/Linux/WSL (Homebrew, recommended):\n\n``` brew install mcp-publisher ```\n\n- macOS/Linux/WSL (prebuilt binary, latest version):\n\n``` \"https://github.com/modelcontextprotocol/registry/releases/download/latest/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz\" | tar xz mcp-publisher && sudo mv mcp-publisher /usr/local/bin/ ```\n\n### 2. Initialize your `server.json`\nfile\n\nNavigate to your server’s source directory and run:\n\n``` cd /path/to/your/mcp-server mcp-publisher init ```\n\nThis creates a `server.json` file. Example:\n\n``` { \"$schema\": \"https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json\", \"name\": \"io.github.yourname/your-server\", \"title\": \"Describe Your Server\", \"description\": \"A description of your MCP server\", \"version\": \"1.0.0\", \"packages\": [ { \"registryType\": \"npm\", \"identifier\": \"your-package-name\", \"version\": \"1.0.0\", \"transport\": { \"type\": \"stdio\" } } ] } ```\n\n### 3. Prove you own the package\n\nAdd the required metadata for your package type.\n\n- **NPM:** Add an `\"mcpName\"`\nfield to your `package.json` :\n\n``` { \"name\": \"your-npm-package\", \"mcpName\": \"io.github.username/server-name\" } ```\n\n- **PyPI/NuGet:** Add this to your README:\n\n``` mcp-name: io.github.username/server-name ```\n\n- **Docker:** Add a label to your Dockerfile:\n\n``` LABEL io.modelcontextprotocol.server.name=\"io.github.username/server-name\" ```\n\n### 4. Authentication\n\n- For GitHub-based namespaces (`io.github.*`\n), run:\n\n``` mcp-publisher login github ```\n\nThis will open a browser for OAuth login.\n\n- For custom domains (`com.yourcompany/*`\n), follow DNS verification steps in the [official docs](https://github.com/modelcontextprotocol/registry/blob/main/docs/guides/publishing/publish-server.md).\n\n### 5. Publish your server\n\nOnce authenticated, publish to the registry:\n\n``` mcp-publisher publish ```\n\nIf successful, your server will be discoverable in the MCP registry. You can verify with:\n\n``` curl \"https://registry.modelcontextprotocol.io/v0/servers?search=io.github.yourname/your-server\" ```\n\n> >\n> Once you’ve completed the steps above, email [partnerships@github.com](mailto:partnerships@github.com) and request for your server to be included.\n> >\n\n✅ **Pro tips:**\n\n- **Namespace:** Use `io.github.username/*`\nfor GitHub auth, or `com.yourcompany/*` for DNS-based verification.\n- **Remote endpoints:** Add a `\"remotes\"`\narray in your `server.json` for cloud/HTTP endpoints:\n\n``` \"remotes\": [ { \"type\": \"streamable-http\", \"url\": \"https://yourdomain.com/yourserver\" } ] ```\n\n- **Multiple deployment options:** You can list both `\"packages\"`\nand `\"remotes\"` for hybrid deployments.\n- **Examples:** See [airtable-mcp-server (npm/docker/MCPB)](https://github.com/domdomegg/airtable-mcp-server), [time-mcp-nuget](https://github.com/domdomegg/time-mcp-nuget), [time-mcp-pypi](https://github.com/domdomegg/time-mcp-pypi).\n\n## Automate publishing with GitHub Actions\n\nYou can automate publishing so every tagged release is published to both your package registry and the MCP registry.\n\nCreate `.github/workflows/publish-mcp.yml` :\n\n``` name: Publish to MCP Registry on: push: tags: [\"v*\"]\n\njobs: publish: runs-on: ubuntu-latest permissions: id-token: write # For OIDC contents: read\n\nsteps:\n- uses: actions/checkout@v5\n\n# (Edit these for your package type)\n- name: Setup Node.js\nuses: actions/setup-node@v5 with: node-version: \"lts/*\"\n- name: Install dependencies\nrun: npm ci\n- name: Build and test\nrun: | npm run build --if-present npm run test --if-present\n- name: Publish to npm\nrun: npm publish env: NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n# MCP publishing (works for all package types)\n- name: Download MCP Publisher\nrun: | curl -L \"https://github.com/modelcontextprotocol/registry/releases/download/latest/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz\" | tar xz mcp-publisher\n- name: Publish to MCP Registry\nrun: | ./mcp-publisher login github-oidc ./mcp-publisher publish\n\n# Optional: keep server.json version in sync with git tag\n- run: |\nVERSION=${GITHUB_REF#refs/tags/v} jq --arg v \"$VERSION\" '.version = $v' server.json > tmp && mv tmp server.json ```\n\nTo trigger the workflow:\n\n``` git tag v1.0.0 git push origin v1.0.0 ```\n\nWhen you publish, your server shows up in the open source registry and downstream registries (like GitHub’s) automatically pick up updates. No more notifying a dozen different registries every time you ship a new version.\n\n✅ **Pro tips:**\n\n- Host your code in a **public GitHub repository** to show verified ownership.\n- Add tags in `server.json`\nso developers can easily discover your server by category.\n- Updates propagate automatically downstream—no manual notifications required\n\n**How to manage MCP servers in the enterprise**\n\nIf you’re managing MCP usage across a large organization, governance isn’t optional. You need control over which servers your developers can install—especially when those servers interact with sensitive data.\n\nGitHub now supports **registry allow lists** so admins can control which MCP servers are available to developers.\n\nHere are the steps for admins (which may be you!):\n\n1. Stand up or connect an internal registry that follows the MCP API spec (registry + HTTP endpoint).\n2. Add vetted MCP servers (internal + external) to your registry.\n3. Point GitHub Enterprise settings to that registry endpoint.\n4. MCP-aware surfaces (starting with VS Code) enforce the allow list automatically.\n\n**Example: How the allow list works**\n\nYour internal registry at `https://internal.mybank.com/mcp-registry` returns:\n\n``` { \"servers\": [ { \"name\": \"github.com/github/mcp-server\", \"version\": \"1.0.0\" }, { \"name\": \"github.com/microsoft/markitdown-mcp\", \"version\": \"2.1.0\" }, { \"name\": \"internal.mybank.com/mcp-servers/custom-tools\", \"version\": \"1.5.0\" } ] } ```\n\nWhen developers try to install an MCP server in VS Code, GitHub checks your registry endpoint and only allows installations from your approved list.\n\nThis governance model means you can vet partnerships, run security scans, and maintain compliance, all while giving developers access to the tools they need.\n\n✅ **Pro tip:** Use GitHub’s API or your existing security pipeline to vet MCP servers before adding them to your allow list.\n\n## Tips and tricks for power users\n\nOnce you’ve got the basics down, here are some shortcuts to get more out of the registry:\n\n- **Sort smarter**: Use GitHub stars and org verification to quickly assess quality and legitimacy. If a server has thousands of stars and comes from a verified org like Microsoft or HashiCorp, that’s a strong signal.\n- **Local testing**: Test your MCP server before publishing using the[MCP Inspector](https://github.com/modelcontextprotocol/inspector). This helps you catch issues early without polluting the registry.\n- **Agent synergy**: Copilot coding agent comes preloaded with GitHub and Playwright MCP servers. This combo enables auto-generated pull requests with screenshots of web apps, perfect for UI-heavy projects where visual validation matters.\n- **Tool overload fix**: VS Code is rolling out semantic tool lookups, so your agent won’t flood contexts with 90+ tools. Instead, only the relevant ones surface based on your prompt. This makes working with large MCP servers like GitHub’s much more manageable.\n\n## What’s next?\n\nThe GitHub MCP Registry is just getting started. Here’s a look at what’s on the horizon—from self-publication to enterprise adoption—so you can see where the ecosystem is heading.\n\n- **Self-publication**: Expected in the next couple months. This will unlock community-driven growth and make the registry the canonical source for all public MCP servers.\n- **More IDE support**: Other IDEs are coming. The goal is to make MCP server installation seamless regardless of where you write code.\n- **Enterprise features**: Governance flows to help unlock MCP usage in regulated industries. Think financial services, healthcare, and other sectors where compliance isn’t negotiable.\n- **Agentic workflows**: GitHub MCP server will start bundling tools into use-case-driven flows (e.g., “analyze repository + open pull request”) instead of just exposing raw API endpoints. This will make complex workflows feel like simple commands.\n\n## Get started today\n\nThe GitHub MCP Registry has 44 servers today and will continue growing (trust us!).\n\n👉 Explore the [MCP Registry](https://github.com/mcp?utm_source=blog-source&amp;utm_campaign=mcp-registry-server-launch-2025) on GitHubhttps://github.com/mcp?utm_source=blog-source&amp;utm_campaign=mcp-registry-server-launch-2025👉 To nominate your server now, email **partnerships@github.com**.\n\nSoon, this registry will become the single source of truth for MCP servers, giving you one place to discover, install, and govern tools without hopping across outdated registries.\n\nThe future of AI-assisted development isn’t about coding faster. It’s about orchestrating tools that amplify your impact. And the GitHub MCP Registry is where that orchestration begins."
}
