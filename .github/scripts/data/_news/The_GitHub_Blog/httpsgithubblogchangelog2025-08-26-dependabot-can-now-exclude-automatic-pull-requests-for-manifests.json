{
  "FeedLevelAuthor": "Archive: 2025 - GitHub Changelog",
  "FeedUrl": "https://github.blog/changelog/feed/",
  "OutputDir": "_news",
  "FeedName": "The GitHub Blog",
  "Author": "Allison",
  "Tags": [],
  "Description": "You can now tell Dependabot to completely skip dependency manifests that live in specific subdirectories of your repository. This general availability release reduces noise by preventing unwanted update pull requests…\n\nThe post [Dependabot can now exclude automatic pull requests for manifests in selected subdirectories](https://github.blog/changelog/2025-08-26-dependabot-can-now-exclude-automatic-pull-requests-for-manifests-in-selected-subdirectories) appeared first on [The GitHub Blog](https://github.blog).",
  "PubDate": "2025-08-26T17:53:23+00:00",
  "EnhancedContent": "You can now tell Dependabot to completely skip dependency manifests that live in specific subdirectories of your repository. This general availability release reduces noise by preventing unwanted update pull requests from ever being opened. This is especially true in large monorepos or repositories with examples, templates, test fixtures, or experimental code.\n\n## What’s new\n\nThe `exclude-paths` option in the `dependabot.yml` file allows you to exclude specific folders or files explicitly or via glob patterns so Dependabot skips manifests in “sub-monorepo” directories.\n\n### Why this matters\n\nPreviously, if you only wanted Dependabot updates for core production code, you had to do one of the following:\n\n- List many separate `updates`\nentries — one per directory you **did** want\n- Accept pull request noise from manifests in `examples/`\n, `samples/` , `playgrounds/` , generated scaffolds, or archived/legacy areas\n\nWith directory-level exclusion rules you can keep a single, broad configuration (e.g., `directory: \"/\"` ) and carve out what you **don’t** want Dependabot to scan.\n\n## Tips and tricks\n\n- Applies before manifest parsing: Dependabot will not list, parse, or open pull requests for excluded paths.\n- Supports glob patterns (`**`\n, `*` ).\n- Evaluated relative to the root of the repository — the same base as the `directory`\nyou specify.\n- Available per update configuration block so you can tailor exclusions per ecosystem.\n- Does not replace dependency-level `ignore`\nrules — those still control versions or specific packages. Use both when you want to suppress directories plus certain dependency updates globally.\n- If you have multiple `updates`\nblocks that overlap, each block’s `exclude-paths` applies only to the manifests that block would otherwise scan.\n- Grouping (i.e., `groups:`\n) only considers manifests that are not ignored.\n- Check out [our documentation](https://docs.github.com/code-security/dependabot/working-with-dependabot/dependabot-options-reference#exclude-paths-) to learn more and get started using this feature in your `dependabot.yml`\nconfig file.\n\n### Security & compliance\n\nIgnoring manifests in specified subdirectories means Dependabot will not surface pull requests for dependencies **only referenced in those excluded directories**. Ensure directories you exclude are truly non-production or intentionally unmanaged.\n\n## Availability\n\n- github.com: Available today\n- GHES: Will ship in GHES 3.19\n\nJoin the discussion within the [Dependabot Community](https://github.com/dependabot/dependabot-core/issues/4364).",
  "Link": "https://github.blog/changelog/2025-08-26-dependabot-can-now-exclude-automatic-pull-requests-for-manifests-in-selected-subdirectories",
  "ProcessedDate": "2025-08-26 18:16:13",
  "Title": "Dependabot can now exclude automatic pull requests for manifests in selected subdirectories"
}
