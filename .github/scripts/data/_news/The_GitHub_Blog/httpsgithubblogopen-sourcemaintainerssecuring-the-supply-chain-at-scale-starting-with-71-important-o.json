{
  "PubDate": "2025-08-11T16:00:00+00:00",
  "Author": "Kevin Crosby",
  "FeedUrl": "https://github.blog/feed/",
  "OutputDir": "_news",
  "ProcessedDate": "2025-08-11 16:04:35",
  "FeedLevelAuthor": "The GitHub Blog",
  "Link": "https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/",
  "Description": "Learn how the GitHub Secure Open Source Fund helped 71 open source projects significantly improve their security posture through direct funding, expert guidance, and actionable playbooks.\n\nThe post [Securing the supply chain at scale: Starting with 71 important open source projects](https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/) appeared first on [The GitHub Blog](https://github.blog).",
  "EnhancedContent": "When the Log4j zero day broke in December 2021, everyone learned the same lesson: One under-resourced library can send shockwaves through the entire software supply chain. Today the average cloud workload includes [**over 500 dependencies**](https://github.blog/security/supply-chain-security/best-practices-to-keep-your-projects-secure-on-github/#staying-on-top-of-dependency-security), many of them tended by unpaid volunteers. The need to support and secure this ecosystem has never been more urgent.\n\nIn response, GitHub launched the [GitHub Secure Open Source Fund](https://resources.github.com/github-secure-open-source-fund/) in November 2024, which provides maintainers with financial support to participate in a three-week program that delivers security education, mentorship, tooling, certification, community of security-minded maintainers,¬† and more. By linking this funding to programmatic security outcomes, our goal is to increase security impact, reduce risk, and help secure the software supply chain at scale.\n\nAlready, we‚Äôre seeing measurable impact from proactive work. Our first two sessions brought together **125 maintainers from 71 important and fast growing open source projects** ¬†Early outcomes include:\n\n- **Remediated over 1,100 vulnerabilities detected by CodeQL,** reducing their risk surfaces.\n- **Participants issued more than 50 new Common Vulnerabilities and Exposures (**[**CVEs**](https://github.blog/security/supply-chain-security/securing-the-open-source-supply-chain-the-essential-role-of-cves/)**)**, informing and protecting their downstream dependents.\n- **Prevented 92 new secrets from being leaked** and 176 leaked secrets were detected and resolved\n- **Empowered maintainers for long-term success,** with **100%** saying they left with actionable next steps **** for the following year‚Äôs roadmap.\n- **Accelerated adoption of security best practices,** with **80%** of projects enabling **** three or more GitHub-based security features**.**\n- **Prepared projects for the future of development,** as **63% said** they have a better understanding of AI and MCP security.\n\nMaintainers found novel ways to partner with and use AI to accelerate learnings and implement solutions, with many consulting [GitHub Copilot](https://github.com/features/copilot/plans?cft=copilot_li.features_copilot?utm_source=announcement&amp;utm_medium=blog&amp;utm_campaign=devrelsoss-20250812) to conduct vulnerability scans and security audits, define and implement fuzzing strategies, and more.\n\nThese results show direct security impact immediately from the sessions, and the momentum is just beginning. Maintainers have embraced a culture of security, built out security backlogs, and are actively sharing insights with the maintainers in the community, and with their direct project contributors and consumers. As a result, the entire ecosystem benefits ‚Äî and the security impact will continue to grow.\n\nAnd we‚Äôre not done. [Session 3 starts in September 2025](https://resources.github.com/github-secure-open-source-fund/), and we want to bring more maintainers that work deeper in the dependency tree and those that manage critical dependencies by themselves. To see the immediate impact following Sessions 1 and 2, let‚Äôs look at what changed inside the categories of code that power almost everything you build.\n\n## AI and ML frameworks / edge-LLM tooling ü§ñ\n\n[Ollama](https://github.com/ollama/ollama) ‚Ä¢ [AutoGPT/Gravitasml](https://github.com/Significant-Gravitas/gravitasml) ‚Ä¢ [scikit-learn](https://github.com/scikit-learn/scikit-learn) ‚Ä¢ [OpenCV](https://github.com/opencv/opencv) ‚Ä¢ [CodeCarbon](https://github.com/mlco2/codecarbon) ‚Ä¢¬† [Zeus](https://github.com/ml-energy/zeus) ‚Ä¢ [Cognee](https://github.com/topoteretes/cognee) ‚Ä¢ [CAMEL-AI](https://github.com/camel-ai/camel) ‚Ä¢¬† [Ruby-OpenAI](https://github.com/alexrudall/ruby-openai)\n\nThese projects are the bedrock of the current AI work with LLMs, agents, orchestration layers, and model toolchains. Together they rack up tens of millions of installs and git clone commands each month, and they‚Äôre baked into cloud notebooks like Jupyter, Google Collab, AWS SageMaker, and Microsoft Azure ML. A prompt-injection flaw or poisoned weight file here could spill into thousands of downstream apps overnight, and the teams who rely on them often won‚Äôt even know which component failed*.*\n\n### Project spotlight: Ollama\n\nThis project makes running large language models locally possible.\n\nOllama is the easiest way to chat and build with open models. They used this opportunity to threat-model every moving part of their system ‚Äì from their use of GitHub Actions, DNS security, model distribution, how the models are executed in Ollama‚Äôs engine, auto-update checker, and more ‚Äî then they pruned unused dependencies.\n\n&gt; **Ollama**: ‚ÄúThe GitHub Secure Open Source Program is a safe space to ask leading experts security questions, and learn how other high-impact projects address similar challenges*.*‚Äù\n\n### Project spotlight: GravitasML by AutoGPT\n\nGravitasML is an MIT licensed XML parser for LLMs, built by the team that launched AutoGPT to be simple and secure by design.\n\nFresh out of the sprint, the AutoGPT team wired CodeQL into every pull request across the AutoGPT Platform and GravitasML, and built a lightweight ‚Äúsecurity agent‚Äù that nudges contributors to tighten controls as they code. This helped turn passive checks into continuous coaching. The maintainers overhauled their security policy, stood up a formal incident-response workflow, and mapped out 28 follow-up tasks (from fuzzing their XML parser to completing the OSS Scorecard) to build a durable roadmap for safer LLM agents at large.\n\n&gt; **AutoGPT:** ‚ÄúThe AI-agent ecosystem is safer ‚Äî and will keep getting safer ‚Äî because of the Secure Open Source Fund.‚Äù\n\n## Front-end and full-stack frameworks / UI libraries üìö\n\n[Next.js](https://github.com/vercel/next.js/) ‚Ä¢ [Nuxt](https://github.com/nuxt) ‚Ä¢ [Svelte](https://github.com/sveltejs/svelte) ‚Ä¢ [NativeScript](https://github.com/nativescript) ‚Ä¢ [Bootstrap](https://github.com/twbs/bootstrap) ‚Ä¢ [shadcn/ui](https://github.com/shadcn-ui/ui) ‚Ä¢ [Path-to-RegExp](https://github.com/pillarjs/path-to-regexp) ‚Ä¢ [WebdriverIO](https://github.com/webdriverio/webdriverio)\n\nThese frameworks ship the pixels users touch and often bundle their own server-side routing. Their install bases **number in the millions**, and improving their security posture closes off potential XSS, template-injection, and supply-chain hop points. The Bootstrap project alone powers nearly [**17.5% of the world‚Äôs websites**](https://w3techs.com/technologies/details/js-bootstrap), and Next.js drives the **frontends for** [**Notion and Adobe**](https://nextjs.org/)**,** among many others.\n\n### Project spotlight: shadcn/ui\n\nThis React component library is trusted by leading organizations, like [OpenAI‚Äôs cookbook](https://x.com/shadcn/status/1712535759968940130), and was able to turn security learning into an interactive practice.\n\nOver the three-week sprint, this project audited every GitHub Actions workflow and secret, refreshed `SECURITY.md` , licenses, and dependencies, and following a Secure by Design UX workshop ‚Äî created a framework of how malicious threat actors might attack their project and developed strategies to reduce risks or block entirely. They turned on CodeQL (the first scan caught an unsafe `dangerouslySetInnerHTML` path), and drafted a formal vulnerability-reporting flow and threat model ‚Äî laying a clear, public security roadmap that future contributors must follow. After learning about fuzzing, this project also used GitHub Copilot to set up and implement fuzz testing.\n\n&gt; **shadcn/ui**: ‚ÄúSecurity went from something we should do to something we actively do.‚Äù\n\n## Web servers, networking, and gateways üñ•Ô∏è\n\n[Node.js](https://github.com/nodejs/node) ‚Ä¢ [Express](https://github.com/expressjs/express) ‚Ä¢ [Fastify](https://github.com/fastify/fastify) ‚Ä¢ [Caddy](https://github.com/caddyserver/caddy)¬† ‚Ä¢ [Netbird](https://github.com/netbirdio/netbird)\n\nIf a process is listening on port 443, chances are one of these web-server or gateway projects is in the stack. Hardening them protects every cookie, auth header, and JSON payload that crosses the wire. [Node.js](http://node.js) alone underpins most server-side JavaScript, and has a huge impact in the wider ecosystem.\n\n### Project spotlight: A quick win for Node.js\n\nDuring the sprint, the Node.js security-WG revamped the project‚Äôs threat model and kicked off a pull request to wire CodeQL into core ‚Äî backed by a new workflow that automatically reviews code scanning alerts and flags least-clear errors for refactoring. Those upgrades, plus planned signature checks on future releases, will ripple to every server-side JavaScript workload that ships Node binaries ‚Äî from serverless functions to speeding [server-side rendering from Netflix](https://netflixtechblog.com/making-netflix-com-faster-f95d15f2e972).\n\n## DevOps, build-system, container tooling üß∞\n\n[Turborepo](https://github.com/vercel/turborepo) ‚Ä¢ [Flux](https://github.com/fluxcd/flux2) ‚Ä¢ [Colima](https://github.com/abiosoft/colima) ‚Ä¢ [bootc](https://github.com/bootc-dev/bootc) ‚Ä¢ [Terra](https://github.com/terrapkg/packages) ‚Ä¢ [Warpgate](https://github.com/warp-tech/warpgate) ‚Ä¢ [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs) ‚Ä¢ [Termux](https://github.com/termux) ‚Ä¢ [BlueFin](https://github.com/ublue-os/bluefin)\n\nThese tools touch every commit and deploy. If an attacker lands here, they own the pipeline. Flux alone manages **thousands of production GitOps** **clusters**, and Turborepo‚Äôs build cache now accelerates builds at Vercel, among other organizations.\n\n### Project spotlight: Turborepo\n\nDuring the three-week sprint, Turborepo switched on GitHub private vulnerability reporting, tightened overly permissive workflow tokens, and shipped a production-ready IRP while using CodeQL to scan every pull request. Those guardrails protect the Rust-powered build cache thousands of monorepos rely on, and the team is already drafting a public threat model and provider-notification playbook, so zero-days can be handled quietly before they spread.\n\n&gt; **Turborepo**: ‚ÄúSecure Open Source Fund pushed us to specialize our IRP and ship it.‚Äù\n\n## Security frameworks, identity, compliance tooling üîê\n\n[Log4j](https://github.com/apache/logging-log4j2) ‚Ä¢ [ScanCode](https://github.com/aboutcode-org/scancode-toolkit) ‚Ä¢¬† [CycloneDX (cdxgen)](https://github.com/CycloneDX/)¬†‚Ä¢¬† [Cyclonedx-dotnet](https://github.com/CycloneDX/cyclonedx-dotnet) ‚Ä¢ [ScanAPI](https://github.com/scanapi/scanapi) ‚Ä¢ [OAuthlib](https://github.com/oauthlib/oauthlib) ‚Ä¢ [PGPainless](https://github.com/pgpainless/pgpainless) ‚Ä¢ [Zitadel](https://github.com/zitadel/zitadel) ‚Ä¢ [Veramo](https://github.com/decentralized-identity/veramo) ‚Ä¢ [Stalwart](https://github.com/stalwartlabs/stalwart) ‚Ä¢ [Social-App-Django](https://github.com/python-social-auth/social-app-django) ‚Ä¢ [Jose](https://github.com/panva/jose) ‚Ä¢ [Ente](https://github.com/ente-io/ente)\n\nThese libraries are the locks, ledgers, and audit logs of the internet. Making these projects safer ripples through the ecosystem and makes everyone else¬† safer. CycloneDX SBOMs, for instance, now appear in every major container registry while OAuthlib backs the auth flow for Pinterest and Reddit. And Zitadel issues millions of access tokens daily for European banks and healthcare platforms. Log4J and Scancode were both [highlighted as critical elements in IT systems across governments and companies by Microsoft, too](https://blogs.microsoft.com/on-the-issues/2025/06/04/microsoft-launches-new-european-security-program/).\n\n### Project spotlight: Log4j\n\nThe Apache Log4j team hardened every GitHub Actions workflow against script-injection, drafted a brand-new threat model, and deepened collaborations across the open source community. Next up, they‚Äôre bundling a CodeQL pack to flag unsafe logging patterns in downstream code and rolling out in-house fuzzing tests. Working hand in hand with the ASF security team, they aim to set a standard that will echo across many other ASF projects.\n\n&gt; **Log4J:** ‚ÄùWe learned it the hard way: Ignorance is the biggest security hole. If this training had existed five years ago, maybe Log4Shell wouldn‚Äôt be here today.‚Äù\n\n## Developer utilities and CLI helpers üßë‚Äçüíª\n\n[Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh) ‚Ä¢ [nvm](https://github.com/nvm-sh/nvm) ‚Ä¢ [Cobra](https://github.com/spf13/cobra) ‚Ä¢ [Charset-Normalizer](https://github.com/jawah/charset_normalizer) ‚Ä¢ [Viper](https://github.com/spf13/viper) ‚Ä¢ [API Dash](https://github.com/foss42/apidash) ‚Ä¢ [Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF) ‚Ä¢ [Libyt](https://github.com/yt-project/libyt) ‚Ä¢ [MessageFormat](https://github.com/messageformat) ‚Ä¢ [YAML](https://github.com/yaml) ‚Ä¢ [qs](https://github.com/ljharb/qs) ‚Ä¢ [Polly](https://github.com/App-vNext/Polly) ‚Ä¢ [JUnit](https://github.com/junit-team)‚Ä¢ [CSS-Declaration-Sorter](https://github.com/Siilwyn/css-declaration-sorter) ‚Ä¢ [Wagmi](https://github.com/wevm/wagmi)‚Ä¢ [Electron](https://github.com/electron/electron) ‚Ä¢ [Resolve](https://github.com/browserify/resolve)\n\nThese popular helpers run on laptops and CI nodes worldwide. Hardening them snips off phishing routes and lateral-movement paths. Oh My Zsh alone has 160,000-plus GitHub stars and boots every time millions of devs open a terminal.\n\nWhile much of supply chain security work has concentrated on runtime libraries, attacks on maintainers and the tools they depend on, show us that developer tools are critical to include in our security hardening work.\n\n### Project spotlight: Charset-Normalizer\n\nDownloaded around **20 million times a day on PyPI**, this 4,000-line encoding helper tightened its defenses by ditching weak SMS 2FA in favor of stronger passkey-based MFA, switching on GitHub secret scanning, and patching risky GitHub Actions it hadn‚Äôt noticed before. The maintainer is now automating SBOM generation for every release ‚Äî work that will soon make one of Python‚Äôs most ubiquitous transitive dependencies both audit-ready and [CRA compliant](https://github.blog/open-source/maintainers/what-the-eus-new-software-legislation-means-for-developers/?ut) (which is a big deal, and worthy of emphasis!).\n\n**&gt; Charset-Normalizer:**¬† ‚ÄúA tiny library born out of a personal challenge will be CRA compliant amongst being one of the top OpenSSF scorecard projects.‚Äù\n\n### Project spotlight: nvm\n\nThe go-to Node version manager used the sprint to publish its first incident-response plan and sketch a roadmap for a public vulnerability-disclosure policy ‚Äî turning lessons from a recent audit into concrete guardrails.\n\nFor the first time in this program, nvm‚Äôs maintainer learned how to use Copilot for security guidance and input.\n\nNext up, the maintainer is wiring custom CodeQL queries and fuzzing harnesses to stress-test nvm‚Äôs Bash internals, then sharing the playbook with sibling OpenJS projects like Express, so dev environments everywhere inherit the upgrade.\n\n**&gt; nvm:** ‚ÄúThe Secure Open Source Program helped nvm validate our security practices, implement an IRP, and set clear fuzzing and custom CodeQL goals, while deepening collaboration across OpenJS maintainers.‚Äù\n\n### Project spotlight: JUnit\n\nThrough the three-week sprint, JUnit rolled out end-to-end CodeQL scanning across all of its repositories ‚Äî and fixing the first wave of findings ‚Äî formalized a public incident-response plan, and locked down every workflow by switching `GITHUB_TOKEN` to explicit, least-privilege permissions.\n\n&gt; **JUnit:** ‚ÄúWe immediately improved our GitHub Action‚Äôs security, enabled MFA, and created an IRP.‚Äù\n\n## Data, visualisation, and scientific computing üìä\n\n[Matplotlib](https://github.com/matplotlib/matplotlib) ‚Ä¢ [Jupyter](https://github.com/jupyter) ‚Ä¢ [Pelias Geocoder](https://github.com/pelias/pelias) ‚Ä¢ [Mathesar](https://github.com/mathesar-foundation/mathesar) ‚Ä¢ [DataJourney](https://github.com/sayantikabanik/DataJourney) ‚Ä¢ [AirQo](https://github.com/airqo-platform) ‚Ä¢ [ERPNext](https://github.com/frappe/erpnext) ‚Ä¢ [PypeIt](https://github.com/pypeit/PypeIt) ‚Ä¢ [LORIS](https://github.com/aces/Loris) ‚Ä¢ [Mautic](https://github.com/mautic/mautic)‚Ä¢ [Diesel](https://github.com/diesel-rs/diesel)\n\nAcademic research, climate models, financial market, and lab notebooks all depend on this stack. Data integrity and traceability are non-negotiable. Jupyter Notebooks execute on more than **10 million cloud kernels per month**, and [Matplotlib charts appear in everything from NASA](https://nescacademy.nasa.gov/video/9f2a9ac21d8a40aeb2bd23d1088e7ae11d) to high-school science fair papers.\n\n### Project spotlight: Matplotlib\n\nThe scientific Python staple tightened its GitHub Actions permission boundaries, reviewed and expanded SECURITY.md, and kicked off a formal threat-modeling process (that sparked immediate work). With OSS-Fuzz already catching crashes in its C extensions and an encrypted disclosure channel on the way, Matplotlib is turning ‚Äúunknown unknowns‚Äù into a public checklist other data-science projects can copy-paste.\n\n**&gt; Matplotlib**: ‚ÄúThe program reduced our uncertainty and gave us new tools to manage risk.‚Äù\n\n## Patterns that actually moved the needle\n\n1. **Money matters, but timeboxing matters more.** $10,000 USD (about $500 per hour) might help maintainers focus, but the three-week cap kept momentum and focus high. Several maintainers said a longer program would have been too much.\n2. **Focused themes, interactive coding, quick activation:** Weekly security themes helped maintainers go from theory to practice quickly, absorb key security concepts, practice with real-time coding experiences, implement changes, and enable security features with confidence.\n3. **A security-focused community is the unlock**. Fast rapport in Slack meant maintainers quickly asked critical questions, which was vital for topics like supply-chain subpoenas and disclosure timelines. We even had projects bring urgent questions for quick feedback that wouldn‚Äôt be able to be asked anywhere else.\n\n## Help us make open source more secure\n\nSecuring open source isn‚Äôt a one-off sprint or a feel-good badge. It‚Äôs basic maintenance for the internet. By giving 71 heavily used projects real money, three focused weeks, and direct help, we watched maintainers ship fixes that **now protect millions of builds a day**. This training allows us to go beyond one-to-one education, and enable one-to-many impact. For example, many maintainers are working to make their playbooks public; the incident-response plans they rehearsed are forkable; the signed releases they now ship flow downstream to every package manager and CI pipeline that depends on them.\n\nThis wasn‚Äôt just us either. In 2025 alone, we received $1.38 million in commitments, credits, and contributions from our funding and ecosystem partners.\n\n![A slide showingthe logos for ecosyste.ms, Curioss, Digital DataDesign Institute, Digital Infrastructure Insights Fund, Microsoft for Startups, Mozilla, OpenForum Europe, Open Source Collective, Open UK, Open Technology Fund, OpenSSF, Open Source Initiative, OpenJS Foundation, Open Source Program Office, ura, Sovereign Tech Agency, and Sustain.](https://github.blog/wp-content/uploads/2025/08/475214320-18829d06-bf9a-4b05-831a-ba5a13e022ef.png?resize=1024%2C625)\n\nJoin us in this mission to secure the software supply chain at scale. We are looking for maintainers managing critical and important projects, funding partners who know that prevention is cheaper than the next zero-day, and ecosystem partners that bring unique insights and networks to help us scale their impact.\n\nIf you write code, rely on open source, or just want the software supply chain to stay upright, there‚Äôs room at the table. So, let‚Äôs keep the flywheel turning and build from here.\n\n**&gt; Projects & Maintainers**: [**Apply now**](https://resources.github.com/github-secure-open-source-fund/) to the GitHub Secure Open Source Fund and help make open source safer for everyone.\n\n**&gt; Funding and Ecosystem Partners:** [**Become a Funding or Ecosystem Partner**](https://docs.google.com/forms/d/e/1FAIpQLSeLMDmnxjbrneIPKlX8u3vK4I9ym6vRZPtWzMpT27apx6h9dw/viewform) and support a more secure open source future. Join us on this mission to secure the software supply chain ‚Äî at scale!",
  "Tags": [
    "AI security",
    "CodeQL",
    "GitHub Security Lab",
    "Log4j",
    "Maintainers",
    "Open Source",
    "open source security",
    "supply chain security"
  ],
  "Title": "Securing the supply chain at scale: Starting with 71 important open source projects",
  "FeedName": "The GitHub Blog"
}
