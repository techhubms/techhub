{
  "Description": "Reproduce and debug web app issues with ease using the Playwright MCP server and GitHub Copilot.\n\nThe post [How to debug a web app with Playwright MCP and GitHub Copilot](https://github.blog/ai-and-ml/github-copilot/how-to-debug-a-web-app-with-playwright-mcp-and-github-copilot/) appeared first on [The GitHub Blog](https://github.blog).",
  "FeedName": "The GitHub Blog",
  "Author": "Christopher Harrison",
  "ProcessedDate": "2025-09-05 16:14:08",
  "FeedUrl": "https://github.blog/feed/",
  "EnhancedContent": "I know it can feel like a unicorn, but most bug reports do, in fact, contain steps to reproduce the error (or repro steps). As wonderful as it is to have those, the process of walking through and validating everything is still tedious. In a perfect world, we‚Äôd have end-to-end or acceptance tests that could automate the process. Sadly, many projects lack robust testing.\n\nFortunately, GitHub Copilot with the help of the Playwright Model Context Protocol (MCP) server can automate that entire process.\n\nLet‚Äôs explore how we pass the repro steps to Copilot agent mode, and let it use the Playwright MCP server to walk through them and validate the bug. In turn, it will track down and resolve the error.\n\n## What are Playwright and MCP? A quick overview\n\n[Playwright](https://playwright.dev/) is an end-to-end testing framework for web apps. You can use it to create scripts to act as a user, validate your application‚Äôs feature set, and assure quality.\n\nFor example, if you were building a shopping app, you could create a series of scripts to walk through the entire flow of searching for a product, adding it to the cart, and completing the purchase. These scripts are automated, allowing you to validate the process within seconds.\n\nOriginally developed by Anthropic, [MCP](https://github.blog/ai-and-ml/llms/what-the-heck-is-mcp-and-why-is-everyone-talking-about-it/) is an open (and open source) protocol for exposing tools to AI agents. These tools could include providing additional context and information, or to allow the AI agent to perform actions.\n\nBringing this together: there‚Äôs a [Playwright MCP server](https://github.com/microsoft/playwright-mcp/blob/main/README.md), which provides tools from Playwright to AI agents (or GitHub Copilot in this case), to both create those scripts and perform the actions directly. This allows Copilot to actually walk through the repro steps for us!\n\n## How to configure Playwright MCP server for GitHub Copilot in VS Code\n\nFor you to use the Playwright MCP server, it needs to be available in your IDE. In VS Code, you can [install the Playwright MCP server](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D) to make it available to all projects, or create a file in your `.vscode` folder tiled `mcp.json` and add the following:\n\n``` { \"servers\": { \"playwright\": { \"command\": \"npx\", \"args\": [ \"@playwright/mcp@latest\" ] } } } ```\n\nOnce you do that, you‚Äôll notice a small **play** button appear just over `playwright` in the file. When you select that button, it‚Äôll start the server so you can use it with Copilot agent mode! ([Get the guide](https://github.blog/ai-and-ml/github-copilot/agent-mode-101-all-about-github-copilots-powerful-mode/) to using agent mode in Copilot.)\n\n![A screenshot showing the play button below \"servers\", just above \"playwright\", in a VS Code window.](https://github.blog/wp-content/uploads/2025/09/image.png?resize=1024%2C816)\n\nYou‚Äôll likely need to [configure Playwright](https://playwright.dev/docs/test-configuration), especially if you have a complex startup process for your website. My project is based on the [website in the Agents in SDLC workshop](https://github.com/github-samples/agents-in-sdlc) (available on [GitHub samples](https://github.com/github-samples/agents-in-sdlc)), and already has a frontend written with Astro & Svelte, and a backend using Flask. This configuration allowed Playwright to properly [start the app](https://playwright.dev/docs/api/class-testconfig#test-config-web-server). Also, fun fact: The config file was actually created by Copilot!\n\nI used this prompt with Copilot agent mode to do it, and you can modify it for your particular requirements:\n\n``` Add Playwright to this project. When configuring Playwright, note the startup script for the site. Ensure the configuration uses this startup script, and reuses the server if one is already launched. ```\n\n## The scenario\n\nLet‚Äôs say we have a crowdfunding website for DevOps-themed board games (a truly booming industry). Filters are available to the user to search by publisher and category. After discovering the publisher filter doesn‚Äôt work, a user files the following issue on GitHub:\n\n```\n## Error\n\nThe publisher filter doesn't actually filter the games by publisher.\n\n## Repro steps\n\n1. Go to the homepage.\n2. Select a publisher from the dropdown list; the page updates.\n3. Review the updated list, noting no change in the games listed.\n\n## Expected behavior\n\nThe only games displayed are ones published by the selected publisher.\n\n## Actual behavior\n\nAll games are still displayed. ```\n\n## How Copilot agent mode automates bug reproduction with Playwright\n\nCopilot agent mode is built to be a peer programmer, which means we can give it tasks and then review its work. In other words, we can describe what we‚Äôre looking at, the problems we need to solve, what we expect Copilot to do and let Copilot take it from there!\n\nIf you‚Äôre following along in the video, you‚Äôll notice I paraphrased the user‚Äôs reported issue in my own words. This is something I often do because it allows me to better understand the ask and to go back to the original filer for additional clarity.\n\nIn practice, I ended up sending the following prompt to Copilot agent mode:\n\n``` A user is reporting the publisher filter doesn't do anything. Can you please use Playwright to confirm this is an issue, and if so track it down? Start by going to the landing page, using the dropdown for publisher, and seeing what happens. Thanks! ```\n\n| üí° **Pro tip:** If you want to be fancy, you can also incorporate the [GitHub MCP server](https://github.com/github/github-mcp-server/blob/main/README.md) into the flow by asking Copilot to track down the issue and to read the text directly. To streamline this blog, I‚Äôm going to stick to just the Playwright MCP server (but [you can learn more about the GitHub MCP server and how to use it in our guide](https://github.blog/ai-and-ml/generative-ai/a-practical-guide-on-how-to-use-the-github-mcp-server/)). | | --- |\n\nFrom there, Copilot got to work. It utilized the Playwright MCP server to start the website and perform the repro steps. It then confirmed the user‚Äôs report: The publisher filter didn‚Äôt do anything.\n\nWith this knowledge, Copilot explored the project to track down the bug. It looked at the frontend code, which looked good. With the help of the Playwright MCP server, it also validated the calls to the API were taking place. Then it looked at the backend and discovered the (admittedly) simple problem: a typo.\n\nWhat I really appreciated: After proposing a fix, it returned to Playwright to validate that the fix would actually work.\n\nAfter this was done, I knew Copilot confirmed the bug, generated a fix, and demonstrated the fix resolved the bug. From there, I turned my attention to reviewing the code, running additional tests, and finally creating my pull request.\n\n## Why you should use Playwright MCP with GitHub Copilot for web app debugging\n\nNow yes, the bug itself was straightforward because I wanted to keep the demo focused on Copilot agent mode and Playwright. From experience I can confirm Copilot is invaluable with more complex bugs (I‚Äôm speaking from experience).\n\nHere‚Äôs why all this matters: Providing Copilot agent mode with the ability to use Playwright allows it to ‚Äúsee‚Äù the impact its changes have on the website, and generally interact with your website, too. You can quickly configure Playwright for your project with the help of Copilot to take advantage of this functionality. And you can even take the next step by incorporating Playwright end-to-end tests into your project if you haven‚Äôt already done so.\n\n[**Read the Docs**](https://docs.github.com/en/copilot/tutorials/enhance-agent-mode-with-mcp) **** to start using agent mode in GitHub Copilot &gt;",
  "OutputDir": "_news",
  "FeedLevelAuthor": "The GitHub Blog",
  "Title": "How to debug a web app with Playwright MCP and GitHub Copilot",
  "Tags": [
    "AI & ML",
    "GitHub Copilot",
    "MCP",
    "Model Context Protocol"
  ],
  "PubDate": "2025-09-05T16:00:00+00:00",
  "Link": "https://github.blog/ai-and-ml/github-copilot/how-to-debug-a-web-app-with-playwright-mcp-and-github-copilot/"
}
