{
  "Author": "Andrea Griffiths",
  "PubDate": "2025-08-27T16:00:00+00:00",
  "Title": "How to use GitHub Copilot on github.com: A power user‚Äôs guide",
  "Tags": [
    "AI & ML",
    "GitHub Checkout",
    "GitHub Copilot"
  ],
  "Description": "Explore how to use GitHub Copilot on github.com to automate tasks, assign agents, prototype ideas, and streamline your entire workflow ‚Äî all without an IDE.\n\nThe post [How to use GitHub Copilot on github.com: A power user‚Äôs guide](https://github.blog/ai-and-ml/github-copilot/how-to-use-github-copilot-on-github-com-a-power-users-guide/) appeared first on [The GitHub Blog](https://github.blog).",
  "OutputDir": "_news",
  "FeedName": "The GitHub Blog",
  "ProcessedDate": "2025-08-27 16:13:51",
  "Link": "https://github.blog/ai-and-ml/github-copilot/how-to-use-github-copilot-on-github-com-a-power-users-guide/",
  "FeedUrl": "https://github.blog/feed/",
  "FeedLevelAuthor": "The GitHub Blog",
  "EnhancedContent": "You‚Äôve been using [GitHub Copilot in your IDE](https://docs.github.com/en/copilot/how-tos/get-code-suggestions/get-code-suggestions) for autocomplete and code suggestions. But here‚Äôs what I discovered recently: there‚Äôs a whole other side of Copilot that lives on ggithub.com, and it‚Äôs designed for different problems entirely.\n\nWhile your IDE handles the day-to-day coding, GitHub Copilot on github.com helps you tackle project management, team coordination, and rapid prototyping. I can file issues from screenshots, assign AI agents to fix bugs, and spin up working demos without opening VS Code. *Check it out in the video below üëá*\n\nNo extensions to install, no setup required. Just go to [github.com/copilot](http://github.com/copilot) and start working. This becomes your **AI-powered command center**, and here‚Äôs how you can use it strategically:\n\n## File issues from screenshots\n\nGot a bug report with a screenshot? Don‚Äôt write it manually, let Copilot do it. Here‚Äôs how:\n\n1. Take a screenshot of the bug (e.g., a misaligned icon or layout problem)\n2. Drag it into the Copilot chat onhttps://github.com/copilot[github.com/copilot](http://github.com/copilot).\n3. Add a prompt like:\n\n``` Create a new issue using the 'bug' label. Use this screenshot and describe the overlapping arrow icon. Apply the UI issue template from this repo. ```\n\nCopilot reads the image, generates a clear title and description, applies the right labels, and uses your repository‚Äôs issue templates. It‚Äôs faster than manual transcription and often catches details I might miss.\n\n| **üí° Pro tip:** Copilot can infer issue context from your screenshot and your prompt, no need to spell everything out. | | --- |\n\n## Let Agents handle routine work\n\nOnce your issue is created, you can assign it to the [**Copilot coding agent**](https://docs.github.com/en/copilot/concepts/coding-agent/coding-agent) to start working on a solution.\n\n**To assign an agent:**\n\nIn the chat thread, tell Copilot: `Assign yourself to this issue and draft a fix.`\n\nThe agent will analyze your codebase, identify the root cause, and submit a draft pull request with the fix. You can monitor progress in the task pane and review the pull request when ready.\n\nThis works well for routine bugs, documentation updates, and dependency upgrades. For more complex features, I still prefer hands-on development in the IDE.\n\n| **üí° Pro tip:** Agents can work across issues, run workflows, and follow up, just like a teammate. | | --- |\n\n## Use Spark to prototype live\n\nWhen I need to test how a component behaves or validate a design idea, I use [GitHub Spark](https://github.com/features/spark) to:\n\n- Rapidly scaffold working code\n- Preview and interact with the output\n- Share the work via a link with collaborators\n\n**Example prompt:**\n\n``` Create a feature comparison table for an API pricing page. Show Free, Pro, and Enterprise tiers with checkmarks for features. ```\n\nWithin minutes, I get working code with a live preview. I can edit directly in Spark, GitHub Codespaces, or VS Code, see changes immediately, and publish and share the prototype with teammates.\n\n| **üí° Pro tip:** Use Spark to quickly practice with unfamiliar syntax by running and editing snippets in real time. | | --- |\n\n## Choose the best model for the task\n\nYou can get access to multiple AI models and switch between models on github.com. In my experience:\n\n| **Model** | **Best for** | | --- | --- | | [GPT-4.1](https://docs.github.com/en/copilot/reference/ai-models/supported-models) | General coding and reasoning | | [Claude Sonnet 4](https://docs.github.com/en/copilot/reference/ai-models/supported-models) | Structured writing, refactors, context-heavy tasks | | [Opus 4](https://docs.github.com/en/copilot/reference/ai-models/supported-models) | Creativity, edge cases, alternative perspectives |\n\n**To switch models:**\n\n1. In a thread, click the model name.\n2. Select a different model and reload the response.\n3. Compare answers and choose the best one for your use case.\n\n| **üí° Pro tip:** Use model comparison to reduce hallucinations and sharpen your output. In my experience, GPT-4.1 works well for general coding, Claude 4 for complex refactoring, and Opus 4 when I need creative approaches. But your mileage may vary; the real value is having options when one model‚Äôs response doesn‚Äôt quite fit. | | --- |\n\n## Navigate conversation branches\n\nGitHub Copilot groups multiple responses under each message you send, especially when you switch models. It‚Äôs not threading in the Slack sense, but it acts like it ‚Äî each group works like a separate ‚Äúbranch‚Äù of your conversation, completely isolated from the others.\n\n**Here are a few use practical use cases:**\n\n- Compare different refactoring approaches by switching models for the same question.\n- Test multiple architectural patterns by reviewing several AI-generated answers.\n- Explore alternative explanations side-by-side without mixing contexts.\n\n| **üí° Pro tip:** Think of each message as a base commit in Git. Model switching creates alternative responses grouped under that message, letting you review different approaches without starting over. | | --- |\n\n## Combine web and IDE strategically\n\nCopilot is most powerful when you use both github.com and your IDE together, leveraging each for what they do best.\n\n| **Task** | **Use github.com when you need‚Ä¶** | **Use IDE when you need‚Ä¶** | | --- | --- | --- | | Project coordination | Cross-repository visibility | Single codebase focus | | Issue management | Creating and assigning issues | Implementing solution | | Agent work | Async automation via coding agent | Real-time collaboration via agent mode | | Prototyping | Quick demos and sharing | In-depth debugging |\n\n**Example workflow:** I‚Äôll start a project discussion on github.com, prototype the solution in Spark, create issues for the team, then switch to VS Code for implementation.\n\n## Build your AI-native dev workflow\n\nHere‚Äôs what a full day might look like:\n\n1. Land at[github.com/copilot](https://github.com/copilot).\n2. Check assigned pull requests and issues.\n3. Use chat to summarize project status and recent team activity.\n4. Assign an agent to a newly created issue.\n5. Prototype a new idea in Spark.\n6. Use thread conversations and switch models mid-thread.\n7. Push final changes via pull request.\n\nThe key insight is that github.com Copilot handles the coordination and exploration work, while your IDE handles the detailed implementation. Used together, they can cover the full development workflow.\n\n## Ready to try it?\n\nCopilot on github.com turns your browser into your personal development mission control. It‚Äôs time to stop thinking of Copilot as just autocomplete and start using it as your **workflow orchestrator**.\n\n**Head to[github.com/copilot](https://github.com/copilot)** and start building now &gt;"
}
