{
  "Link": "https://devblogs.microsoft.com/devops/azure-developer-cli-from-dev-to-prod-with-one-click/",
  "ProcessedDate": "2025-08-24 16:24:32",
  "PubDate": "2025-07-21T16:17:37+00:00",
  "FeedLevelAuthor": "Azure DevOps Blog",
  "Title": "Azure Developer CLI: From Dev to Prod with One Click",
  "FeedUrl": "https://devblogs.microsoft.com/devops/feed/",
  "EnhancedContent": "This post walks through how to implement a **‚Äúbuild once, deploy everywhere‚Äù** pattern using [Azure Developer CLI (azd)](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/overview) that provisions environment-specific infrastructure and promotes applications from dev to prod with the same build artifacts. You‚Äôll learn how to use conditional Bicep deployment, environment variable injection, package preservation across environments, and automated CI/CD promotion from development to production.\n\n## Environment-Specific Infrastructure\n\nWhen deploying applications across environments, different requirements emerge:\n\n| Component | Development | Production | | --- | --- | --- | | **Networking** | Public access | VNet integration + Private endpoints | | **Storage** | Public with restrictions | Private endpoints only | | **App Service Plan** | B2 Basic | S1 Standard | | **Security** | Managed identity | Enhanced network isolation |\n\nRather than maintaining separate infrastructure templates or complex configuration files for each environment, we can use a single set of Bicep files that adapt based on an environment variable. This approach eliminates infrastructure drift while keeping deployments simple and consistent.\n\n## Set up resources based on an environment variable\n\nTo conditionally provision resources based on environment type, azd leverages an environment variable `AZURE_ENV_TYPE` to make decisions at deployment time.\n\nBehind the scenes, azd passes `AZURE_ENV_TYPE` to Bicep as the `envType` parameter:\n\n``` @description('Environment type - determines networking configuration (dev/test/prod)') @allowed(['dev', 'test', 'prod']) param envType string = 'dev'\n\n```\n\nThis parameter then drives conditional resource deployment in Bicep:\n\n**For Network Deployment:**\n\n``` // Deploy network infrastructure only for production environments module network './network.bicep' = if (envType == 'prod') { name: 'networkDeployment' params: { location: location tags: tags abbrs: abbrs resourceToken: resourceToken } }\n\n```\n\n**Similarly for Storage Configuration:**\n\n``` module storageAccount 'br/public:avm/res/storage/storage-account:0.17.2' = { name: 'storageAccount' params: { name: storageAccountName allowSharedKeyAccess: false publicNetworkAccess: envType == 'prod' ? 'Disabled' : 'Enabled' networkAcls: envType == 'prod' ? { defaultAction: 'Deny' virtualNetworkRules: [] bypass: 'AzureServices' } : { defaultAction: 'Allow' virtualNetworkRules: [] bypass: 'AzureServices' } // ... other configuration } }\n\n```\n\n**Finally for App Service Plan Sizing:**\n\n``` sku: { name: envType == 'prod' ? 'S1' : 'B2' tier: envType == 'prod' ? 'Standard' : 'Basic' }\n\n```\n\n## Enhance default CI/CD workflow\n\nazd includes a powerful command to bootstrap CI/CD pipeline:\n\n``` azd pipeline config\n\n```\n\nThis generates a basic workflow. However, for dev-to-prod promotion, enhance it with these steps:\n\n> >\n> **‚ö†Ô∏è Important Update**\n> > >\n> **Updated 7/30/2025**: The original approach used local file backups (copying zip files within the same job). However, the community pointed out that using native CI/CD artifact systems is more idiomatic. We have since updated both the [repository](https://github.com/puicchan/azd-dev-prod-appservice-storage) and the steps below to use GitHub Action Artifacts.\n> >\n\n**1. Package Once:**\n\n```\n- name: Package Application\nrun: | mkdir -p ./dist azd package app --output-path ./dist/app-package.zip echo \"‚úÖ Application packaged successfully\"\n\n```\n\n**2. Upload Application Package:**\n\n```\n- name: Upload Application Package\nuses: actions/upload-artifact@v4 with: name: app-package path: ./dist/app-package.zip retention-days: 30\n\n```\n\n**3. Deploy to Dev:**\n\n```\n- name: Deploy to Development\nrun: azd deploy app --from-package ./dist/app-package.zip --no-prompt\n\n```\n\n**4. Validation Gate:**\n\n```\n- name: Validate Application\nrun: | echo \"üîç Validating application in development environment...\"\n# TODO: Add your validation logic here:\n# Examples:\n# - Health checks and integration tests\n# - Security and compliance scanning\n# - Performance validation\nsleep 3 # Simulate validation time echo \"‚úÖ Application validation passed\"\n\n```\n\n**5. Download Application Package:**\n\n```\n- name: Download Application Package\nuses: actions/download-artifact@v4 with: name: app-package path: ./prod-deploy\n\n```\n\n**6. Set environment variables:**\n\n```\n- name: Promote to Production\nrun: |\n# Create production environment name by replacing -dev with -prod, or adding -prod if no -dev suffix\nPROD_ENV_NAME=\"${AZURE_ENV_NAME%-dev}-prod\" echo \"Production environment name: $PROD_ENV_NAME\"\n\n# Set environment variables for this step\nexport AZURE_ENV_NAME=\"$PROD_ENV_NAME\" export AZURE_ENV_TYPE=\"prod\"\n\n```\n\n**7. Deploy to Prod:**\n\n```\n# Use the artifact package - true \"build once, deploy everywhere\"\nPACKAGE_PATH=\"./prod-deploy/app-package.zip\"\n\nif [ -f \"$PACKAGE_PATH\" ]; then echo \"üöÄ Deploying to production using artifact package: $PACKAGE_PATH\" azd deploy app --from-package \"$PACKAGE_PATH\" --no-prompt echo \"‚úÖ Production deployment completed successfully\" else echo \"‚ùå Package artifact not found - falling back to regular deployment\" azd deploy --no-prompt fi\n\n```\n\n## Try It Out\n\nYou can try this approach using the complete implementation [here](https://github.com/puicchan/azd-dev-prod-appservice-storage).\n\n**Watch the walkthrough:** See this entire process in action in the video below that shows the complete setup and deployment flow.\n\n### Step-by-Step Setup\n\nFollow these steps to set up both development and production environments, then configure the CI/CD pipeline:\n\n**1. Initialize project from the template**\n\n``` azd init -t https://github.com/puicchan/azd-dev-prod-appservice-storage\n\n```\n\nThis downloads the complete implementation with all Bicep files and **enhanced** GitHub Actions workflow.\n\n**2. Set Up Development Environment**\n\n``` azd up\n\n```\n\nWhen prompted for the environment name, use `myproj-dev` (or your preferred naming pattern with `-dev` suffix).\n\n**Note**: The default `envType` is `dev` , so you don‚Äôt need to set the `AZURE_ENV_TYPE` environment variable for development. The infrastructure will automatically provision with public access and cost-optimized resources.\n\n**3. Set Up Production Environment**\n\nCreate and configure the production environment:\n\n```\n# Create new production environment\nazd env new myproj-prod\n\n# Set environment type to production\nazd env set AZURE_ENV_TYPE prod\n\n# Deploy production environment\nazd up\n\n```\n\nThis provisions production infrastructure with VNet integration, private endpoints, and enhanced security. Note that running `azd up` deploys the app to the production infrastructure as well. This is for demonstration purpose plus we are still in development stage. In a real-world scenario, you‚Äôd probably never deploy your app directly if it is already in production.\n\n**4. Switch Back to Development Environment**\n\n``` azd env select myproj-dev\n\n```\n\nYou‚Äôre now ready to develop and test in the development environment.\n\n**5. Make Code Changes**\n\nEdit your application code (e.g., modify `app/templates/index.html` or `app.py` ) to test the promotion workflow.\n\n**6. Configure CI/CD Pipeline**\n\n``` azd pipeline config\n\n```\n\nThe GitHub Actions workflow is enhanced with dev-to-prod promotion logic. Specifically, the pipeline will:\n\n- Deploy and validate in development (`myproj-dev`)\n- Automatically promote to production (`myproj-prod`) using the same package\n- Handle environment naming conversion automatically\n\nOnce configured, every push to the main branch will trigger the automated dev-to-prod promotion pipeline!\n\n## Conclusion\n\nIn summary, this pattern combines conditional Bicep deployment, package preservation, and smart environment naming to create reliable dev-to-prod promotions with the same build artifacts.\n\nQuestions about implementation or want to share your own approach? Join the discussion [here](https://github.com/Azure/azure-dev/discussions/5447).",
  "Tags": [
    "Azure & Cloud",
    "Azure Developer CLI (azd)",
    "CI/CD",
    "DevOps"
  ],
  "Description": "This post walks through how to implement a ‚Äúbuild once, deploy everywhere‚Äù pattern using Azure Developer CLI (azd) that provisions environment-specific infrastructure and promotes applications from dev to prod with the same build artifacts. You‚Äôll learn how to use conditional Bicep deployment, environment variable injection, package preservation across environments, and automated CI/CD promotion from development [‚Ä¶]\n\nThe post [Azure Developer CLI: From Dev to Prod with One Click](https://devblogs.microsoft.com/devops/azure-developer-cli-from-dev-to-prod-with-one-click/) appeared first on [Azure DevOps Blog](https://devblogs.microsoft.com/devops).",
  "OutputDir": "_news",
  "FeedName": "Microsoft DevOps Blog",
  "Author": "PuiChee (PC) Chan, Kristen Womack"
}
