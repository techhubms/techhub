{
  "FeedLevelAuthor": "Visual Studio Blog",
  "PubDate": "2025-09-17T17:30:37+00:00",
  "Author": "Allie Barry, Praveen Sethuraman",
  "FeedUrl": "https://devblogs.microsoft.com/visualstudio/feed/",
  "EnhancedContent": "We’re excited to announce that Visual Studio now supports MCP prompts, resources, and sampling (with even more coming soon!) to enhance your Copilot experience by bringing in more context from your engineering stack. These powerful new features unlock deeper integrations with your favorite tools and services, making your development workflow more intelligent and context aware.\n\n[Try MCP in Visual Studio](https://visualstudio.microsoft.com/)\n\nLet’s dive into each of these features and discuss some examples with specific MCP servers that can truly level up your AI-coding experience.\n\n## MCP Resources and Resource Templates: Access External Data Seamlessly\n\nModel Context Protocol also provides a standardized way for servers to expose resources to clients. Resources allow servers to share data that provides context to language models, such as files, database schemas, or application-specific information. Each resource is uniquely identified by a URI, allowing you to get even more out of your MCP servers and pull in context directly in the IDE.\n\n#### *Example: Azure DevOps Work Items*\n\nWhen working with Azure DevOps, you can now reference work items, user stories, and project data directly in your chat conversations. The Azure DevOps MCP server exposes resources like work item templates, sprint information, and team capacity data that Copilot can use to provide more contextual suggestions about your project planning and development tasks.\n\n[![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_Azure_DevOps_MCP_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22azure-devops%22%2C%22gallery%22%3Atrue%2C%22inputs%22%3A%5B%7B%22id%22%3A%22ado_org%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22Azure%20DevOps%20organization%20name%20%28e.g.%20%27contoso%27%29%22%2C%22password%22%3Afalse%7D%5D%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40azure-devops%2Fmcp%22%2C%22%24%7Binput%3Aado_org%7D%22%5D%7D)\n\n#### Using MCP Resources\n\nTo use any MCP resources available to you, reference them in Copilot chat the same way you would reference any other piece of context – with a hashtag (#) followed by the resource URI.\n\n#### Resource Templates for Dynamic Content\n\nJust like with prompts, MCP resources can have arguments that you can fill in to customize the resource for your specific needs. These are called resource templates. To configure them:\n\n1. Use the **+ Reference** button in chat\n2. Select the **MCP resource** option from the menu\n3. Choose your resource template and fill in any required arguments\n4. Click **Add Resource** to make this MCP resource referenceable in chat\n\n#### *Example: Figma Design Context*\n\nFor teams working closely with design systems, the Figma MCP server allows you to reference design components, style guides, and design specifications directly in your development conversations. This bridges the gap between design and development by making design context readily available to Copilot.\n\n[![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_Figma_MCP_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22figma%22%2C%22gallery%22%3Atrue%2C%22url%22%3A%22http%3A%2F%2F127.0.0.1%3A3845%2Fmcp%22%7D)\n\n## MCP Prompts and Prompt Templates: Get Better Responses with Specialized Instructions\n\nMCP Prompts allow servers to provide structured messages and instructions for interacting with language models that are catered to the use case and content of the server in question, ensuring that you will get the best responses for a certain task.\n\n#### How to Use MCP Prompts\n\nVisual Studio now allows you to discover available prompts, retrieve their contents, and provide arguments to customize them. To reference any prompts that may come from an MCP server:\n\n1. Click the **+ Reference** button in chat\n2. Select the **Prompts** option\n3. Choose **MCP prompts** from the flyout\n\nYou’ll see a pop-up where you can select the prompt you’d like to use, then click **Insert Prompt** to include the text from this prompt in chat.\n\n#### Prompt Templates with Custom Arguments\n\nSome MCP prompts will have arguments that you can fill in to customize the prompt for your specific needs – these are known as prompt templates. If you select a prompt in the modal dialog that contains arguments, you’ll be able to specify those values before inserting the prompt into chat.\n\n#### *Example: GitHub Integration*\n\nImagine you’re working on code reviews and want to leverage GitHub’s specialized prompts. With the GitHub MCP server, you can access prompts specifically designed for analyzing pull requests, generating commit messages, or reviewing code changes. These prompts understand GitHub’s context and can provide more targeted assistance than generic prompts.\n\n[![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_GitHub_MCP_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22github%22%2C%22gallery%22%3Atrue%2C%22url%22%3A%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D)\n\n## MCP Sampling: Enabling Advanced Agentic Behaviors\n\nSampling in MCP allows servers to implement agentic behaviors by enabling LLM calls to occur nested inside other MCP server features. This powerful feature allows an MCP server to make requests of an LLM, rather than the typical workflow of an LLM requesting content from an MCP server. Visual Studio now supports this advanced capability, allowing your MCP servers to perform more complex, multi-step tasks on your behalf.\n\n#### How Sampling works\n\nThere’s nothing to configure to take advantage of sampling – as long as your MCP server supports it, Visual Studio will too. When Copilot determines that a request would benefit from a sampling call, you’ll see a dialog containing all details of the request, asking you to confirm the sampling call before anything happens behind the scenes. This ensures you maintain full control over any automated actions.\n\n#### *Example: Playwright testing scenarios*\n\nThe Playwright MCP server can use sampling to automatically generate comprehensive test scenarios based on your application’s current state. When you ask for help with testing, it might sample your application’s DOM structure, analyze user flows, and then generate targeted test scripts that cover critical user paths – all through intelligent sampling calls that you approve.\n\n[![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_Playwright_MCP_server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22playwright%22%2C%22gallery%22%3Atrue%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22%40playwright%2Fmcp%40latest%22%5D%7D)\n\n## Getting Started\n\nThese new MCP capabilities are available now in Visual Studio. To get the most out of these features, we recommend exploring the MCP servers that align with your development workflow. Each server brings unique prompts, resources, and potentially sampling capabilities that can significantly enhance your Copilot experience.\n\nTry out some other popular MCP servers in Visual Studio with one-click:\n\n- [![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_MarkItDown_MCP_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22markitdown%22%2C%22gallery%22%3Atrue%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22markitdown-mcp%22%5D%7D) – Convert various file formats (PDF, Word, Excel, images, audio) to Markdown.\n- [![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_DuckDB_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22duckdb%22%2C%22gallery%22%3Atrue%2C%22inputs%22%3A%5B%7B%22id%22%3A%22duckdb_db_path%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22Path%20to%20the%20DuckDB%20database%20file%20%28e.g.%2C%20%2Fpath%2Fto%2Fdatabase.duckdb%29%22%2C%22password%22%3Afalse%7D%5D%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22mcp-server-duckdb%22%2C%22--db-path%22%2C%22%24%7Binput%3Aduckdb_db_path%7D%22%5D%7D) – Query and analyze data in DuckDB databases locally and in the cloud.\n- [![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_MongoDB_MCP_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22mongodb%22%2C%22gallery%22%3Atrue%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22mongodb-mcp-server%22%5D%7D) – Database operations and management. Execute queries, manage collections, aggregation pipelines, and document operations.\n- [![Install in VS](https://img.shields.io/badge/Visual_Studio-Install_HuggingFace_MCP_Server-C16FDE?style=flat-square&amp;logo=visualstudio&amp;logoColor=white)](vsweb+mcp:/install?%7B%22name%22%3A%22huggingface%22%2C%22gallery%22%3Atrue%2C%22url%22%3A%22https%3A%2F%2Fhf.co%2Fmcp%22%7D) – Access models, datasets, and Spaces on the Hugging Face Hub.\n\nThe seamless integration of external tools and services through MCP represents a major step forward in creating a truly connected development environment. By bringing context from your entire engineering stack directly into your IDE, these features help Copilot provide more accurate, relevant, and actionable assistance for your daily development tasks.\n\n## Give us your feedback!\n\n**We’re excited to continue evolving the MCP experience in VS, and your input plays a big role—please give us your feedback** [**here**](https://developercommunity.visualstudio.com/home)**, and let us know what you’d like to see next!**\n\n[Try MCP in Visual Studio](https://visualstudio.microsoft.com/)",
  "Description": "We’re excited to announce that Visual Studio now supports MCP prompts, resources, and sampling (with even more coming soon!) to enhance your Copilot experience by bringing in more context from your engineering stack. These powerful new features unlock deeper integrations with your favorite tools and services, making your development workflow more intelligent and context aware. […]\n\nThe post [Getting the most out of MCP in Visual Studio with Prompts, Resources, and Sampling](https://devblogs.microsoft.com/visualstudio/mcp-prompts-resources-sampling/) appeared first on [Visual Studio Blog](https://devblogs.microsoft.com/visualstudio).",
  "Link": "https://devblogs.microsoft.com/visualstudio/mcp-prompts-resources-sampling/",
  "OutputDir": "_news",
  "FeedName": "Microsoft VisualStudio Blog",
  "ProcessedDate": "2025-09-17 18:15:47",
  "Tags": [
    "Artificial Intelligence",
    "Chat",
    "Copilot",
    "developer",
    "Extensions",
    "GitHub",
    "GitHub Copilot",
    "LLM",
    "MCP",
    "Model Context Protocol",
    "prompts",
    "Resources",
    "sampling",
    "server",
    "Visual Studio"
  ],
  "Title": "Getting the most out of MCP in Visual Studio with Prompts, Resources, and Sampling"
}
