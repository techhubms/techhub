{
  "Title": "Modernizing Visual Studio Extension Compatibility: Effortless Migration for Extension Developers and Users",
  "FeedLevelAuthor": "Visual Studio Blog",
  "OutputDir": "_news",
  "EnhancedContent": "We have great news for extension users and developers: Visual Studio 2026 is introducing an extension compatibility model designed specifically to make your life easier. Our top priority is to ensure that your extensions continue to work seamlessly across Visual Studio releases – with no extra effort required from you. For users: **extensions that work in Visual Studio 2022 will just automatically work in Visual Studio 2026. And when upgrading to Visual Studio 2026 the Installer will install most extensions you’re using in Visual Studio 2022.**\n\n**For extension developers**, gone are the days of needing to update version ranges or addressing broad sweeping compatibility issues with every major update. **With this new model, your existing extension just works in Visual Studio 2026 – no need to publish updates!** By raising the compatibility bar and stabilizing the extension environment, we are removing the friction from your update process and giving you the confidence that your users can rely on your extension, release after release. And for those of you who rely on extensions to get your work done, you can rest assured that your favorite extensions will continue to function smoothly with Visual Studio 2026.\n\nThe rest of this post will offer in-depth guidance for extension developers.\n\n## Principles of a modern extension compatibility model\n\nIf you are an experienced developer in the Visual Studio ecosystem, you’re probably well-acquainted with vsixmanifest files and managing the version ranges in installation targets. Traditionally, each major release of Visual Studio meant updating the upper bound of your supported version range and checking for potential compatibility issues. However, with Visual Studio 2026, this routine has changed – extensions built for Visual Studio 2022 have transferred seamlessly to Visual Studio 2026 without any modifications required.\n\nThe new extension compatibility model for Visual Studio is guided by three core principles:\n\n1. **Extensions specify the API versions they are built against.** Visual Studio evaluates which API versions are supported at load time and only loads extensions compatible with those versions. This represents a shift from the previous approach, where extensions indicated the Visual Studio versions they supported. We understand that there are many parts to what make up the full API set for extending Visual Studio, and we are working on providing a clearer picture going forward.\n2. **The Visual Studio platform aims to minimize or eliminate breaking changes to stable APIs.** We understand that Visual Studio 2022 was a disruptive transition for many extension authors with our shift from 32 to 64 bit. Going forward, we commit to a smoother and more streamlined migration process.\n3. **Additive changes will undergo an iterative process prior to being released as stable.** As new features are introduced, we will add new APIs to extend these features. However, new APIs require a period of iteration during which modifications and potential breaks may occur. Preview APIs will be made available for evaluation, but extenders should refrain from using them in production extensions due to the possibility of breaking changes.\n\n## Impact to Visual Studio 2026 extensions\n\nWhat does this mean for Visual Studio 2026? Simply put, if you have a Visual Studio 2022 extension, you don’t need to modify it for compatibility with Visual Studio 2026. This is because Visual Studio 2026 supports API version 17.x, and we determine API compatibility using only the lower bound of the installation target version range – ignoring the upper bound from now on. The following example demonstrates an extension that works with Visual Studio 2022, and no updates are necessary if this describes your situation.\n\n``` <InstallationTarget Id=\"Microsoft.VisualStudio.Community\" Version=\"[17.0, 18.0)\"> ```\n\nIf you use Visual Studio 2026 to create new extensions, you’ll notice that the lower bound will be automatically set to 17.0, with the upper bound left empty, as demonstrated in the example below.\n\n``` <InstallationTarget Id=\"Microsoft.VisualStudio.Community\" Version=\"[17.0,)\"> ```\n\nThis means that any new extensions created will now automatically target both Visual Studio 2022 and Visual Studio 2026!\n\nDespite the easy migration process, we still recommend that extenders test their extensions on Visual Studio 2026 to catch any compatibility bugs. If you find an issue is likely caused by the platform, please file a feedback ticket using [Report a Problem](https://learn.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=visualstudio).\n\nThe smooth migration process for getting extensions in Visual Studio only applies to VSIX-based extensions. Developers who maintain MSI-based extensions are responsible for managing how users install them, and these MSI installers would need to adapt to this updated approach. Our general recommendation is that extension authors do not create MSI installers and just use VSIX to distribute their extensions.\n\n## What’s next?\n\nAre you wondering about new APIs that will support extending new features in Visual Studio 2026? These are part of the ongoing additive changes, and we’re not ready to release them yet because we are still refining their design. Once they are ready, we’ll make them available as preview packages first, allowing interested developers to test them and share feedback. Keep in mind that extensions built with these preview APIs cannot be uploaded to the Marketplace, since breaking changes are likely to impact extension users.\n\nAs Visual Studio keeps evolving, we are updating every part of extensibility to meet the needs of both extension developers and users. This includes new APIs in VisualStudio.Extensibility, improvements in extension build tooling, Marketplace enhancements, and easier extension acquisition. We’ll share more updates as development progresses.\n\n## We want to hear from you!\n\nThank you for sharing your issues and suggestions with us, and we hope you’ll keep providing feedback about what you like and what we can improve in Visual Studio. We understand this is a shift in how to think about extension compatibility in Visual Studio, so we are providing an opportunity for interested extension developers to engage with us directly through ecosystem partner calls. If you are interested, please fill out this [survey](https://aka.ms/vs-extension-authors) to get on the list.\n\nFor those new and experienced to extending Visual Studio, we invite you to visit our [documentation](https://aka.ms/VisualStudio.Extensibility) to learn more, or watch the [video series](https://aka.ms/vsextensibilityseries) on Visual Studio Toolbox where Visual Studio engineers take you through how to build extensions using our [samples](https://aka.ms/VisualStudio.Extensibility/Samples) on GitHub. Feel free to share feedback with us via [Developer Community](https://developercommunity.visualstudio.com/home%22%20/t%20%22_blank): report any bugs or issues via [report a problem](https://learn.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=visualstudio) and [share your suggestions](https://developercommunity.microsoft.com/VisualStudio/suggest) for new features or improvements to existing ones. If you want a closer engagement with other partners in the ecosystem, please visit our GitHub repo to report [issues](https://github.com/microsoft/VSExtensibility/issues) as well.\n\nStay connected with the Visual Studio team by following us on [YouTube](https://www.youtube.com/@visualstudio), [Twitter](https://twitter.com/VisualStudio), [LinkedIn](https://www.linkedin.com/showcase/microsoft-visual-studio/), [Twitch](https://www.twitch.tv/visualstudio) and on [Microsoft Learn](https://learn.microsoft.com/en-us/visualstudio/?view=vs-2022).",
  "FeedUrl": "https://devblogs.microsoft.com/visualstudio/feed/",
  "PubDate": "2025-10-21T14:00:36+00:00",
  "Tags": [
    "Extensibility",
    "Extensions",
    "Visual Studio",
    "Visual Studio 2026"
  ],
  "ProcessedDate": "2025-10-21 14:03:20",
  "Link": "https://devblogs.microsoft.com/visualstudio/modernizing-visual-studio-extension-compatibility-effortless-migration-for-extension-developers-and-users/",
  "Author": "Tina Schrepfer (LI)",
  "Description": "We have great news for extension users and developers: Visual Studio 2026 is introducing an extension compatibility model designed specifically to make your life easier. Our top priority is to ensure that your extensions continue to work seamlessly across Visual Studio releases – with no extra effort required from you. For users: extensions that work […]\n\nThe post [Modernizing Visual Studio Extension Compatibility: Effortless Migration for Extension Developers and Users](https://devblogs.microsoft.com/visualstudio/modernizing-visual-studio-extension-compatibility-effortless-migration-for-extension-developers-and-users/) appeared first on [Visual Studio Blog](https://devblogs.microsoft.com/visualstudio).",
  "FeedName": "Microsoft VisualStudio Blog"
}
