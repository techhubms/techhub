{
  "Link": "https://devblogs.microsoft.com/azure-sdk/replacing-jackson-databind-with-azure-json-and-azure-xml/",
  "ProcessedDate": "2025-08-24 16:16:36",
  "PubDate": "2025-03-11T20:38:45+00:00",
  "FeedLevelAuthor": "Azure SDK Blog",
  "Title": "Replacing jackson-databind with azure-json and azure-xml",
  "FeedUrl": "https://devblogs.microsoft.com/azure-sdk/feed/",
  "EnhancedContent": "[`jackson-databind`](https://github.com/FasterXML/jackson-databind) (Jackson) is performant, reliable, and universally known in the Java ecosystem. Unfortunately, our dependency on it results in pain points when consuming the Azure SDK client libraries for Java. Over the last few years, the Azure SDK for Java team worked to limit our reliance on `jackson-databind` .\n\n## Why was this change made?\n\nJackson is widely used in the Java ecosystem, but the versions being used varies library to library. This arrangement leads to dependency conflicts when multiple libraries bring in differing versions of Jackson, which can cause runtime issues. The Azure SDK for Java aims to minimize these conflicts and improve compatibility across different environments. Additionally, Jackson’s reliance on reflection can cause issues with the Java module system and security policies.\n\n## Introducing azure-json and azure-xml\n\nTo reduce and replace Jackson usage, the Azure SDK for Java now offers two new serialization libraries: [`azure-json`](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/serialization/azure-json) and [`azure-xml`](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/serialization/azure-xml). These libraries support JSON and XML serialization respectively, providing streaming readers and writers, and interfaces for models to implement serialization behaviors. Neither library includes runtime dependencies, reducing the chances of dependency conflicts.\n\n`azure-json` includes `JsonReader` , `JsonWriter` , and `JsonSerializable` , inspired by the [JSON specification](https://www.json.org/) and streaming APIs from `jackson-core` and `gson` (Gson). It uses the `JsonProvider` service provider interface (SPI) for creating instances, with a default implementation using shaded `jackson-core` . `azure-json` also includes a model-based JSON structure in `com.azure.json.models` .\n\n`azure-xml` includes `XmlReader` , `XmlWriter` , and `XmlSerializable` , inspired by the [javax.xml.stream](https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/package-summary.html) APIs. These classes wrap Java’s `XMLStreamReader` and `XMLStreamWriter` interfaces. For performance reasons, `azure-xml` uses shaded `aalto-xml` if the built-in implementations are resolved.\n\nUsing `azure-json` and `azure-xml` reduces dependency conflicts and the need for reflection, improving compatibility with the Java module system.\n\n## Changes to models in Azure SDK for Java client libraries\n\nPreviously, client library models used `jackson-annotations` for serialization. Now, with `azure-json` and `azure-xml` , these annotations are replaced with `JsonSerializable` and `XmlSerializable` implementations. This change reduces the need for reflection and simplifies support for both JSON and XML serialization.\n\n## Integration points with Jackson and Gson\n\nTo integrate with existing applications, we provide support for serializing and deserializing `JsonSerializable` types using Jackson and Gson. We also offer full implementations of `JsonReader` and `JsonWriter` in these libraries.\n\nIn `azure-core-serializer-json-jackson` , use `JacksonJsonProvider.getJsonSerializableDatabindModule()` to get a Jackson `Module`\n\nthat handles `JsonSerializable` types:\n\n```java ObjectMapper objectMapper = JsonMapper.builder() .addModule(JacksonJsonProvider.getJsonSerializableDatabindModule()) .build(); ```\n\nIn `azure-core-serializer-json-gson` , use `GsonJsonProvider.getJsonSerializableTypeAdapterFactory()` to get a Gson `TypeAdapter`\n\nthat handles `JsonSerializable` types:\n\n```java Gson gson = new GsonBuilder() .registerTypeAdapterFactory(GsonJsonProvider.getJsonSerializableTypeAdapterFactory()) .create(); ```\n\n## What happened to Jackson dependencies?\n\nThe Azure SDK for Java client libraries continue to depend on `jackson-annotations` , `jackson-core` , and `jackson-databind` in `azure-core` for functionality that can’t be achieved by the `azure-json` and `azure-xml` streaming APIs. `jackson-dataformat-xml`\n\nwas removed as a dependency. Most non-`azure-core*` libraries eliminated direct dependencies on Jackson, relying instead on `azure-json` and `azure-xml` .\n\nThe Azure SDK for Java team continues to explore the possibility of completely removing Jackson dependencies in `azure-core` .\n\nIf you have questions or concerns, [contact us on GitHub](https://github.com/Azure/azure-sdk-for-java/issues/new?template=bug_report.md).",
  "Tags": [
    "Azure SDK",
    "azure-sdk",
    "core",
    "java",
    "Serialization"
  ],
  "Description": "This blog post explains how azure-json and azure-xml replaced jackson-databind in the Azure SDK for Java.\n\nThe post [Replacing jackson-databind with azure-json and azure-xml](https://devblogs.microsoft.com/azure-sdk/replacing-jackson-databind-with-azure-json-and-azure-xml/) appeared first on [Azure SDK Blog](https://devblogs.microsoft.com/azure-sdk).",
  "OutputDir": "_news",
  "FeedName": "Microsoft Azure SDK Blog",
  "Author": "Alan Zimmer"
}
