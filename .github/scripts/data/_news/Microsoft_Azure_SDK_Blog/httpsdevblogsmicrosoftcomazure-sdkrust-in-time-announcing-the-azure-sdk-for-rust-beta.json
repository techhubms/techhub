{
  "Link": "https://devblogs.microsoft.com/azure-sdk/rust-in-time-announcing-the-azure-sdk-for-rust-beta/",
  "ProcessedDate": "2025-08-24 16:16:36",
  "PubDate": "2025-02-19T18:19:05+00:00",
  "FeedLevelAuthor": "Azure SDK Blog",
  "Title": "Rust in time! Announcing the Azure SDK for Rust Beta. ðŸŽ‰",
  "FeedUrl": "https://devblogs.microsoft.com/azure-sdk/feed/",
  "EnhancedContent": "Weâ€™re thrilled to announce the first beta releases for the Official Azure SDK for Rust! ðŸŽ‰ These releases include libraries for Identity, Key Vault secrets & keys, Event Hubs, and Cosmos DB. These libraries are designed to provide a seamless and idiomatic experience for Rust developers working with Azure services.\n\n## Why Rust? ðŸ¦€\n\nWe decided to create an official Azure SDK for Rust due to the growing interest in the Rust programming language, both externally and within Microsoft. Rust is known for its performance, reliability, and memory safety, making it an excellent choice for systems programming and applications that require high performance and low-level control.\n\nRustâ€™s strong type system and ownership model help prevent common programming errors such as null pointer dereferencing and buffer overflows, leading to more secure and stable code. Additionally, Rustâ€™s modern syntax and tooling make it a pleasure to work with, attracting a vibrant and enthusiastic developer community.\n\nBy providing an official Azure SDK for Rust, we aim to empower Rust developers to build robust and efficient applications with Azure, using the full potential of the Rust language. Imagine building high-performance applications with the confidence that your code is secure and reliable. Thatâ€™s the power of Rust!\n\n## Beta libraries ðŸ“š\n\nThe following libraries are included in this beta release:\n\n| Service | Crates ðŸ“¦ | Source Code | | --- | --- | --- | | Identity | [`azure_identity`](https://crates.io/crates/azure_identity) | [GitHub](https://github.com/Azure/azure-sdk-for-rust/tree/main/sdk/identity/azure_identity) | | Key Vault secrets | [`azure_security_keyvault_secrets`](https://crates.io/crates/azure_security_keyvault_secrets) | [GitHub](https://github.com/Azure/azure-sdk-for-rust/tree/main/sdk/keyvault/azure_security_keyvault_secrets) | | Key Vault keys | [`azure_security_keyvault_keys`](https://crates.io/crates/azure_security_keyvault_keys) | [GitHub](https://github.com/Azure/azure-sdk-for-rust/tree/main/sdk/keyvault/azure_security_keyvault_keys) | | Event Hubs | [`azure_messaging_eventhubs`](https://crates.io/crates/azure_messaging_eventhubs) | [GitHub](https://github.com/Azure/azure-sdk-for-rust/tree/main/sdk/eventhubs/azure_messaging_eventhubs) | | Cosmos DB | [`azure_data_cosmos`](https://crates.io/crates/azure_data_cosmos) | [GitHub](https://github.com/Azure/azure-sdk-for-rust/tree/main/sdk/cosmos/azure_data_cosmos) |\n\n## Get started ðŸš€\n\nTo get started with the Azure SDK for Rust, follow these steps:\n\n### 1. Add dependencies\n\nAdd the desired Azure SDK crates to your project using the `cargo add` command. For example, to use the Identity and Key Vault Secrets libraries, run the following command:\n\n```bash cargo add azure_identity azure_security_keyvault_secrets tokio --features tokio/full ```\n\n### 2. Import the libraries\n\nIn your Rust code, import the necessary modules from the Azure SDK crates. For example:\n\n```rust use azure_identity::DefaultAzureCredential; use azure_security_keyvault_secrets::{ models::SecretSetParameters, ResourceExt as _, SecretClient, }; ```\n\n### 3. Create a new secret client\n\nFirst, create a new secret client using the `DefaultAzureCredential` :\n\n```rust #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> { // Create a credential using DefaultAzureCredential let credential = DefaultAzureCredential::new()?; // Initialize the SecretClient with the Key Vault URL and credential let client = SecretClient::new( \"https://your-key-vault-name.vault.azure.net/\", credential.clone(), None, )?;\n\n// Additional code will go here...\n\nOk(()) } ```\n\n### 4. Create a new secret\n\nNext, create a new secret using the secret client:\n\n```rust // Previous code above... // Set parameters for the new secret let secret_set_parameters = SecretSetParameters { value: Some(\"secret-value\".into()), ..Default::default() };\n\n// Create the new secret in Key Vault let secret = client .set_secret(\"secret-name\", secret_set_parameters.try_into()?, None) .await? .into_body() .await?; ```\n\n### 5. Retrieve a secret\n\nFinally, retrieve a secret using the secret client:\n\n```rust // Previous code above... // Get the version of the created secret let version = secret.resource_id()?.version.unwrap_or_default();\n\n// Retrieve the secret from Key Vault let secret = client .get_secret(\"secret-name\", version.as_ref(), None) .await? .into_body() .await?; // Print the value of the retrieved secret println!(\"{:?}\", secret.value); ```\n\nFor more detailed documentation, code samples, and installation instructions, visit our [GitHub repository](https://github.com/Azure/azure-sdk-for-rust).\n\n## Future plans ðŸ”®\n\nOur team is committed to expanding the Azure SDK for Rust by adding more Azure service libraries and refining these announced libraries. We aim to stabilize these libraries and provide a robust, reliable, and user-friendly experience for Rust developers.\n\nWe also plan on a few changes that should simplify usage without sacrificing versatility:\n\n- Buffer the entire response in the pipeline to make sure all built-in and developer-specified policies apply, like the retry policy on some failures.\n- Deserialize arrays as empty `Vec<T>`\nin most cases to simplify code.\n\n## Feedback ðŸ’¬\n\nWe value your feedback and would love to hear about your experiences with the Azure SDK for Rust. Head over to our [GitHub issues page](https://github.com/Azure/azure-sdk-for-rust/issues) to share your thoughts, report any issues, and contribute to the project. Your input will help us improve and shape the future of the SDK.\n\nDonâ€™t miss the chance to make a difference and join the conversation!\n\nWe canâ€™t wait to hear from you and see what amazing things you build with Rust and Azure! ðŸš€",
  "Tags": [
    "Azure SDK",
    "azure-sdk",
    "Cosmos DB",
    "Event Hubs",
    "identity",
    "Key Vault",
    "Rust"
  ],
  "Description": "Announcing the first beta release of the Azure SDK for Rust. This release includes libraries for Identity, Key Vault secrets & keys, Event Hubs, and Cosmos DB.\n\nThe post [Rust in time! Announcing the Azure SDK for Rust Beta. ðŸŽ‰](https://devblogs.microsoft.com/azure-sdk/rust-in-time-announcing-the-azure-sdk-for-rust-beta/) appeared first on [Azure SDK Blog](https://devblogs.microsoft.com/azure-sdk).",
  "OutputDir": "_news",
  "FeedName": "Microsoft Azure SDK Blog",
  "Author": "Ronnie Geraghty"
}
