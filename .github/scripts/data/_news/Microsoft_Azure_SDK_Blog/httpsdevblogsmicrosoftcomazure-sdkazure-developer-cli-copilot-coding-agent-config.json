{
  "EnhancedContent": "# This new `azd`\nextension makes it easy to use the GitHub Copilot coding agent with Azure\n\nWant Copilot to help you build apps in the cloud? This tool does all the boring setup work for you. Instead of spending hours figuring out permissions and security, you can get Copilot coding agent connected to your cloud resources in minutes. Whether you’re just learning or building something big, this makes it simple.\n\nOne of the most critical aspects of working with cloud infrastructure is ensuring secure access to resources. In today’s era of agent-driven coding, it’s essential that tools like the [GitHub Copilot coding agent](https://docs.github.com/copilot/concepts/agents/coding-agent/about-coding-agent) are safely connected to your cloud environment. The GitHub Copilot coding agent can now achieve this through the [Azure MCP server](http://aka.ms/azmcp/announcement/ga), and the Azure Developer CLI (azd) `azure.coding-agent` extension makes it straightforward to configure secure MCP access for the agent to Azure resources.\n\nIn this post, we’re going to show you how to use the [new `azd` extension (`azure.coding-agent` )](https://learn.microsoft.com/azure/developer/azure-developer-cli/extensions/copilot-coding-agent-extension) to simplify the task of configuring the MCP secure access for the GitHub Copilot coding agents to Azure resources.\n\n## What is the `azd`\ncoding agent extension?\n\nThe `azure.coding-agent` extension helps developers set up their GitHub repositories so the GitHub Copilot coding agent can securely access Azure resources using the Azure MCP Server. It simplifies the configuration of repository settings and automates the creation of the necessary managed identity and federated credentials on Azure.\n\n## Using the coding agent\n\nImagine a development team building a web application that uses Azure services such as App Service, Key Vault, and Cosmos DB to host and manage their application. The team wants to assign issues to the GitHub Copilot coding agent to provide AI-assisted coding that’s aware of their Azure resources so it can suggest and even update infrastructure-related code. But manual setup is tedious: creating managed identities, assigning roles, and updating GitHub repository settings. `azd` ‘s `azure.coding-agent` extension automates this setup, letting developers focus on building their applications while ensuring secure access to Azure resources.\n\n### Key features\n\n- **Automated Managed Identity Creation**: creates user-assigned managed identities with configurable RBAC roles (Role-Based Access Control, default: Reader role).\n- **Federated Credential Configuration**: sets up OpenID Connect federated credentials for secure, passwordless authentication from GitHub.\n- **GitHub Environment Setup**: automatically configures the GitHub Copilot coding agent environment with the necessary Azure credentials.\n- **MCP Server Integration**: provides ready-to-use Model Context Protocol (MCP) configuration for Azure resource access.\n- **Workflow Automation**: generates `copilot-setup-steps.yml`\nworkflow file and creates pull requests with setup instructions.\n\n## Getting started\n\n### Prerequisites\n\nBefore using the extension, ensure you have:\n\n- Azure Developer CLI (`azd`\n) [installed](https://learn.microsoft.com/azure/developer/azure-developer-cli/install-azd) and authenticated (`azd auth login` )\n- An Azure subscription with permissions to create resource groups and managed identities\n- Sign up for a free account at [https://azure.com/free](https://azure.com/free) if you don’t have one\n- A local clone of a GitHub repository where you have permissions to:\n- Update the `copilot`\nGitHub environment\n- Update Copilot coding agent settings\n- Push changes to the `.github/workflows`\nfolder\n- GitHub CLI (`gh`\n) [installed](https://cli.github.com/) and authenticated (`gh auth login` )\n\n### Installation\n\nInstall the `azure.coding-agent` [extension for `azd`](https://learn.microsoft.com/azure/developer/azure-developer-cli/extensions/overview):\n\n```bash azd extension install azure.coding-agent ```\n\nOr upgrade:\n\n```bash azd extension upgrade azure.coding-agent ```\n\n### Configuring your repository\n\nNavigate to your local GitHub repository clone and run the configuration command:\n\n```bash cd <your-github-repository> azd coding-agent config ```\n\nThe extension guides you through an interactive setup process:\n\n1. **Azure Authentication**: verify your Azure login and select a subscription\n2. **Repository Selection**: choose the GitHub repository remote for the coding agent\n3. **Managed Identity**: create a new user-assigned managed identity or select an existing one\n4. **Resource Group**: create a new resource group or use an existing one\n5. **Role Assignment**: configure RBAC roles (defaults to Reader, fully configurable)\n6. **Git Operations**: create a branch and push the necessary workflow files\n7. **MCP Server**: copy MCP JSON output to GitHub Copilot coding agent settings\n\n## How it works: technical deep dive\n\nThe extension automates a multi-step process that would otherwise require manual configuration across Azure and GitHub:\n\n### 1. Azure Managed Identity setup\n\nThe extension creates or selects a user-assigned managed identity in your Azure subscription:\n\n```bash\n# Starts interactive configuration\nazd coding-agent config ```\n\nAlternatively, you can skip the interactive mode and pass all of the arguements in one command:\n\n```bash\n# Default managed identity name: mi-copilot-coding-agent\n# Configurable via --managed-identity-name flag\nazd coding-agent config --managed-identity-name \"my-custom-identity\" ```\n\nNew managed identities are configured with:\n\n- **Resource Group Scope**: the identity is created in a resource group you specify or create\n- **Role Assignments**: configurable RBAC roles that default to the Reader role on the resource group or you can use the `--roles`\nflag to assign [additional roles](https://learn.microsoft.com/azure/role-based-access-control/built-in-roles) like Contributor, Storage Blob Data Reader, etc.\n\n### 2. Federated credential configuration\n\nThe extension automatically sets up OpenID Connect federated credentials that allow GitHub Actions to authenticate as the managed identity without storing secrets. This configuration is created and stored in the Azure portal under your managed identity’s “Federated credentials” section.\n\nNavigate to Azure portal → Resource Groups → [Your Resource Group] → [Your Managed Identity] → Federated credentials. You see the federated credential entry with the name pattern shown, automatically created by the `azd` extension.\n\n```json { \"name\": \"repo-owner-repo-name-copilot-env\", \"subject\": \"repo:owner/repository:environment:copilot\", \"issuer\": \"https://token.actions.githubusercontent.com\", \"audience\": \"api://AzureADTokenExchange\" } ```\n\n### 3. GitHub environment variables\n\nThe extension configures the `copilot` GitHub environment with the necessary Azure credentials:\n\n- `AZURE_CLIENT_ID`\n: the managed identity’s client ID\n- `AZURE_TENANT_ID`\n: your Azure tenant ID\n- `AZURE_SUBSCRIPTION_ID`\n: your Azure subscription ID\n\n### 4. Workflow file generation\n\nThe extension creates `.github/workflows/copilot-setup-steps.yml` that sets up the coding agent environment:\n\n```yaml name: Setup Copilot Environment on: workflow_dispatch:\n\njobs: setup: runs-on: ubuntu-latest environment: copilot steps:\n- name: Azure Login\nuses: azure/login@v1 with: client-id: ${{ vars.AZURE_CLIENT_ID }} tenant-id: ${{ vars.AZURE_TENANT_ID }} subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}\n\n- name: Verify Azure Access\nrun: az account show ```\n\n### 5. MCP server configuration\n\nThe extension provides the MCP configuration JSON that enables Azure resource access.\n\n**Important**: You must manually add this configuration to your GitHub Copilot coding agent settings for the Azure integration to work:\n\n```json { \"servers\": { \"azure-mcp\": { \"type\": \"stdio\", \"command\": \"npx\", \"args\": [\"-y\", \"@azure/mcp-server-azure\"] } } } ```\n\n**How to apply this configuration**: Copy the JSON here and paste it into your Copilot coding agent’s MCP server configuration. For detailed steps on configuring the Azure MCP server for the Copilot coding agent, see the [official documentation](https://learn.microsoft.com/azure/developer/azure-developer-cli/extensions/copilot-coding-agent-extension#configure-azure-mcp-server-for-the-copilot-coding-agent).\n\n## Advanced configuration options\n\n### Custom role assignments\n\nBy default, the managed identity is assigned the Reader role. You can configure additional roles:\n\n```bash azd coding-agent config --roles \"Contributor,Storage Blob Data Reader,Key Vault Secrets User\" ```\n\n### Custom branch and remote configuration\n\nControl the git workflow with custom options:\n\n```bash azd coding-agent config \\ --branch-name \"enable-copilot-azure-access\" \\ --remote-name \"origin\" \\ --github-host-name \"github.enterprise.com\" ```\n\n### Using existing Managed Identities\n\nThe extension can work with existing managed identities:\n\n```bash azd coding-agent config --managed-identity-name \"existing-identity-name\" ```\n\n## Security and recommended practices\n\nThe extension implements several security recommended practices:\n\n### Least privilege access\n\n- Default Reader role minimizes permissions\n- Resource group-scoped access limits exposure\n- Configurable role assignments for specific use cases\n\n### Passwordless authentication\n\n- Uses OpenID Connect federated credentials\n- No secrets stored in GitHub\n- Automatic token refresh through Azure identity platform\n\n### Audit and compliance\n\n- All Azure resource access is logged through Azure Activity Log\n- Managed identity usage is tracked and auditable\n- Integration with Azure Policy for governance\n- Copilot coding agent can’t be invoked by anyone [without write access](https://docs.github.com/copilot/concepts/agents/coding-agent/about-coding-agent#built-in-security-protections) to the repository\n\n## What this enables: real-world scenarios\n\nOnce configured, GitHub Copilot coding agents can seamlessly interact with Azure resources through the MCP server. Here are some practical examples:\n\n### Azure resource management\n\nCopilot can now help you:\n\n- Query Azure resource properties: “Show me the configuration of my App Service”\n- Monitor resource health: “Check the status of my Azure SQL database”\n- Retrieve deployment information: “List all resources in my production resource group”\n\n### Infrastructure as code assistance\n\nWith Azure access configured, Copilot can:\n\n- Generate Bicep or ARM templates based on existing resources\n- Suggest infrastructure improvements based on current configurations\n- Help troubleshoot deployment issues by examining resource states\n\n### Cost and governance insights\n\nCopilot can provide intelligent insights about:\n\n- Resource cost optimization opportunities\n- Compliance with Azure Policy\n- Security recommendations based on current configurations\n\n## Troubleshooting common issues\n\nThe extension includes comprehensive error handling. Here are some common scenarios:\n\n### Managed Identity permissions\n\nIf Copilot reports access issues:\n\n1. Check the managed identity roles in the Azure portal\n2. Verify the resource group scope matches your needs\n3. Consider expanding roles using `--roles`\nflag during reconfiguration\n\n### GitHub environment configuration\n\nIf authentication fails:\n\n1. Verify the `copilot`\nenvironment exists in your GitHub repository\n2. Check that the environment variables are properly set\n3. Ensure the federated credential subject matches your repository\n\n### Workflow file issues\n\nThe generated `copilot-setup-steps.yml` must be merged to the main branch to take effect. The extension creates a pull request with detailed instructions for this final step.\n\n## Current status and roadmap\n\nThe `azure.coding-agent` extension is currently at version [0.5.1](https://github.com/Azure/azure-dev/blob/ec6ba2a0cddceb91dd173bea7028b5f555c68dbe/cli/azd/extensions/registry.json#L517). Recent improvements include:\n\n- Enhanced error messages and user experience improvements\n- Removal of the requirement for an existing `azd`\nproject\n- Better handling of git remotes and repository configuration\n- Resource group-scoped role assignments for improved security\n\nFuture enhancements being considered:\n\nIf you have ideas or need specific features, please [open an issue](https://github.com/Azure/azure-dev/issues/new) or go to these issues and upvote them:\n\n- [Support for additional Azure services and MCP servers](https://github.com/Azure/azure-dev/issues/6038)\n- [Integration with Azure DevOps repositories](https://github.com/Azure/azure-dev/issues/6039)\n- [Enhanced role assignment templates for common scenarios](https://github.com/Azure/azure-dev/issues/6040)\n- [Support for custom MCP server configurations](https://github.com/Azure/azure-dev/issues/6041)\n\n## Getting involved\n\nThe extension is part of the Azure Developer CLI (`azd` ) open source project. You can:\n\n- **Report issues and suggest features** on the [Azure Developer CLI GitHub repository](https://github.com/Azure/azure-dev)\n- **Review the extension source code** in [the `cli/azd/extensions/azure.coding-agent`\ndirectory](https://github.com/Azure/azure-dev/tree/main/cli/azd/extensions/azure.coding-agent)\n- **Contribute improvements** through pull requests and community discussions\n- **Share your experiences** and use cases with the developer community\n\n## Wrapping up: What this means for you\n\nThe `azure.coding-agent` extension transforms a tedious manual setup process into a guided experience. Instead of manually juggling security credentials, permission settings, and configuration files across multiple services, developers can now connect the GitHub Copilot coding agent to their Azure resources with just a few commands.\n\nThe result is a direct path from “I want Copilot to help me with Azure” to “Copilot is successfully helping me build and manage my cloud applications” in minutes, not hours. This setup makes AI-powered cloud development accessible whether you’re just getting started with Azure or managing enterprise-scale applications.\n\nWhether you’re exploring Azure for the first time or managing complex enterprise workloads, the `azure.coding-agent` extension provides the security and convenience for AI-enhanced Azure development.\n\n[Install the Azure MCP Server](https://github.com/microsoft/mcp/tree/main/servers/Azure.Mcp.Server) today and experience the future of AI-powered cloud development!\n\n## Additional resources\n\n- [GitHub Copilot Documentation](https://docs.github.com/copilot)\n- [Model Context Protocol Specification](https://spec.modelcontextprotocol.io/)\n- [Azure Managed Identity Documentation](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/)\n- [Azure Developer CLI Extensions Repository](https://github.com/Azure/azure-dev)\n\n## New to `azd`\n?\n\nWelcome! The Azure Developer CLI (`azd` ) is a developer-centric command-line interface (CLI) tool that accelerates provisioning and deploying app resources on Azure.\n\nYou can use azd from:\n\n- Your terminal of choice on Windows, Linux, or macOS.\n- Visual Studio Code or GitHub Codespaces by [downloading the extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.azure-dev) from the Marketplace, or installing it directly from the extension view (`Ctrl`\n+ `Shift`\n+ `X`\nfor Windows or `Cmd`\n+ `Shift`\n+ `X`\nfor macOS) in Visual Studio Code.\n- Visual Studio by [enabling the preview feature flag](https://devblogs.microsoft.com/azure-sdk/introducing-the-azure-developer-cli-a-faster-way-to-build-apps-for-the-cloud/#visual-studio).\n\nLearn more about the Azure Developer CLI from our [official documentation](https://aka.ms/azd). If you run into any problems or have suggestions, file an issue or start a discussion in the [Azure Developer CLI repository](https://github.com/Azure/azure-dev). You can also reference our [troubleshooting documentation](https://aka.ms/azd-troubleshoot).\n\nHappy coding!",
  "Description": "This post shares how to set up the GitHub Copilot coding agent integration with Azure resources and services by using the Azure Developer CLI (`azd`) extension.\n\nThe post [The azd extension to configure GitHub Copilot coding agent integration with Azure](https://devblogs.microsoft.com/azure-sdk/azure-developer-cli-copilot-coding-agent-config/) appeared first on [Azure SDK Blog](https://devblogs.microsoft.com/azure-sdk).",
  "PubDate": "2025-10-30T18:29:56+00:00",
  "FeedName": "Microsoft Azure SDK Blog",
  "Link": "https://devblogs.microsoft.com/azure-sdk/azure-developer-cli-copilot-coding-agent-config/",
  "FeedUrl": "https://devblogs.microsoft.com/azure-sdk/feed/",
  "Author": "Kristen Womack",
  "OutputDir": "_news",
  "Tags": [
    ".NET",
    "Azure SDK",
    "azure-developer-cli",
    "Codespaces",
    "Copilot",
    "Docker",
    "java",
    "javascript",
    "kubernetes",
    "python",
    "typescript",
    "VSCode"
  ],
  "FeedLevelAuthor": "Azure SDK Blog",
  "ProcessedDate": "2025-10-30 19:02:33",
  "Title": "The azd extension to configure GitHub Copilot coding agent integration with Azure"
}
