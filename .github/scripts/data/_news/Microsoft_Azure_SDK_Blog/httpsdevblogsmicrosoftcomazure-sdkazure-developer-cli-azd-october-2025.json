{
  "FeedLevelAuthor": "Azure SDK Blog",
  "FeedName": "Microsoft Azure SDK Blog",
  "EnhancedContent": "Welcome to the October 2025 edition of the Azure Developer CLI (`azd` ) release blog! This post covers releases 1.19.0 and 1.20.0. To share your feedback and questions, join the [October release discussion on GitHub](https://github.com/Azure/azure-dev/discussions/5902).\n\nThis month brings game-changing features including **layered provisioning with service dependencies**, the new **`azd publish` command**, advanced extension capabilities, and authentication enhancements. Also, the community contributed several exciting new templates to help you get started faster.\n\n## New features\n\n### üöÄ Layered provisioning support (Alpha)\n\n`azd` now supports layered provisioning to solve complex infrastructure dependency scenarios and ‚Äúchicken and egg‚Äù problems. This alpha feature (1.19.0) lets you define multiple provisioning layers in `azure.yaml` for sequential or independent deployment.\n\nEnable layered provisioning:\n\n```bash azd config set alpha.layers on ```\n\nDefine layers in `azure.yaml` :\n\n```yaml infra: layers:\n- name: base\npath: ./infra\n- name: app\npath: ./infra/app ```\n\nWith layered provisioning, you can:\n\n- **Provision specific layers**: `azd provision base`\n‚Äì Deploy only the base infrastructure layer\n- **Provision all layers**: `azd provision`\n‚Äì Deploy all layers in sequence\n- **Refresh layer state**: `azd env refresh --layer base`\n‚Äì Refresh environment state from a specific layer\n- **Clean up layers**: `azd down app`\n‚Äì Remove resources from a specific layer\n\nThis feature is key for scenarios where resources in one layer depend on the existence of resources from another layer. For example, when application-specific infrastructure depends on foundational networking or security components.\n\nPreviously, customers worked around complex dependencies by using pre-provision hooks to run scripts that update Azure resources between deployment steps. While functional, this approach mixed Infrastructure as Code (Bicep) with imperative scripts. With layered provisioning, you can now keep everything in Bicep as true Infrastructure as Code, maintaining consistency and using Bicep‚Äôs declarative benefits throughout your entire infrastructure deployment. [(azure-dev#5492)](https://github.com/Azure/azure-dev/pull/5492)\n\n### üöÄ Service dependencies with automatic deployment ordering\n\nBuilding on the layered provisioning foundation, **version 1.20.0 introduces service dependencies** using the new `uses` property [\\[#5856\\]](https://github.com/Azure/azure-dev/pull/5856). This property allows you to define automatic deployment ordering by specifying dependencies between services directly in your `azure.yaml` :\n\n```yaml name: my-app\n\nservices: backend: project: ./api host: containerapp frontend: project: ./frontend host: staticwebapp uses:\n- backend\n```\n\nDeployment order: backend ‚Üí frontend\n\n`azd` automatically orders deployments, validates dependency graphs, and ensures correct deployment sequence without manual orchestration.\n\n### üöÄ New `azd publish`\ncommand and enhanced `azd deploy` for container workflows\n\nThe `azd publish` command separates container image publishing from deployment, providing greater flexibility in your development workflow. This new command allows you to publish container images to Azure Container Registry (ACR) or third-party registries independently of the `azd deploy` process. The command supports both local and remote builds, includes `--all` and `--from-package` flags for batch operations, and features a `--to` parameter for specifying custom image targets in the format `[registry/]repository[:tag]` . Additionally, `azd publish` includes support for `prepublish` and `postpublish` hooks and works seamlessly with Azure Container Apps and Azure Kubernetes Service (AKS) service targets.\n\n#### Enhanced `azd deploy`\ncapabilities\n\nAlongside the new publish command, we enhanced `azd deploy` to support fully qualified image references with the `--from-package` flag. When you provide a complete registry endpoint (for example, `myacr.azurecr.io/image-name:tag` ), `azd` skips both packaging and publishing steps and proceed directly to deployment. This change enables three distinct deployment workflows:\n\n- **Full rebuild**: `azd deploy web`\n‚Äì Repackages and republishes the image to the registry\n- **Republish existing**: `azd deploy web --from-package image-name:tag`\n‚Äì Skips packaging but republishes the image to the registry\n- **Deploy pre-published**: `azd deploy web --from-package myacr.azurecr.io/image-name:tag`\n‚Äì Skips both packaging and publishing, deploying the existing image directly\n\n#### Customizable `azd up`\nworkflow\n\nThe existing `azd up` workflow remains unchanged by default, maintaining backward compatibility. However, you can now customize the `up` workflow by explicitly defining the steps in your `azure.yaml` . Doing so allows you to apply the new `azd publish` command within your workflow while maintaining the same end result:\n\n```yaml workflows: up: steps:\n- azd: provision\n- azd: package --all\n- azd: publish --all\n- azd: deploy --all\n```\n\nThis customization works seamlessly with existing templates and provides greater control over the deployment pipeline while offering the same functionality as the default workflow. [(azure-dev#5663)](https://github.com/Azure/azure-dev/pull/5663)\n\n### üöÄ Enhanced extension capabilities\n\nExtension management received substantial improvements across both releases:\n\n**Version 1.19.0** brought foundational improvements [\\[#5641\\]](https://github.com/Azure/azure-dev/pull/5641):\n\n- Better ordering of extensions during installation and execution\n- Enhanced version display to help you track which extensions are installed\n- Improved source disambiguation to clearly identify where extensions come from\n\n**Version 1.20.0** major expansions:\n\n- **Auto-installation workflow** [\\[#5753\\]](https://github.com/Azure/azure-dev/pull/5753) ‚Äì automatic extension installation\n- **Custom service target support** [\\[#5815\\]](https://github.com/Azure/azure-dev/pull/5815)\n- **Extensions promoted to beta** [\\[#5858\\]](https://github.com/Azure/azure-dev/pull/5858) ‚Äì more stable APIs\n- **MCP Server capability** [\\[#5807\\]](https://github.com/Azure/azure-dev/pull/5807) for AI integration\n- **Improved `azd ext show` UX** [\\[#5874\\]](https://github.com/Azure/azure-dev/pull/5874)\n\n### üöÄ Advanced development features (1.20.0)\n\n- **Container App Jobs support** [\\[#5723\\]](https://github.com/Azure/azure-dev/pull/5723) for .NET Aspire deployments\n- **Bicep Container App revisions** [\\[#5694\\]](https://github.com/Azure/azure-dev/pull/5694) support\n- **Custom language support** [\\[#5771\\]](https://github.com/Azure/azure-dev/pull/5771) for extending `azd`\nto new programming languages\n- **Optional hook shell attribute** [\\[#5809\\]](https://github.com/Azure/azure-dev/pull/5809) with OS-based defaults\n\n### üöÄ Authentication improvements\n\nEnhanced authentication with **claims support for device-code flow** [\\[#5587\\]](https://github.com/Azure/azure-dev/pull/5587) and improved service principal creation guidance [\\[#5598\\]](https://github.com/Azure/azure-dev/pull/5598).\n\n## Bugs fixed\n\n### Version 1.19.0 fixes\n\n- **Enhanced deployment logging**: Community contributor @Saipriya-1144 improved the readability of failed deployment logs with more line spacing [\\[#5586\\]](https://github.com/Azure/azure-dev/pull/5586), making it easier to troubleshoot deployment issues.\n- **CloudShell telemetry fix**: Fixed an issue where CloudShell telemetry wasn‚Äôt being emitted after the first run [\\[#5588\\]](https://github.com/Azure/azure-dev/pull/5588), ensuring proper usage tracking and diagnostics.\n- **Improved warning messages**: We enhanced Warning message formatting with all-caps prefix and better hook suggestion display [\\[#5590\\]](https://github.com/Azure/azure-dev/pull/5590), making important messages more visible and actionable.\n\n### Version 1.20.0 fixes\n\n- **Extension registry setup**: Fixed `azd x publish`\nto automatically set up local extension registry [\\[#5736\\]](https://github.com/Azure/azure-dev/pull/5736), streamlining extension development workflows.\n- **Aspire deployment improvements**: Enhanced Aspire deployments to use the name of the compute environment from Aspire Manifest instead of hardcoded strings [\\[#5812\\]](https://github.com/Azure/azure-dev/pull/5812), providing more accurate resource naming.\n- Updated preflight error handling for standard deployment [\\[#5870\\]](https://github.com/Azure/azure-dev/pull/5870)\n\n## Other changes\n\n### Version 1.19.0 updates\n\n- **Go 1.25.0 upgrade**: Updated the codebase to Go 1.25.0 [\\[#5592\\]](https://github.com/Azure/azure-dev/pull/5592), bringing performance improvements and the latest language features\n- **Aspire sample update**: Updated Aspire sample to version 9.4 [\\[#5559\\]](https://github.com/Azure/azure-dev/pull/5559), providing developers with the latest .NET Aspire capabilities\n- **Extension registry update**: Updated the `microsoft.azd.extensions`\nregistry to version 0.5.0 [\\[#5603\\]](https://github.com/Azure/azure-dev/pull/5603), ensuring compatibility with the latest extension features\n\n### Version 1.20.0 updates\n\n- **Bicep CLI update**: Updated from version 0.38.3 to 0.38.33 [\\[#5869\\]](https://github.com/Azure/azure-dev/pull/5869), bringing the latest Bicep features and fixes\n- **GitHub CLI update**: Updated to the latest version 2.80 [\\[#5770\\]](https://github.com/Azure/azure-dev/pull/5770) for improved Git integration\n- **Schema improvements**: Made language optional in the schema [\\[#5867\\]](https://github.com/Azure/azure-dev/pull/5867), providing more flexibility in service definitions\n- **Redis provisioning clarity**: Enhanced provisioning progress to differentiate between Azure Managed Redis and Redis Enterprise [\\[#5823\\]](https://github.com/Azure/azure-dev/pull/5823)\n\n## New docs\n\n- **(NEW) [`azd` metadata documentation](https://learn.microsoft.com/azure/developer/azure-developer-cli/metadata)** ‚Äì Comprehensive guidance on metadata, template definitions, and configuration options (published September 24, 2025)\n\n## New templates\n\nCommunity-driven templates help you get started faster, solve real-world scenarios, and showcase best practices for deploying solutions with Azure Developer CLI.\n\nThe Azure Developer CLI template gallery continues to grow with exciting new contributions from the community. Thank you!\n\n- [Containerized A2A Translation Service with Azure AI Translator](https://github.com/passadis/azure-a2a-translation) by [Konstantinos Passadis](https://github.com/passadis): Complete Agent-to-Agent translation service using Azure Container Apps, Storage Queues, and AI Translator with async processing and managed identity.\n- [Simple FastMCP with Azure OpenAI](https://github.com/MiguelElGallo/myfirstmcp-openai) by [Miguel P. Z.](https://github.com/MiguelElGallo): A minimal FastMCP application template that deploys to Azure App Service. FastMCP provides Model Context Protocol server capabilities, enabling AI assistants to interact with external systems and data sources through a standardized interface.\n- [Agentic Azure Architecture Document and Diagram Generator with MCP Validation](https://github.com/passadis/ai-architect-webapp) by [Konstantinos Passadis](https://github.com/passadis): Intelligent Azure architecture document and diagram generator using AI Foundry agents, MCP service validation, and comprehensive Azure component library. Features automatic import correction, smart component validation using MCP, Dapr for secure and easy Service to Service communications, and professional document and diagram rendering. A must have tool for every Azure architect and engineer.\n- [Durable Functions Fan-Out/Fan-In sample](https://github.com/Azure-Samples/durable-functions-quickstart-dotnet-azd) by the Azure Functions Team: A Durable Functions quickstart written in C# demonstrating the fan-out/fan-in pattern. This template deploys to Azure Functions Flex Consumption plan using the Azure Developer CLI (`azd`\n). The sample uses managed identity and a virtual network to make sure deployment is secure by default.\n- [Trainer-Demo-Deploy scenarios](https://github.com/Azure/awesome-azd/pull/653) by [petender](https://github.com/petender):\n- [Network-hardened web app with private PaaS datastore](https://github.com/daverendon/azd-hardened-webapp): this scenario aligns with AZ-500 and AZ-104 certification paths and demonstrates how to deploy an Azure App Service web app with strict network security controls and policies by [daverendon](https://github.com/daverendon).\n- [AI Foundry Agent Service with Bing Search Grounding and OpenAI Deep Research LLM](https://github.com/petender/azd-researcher): this scenario deploys an Azure AI Foundry Project, an Azure AI Foundry Agent Service, and Bing Search Grounding. A Python with Flask Web App offers a use case to perform Deep Research by [petender](https://github.com/petender).\n- [Agentic Applications for Unified Data Foundation Solution Accelerator](https://github.com/microsoft/agentic-applications-for-unified-data-foundation-solution-accelerator) by [Malory Rose](https://github.com/malrose07), [Nalini Chandhi](https://github.com/nchandhi), [Travis Hilbert](https://github.com/travishilbert): This solution accelerator helps organizations make faster, smarter decisions at scale. The accelerator uses agentic AI solutions built on Microsoft Fabric‚Äôs unified data foundation. The template integrates Azure AI Foundry agents with Semantic Kernel orchestration. Teams can design intelligent workflows that automate routine processes and streamline operations. The solution enables natural language querying across enterprise datasets. High-quality, governed data becomes accessible to both technical specialists and business users. This shared environment allows insights to be surfaced easily and decisions to be grounded in trusted information. Organizations gain agility to respond rapidly to changing business needs, foster team collaboration, and drive innovation with confidence.\n- [Create Medallion Architecture for Unified Data Foundation with Fabric Solution Accelerator](https://github.com/microsoft/unified-data-foundation-with-fabric-solution-accelerator) by [Alvaro Guadamillas Herranz](https://github.com/alguadam), [Gaiye Zhou](https://github.com/DocGailZhou): This template creates a working medallion architecture in Microsoft Fabric. The template includes data models across multiple domains: customer, product, sales, and finance. Sample data is uploaded to a bronze lakehouse. PySpark notebooks with automated execution load data into bronze, validate data in silver, and prepare data in gold. A prebuilt Power BI dashboard for sales analysis is created and uploaded to Fabric.\n- [Container Migration Solution Accelerator](https://github.com/microsoft/Container-Migration-Solution-Accelerator) by [Seth Steenken](https://github.com/sethsteenken), [DB Lee](https://github.com/Dongbumlee): This accelerator is a multi-service application with AI-driven migration capabilities. It uses multi-agent technology to help users migrate container service configurations. The solution helps move configurations from any cloud platform to Azure Kubernetes Service.\n\n## Contributor acknowledgments\n\nShout out to our community contributor [@Saipriya-1144](https://github.com/Saipriya-1144) for improving deployment log readability!\n\n## New to `azd`\n?\n\nIf you‚Äôre new to the Azure Developer CLI, `azd` is a developer-centric command-line interface (CLI) tool that accelerates provisioning and deploying app resources on Azure.\n\nYou can use azd from:\n\n- Your terminal of choice on Windows, Linux, or macOS.\n- Visual Studio Code or GitHub Codespaces by [downloading the extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.azure-dev) from the Marketplace, or installing it directly from the extension view (`Ctrl`\n+ `Shift`\n+ `X`\nfor Windows or `Cmd`\n+ `Shift`\n+ `X`\nfor macOS) in Visual Studio Code.\n- Visual Studio by [enabling the preview feature flag](https://devblogs.microsoft.com/azure-sdk/introducing-the-azure-developer-cli-a-faster-way-to-build-apps-for-the-cloud/#visual-studio).\n\nTo get started, run `azd init` in an empty directory or `azd init --template [template name]` to start with a template. Full documentation is available in the [Azure Developer CLI Dev Center](https://aka.ms/azd) and you can report issues or ask questions in [our GitHub repository](https://github.com/Azure/azure-dev).\n\nHappy coding!",
  "ProcessedDate": "2025-10-14 22:03:55",
  "Author": "PuiChee (PC) Chan",
  "FeedUrl": "https://devblogs.microsoft.com/azure-sdk/feed/",
  "OutputDir": "_news",
  "Link": "https://devblogs.microsoft.com/azure-sdk/azure-developer-cli-azd-october-2025/",
  "PubDate": "2025-10-14T21:54:15+00:00",
  "Description": "This post announces the October release of the Azure Developer CLI (`azd`).\n\nThe post [Azure Developer CLI (azd) ‚Äì October 2025](https://devblogs.microsoft.com/azure-sdk/azure-developer-cli-azd-october-2025/) appeared first on [Azure SDK Blog](https://devblogs.microsoft.com/azure-sdk).",
  "Title": "Azure Developer CLI (azd) ‚Äì October 2025",
  "Tags": [
    ".NET",
    "Azure SDK",
    "azure-developer-cli",
    "Codespaces",
    "Docker",
    "java",
    "javascript",
    "kubernetes",
    "python",
    "typescript",
    "VSCode"
  ]
}
