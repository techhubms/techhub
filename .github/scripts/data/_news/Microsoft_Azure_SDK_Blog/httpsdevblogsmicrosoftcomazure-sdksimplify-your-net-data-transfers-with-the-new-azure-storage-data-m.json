{
  "Link": "https://devblogs.microsoft.com/azure-sdk/simplify-your-net-data-transfers-with-the-new-azure-storage-data-movement-library/",
  "ProcessedDate": "2025-08-24 16:16:36",
  "PubDate": "2025-02-12T17:34:48+00:00",
  "FeedLevelAuthor": "Azure SDK Blog",
  "Title": "Simplify your .NET data transfers with the new Azure Storage Data Movement library",
  "FeedUrl": "https://devblogs.microsoft.com/azure-sdk/feed/",
  "EnhancedContent": "We’re excited to announce the release of the modern Azure Storage Data Movement library, designed to simplify your data transfer experience when using Azure Blob Storage and Azure Files. This new library and the extension libraries for Azure Storage and Azure Files are now available as of February 11, 2025. In this blog post, we’ll explore the benefits and how to get started with the library.\n\n## Why use the new and improved Data Movement library?\n\n### Convenience with high performance\n\nThe modern Azure Storage Data Movement library is the perfect choice for uploading, downloading, and copying of blobs and files to, from, and between storage accounts. For your convenience, methods and objects are included in the client library to perform the following operations:\n\n- Setting the number of parallel operations for each transfer\n- Tracking transfer progress\n- Pause/resume functionality\n- Checkpointing\n\nCompared to the standard Azure Storage client libraries, the Data Movement library targets specific advanced data transfer scenarios: directory level movement, resource consumption control, and large-scale data movement. Unlike AzCopy, PowerShell or other executable tools, the Data Movement library provides a .NET package and extension libraries that can be easily integrated into customers’ on-premises or cloud service.\n\n### Modernization\n\nThe new Azure Storage Data Movement libraries share infrastructure with modern, v12 Azure Storage libraries, simplifying the process of transferring and copying data to and from Azure Storage. In addition, the libraries integrate with the modern Azure Identity libraries, helping you stay up-to-date with modern security practices.\n\nWith the [legacy version](https://www.nuget.org/packages/Microsoft.Azure.Storage.DataMovement/) currently on track to be retired in March 2026, the modern version of the Data Movement library supports new Azure Storage features and services going forward.\n\n## Get started with the new Azure Storage Data Movement library\n\nThe collection of modern Azure Storage Data Movement libraries includes a [common client library](https://www.nuget.org/packages/Azure.Storage.DataMovement) and specialized extension libraries for [Azure Blob Storage](https://www.nuget.org/packages/Azure.Storage.DataMovement.Blobs) and [Azure Files](https://www.nuget.org/packages/Azure.Storage.DataMovement.Files.Shares). The common library handles core data transfer functions, while the extension libraries offer extra features specific to Azure Blob Storage and Azure Files.\n\nThe upcoming section covers samples for getting started with the Data Movement library. Microsoft Entra token-based authentication is used in each of the samples, with the help of the Azure Identity library. For the samples, the role of Azure Storage Data Contributor (or an elevated role) is needed to perform the operations.\n\n### Installation\n\nUse the following commands to install the required packages:\n\n```dotnetcli dotnet add package Azure.Storage.DataMovement.Blobs dotnet add package Azure.Identity ```\n\n### Add `using`\ndirectives\n\nAdd these directives to the top of your code file:\n\n```csharp using Azure; using Azure.Core; using Azure.Identity; using Azure.Storage.DataMovement; using Azure.Storage.DataMovement.Blobs; ```\n\n### The `TransferManager`\nobject\n\nThe `TransferManager` serves as the primary class for initiating and managing various types of transfers, such as uploads, downloads, and copies. Let’s take a look at creating a `TransferManager` object to interact with a local file system, Azure Blob Storage, or Azure Files:\n\n```csharp TransferManager transferManager = new(new TransferManagerOptions()); ```\n\n### Create a `StorageResource`\nobject for Azure Blob Storage\n\n`StorageResource` is the foundational class for all storage resources, including blobs and files. For Azure Blob Storage, the `BlobsStorageResourceProvider` creates `StorageResource` instances for a blob container, block blob, append blob, or page blob.\n\n```csharp // Create a token credential DefaultAzureCredential tokenCredential = new();\n\nBlobsStorageResourceProvider blobsProvider = new(tokenCredential);\n\n// Get a container resource StorageResource container = await blobsProvider.FromContainerAsync( new Uri(\"http://<storage-account-name>.blob.core.windows.net/sample-container\"));\n\n// Get a block blob resource - default is block blob StorageResource blockBlob = await blobsProvider.FromBlobAsync( new Uri(\"http://<storage-account-name>.blob.core.windows.net/sample-container/sample-block-blob\"), new BlockBlobStorageResourceOptions()); ```\n\n## Example: Upload a local file to a blob\n\nTo initiate a new transfer, use the `TransferManager.StartTransferAsync` method. This method returns a `TransferOperation` object representing the transfer. The `TransferOperation` object allows you to monitor the transfer progress and obtain the transfer ID. The transfer ID is a unique identifier for resuming or pausing a transfer.\n\nTransfers involve a source and a destination, both of which are `StorageResource` types. The source and destination can be either `StorageResourceContainer` or `StorageResourceItem` , and they must be the same. For instance, if the source is a blob container, the destination must also be a blob container.\n\nThe following example shows how to start a new transfer to upload a local file to a blob:\n\n```csharp DefaultAzureCredential tokenCredential = new();\n\nTransferManager transferManager = new(new TransferManagerOptions()); BlobsStorageResourceProvider blobsProvider = new(tokenCredential); string localFilePath = \"C:/path/to/file.txt\"; string blobUri = \"https://<storage-account-name>.blob.core.windows.net/sample-container/sample-blob\";\n\nTransferOperation transferOperation = await transferManager.StartTransferAsync( sourceResource: LocalFilesStorageResourceProvider.FromFile(localFilePath), destinationResource: await blobsProvider.FromBlobAsync(new Uri(blobUri)));\n\nawait transferOperation.WaitForCompletionAsync(); ```\n\n## Conclusion\n\nThe new Azure Storage Data Movement library provides .NET developers with an easy, powerful way to facilitate data transfers in your applications using Azure Blob Storage and Azure Files.\n\nWe encourage all users of the legacy version of the Azure Storage Data Movement library to take advantage of the significant improvements in the update and migrate to the new version.\n\n## Resources\n\n- [Article: Transfer data with the Data Movement library](https://aka.ms/DataMovementLibrary)\n- [The Azure Storage Data Movement Common library on GitHub](https://aka.ms/DMLCommon)\n- [Azure.Storage.DataMovement.Blobs Documentation](https://aka.ms/DMLBlobDoc)\n- [Azure.Storage.DataMovement.Files.Shares documentation](https://aka.ms/DMLFilesDoc)\n- [Migration guide from v1 to v2 for Data Movement Library](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.DataMovement/MigrationGuide.md)\n\nFor feature requests, bug reports, or general support, [open an issue](https://github.com/Azure/azure-sdk-for-net/issues) in the repository on GitHub.",
  "Tags": [
    ".NET",
    "Azure SDK",
    "release",
    "storage"
  ],
  "Description": "This post announces the new and improved Azure Storage Data Movement library for .NET.\n\nThe post [Simplify your .NET data transfers with the new Azure Storage Data Movement library](https://devblogs.microsoft.com/azure-sdk/simplify-your-net-data-transfers-with-the-new-azure-storage-data-movement-library/) appeared first on [Azure SDK Blog](https://devblogs.microsoft.com/azure-sdk).",
  "OutputDir": "_news",
  "FeedName": "Microsoft Azure SDK Blog",
  "Author": "Charles Barnett"
}
