{
  "PubDate": "2025-03-12T17:58:25+00:00",
  "EnhancedContent": "*This is the first post in a multi-part series about the new release of DSC.*\n\n**We’re pleased to announce the General Availability of Microsoft’s Desired State Configuration (DSC)** **version 3.0.0.**\n\nThis version marks a significant evolution in cloud-native configuration management for cross-platform environments. DSC is a declarative configuration and orchestration platform that defines a standard way of exposing settings for applications and services. It’s a tool for managing systems and applications by describing what they should look like rather than how to make it that way. DSC simplifies system, service, and application management by separating what to do from how to do it.\n\n## Benefits of DSC\n\n- **Declarative and Idempotent**: DSC configuration documents are declarative JSON or YAML files\nthat define the desired state of your system in a straight-forward way. They include the instances of DSC resources that need configuration. DSC ensures the system matches that state, repeatedly if needed, without making unnecessary changes.\n- **Flexible**: DSC Resources define how to manage state for a particular system or application\ncomponent. Resources can be authored in any language, not only PowerShell.\n- **Cross-Platform**: DSC works on Linux, macOS, and Windows without needing extra tools or\ndependencies.\n- **Integratable**: Designed to be easily integrated into existing configuration solutions. DSC\nreturns schematized JSON objects for trace messages and command output. Tool developers and script authors can easily validate and parse the output for integration with other configuration tools and frameworks. DSC simplifies how you call it by accepting JSON from stdin for all configuration and resource commands. DSC resources include a manifest that defines the resource properties as a JSON schema and how to invoke the resource. You can reuse this definition across various toolchains for tighter integration with DSC.\n- **Backwards compatible**: This release of DSC can use all existing PowerShell 7 and Windows\nPowerShell DSC resources.\n\nWith DSC, you can:\n\n- Create configuration files that define how your environment should look.\n- Write DSC resources in any programming language to manage your systems and applications.\n- Invoke DSC resources to perform specific actions.\n- Define a standard way for applications and services to make their settings discoverable and\nusable. This means that you can discover and invoke resources directly, even without DSC.\n\n## Differences from PowerShell DSC\n\nWindows PowerShell 5.1 includes PowerShell Desired State Configuration (PSDSC). We refer to as classic DSC, which encompasses PSDSC v1.1 and v2. However, DSC can use any classic DSC resources that exist today, including the script-based and class-based PSDSC resources. You can use PSDSC resources in DSC with both Windows PowerShell and PowerShell.\n\nThe release of DSC is a major change to the DSC platform. DSC differs from PSDSC in a few important ways:\n\n- DSC no longer includes or supports the Local Configuration Manager (LCM).\n- DSC doesn’t depend on PowerShell. You can use DSC without PowerShell installed and manage\nresources written in bash, python, C#, Go, or any other language.\n- DSC doesn’t include a local configuration manager. DSC is invoked as a command-line tool. It doesn’t\nrun as a service.\n- The PSDSC configuration documents used Managed Object Format (MOF) files. Few tools were able to\nparse MOF files, especially on non-Windows platforms. DSC isn’t compatible with MOF files, but you can still use all existing PSDSC resources.\n- DSC is built on industry standards, such as JSON, JSON Schema, and YAML. These standards make DSC\neasier to integrate into tools and workflows compared to PSDSC.\n- DSC configuration documents are defined in JSON or YAML. The configuration documents use\nexpression functions to enable dynamic values, rather than using PowerShell code to retrieve environment variables or join strings.\n- DSC supports supplying parameter values for configuration documents at runtime either as JSON\nor by pointing to a parameters file instead of generating a configuration MOF file before applying the configuration.\n- Unlike PSDSC, DSC returns strongly structured output. This structured output adheres to a\npublished JSON Schema, making it easier to understand the output and to integrate it into your own scripts, reporting, and other tooling. When you **test** or **set** resources and configurations with DSC, the output tells you *how* a resource is out of the desired state or *what* DSC changed on your system.\n\n## Features of DSC\n\n- **Groups**: DSC supports a new resource kind that changes how DSC processes a list of resources.\nResource authors can define their own group resources and configuration authors can use any of the built-in group resources.The DSC repository has an [example](https://github.com/PowerShell/DSC/blob/main/dsc/examples/groups.dsc.yaml) that shows how you can group resources together and use the `dependsOn` keyword to define the order those groups are applied in a configuration.\n- **Assertions**: Use the `Microsoft.Dsc/Assertion`\n(a special group resource) to validate the environment before running the configuration.The DSC repository has an [example](https://github.com/PowerShell/DSC/blob/main/dsc/examples/assertion.dsc.yaml) that shows how you can use an assertion to manage a resource that should only run on a specific operating system.\n- **Importers**: DSC supports a new resource kind that pulls in a configuration from an external\nsource for reuse in the current configuration document. Resource authors can define their own importer resources and configuration authors can use the built-in `Microsoft.DSC/Include`\n\nresource.The DSC repository has an [example](https://github.com/PowerShell/DSC/blob/main/dsc/examples/include.dsc.yaml) that shows how you can use the `Microsoft.Dsc/Include`\n\nresource to reuse a separate configuration document file, enabling you to compose a complex configuration from smaller, simpler configuration documents.\n- **Exporting**: DSC supports a new operation that resources can implement to return the list of all\nexisting instances of that resource. You can use the [`dsc resource export`](https://learn.microsoft.com/en-us/powershell/dsc/reference/cli/resource/export?view=dsc-3.0&amp;preserveView=true) command to get every instance of that resource on a machine. Use the [`dsc config export`](https://learn.microsoft.com/en-us/powershell/dsc/reference/cli/config/export?view=dsc-3.0&amp;preserveView=true) command to look up a set of resources and return a new configuration document containing every instance of those resources.\n- **Configuration functions**: DSC configuration documents support a [set of functions](https://learn.microsoft.com/en-us/powershell/dsc/reference/schemas/config/functions/overview?view=dsc-3.0&amp;preserveView=true) that\nenable you to change how DSC processes the resources.The DSC repository has an [example](https://github.com/PowerShell/DSC/blob/main/dsc/examples/reference.dsc.yaml) that shows how you can reference the output from one resource in the properties of another.\n\n## Support lifecycle\n\nDSC follows semantic versioning. The first release of DSC, version 3.0.0, is a Stable release.\n\nThe first release of DSC, version `3.0.0` , is a Stable release. Patch releases update the third digit of the semantic version number. For example, 3.0.1 is a patch update to 3.0.0. Stable releases receive patches for critical bugs and security vulnerabilities for three months after the next Stable release. For example, version 3.0.0 is supported for three months after 3.1.0 is released.\n\nAlways update to the latest patch version of the release you’re using.\n\n## Next steps\n\nAs I mentioned at the top of this post, this was the first in a series of posts about the new DSC. For the subsequent posts:\n\n- **DSC** refers to Desired State Configuration (DSC) v3.0.0\n- **PSDSC** refers to PowerShell Desired State Configuration (PSDSC) v1.1 and v2\n\nNow you are ready for the next post: [Get Started with Desired State Configuration v3.0.0 (DSC)](https://devblogs.microsoft.com/powershell/get-started-with-dsc-v3/)\n\n## Call to action\n\nFor more information about Desired State Configuration v3.0 (DSC), visit the [DSC documentation](https://learn.microsoft.com/powershell/dsc/overview?view=dsc-3.0&amp;preserveView=true). We value your feedback. Stop by our [GitHub repository](https://github.com/PowerShell/DSC) and let us know of any issues you find.\n\nJason Helmick\n\nSr. Product Manager, PowerShell",
  "FeedUrl": "https://devblogs.microsoft.com/powershell/feed/",
  "Title": "Announcing Microsoft Desired State Configuration v3.0.0",
  "FeedLevelAuthor": "PowerShell Team",
  "Link": "https://devblogs.microsoft.com/powershell/announcing-dsc-v3/",
  "Tags": [
    "PowerShell",
    "PowerShell DSC"
  ],
  "OutputDir": "_news",
  "Author": "Jason Helmick",
  "ProcessedDate": "2025-08-05 11:20:03",
  "Description": "This post announces the release of Microsoft Desired State Configuration v3.0.0. We discuss the features and benefits of DSC and how it differs from PowerShell DSC.\n\nThe post [Announcing Microsoft Desired State Configuration v3.0.0](https://devblogs.microsoft.com/powershell/announcing-dsc-v3/) appeared first on [PowerShell Team](https://devblogs.microsoft.com/powershell).",
  "FeedName": "Microsoft PowerShell Blog"
}
