{
  "PubDate": "2025-04-14T13:40:29+00:00",
  "EnhancedContent": "# Team investments for 2025\n\nFirst, apologies getting this out so late into the year. We’ve been very busy and just found the time to write this update.\n\n## Security improvements\n\nWe continue to treat security as a top priority and as issues are discovered or reported, we will continue to prioritize these issues over new feature development.\n\n## Bug fixes and community PRs\n\nWe continue to fix various reported issues, as well as prioritizing the review and merging of community pull requests. Based on community feedback, we’re now using a [GitHub project](https://github.com/orgs/PowerShell/projects/44) to provide transparency on which issues and pull requests team members are focusing on.\n\n## PowerShell 7.6\n\nPowerShell 7.6 will be our latest Long-Term Servicing (LTS) release. We continue to align with the .NET 10 release cycle and support lifecycle. There have already been 4 preview releases published.\n\n### Moving PowerShell content folder out of MyDocuments\n\nThis has been a long-standing request from the community due to automatic sync of MyDocuments folder and OneDrive. While some users want to leverage OneDrive for syncing across their systems, many other users complain about the performance impact on PowerShell module discovery when modules are stored in the OneDrive folder. There was a previous experimental feature [PSModuleAutoLoadSkipOfflineFiles](https://github.com/PowerShell/PowerShell/pull/18152) that is now mainstream in PowerShell 7.5. With this change, PowerShell skips modules that are not marked being available locally. However, this also led to confusion for users who expected their modules to be available when they were not on disk.\n\nAs any change here is a breaking change, we’ve spent a lot of time discussing the best way to approach this. We are close to finishing a proposal that we will publish to the [PowerShell-RFC](https://github.com/powershell/powershell-rfc) repository for community feedback when ready. We will have experimental feature available within the 7.6 preview cycle for users to test and provide feedback on.\n\nNote that the PowerShell content folder does not just contain modules, but also the user’s PowerShell profile, scripts installed from PowerShell Gallery, and updated help files.\n\n### Enable native commands to integrate with PowerShell more easily\n\nA common ask from several of our Microsoft partners who are building native commands (Azure CLI, Winget) is to more easily integrate features such as Feedback Providers and Tab Completion where they don’t need to publish a separate module from their application.\n\nWe have already published a [design proposal in our RFC repo](https://github.com/PowerShell/PowerShell-RFC/pull/386) and would welcome any feedback from the community. One of the key requirements is that an application’s install and uninstall should be clean and not leave behind any artifacts in PowerShell.\n\n### Update `PATH`\nenvironment variable for WinGet\n\nCurrently, if you use WinGet to install a package, it will not update the `PATH` environment variable. This means that newly installed applications are not available in the current PowerShell session. This feature will be similar to the one made in `cmd.exe` and only apply to a specific applications.\n\n### PowerShell 7 configuration as DSC v3 resource\n\nAs part of our work to enable managing popular developer applications’ settings, we are working on exposing `pwsh` as a DSC v3 resource. This will allow users to manage the settings of PowerShell 7 in a declarative manner.\n\n## PowerShell Gallery\n\nSignificant behind-the-scenes work is happening to migrate the PowerShell Gallery from an Azure Cloud Services classic application to one hosted on Azure Kubernetes Service (AKS). This is a difficult effort but, ideally, one that won’t affect user access or performance.\n\n### EntraID server-side support\n\nConcurrently, we are working on support for EntraID authentication that allows users to use a managed identify to publish modules to the PowerShell Gallery instead of an API key.\n\n## PSResourceGet\n\n### EntraID client-side support\n\nAlong with the changes necessary on the PowerShell Gallery side, corresponding changes are being made to PSResourceGet to support EntraID authentication.\n\n### Complete Micorosft Artifact Registry (MAR) support\n\nWe continue to progress towards General Availability for support of [Microsoft Artifact Registry (MAR)](https://github.com/microsoft/containerregistry) in PSResourceGet. This allows users to have a default trusted repository for modules and scripts published by Microsoft. This is built on top of the support we already added for [Azure Container Registry (ACR)](https://azure.microsoft.com/products/container-registry/) Over time, we plan to generally support [ORAS](https://oras.land/) as a standard for storing artifacts in container registries, which would enable support any container registry that supports the OCI distribution spec.\n\n## Windows OpenSSH\n\nWe continue to merge upstream OpenSSH changes into our Windows OpenSSH distribution with previews published to [GitHub](https://github.com/PowerShell/Win32-OpenSSH/releases) and the final release updated into Windows.\n\n### DSC v3 resource\n\nWe continue to develop a DSC v3 resource for `SSHD_CONFIG` with expectations that previews will be available later this year.\n\n## Desired State Configuration v3 (DSC)\n\nWe already [announced DSC 3.0 General Availablity](https://devblogs.microsoft.com/powershell/announcing-dsc-v3/) last month and already have two service updates available.\n\nDSC v3.0 is available in the [Microsoft Store](https://apps.microsoft.com/detail/9nvtpzwrc6kq?hl=en-us&amp;gl=US) or from our [GitHub repo](https://github.com/PowerShell/DSC/releases). The macOS and Linux releases are curently only available from our GitHub repo.\n\n### DSC v3.1\n\nIn addition, we are making rapid progress on a [DSC v3.1 release with multiple previews](https://github.com/PowerShell/DSC/releases/tag/v3.1.0-preview.3) already available. Preview releases are also available from the [Microsoft Store](https://apps.microsoft.com/detail/9pcx3hx4hz0z?hl=en-us&amp;gl=US) or our GitHub repo.\n\nYou can see what features are [approved](https://github.com/PowerShell/DSC/issues?q=is%3Aissue%20state%3Aopen%20milestone%3A3.1-Approved) or being [considered](https://github.com/PowerShell/DSC/issues?q=is%3Aissue%20state%3Aopen%20milestone%3A3.1-Consider) for the 3.1 release.\n\n## AI Shell\n\nOur [AI Shell](https://github.com/powershell/aishell) project continues to make progress towards integration of AI into the shell to boost productivity.\n\nSome further improvements being planned:\n\n- Better macOS support\n- Enhanced Azure PowerShell support\n- Expansion of new Agents\n- Better integration with PowerShell\n- Support for [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\n\n## Other tooling updates\n\nWe will continue to address reported issues and merge community pull requests for the following projects:\n\n- PowerShell VSCode extension\n- PowerShell Script Analyzer\n- others as needed\n\n## Conclusion\n\nSecurity is our top priority. We continue to improve the security of how we deliver software. Those improvements are not visible to the community, but they ensure that we are delivering secure software. We will continue to work on the community’s top issues and pull requests across our many projects, when possible. We are very thankful to our active community members!",
  "FeedUrl": "https://devblogs.microsoft.com/powershell/feed/",
  "Title": "PowerShell, OpenSSH, and DSC team investments for 2025",
  "FeedLevelAuthor": "PowerShell Team",
  "Link": "https://devblogs.microsoft.com/powershell/powershell-openssh-and-dsc-team-investments-for-2025/",
  "Tags": [
    "OpenSSH",
    "PowerShell"
  ],
  "OutputDir": "_news",
  "Author": "Steve Lee",
  "ProcessedDate": "2025-08-05 11:20:03",
  "Description": "Planned team investments for 2025 for PowerShell, OpenSSH, DSC, and related tooling.\n\nThe post [PowerShell, OpenSSH, and DSC team investments for 2025](https://devblogs.microsoft.com/powershell/powershell-openssh-and-dsc-team-investments-for-2025/) appeared first on [PowerShell Team](https://devblogs.microsoft.com/powershell).",
  "FeedName": "Microsoft PowerShell Blog"
}
