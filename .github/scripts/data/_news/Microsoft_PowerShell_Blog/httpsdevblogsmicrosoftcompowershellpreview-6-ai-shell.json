{
  "Description": "We're excited to share the latest preview release of AI Shell that includes new features and improvements based on your feedback.\n\nThe post [AI Shell Preview 6 Release!](https://devblogs.microsoft.com/powershell/preview-6-ai-shell/) appeared first on [PowerShell Team](https://devblogs.microsoft.com/powershell).",
  "FeedUrl": "https://devblogs.microsoft.com/powershell/feed/",
  "FeedLevelAuthor": "PowerShell Team",
  "ProcessedDate": "2025-08-05 18:41:11",
  "Author": "Steven Bucher",
  "FeedName": "Microsoft PowerShell Blog",
  "OutputDir": "_news",
  "Link": "https://devblogs.microsoft.com/powershell/preview-6-ai-shell/",
  "PubDate": "2025-08-05T18:40:38+00:00",
  "EnhancedContent": "# AI Shell Preview 6 is here!\n\nWe are super excited to announce the latest preview release of AI Shell. This release focuses on enhancing the user experience with new features, improved error handling, and better integration with Model Context Protocol (MCP) tools.\n\n## What’s new at a glance\n\n- MCP client integration\n- Built-in tools\n- `Resolve-Error`\ncommand improvements\n- Aliases and flows for staying in your terminal\n\n## MCP Integration\n\nAI Shell now acts as an MCP client, which allows you to add any MCP server to your AI Shell experience. Connecting to an MCP server massively improves the capability of your AI Shell giving you the tools that provide more relevant data or carry out actions!\n\n![AI Shell MCP Client](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/AISHMCPDemo.gif)\n\n### Adding MCP Servers\n\nTo add an MCP server, create an `mcp.json` file in `$HOME\\.aish\\` folder. The following example shows two MCP servers: `everything` and `filesystem` . You can add any MCP servers you want.\n\n```json { \"servers\": { \"everything\":{ \"type\":\"stdio\", \"command\":\"npx\", \"args\":[\"-y\", \"@modelcontextprotocol/server-everything\"] }, \"filesystem\": { \"type\": \"stdio\", \"command\": \"npx\", \"args\": [ \"-y\", \"@modelcontextprotocol/server-filesystem\", \"C:/Users/username/\" ] } } } ```\n\nIf it’s a remote MCP server, change the type to `https` . You know that you have successfully added an MCP server when you see it in the AI Shell UI. You can confirm that it’s running by checking the status of the server through the `/mcp` command. Using `/mcp` also lists each MCP Server and the tools available.\n\n![Screenshot of MCP servers registered in AI Shell](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/mcpui.jpeg)\n\n**NOTE**\n\nYou must have `Node.js` or `uv` installed to use MCP servers that use those command lines tools.\n\n### Standalone experience with AI Shell and MCP Servers\n\nMCP servers enhance your standalone experience with AI Shell, allowing your command line to use MCP servers and AI to perform tasks. For example, [`@simonb97/server-win-cli`](https://github.com/SimonB97/win-cli-mcp-server?tab=readme-ov-file) is an MCP server that allows you to run commands on your Windows machine, whether it be PowerShell, CMD, Git Bash, or any configured shell you use! It also provides configuration settings to define which commands and operations are allowed to run.\n\n**CAUTION**\n\nPlease note this is a community MCP server and not an official Microsoft MCP Server. We encourage you to do your own research and testing before using it.\n\n![AI Shell with MCP Server](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/standaloneMCPDemo.gif)\n\nAdditional MCP servers:\n\n- [DesktopCommander](https://github.com/wonderwhy-er/DesktopCommanderMCP)\n- [Other community MCP Servers](https://mcpservers.org/)\n\n## Built-in Tools for AI Shell\n\nThis release introduces built-in tools that are now accessible to agents within AI Shell. These commands are similar to MCP Server tools, but are exclusive to the AI Shell experience. These tools are designed to enhance the AI Shell experience by providing context-aware capabilities and automation features. They can be used in conjunction with the MCP servers to create a powerful AI-driven shell environment.\n\n| Tool Name | Description | | --- | --- | | `get_working_directory` | Get the current working directory of the connected PowerShell session, including the provider name (e.g., `FileSystem`<br>, `Certificate`<br>) and the path (e.g., `C:\\\\`<br>, `cert:\\\\`<br>). | | `get_command_history` | Get up to 5 of the most recent commands executed in the connected PowerShell session. | | `get_terminal_content` | Get all output currently displayed in the terminal window of the connected PowerShell session. | | `get_environment_variables` | Get environment variables and their values from the connected PowerShell session. Values of potentially sensitive variables are redacted. | | `copy_text_to_clipboard` | Copy the provided text or code to the system clipboard, making it available for pasting elsewhere. | | `post_code_to_terminal` | Insert code into the prompt of the connected PowerShell session without executing it. The user can review and choose to run it manually by pressing Enter. | | `run_command_in_terminal` | This tool allows you to execute shell commands in a persistent PowerShell session, preserving environment variables, working directory, and other context across multiple commands. | | `get_command_output` | Get the output of a command previously started with `run_command_in_terminal`<br>. |\n\n**Note**\n\nThe built-in tools rely on the side-car experience with a connected PowerShell session and provide enhanced context awareness and automation capabilities.\n\nHere is a simple demo showing how you can have AI Shell run commands on your behalf using the `run_command_in_terminal` tool:\n\n![Run command in terminal tool](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/openai-agent-1.gif)\n\nThis example shows how additional context is provided to AI Shell to improve results:\n\n![Getting more context with built-in tools](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/openai-agent-2.gif)\n\nYou can also use the `get_terminal_content` tool to get the content from the connected terminal and provide it to AI Shell to help it understand what you are trying to do:\n\n![Getting content from the screen ran before AI Shell starts to get assistance](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/openai-agent-3.gif)\n\n## Resolve-Error Command Improvements\n\nPreviously the `Resolve-Error` command was only able to run after an error occurred in the previous command. Now, `Resolve-Error` identifies which command the user wants to troubleshoot:\n\n- If the last error’s command matches the most recent command in history, it’s assumed to be the one\nthe user is interested in.\n- If the last error’s command isn’t the most recent and `$LastErrorCode`\nis null or zero, the error likely comes from an earlier command, not the very last one.\n- If `$LastErrorCode`\nis non-zero and `$?` is false, the last command was a failing native command.\n- If `$LastErrorCode`\nis non-zero but `$?` is true, it’s unclear which command or failure the user is focused on, so the agent analyzes the terminal content to determine the relevant context.\n\nThis logic allows AI Shell to better understand what the error the user is trying to resolve is rather than requiring you to ask for AI’s help immediately after an error occurs.\n\n## Staying in your shell\n\nThe `Invoke-AIShell` and `Resolve-Error` commands allow you to stay in your working terminal to interact with the AI Shell agent. To learn more about the parameters added, see the [previous blog post](https://devblogs.microsoft.com/powershell/preview-4-ai-shell/) that details these features. For your convenience, these commands have aliases that make them quicker to use.\n\n| Command Name | Alias | | --- | --- | | `Invoke-AIShell` | `askai` | | `Resolve-Error` | `fixit` |\n\n![Fixing an error and utilizing fixit and askai commands](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/08/openai-agent-4.gif)\n\n## Conclusion\n\nWe hope that these enhancements make your experience with AI Shell more powerful! We are always looking for feedback and suggestions, so please submit issues or feature requests in our [GitHub repository](https://github.com/PowerShell/AIShell).\n\nThank you so much!\n\nAI Shell Team\n\nSteven Bucher & Dongbo Wang",
  "Tags": [
    "AI",
    "AI Shell",
    "Azure OpenAI",
    "Copilot in Azure",
    "PowerShell"
  ],
  "Title": "AI Shell Preview 6 Release!"
}
