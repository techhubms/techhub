{
  "PubDate": "2025-02-28T20:49:30+00:00",
  "EnhancedContent": "## Whatâ€™s New in AI Shell Preview 2?\n\nWeâ€™re excited to announce the **Preview 2 release** of **AI Shell**! With this update you can expect the following improvements:\n\n- Improved support for Azure PowerShell\n- Broader support for third party OpenAI-compatible models\n- Refactored code sample for creating an Ollama agent\n- Improved native command error handling\n- An easier way to deploy Azure OpenAI instances\n- Additional bug fixes\n\n**AI Shell Preview 3 is released!**\n\nPreview 3 has been released just two weeks after Preview 2 due to a backend issue affecting the Azure Agent. This update addresses the problem, ensuring more reliable interactions with Azure services.\n\n## Improved support for Azure PowerShell\n\nThe improvements to the `azure` agent are designed to reduce friction when managing Azure resources with the Azure CLI and PowerShell. The agent now offers deeper integration with Azure PowerShell, making it easier to use AI-created Azure PowerShell scripts.\n\n- The `/replace`\ncommand now supports Azure PowerShell. The agent walks you through replacement of parameter values in generated Azure PowerShell responses.\n- The agent now support Azure PowerShell authentication using the `Connect-AzAccount`\ncommand. Previously, the agent only supported Azure CLI authentication.\n\n## Broader support for third party OpenAI-compatibles models\n\nWith this release, the `openai-gpt` agent extends support to third party models that follow the OpenAI API specifications, allowing for a more flexible AI experience. Many of these models are open source tools for running SLMs and LLMs locally. The `openai-gpt` agent nows supports the following additional models:\n\n- [**Ollama**](https://ollama.com/blog/openai-compatibility)\n- [**LM Studio**](https://lmstudio.ai/docs/api/openai-api)\n- [**Deepseek**](https://api-docs.deepseek.com/)\n- [**LocalAI**](https://localai.io/)\n- [**Google Gemini**](https://ai.google.dev/gemini-api/docs/openai)\n- [**Grok**](https://docs.x.ai/docs/overview#migrating-from-another-llm-provider)\n\nTo use these models, you only need to configure the `endpoint` , `key` and `model name` in the agent config file. The following `openai.agents.config` file contains example configurations for two of the new AI providers.\n\n```json { \"GPTs\": [ { \"Name\": \"gpt-deepseek\", \"Description\": \"A GPT instance using DeepSeek v3.\", \"Endpoint\": \"https://api.deepseek.com\", \"ModelName\": \"deepseek-chat\", \"Key\": \"<your-deepseek-api-key>\", \"SystemPrompt\": \"You are a helpful assistant.\" },\n\n{ \"Name\": \"gpt-gemini\", \"Description\": \"A GPT instance using Google Gemini.\", \"Endpoint\": \"https://generativelanguage.googleapis.com/v1beta/openai/\", \"ModelName\": \"gemini-1.5-flash\", \"Key\": \"<your-gemini-api-key>\", \"SystemPrompt\": \"You are a helpful assistant.\" } ]\n\n\"Active\": \"gpt-deepseek\" } ```\n\n## Improved native command error handling\n\n`Resolve-Error` (alias `fixit` ) now uses the screen scraper API on Windows to capture the error output of native commands. This allows AI Shell to provide better resolution of error messages that come from native commands rather than from PowerShell.\n\n![Resolve Error demo](https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2025/02/native-command-output.png)\n\n## Ollama agent improvements\n\nWe refactored the example code for the agent `ollama` . This example provides the basic structure that you can use to build out your own agent. The refactored code now uses the **OllamaSharp** library and add the ability to configure the agent using settings files.\n\nThe `ollama` agent isnâ€™t shipped with AI Shell but you can build it yourself. See the instructions in the [locally build the repo](https://github.com/PowerShell/AIShell?tab=readme-ov-file#locally-building-ai-shell) section of the README. Thank you `@kborowinski` on GitHub for this contribution!\n\n## Tools for easy deployment of Azure OpenAI instances\n\nWe added a Bicep template that deploys an Azure OpenAI instance in seconds. Using the template is much faster than manually creating an instance in the Azure portal. This template includes documentation with step by step instructions.\n\n- [Bicep template](https://raw.githubusercontent.com/PowerShell/AIShell/refs/heads/main/docs/development/AzureOAIDeployment/main.bicep)\n- [Documentation](https://learn.microsoft.com/powershell/utility-modules/aishell/developer/deploy-azure-openai?view=ps-modules)\n\n## Additional bug fixes\n\nThere are many bug fixes in this release. For a complete list of changes, see the [changelog](https://github.com/PowerShell/AIShell/releases/tag/v1.0.0-preview.2).\n\n## How to get AI Shell Preview 2\n\nUse the following command in PowerShell 7 to install or upgrade AI Shell:\n\n```powershell Invoke-Expression \"& { $(Invoke-RestMethod 'https://aka.ms/install-aishell.ps1') }\" ```\n\nFor more information, see [Install AI Shell](https://learn.microsoft.com/powershell/utility-modules/aishell/install-aishell).\n\n## Automatically start AI Shell\n\nOne piece of feedback we often hear is: *How can I have AI Shell automatically start up when I openWindows Terminal?*\n\nItâ€™s easy! Just add `Start-AIShell` to your PowerShell profile script. Hereâ€™s how:\n\n1. Open your profile in the text editor of your choice.\n2. Add the following code to the end of the file:\n\n```powershell if ($PSVersionTable.PSVersion -ge ([version]'7.4.6') -and (Get-Process -Id $pid).Parent.Name -eq 'WindowsTerminal') { Start-AIShell } ```\n\nNow, AI Shell will automatically start when you open Windows Terminal.\n\n**NOTE**\n\nAI Shell only works with Windows Terminal and requires PowerShell 7.4.6 or higher.\n\nIf you need help creating a profile scripts, see [about_Profiles](https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_profiles#how-to-create-a-profile).\n\n## Try it out and share your feedback\n\nWe would love to hear your feedback as we continue improving AI Shell. Join the discussion in our [GitHub Issues](https://github.com/PowerShell/AIShell/issues) and let us know how AI Shell is helping your automation workflows.\n\nStay tuned for future updates as we bring more AI-powered capabilities to your CLI experience. ðŸš€\n\nThanks!\n\nSteven Bucher and Dongbo Wang\n\nAI Shell Team",
  "FeedUrl": "https://devblogs.microsoft.com/powershell/feed/",
  "Title": "Announcing AI Shell Preview 2",
  "FeedLevelAuthor": "PowerShell Team",
  "Link": "https://devblogs.microsoft.com/powershell/ai-shell-preview-2/",
  "Tags": [
    "AI",
    "AI Shell",
    "Azure OpenAI",
    "Copilot in Azure",
    "PowerShell"
  ],
  "OutputDir": "_news",
  "Author": "Steven Bucher",
  "ProcessedDate": "2025-08-05 11:20:03",
  "Description": "We are pleased to share a new preview release of AI Shell!\n\nThe post [Announcing AI Shell Preview 2](https://devblogs.microsoft.com/powershell/ai-shell-preview-2/) appeared first on [PowerShell Team](https://devblogs.microsoft.com/powershell).",
  "FeedName": "Microsoft PowerShell Blog"
}
