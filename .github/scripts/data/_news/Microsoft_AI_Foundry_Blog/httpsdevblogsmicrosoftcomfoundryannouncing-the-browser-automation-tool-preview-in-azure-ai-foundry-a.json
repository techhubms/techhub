{
  "Link": "https://devblogs.microsoft.com/foundry/announcing-the-browser-automation-tool-preview-in-azure-ai-foundry-agent-service/",
  "ProcessedDate": "2025-08-24 16:29:13",
  "PubDate": "2025-08-06T15:00:56+00:00",
  "FeedLevelAuthor": "Azure AI Foundry Blog",
  "Title": "Announcing the Browser Automation Tool (Preview) in Azure AI Foundry Agent Service",
  "FeedUrl": "https://devblogs.microsoft.com/foundry/feed/",
  "EnhancedContent": "## Overview\n\nToday, we are excited to announce the **Browser Automation Tool** **(Preview)** as the newest action tool in Azure AI Foundry Agent Service through API and SDK. This tool enables developers to build agents capable of performing real-world browser tasks—such as searching, navigating, filling forms, booking appointments, and more—through natural language prompts. Powered by [Playwright Workspaces](https://aka.ms/pww/docs/overview), Browser Automation Tool brings isolated, cloud-hosted browser automation to your AI agents, supporting multi-turn interactions that mimic a real user’s browsing experience.\n\n[https://devblogs.microsoft.com/foundry/wp-content/uploads/sites/89/2025/08/Foundry-Agent-Browser-Use-Tool.mp4](https://devblogs.microsoft.com/foundry/wp-content/uploads/sites/89/2025/08/Foundry-Agent-Browser-Use-Tool.mp4)\n\n## Key Benefits\n\n- **Natural Language to Automation:** Allow users to accomplish browser-based workflows simply by describing their goals in plain language.\n\n- **Realistic Web Interactions:** Automate complex web UIs, including form fills, filters, reservations, and multi-step processes, just as a human user would.\n\n- **Isolated Execution:** Each session runs in a sandboxed browser hosted within your own Azure subscription using Playwright Workspaces—no need to manage VMs or browsers manually.\n\n- **Multi-turn Conversations:** Supports iterative, conversational automation. Users can refine or correct their request in real time.\n\n- **Modern, Reliable Automation:** Leveraging “down-parsing,” the tool reads the page structure (DOM/accessibility tree), allowing the agent to reason about web elements by their roles and labels—not just pixels.\n\n- **Flexible Use Cases:** Automate bookings, product research, form submissions, customer support tasks, and more.\n\n## Example Use Cases\n\n- **Booking & Reservations:** Automate class sign-ups, table bookings, or appointment scheduling by navigating complex forms.\n\n- **Product Discovery:** Search and summarize ecommerce listings or reviews based on user criteria.\n\n- **Web Form Interactions:** Submit documents, or update profile information automatically.\n\n- **Customer Support Tasks:** Retrieve ticket updates, check account status, or navigate to specific customer information across web apps.\n\n## How It Works\n\n1. **User Query:** The user sends a natural language request to an agent (e.g., “Show me all available yoga classes this week from url xxxx”).\n2. **Session Provisioning:** When an agent receives a request to perform browser automation, Azure AI Foundry Agent Service connects to your Playwright Workspaces (which you have already provisioned in your Azure subscription). The Playwright Workspaces service then launches an isolated, sandboxed browser session to execute the requested actions. All browser automation runs within your Azure boundary, managed by Playwright Workspaces.\n3. **Agent Reasoning:** The model analyzes the web page by parsing its DOM structure, not just images, and determines the actions needed (such as clicks, form fills, navigation).\n4. **Action Execution:** The Browser Automation Tool performs each action inside the sandboxed session, capturing the updated state after every step.\n5. **Multi-turn Loop:** The agent receives feedback and iterates—continuing to execute actions and update the user until the workflow is complete or the user stops the session.\n\nThis approach combines the power of LLMs with reliable browser automation, offering much higher resilience and intelligence than pixel-based “mouse click” bots.\n\n**Security & Responsible Use**\n\n**WARNING:**\n\nBrowser Automation Tool comes with significant security risks. Both errors in judgment by the AI and the presence of malicious or confusing instructions on web pages which the AI encounters may cause it to execute commands you or others do not intend, which could compromise the security of your or other users’ browsers, computers, and any accounts to which the browser or AI has access, including personal, financial, or enterprise systems. By using the Browser Automation Tool, you are acknowledging that you bear responsibility and liability for any use of it and of any resulting agents you create with it, including with respect to any other users to whom you make Browser Automation Tool functionality available, including through resulting agents.\n\n**We strongly recommend using the Browser Automation Tool on low-privilege virtual machines with no access to sensitive data or critical resources.**\n\nSee the [Transparency Note](https://learn.microsoft.com/en-us/azure/ai-foundry/responsible-ai/agents/transparency-note#enabling-autonomous-actions-with-or-without-human-input-through-action-tools) for more guidance.\n\n### Code Samples\n\n```py import os\n\nfrom azure.identity import DefaultAzureCredential\n\nfrom azure.ai.agents import AgentsClient\n\nfrom azure.ai.agents.models import MessageRole\n\nfrom azure.ai.projects import AIProjectClient\n\n# Create a project client from a project endpoint, copied from your AI Foundry project.\n\n# Example: project_endpoint = \"https://<your-ai-services-resource-name>.services.ai.azure.com/api/projects/<your-project-name>\"\nproject_endpoint = “YOUT_PROJECT_ENDPOINT” project_client = AIProjectClient(\n\nendpoint=project_endpoint,\n\ncredential=DefaultAzureCredential()\n\n) playwright_connection = project_client.connections.get(\n\nname=\"YOUR_PLAYWRIGHT_CONNECTION_NAME\"\n\n)\n\nprint(playwright_connection.id) with project_client:\n\nagent = project_client.agents.create_agent(\n\nmodel=\"YOUR_MODEL_NAME\",\n\nname=\"my-agent\",\n\ninstructions=\"use the tool to respond\",\n\ntools=[{\n\n\"type\": \"browser_automation\",\n\n\"browser_automation\": {\n\n\"connection\": {\n\n\"id\": playwright_connection.id,\n\n}\n\n}\n\n}],\n\n) print(f\"Created agent, ID: {agent.id}\") thread = project_client.agents.threads.create()\n\nprint(f\"Created thread and run, ID: {thread.id}\")\n# Create message to thread\n\nmessage = project_client.agents.messages.create(\n\nthread_id=thread.id,\n\nrole=\"user\",\n\ncontent=\"YOUR_QUERY_TO_THE_AGENT\")\n\nprint(f\"Created message: {message['id']}\")\n# Create and process an Agent run in thread with tools\n\nrun = project_client.agents.runs.create_and_process(\n\nthread_id=thread.id,\n\nagent_id=agent.id,\n\n)\n\nprint(f\"Run created, ID: {run.id}\")\n\nprint(f\"Run finished with status: {run.status}\") if run.status == \"failed\":\n\nprint(f\"Run failed: {run.last_error}\") run_steps = project_client.agents.run_steps.list(thread_id=thread.id, run_id=run.id)\n\nfor step in run_steps:\n\nprint(step)\n\nprint(f\"Step {step['id']} status: {step['status']}\")\n# Check if there are tool calls in the step details\n\nstep_details = step.get(\"step_details\", {})\n\ntool_calls = step_details.get(\"tool_calls\", []) if tool_calls:\n\nprint(\" Tool calls:\")\n\nfor call in tool_calls:\n\nprint(f\" Tool Call ID: {call.get('id')}\")\n\nprint(f\" Type: {call.get('type')}\") function_details = call.get(\"function\", {})\n\nif function_details:\n\nprint(f\" Function name: {function_details.get('name')}\")\n\nprint() # add an extra newline between steps\n# Delete the Agent when done\n\nproject_client.agents.delete_agent(agent.id)\n\nprint(\"Deleted agent\")\n# Fetch and log all messages\n\nresponse_message = project_client.agents.messages.get_last_message_by_role(thread_id=thread.id, role=MessageRole.AGENT)\n\nif response_message:\n\nfor text_message in response_message.text_messages:\n\nprint(f\"Agent response: {text_message.text.value}\")\n\nfor annotation in response_message.url_citation_annotations:\n\nprint(f\"URL Citation: [{annotation.url_citation.title}]({annotation.url_citation.url})\")\n\n# </create run>\n```\n\n## Getting Started\n\n**Prerequisites**\n\n- Azure subscription with permissions to create Playwright Workspaces and Azure AI Foundry resources\n\n- Python 3.8+ (or use your preferred SDK)\n\n**Step-by-Step Setup**\n\n1. **Provision a Playwright Workspace**\n1. [Create a Playwright Workspace Resource](https://aka.ms/pww/docs/manage-workspaces)\n2. [Generate an Access Token](https://aka.ms/pww/docs/manage-access-tokens)\n3. Note your Workspace Region Endpoint\n2. **Configure Permissions**\n1. 1. Assign your Project Identity the “Contributor” role on the Playwright Workspace, or set a custom role.\n2. [Role Assignment Guide](https://aka.ms/pww/docs/manage-workspace-access)\n3. **Connect Playwright Workspace to Foundry**\n1. In the Azure AI Foundry portal, open your AI Project.\n2. Go to *Management Center* → *Connected Resources*.\n3. Create a new connection:\n1. Type: *Serverless Model*\n2. Target URI: Playwright Workspace Region Endpoint (e.g., wss://&lt;region&gt;.api.playwright.microsoft.com/playwrightworkspaces/&lt;workspaceId&gt;/browsers)\n3. Key: Playwright Access Token\n4. **Create Your Agent**\n1. Use the connection ID from the previous step when configuring your Browser Automation Tool in the agent code.\n\n## Learn More & Get Started\n\n- Get started with [Azure AI Foundry](https://ai.azure.com/)and jump directly into [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.vscode-ai-foundry).\n\n- Download the [Azure AI Foundry SDK](https://aka.ms/aifoundrysdk).\n\n- Read the [documentation](https://learn.microsoft.com/en-us/azure/ai-foundry/agents/how-to/tools/browser-automation) to learn more about the feature.\n\n- Take the [Azure AI Foundry Learn courses](https://aka.ms/CreateAgenticAISolutions).\n\n- Keep the conversation going in [GitHub](https://aka.ms/azureaifoundry/forum)and [Discord](https://aka.ms/azureaifoundry/discord).\n\nWe look forward to seeing the innovative automation experiences you build!",
  "Tags": [
    "AIAgent",
    "Azure AI Foundry",
    "What's New"
  ],
  "Description": "Overview Today, we are excited to announce the Browser Automation Tool (Preview) as the newest action tool in Azure AI Foundry Agent Service through API and SDK. This tool enables developers to build agents capable of performing real-world browser tasks—such as searching, navigating, filling forms, booking appointments, and more—through natural language prompts. Powered by Playwright […]\n\nThe post [Announcing the Browser Automation Tool (Preview) in Azure AI Foundry Agent Service](https://devblogs.microsoft.com/foundry/announcing-the-browser-automation-tool-preview-in-azure-ai-foundry-agent-service/) appeared first on [Azure AI Foundry Blog](https://devblogs.microsoft.com/foundry).",
  "OutputDir": "_news",
  "FeedName": "Microsoft AI Foundry Blog",
  "Author": "Linda Li"
}
