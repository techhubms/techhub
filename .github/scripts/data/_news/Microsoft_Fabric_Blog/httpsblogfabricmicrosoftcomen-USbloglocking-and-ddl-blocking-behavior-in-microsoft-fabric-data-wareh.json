{
  "Author": "Microsoft Fabric Blog",
  "OutputDir": "_news",
  "Title": "Understanding Locking and DDL Blocking in Microsoft Fabric Data Warehouse",
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "Description": "As adoption of Microsoft Fabric Data Warehouse accelerates, understanding its concurrency model becomes essential for developers, architects, and data engineers. In this post, we’ll explore how Fabric DW handles locking, the nuances of DDL blocking, and how these behaviors impact your workloads. Locking Behavior in Fabric Data Warehouse Fabric DW supports ACID-compliant transactions using standard …\n\n[Continue reading “Understanding Locking and DDL Blocking in Microsoft Fabric Data Warehouse”](https://blog.fabric.microsoft.com/en-us/blog/locking-and-ddl-blocking-behavior-in-microsoft-fabric-data-warehouse-what-you-need-to-know/)",
  "FeedLevelAuthor": "Microsoft Fabric Blog",
  "Tags": [],
  "ProcessedDate": "2025-10-08 15:03:05",
  "PubDate": "2025-10-08T07:03:26+00:00",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/locking-and-ddl-blocking-behavior-in-microsoft-fabric-data-warehouse-what-you-need-to-know/",
  "EnhancedContent": "As adoption of Microsoft Fabric Data Warehouse accelerates, understanding its concurrency model becomes essential for developers, architects, and data engineers. In this post, we’ll explore how Fabric DW handles locking, the nuances of DDL blocking, and how these behaviors impact your workloads.\n\n## Locking Behavior in Fabric Data Warehouse\n\nFabric DW supports ACID-compliant transactions using standard `T-SQL (BEGIN TRANSACTION, COMMIT, ROLLBACK) ` and enforces snapshot isolation across all operations. Locks in Fabric Data Warehouse are used to manage concurrent access to metadata and data, especially during DDL operations. Here’s how locking works:\n\n#### Table-Level Lock Modes by Operation\n\n| **Statement type** | **Lock taken** | | --- | --- | | SELECT | Schema-Stability (Sch-S) | | INSERT | Intent Exclusive (IX) | | DELETE | Intent Exclusive (IX) | | UPDATE | Intent Exclusive (IX) | | MERGE | Intent Exclusive (IX) | | COPY INTO | Intent Exclusive (IX) | | CREATE TABLE | Schema-Modification (Sch-M) | | ALTER TABLE | Schema-Modification (Sch-M) | | DROP TABLE | Schema-Modification (Sch-M) | | TRUNCATE | Schema-Modification (Sch-M) | | CTAS | Schema-Modification (Sch-M) | | CREATE TABLE AS CLONE | Schema-Modification (Sch-M) |\n\nFabric DW uses table-level locking, regardless of whether a query touches one row or many. This simplifies the engine’s concurrency model but introduces some trade-offs:\n\n**Pros**: Predictable behavior, easier to reason about.\n\n**Cons**: Can lead to blocking in high-concurrency scenarios, specifically when DDLs are included.\n\n## DDL Blocking Behavior\n\nLong-running transactions that have included at least one DDL operation can block concurrent transactions. This is the current design of Fabric DW. This locking behavior aligns with SqlDb behavior.\n\n- DDL operations acquire Sch-M locks on target table for the duration of the transaction.\n- These locks prevent concurrent DML operations (e.g., `SELECT, INSERT, UPDATE, DELETE`\n) targeting the same table from proceeding.\n- DDL operations also acquire an X lock on rows in sys.tables and sys.objects associated with the target table of the DDL. This will block concurrent `SELECT `\nstatements on sys.tables and sys.objects.\n- Since Sch-M locks on tables and X locks on `sys.tables`\nrows are held for the duration of the transaction, they can be especially long-lived if the DDL is done in an explicit user transaction (i.e. inside `BEGIN TRAN` ).\n\nThis behavior is particularly impactful in scenarios involving:\n\n- Schema evolution during active workloads.\n- Automated schema updates or migrations.\n\nBlocking and Conflicts can impact performance, reliability, and user experience, especially in high-concurrency environments. Understanding how they work and how to mitigate them is essential for building resilient data pipelines and applications in Fabric DW.\n\n## Best Practices for Developers\n\n- Avoid long-running transactions that hold locks for extended periods.\n- Schedule DDL operations during maintenance windows to minimize blocking.\n- Avoid placing DDL statements inside explicit user transactions (e.g., `BEGIN TRAN`\n) as this can cause blocking issues for concurrent DML operations and `SELECT ` queries, both on user tables and system catalog views like `sys.tables` . To monitor and troubleshoot potential lock conflicts, use `sys.dm_tran_locks` .\n\n## What’s Next\n\nREADPAST hint to mitigate DDL blocking on metadata queries – This enhancement will introduce support for the READPAST table hint when querying `sys.tables` This allows metadata queries to skip over rows that are currently locked with an exclusive (X) lock—typically those associated with tables undergoing DDL operations within active transactions. As a result, queries against `sys.tables` will no longer be blocked entirely by DDL activity and `sys.tables ` will instead return all other available rows, improving system responsiveness and observability during schema changes.",
  "FeedName": "Microsoft Fabric Blog"
}
