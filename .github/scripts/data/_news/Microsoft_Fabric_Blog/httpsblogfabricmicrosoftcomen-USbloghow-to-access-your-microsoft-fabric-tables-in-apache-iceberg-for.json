{
  "PubDate": "2025-08-11T09:00:00+00:00",
  "Author": "Microsoft Fabric Blog",
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "OutputDir": "_news",
  "ProcessedDate": "2025-08-11 16:04:35",
  "FeedLevelAuthor": "Microsoft Fabric Blog",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/how-to-access-your-microsoft-fabric-tables-in-apache-iceberg-format/",
  "Description": "Co-authored with Kevin Liu, Apache Iceberg Committer and Principal Engineer at Microsoft. Microsoft Fabric is a unified SaaS data and analytics platform designed for the era of AI. All workloads in Microsoft Fabric use Delta Lake as the standard, open-source table format. With Microsoft OneLake, Fabric’s unified SaaS data lake, customers can unify their data …\n\n[Continue reading “How Microsoft OneLake seamlessly provides Apache Iceberg support for all Fabric Data”](https://blog.fabric.microsoft.com/en-us/blog/how-to-access-your-microsoft-fabric-tables-in-apache-iceberg-format/)",
  "EnhancedContent": "Co-authored with [Kevin Liu](https://www.linkedin.com/in/kevinjqliu/), Apache Iceberg Committer and Principal Engineer at Microsoft.\n\nMicrosoft Fabric is a unified SaaS data and analytics platform designed for the era of AI. All workloads in Microsoft Fabric use Delta Lake as the standard, open-source table format. With Microsoft OneLake, Fabric’s unified SaaS data lake, customers can unify their data estate across multiple cloud and on-prem systems.\n\nWe [recently announced](https://blog.fabric.microsoft.com/blog/new-in-onelake-access-your-delta-lake-tables-as-iceberg-automatically/#:~:text=We%E2%80%99re%20thrilled%20to%20announce%20an%20exciting%20new%20Preview,no%20need%20for%20migration%2C%20copying%2C%20or%20manual%20conversion) that OneLake can now transparently serve Delta Lake tables as Apache Iceberg tables. This post covers the details of how we built this feature and enables seamless interoperability across engines and ecosystems.\n\n[Try out this feature today](https://learn.microsoft.com/fabric/onelake/onelake-iceberg-tables#virtualize-delta-lake-tables-as-iceberg)!\n\nGet started:\n1. Create or identify a Delta Lake table in OneLake.\n2. Use any Iceberg-compatible engine (e.g., Spark, Trino, Snowflake) to query the table.\n3. OneLake will automatically serve the table in Iceberg format – no configuration needed.\n\n## Why This Matters\n\nOrganizations often rely on diverse engines and tools that favor different open table formats. Delta Lake is a popular choice for Spark-based pipelines and Microsoft Fabric engines, while Iceberg is increasingly adopted by query engines like Trino, Dremio, and Snowflake.\n\nWith OneLake, there’s no need to choose one format over the other. OneLake empowers openness and interoperability by automatically translating metadata between Delta and Iceberg formats. This means your tables are seamlessly available in both ecosystems—without duplication or compromise. Whether your team prefers Delta or Iceberg, OneLake ensures compatibility, flexibility, and freedom of choice.\n\nBy [enabling on-the-fly conversion from Delta to Iceberg](https://blog.fabric.microsoft.com/blog/new-in-onelake-access-your-delta-lake-tables-as-iceberg-automatically/), OneLake eliminates the need for data duplication or format-specific pipelines.\n\nYou can now: – Read Delta tables as Iceberg without rewriting or copying data. – Use Iceberg-native tools on top of your existing Delta Lake datasets. – Simplify governance and access control with a single source of truth.\n\n# Example\n\nHere we have a table in Fabric Lakehouse stored in the Delta format.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-65.png)Table in Fabric Lakehouse\n\nSelect ‘View files’ on table to see the table’s metadata.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/08/image-1.png)View files belonging to a table in Fabric Lakehouse\n\nBoth *\\_delta\\_log* and *metadata* directories should appear.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/08/image-2.png)Metadata folders for a table in Fabric Lakehouse\n\nSelect the metadata directory to view the Iceberg files.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/08/image-3.png)Iceberg metadata for table in Lakehouse\n\nNavigate to Snowflake and create an external volume pointing to the exampled Lakehouse.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-73-1024x160.png)Create external volume in Snowflake\n\nNext, we create an Iceberg catalog.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-76-1024x63.png)Create Iceberg catalog in Snowflake\n\nCreate a table that uses the Iceberg catalog and external volume, specifying the Iceberg metadata file path in OneLake.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-74-1024x135.png)Create table in Snowflake\n\nThat’s it – now you can query the table!\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-75-1024x316.png)Query table in Snowflake\n\n## How It Works\n\nOneLake uses a feature called **table format virtualization** to surface tables as both Delta and Iceberg formats. When an Iceberg-compatible engine reads from a OneLake table that is natively in the Delta format, OneLake dynamically generates the necessary Iceberg metadata files. This allows the engine to interpret the table as if it were natively an Iceberg table.\n\nBehind the scenes, this feature utilizes [**Apache XTable**](https://xtable.apache.org/) for table format metadata conversion. XTable provides cross-table omni-directional interop between the open table formats. We have also enhanced XTable functionality – for example, by converting Delta deletion vectors into Iceberg positional delete files. We look forward to contributing these features upstream to the open-source community.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-69.png)Virtualized Iceberg metadata for a table in Fabric\n\n- The original Delta table resides in OneLake or an external location (e.g., ADLS, S3).\n- When queried via an Iceberg engine, OneLake serves Iceberg metadata derived from the metadata directory.\n\nHere’s the workflow for a sample request.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/07/image-70.png)Reading Iceberg metadata for a table in Fabric\n\nThe source metadata remains in its original Delta structure (in the *\\_delta\\_log* directory). OneLake’s virtualization layer intercepts read requests on the *metadata* directory and determines that Iceberg-compatible metadata is needed. It then generates Iceberg-compliant metadata on demand, enabling engines to interact with the table as if it were natively Iceberg, without any physical data movement. This approach is designed to be transparent to the table owner and does not modify the original storage location. It maintains consistency with the source table and scales efficiently by producing metadata on demand, when requested by a client.\n\n## Future Work\n\nWe’re actively expanding support for additional data types and advanced features across both Delta Lake and Iceberg formats. A key focus is ensuring compatibility with the upcoming Iceberg V3 specification. These enhancements will further improve OneLake’s cross-format interoperability and simplify analytics across engines.\n\n## Learn More\n\n- [New in OneLake: Access your Delta Lake tables as Apache Iceberg automatically](https://blog.fabric.microsoft.com/blog/new-in-onelake-access-your-delta-lake-tables-as-iceberg-automatically/)\n- [Store and use your Iceberg data in OneLake](https://support.fabric.microsoft.com/blog/store-and-use-your-snowflake-iceberg-data-in-onelake/)\n- [Microsoft Fabric documentation](https://learn.microsoft.com/fabric)",
  "Tags": [],
  "Title": "How Microsoft OneLake seamlessly provides Apache Iceberg support for all Fabric Data",
  "FeedName": "Microsoft Fabric Blog"
}
