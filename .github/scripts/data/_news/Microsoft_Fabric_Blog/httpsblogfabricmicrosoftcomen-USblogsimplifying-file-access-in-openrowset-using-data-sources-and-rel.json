{
  "Description": "The introduction of data sources and relative paths in the OPENROWSET function unlocks a new level of simplicity and flexibility for querying files in your Lakehouse and beyond. By leveraging external data sources, you can write cleaner, more maintainable SQL queries and easily access data wherever it resides — making data engineering and analytics more …\n\n[Continue reading “Simplifying file access in OPENROWSET using data sources and relative paths (Preview)”](https://blog.fabric.microsoft.com/en-us/blog/simplifying-file-access-in-openrowset-using-data-sources-and-relative-paths-preview/)",
  "EnhancedContent": "The introduction of data sources and relative paths in the **OPENROWSET** function unlocks a new level of simplicity and flexibility for querying files in your Lakehouse and beyond. By leveraging external data sources, you can write cleaner, more maintainable SQL queries and easily access data wherever it resides — making data engineering and analytics more efficient than ever.\n\n# Access Lakehouse files via SQL Endpoint\n\nYou can use the **OPENROWSET** function in SQL analytical endpoints to access the files in your Lakehouse using the relative paths. Instead of referencing the files with long, absolute, GUID-based paths, you can simply specify the file path relative to the Lakehouse’s root folder.\n\nIn the following example, we can see how to query the Lakehouse file using the **OPENROWSET** function with a relative path in a T-SQL notebook:\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/09/image-91.png)OPENROWSET in T-SQL notebook\n\nThis notebook uses SQL endpoint for Lakehouse to retrieve the content of *sales.csv* file located in the *data/2025/09* folder relative to the root of your Lakehouse. Since the SQL endpoint is bound to its own Lakehouse, it can directly reference the files by relative location within the Lakehouse.\n\nThis not only makes your queries easier to read and maintain, but also allows you to avoid hardcoding absolute paths, which can be error-prone and cumbersome.\n\n## Cross-Lakehouse access made easy\n\nWhen you access the files in OneLake using the **OPENROWSET** function, you need to find the workspace id and lakehouse id of your source Lakehouse and [use them as part of the URI in the OPENROWSET function](https://blog.fabric.microsoft.com/blog/announcing-public-preview-onelake-as-a-source-for-copy-into-and-openrowset/). Use a GUID-based URI (with workspace and lakehouse ids), in every **OPENROWSET** and **COPY INTO** query to access the files in the Lakehouses.\n\nThe [external data sources](https://learn.microsoft.com/sql/t-sql/statements/create-external-data-source-transact-sql?view=fabric&amp;preserve-view=true) might slightly simplify this coding experience by enabling you to define GUID-based root URI once in an external data source, and reference it by name. For example, you create an external data source named **MyLakehouse** that points to a Lakehouse root path with a GUID using the following T-SQL statement:\n\n``` CREATE EXTERNAL DATA SOURCE MyLakehouse WITH ( LOCATION = 'https://onelake.dfs.fabric.microsoft.com/{wsid}/{lhid}' ); ```\n\nIn this statement, replace {wsid} and {lhid} with the specific workspace and Lakehouse identifiers that you can find in URI when you access the Lakehouse via browser:\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/09/image-92.png)Workspace and Lakehouse id can be found in URI\n\nOnce this external data source is defined, you can use it in your **OPENROWSET** queries with relative paths to reference other Lakehouse locations:\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/09/image-90-1024x516.png)Using a DATA\\_SOURCE to reference a relative path in a Lakehouse\n\nThis approach greatly simplifies data integration and analysis across multiple lakehouses since you can define the GUID-based root location once and access the files by referencing the Lakehouse by name instead of the full GUID-based path.\n\n## Referencing ADLS locations with Data Sources\n\nYou can also use external data sources to reference the root location of any external data source, such as remote Azure Data Lake Storage (ADLS) accounts. In the following example you can see how to create an external data source that references the root location of ADLS container:\n\n``` CREATE EXTERNAL DATA SOURCE MyAdls WITH ( LOCATION = 'abfss://{mycontainer}@{mystorage}.dfs.core.windows.net' ); ```\n\n``` Once the external data source is defined, you simply use the OPENROWSET function with a relative path to query files stored remotely: ```\n\n``` SELECT * FROM OPENROWSET( BULK '/Files/data/2025/0 9/sales.csv', DATA_SOURCE = 'MyAdls') ```\n\nThis means you can seamlessly integrate and analyze data from a variety of external locations using straightforward, readable SQL queries—no more dealing with unwieldy absolute URIs every time you reference a remote file.\n\n## Conclusion: Easier Queries, Greater Flexibility\n\nThese features are currently in preview as we continue to enhance the Fabric user interface, which will enable you to take even greater advantage of them. Try them out and let us know what you think in the comments.",
  "OutputDir": "_news",
  "FeedName": "Microsoft Fabric Blog",
  "Title": "Simplifying file access in OPENROWSET using data sources and relative paths (Preview)",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/simplifying-file-access-in-openrowset-using-data-sources-and-relative-paths-preview/",
  "PubDate": "2025-10-07T10:00:00+00:00",
  "Author": "Microsoft Fabric Blog",
  "ProcessedDate": "2025-10-07 17:02:56",
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "Tags": [],
  "FeedLevelAuthor": "Microsoft Fabric Blog"
}
