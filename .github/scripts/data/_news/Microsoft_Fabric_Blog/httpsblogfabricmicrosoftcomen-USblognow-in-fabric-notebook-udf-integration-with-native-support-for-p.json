{
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "EnhancedContent": "We’ve made a major enhancement to the Notebook Integration with Fabric User Data Functions (UDFs)—you can now use Pandas DataFrames and Series as input and output types, powered by native integration with Apache Arrow!\n\nThis enhancement brings higher performance, improved efficiency, and better scalability to your Fabric Notebooks—enabling seamless function reuse for large-scale data processing in Python, PySpark, Scala, and R.\n\n## Recap: Notebooks Integration with Fabric UDFs (Preview)\n\nAs part of our initial **preview**, we introduced the ability to:\n\n- Invoke shared UDFs directly from NotebookUtils.\n- Use IntelliSense/autocomplete to find and call functions more easily.\n- Explore function signatures and metadata using `display(myFunction.functionDetails)`\n.\n- Call UDFs in Python, PySpark, Scala, and R for streamlined, reusable logic across your notebooks.\n\nThis helped teams modularize logic, reduce redundancy, and improve productivity across collaborative data science and engineering projects.\n\n## What’s New: Pandas Support via Apache Arrow\n\nIn this update, Pandas DataFrames and Series are now supported as first-class input and output types for UDFs—enabled by deep integration with Apache Arrow, a highly efficient columnar memory format optimized for analytics workloads.\n\n### Benefits of the Arrow Integration:\n\n- **High-performance serialization**: Skip costly JSON encoding/decoding.\n- **Zero-copy data sharing**: Minimize overhead during UDF execution.\n- **Scalable**: Work with millions of rows in memory with ease.\n- **Seamless compatibility** with your existing Pandas logic.\n\nInstead of manually converting large datasets to JSON, developers can now natively pass Pandas DataFrames to UDFs, operate on them efficiently, and return processed results—all with minimal latency and memory overhead.\n\n## Real-World Example: Revenue Aggregation by Driver\n\nLet’s say you want to aggregate total revenue by driver across a dataset with millions of rows. Now, you can pass a Pandas DataFrame into a shared UDF and perform that operation directly:\n\n## Sample Code: Invoking Arrow-Enabled UDFs\n\n### PySpark / Python\n\n```\n# Get the function\nagg_func = notebookutils.udf.getFunctions(\"AggregateRevenueByDriver\")\n\n# Sample input as Pandas DataFrame\nimport pandas as pd df = pd.DataFrame({ \"driver_id\": [1, 2, 1], \"revenue\": [100.0, 150.0, 200.0] })\n\n# Call UDF with DataFrame input and receive DataFrame output\nresult_df = agg_func.aggregate(df)\n\n# Display result\nprint(result_df) ```\n\n### Scala\n\n``` val aggFunc = notebookutils.udf.getFunctions(\"AggregateRevenueByDriver\")\n\n// Sample input val input = Seq( (1, 100.0), (2, 150.0), (1, 200.0) ).toDF(\"driver_id\", \"revenue\")\n\n// Call UDF and get DataFrame output val result = aggFunc.aggregate(input)\n\n// Show result result.show() ```\n\nR\n\n``` agg_func <- notebookutils.udf.getFunctions(\"AggregateRevenueByDriver\")\n\n# Sample input\ndf <- data.frame( driver_id = c(1, 2, 1), revenue = c(100.0, 150.0, 200.0) )\n\n# Call the UDF\nresult <- agg_func$aggregate(df)\n\n# View result\nprint(result) ```\n\n## Use Case Highlights\n\nWith this Arrow-powered enhancement, you can:\n\n- Run fast, interactive analysis on large-scale datasets.\n- Simplify cross-team collaboration by sharing tested UDFs across notebooks.\n- Accelerate development-to-production workflows for real-time metrics, feature engineering, and aggregation tasks.\n\nTry the new UDF functionality today by using NotebookUtils in your Fabric Notebook. Start by registering a Pandas-compatible UDF, then pass in your DataFrames and enjoy lightning-fast results with Apache Arrow under the hood.\n\n## Get Started\n\nFor more information, refer to the [NotebookUtils for Fabric](https://learn.microsoft.com/fabric/data-engineering/notebook-utilities#user-data-function-udf-utilities) documentation.\n\n## Related Blog Posts\n\n- [User Data Functions now support async functions and pandas DataFrame, Series types](https://blog.fabric.microsoft.com/blog/user-data-functions-now-support-async-functions-and-pandas-dataframe-series-types)",
  "FeedName": "Microsoft Fabric Blog",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/now-in-fabric-notebook-udf-integration-with-native-support-for-pandas-dataframes-and-series-via-apache-arrow/",
  "Description": "We’ve made a major enhancement to the Notebook Integration with Fabric User Data Functions (UDFs)—you can now use Pandas DataFrames and Series as input and output types, powered by native integration with Apache Arrow! This enhancement brings higher performance, improved efficiency, and better scalability to your Fabric Notebooks—enabling seamless function reuse for large-scale data processing …\n\n[Continue reading “Use Fabric User Data Functions with Pandas DataFrames and Series in Notebooks”](https://blog.fabric.microsoft.com/en-us/blog/now-in-fabric-notebook-udf-integration-with-native-support-for-pandas-dataframes-and-series-via-apache-arrow/)",
  "Title": "Use Fabric User Data Functions with Pandas DataFrames and Series in Notebooks",
  "PubDate": "2025-08-26T11:45:35+00:00",
  "FeedLevelAuthor": "Microsoft Fabric Blog",
  "Author": "Microsoft Fabric Blog",
  "Tags": [],
  "OutputDir": "_news",
  "ProcessedDate": "2025-08-26 19:08:48"
}
