{
  "Description": "Fabric data agents now support CI/CD, ALM flow, and Git integration. These enhancements help you implement best practices for managing your data agent artifacts and tracking changes, leading to more reliable and collaborative development. Benefits of CI/CD and ALM Flow Fabric data agents support a variety of data sources, including Lakehouse, Warehouse, Power BI Semantic …\n\n[Continue reading “Fabric Data Agent now supports CI/CD, ALM Flow, and Git Integration”](https://blog.fabric.microsoft.com/en-us/blog/fabric-data-agent-now-supports-ci-cd-alm-flow-and-git-integration/)",
  "EnhancedContent": "Fabric data agents now support CI/CD, ALM flow, and Git integration. These enhancements help you implement best practices for managing your data agent artifacts and tracking changes, leading to more reliable and collaborative development.\n\n## Benefits of CI/CD and ALM Flow\n\nFabric data agents support a variety of data sources, including Lakehouse, Warehouse, Power BI Semantic Models, and KQL databases. Managing these configurations effectively is critical as they evolve. CI/CD and ALM provide a structured way to handle updates such as schema selections, data source configurations, example queries, and custom instructions for each data source.\n\nAll changes are stored in a Git repository, which ensures that every update is tracked, reviewable, and reversible. Meaning you can apply standard source control practices—committing changes, opening pull requests for review, and rolling back if necessary. By integrating with Git, CI/CD and ALM turn the management of data agents into a repeatable, auditable process that aligns with modern software engineering practices.\n\n## Git Integration for Version Control and Collaboration\n\nGit integration brings versioning and collaboration directly into the lifecycle of a data agent. Every modification—whether you add or update example queries for a data source, provide instructions for the agent, or define instructions specific to each data source—they are all recorded with full history of what changed, when, and by whom. If an issue arises, you can quickly revert to a previous version.\n\nCollaboration also becomes streamlined. Team members can experiment independently and safely on separate branches, validate changes, and merge them into the main branch once approved. This workflow reduces risk, accelerates development, and ensures that updates are introduced in a controlled, transparent manner. Team members can version and track different updates through Git, giving them a reliable history of changes and making it easier to collaborate across the organization.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/08/Data-Agent-Git-1024x534.png) ![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/08/DA-Change-Commit-1024x533.png)\n\n## Managing Data Agent Changes Across Environments\n\nGit version control not only tracks your changes but also aligns naturally with application lifecycle management (ALM) practices, where changes move through dedicated environments before reaching production. A recommended approach is to separate your work into three dedicated workspaces:\n\n- Development workspace—where you design, build, and test updates to enhance the data agent’s performance. This includes modifications to agent instructions, data source instructions, and sample queries etc.\n- Test workspace—used to validate updates in an environment that closely resembles production and consumption channels.\n- Production workspace—dedicated to running the data agents relied on by your end users and stakeholders across consumption channels.\n\n![](//dataplatformblogwebfd-d3h9cbawf0h8ecgf.b01.azurefd.net/wp-content/uploads/2025/08/Data-Agent-Deployment-Pipeline-1024x531.png)\n\nFor example, if your team updates the data agent to support a new data source, you can test this change in the development workspace, validate it in test workspace, and then deploy it to production workspace without disrupting existing users.\n\nThis separation ensures all changes are thoroughly validated before reaching the production environment. With Fabric’s deployment pipelines, you can transfer changes between workspaces efficiently and safely, reducing risk and supporting consistent, reliable operations.\n\nBy combining CI/CD, ALM flow, and Git integration, you gain a predictable, auditable, and scalable way to manage changes to the Fabric data agent.\n\n## Getting Started\n\nTo get started with CI/CD, ALM flow, and Git integration for your Fabric data agent, visit our documentation at [Fabric data agent | Microsoft Learn](https://aka.ms/Fabric/data-agent-source-control) for step-by-step instructions.",
  "OutputDir": "_news",
  "FeedName": "Microsoft Fabric Blog",
  "Title": "Fabric Data Agent now supports CI/CD, ALM Flow, and Git Integration",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/fabric-data-agent-now-supports-ci-cd-alm-flow-and-git-integration/",
  "PubDate": "2025-10-07T10:00:00+00:00",
  "Author": "Microsoft Fabric Blog",
  "ProcessedDate": "2025-10-07 17:02:56",
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "Tags": [],
  "FeedLevelAuthor": "Microsoft Fabric Blog"
}
