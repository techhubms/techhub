{
  "ProcessedDate": "2025-10-16 16:03:11",
  "Description": "OneLake Security centralizes fine-grained data access for Microsoft Fabric data items and enforces it consistently across engines.Currently in Preview and opt-in per item, it lets you define roles over tables or folders and optionally add Row-Level Security (RLS) and Column-Level Security (CLS) policies. These definitions govern what users can see across Fabric experiences. When you …\n\n[Continue reading “OneLake Security on the SQL Analytics Endpoint”](https://blog.fabric.microsoft.com/en-us/blog/onelake-security-on-the-sql-analytics-endpoint/)",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/onelake-security-on-the-sql-analytics-endpoint/",
  "Tags": [],
  "Author": "Microsoft Fabric Blog",
  "Title": "OneLake Security on the SQL Analytics Endpoint",
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "FeedLevelAuthor": "Microsoft Fabric Blog",
  "PubDate": "2025-10-16T08:00:00+00:00",
  "FeedName": "Microsoft Fabric Blog",
  "EnhancedContent": "OneLake Security centralizes fine-grained data access for Microsoft Fabric data items and enforces it consistently across engines. Currently in **Preview** and **opt-in per item**, it lets you define roles over tables or folders and optionally add **Row-Level Security (RLS)** and **Column-Level Security (CLS)** policies. These definitions govern what users can see across Fabric experiences.\n\nWhen you first opt in, a **DefaultReader** role preserves prior read access. You can remove or adjust this role to transition toward a **least-privilege** model.\n\n## OneLake Security in the Context of SQL Analytics\n\nAt its core, OneLake Security is an **item-scoped RBAC and policy layer**. You can:\n\n- Create data-access roles\n- Attach tables or folders\n- Add policies (RLS, CLS, object-level permissions)\n\nMembership can be:\n\n- **Explicit** – users or groups within the workspace (for example, those assigned the Viewer role)\n- **Inherited** – via shared items such as a Lakehouse or shortcut\n\nOnce published, these rules apply to data access from all engines, including the SQL Analytics Endpoint. ([See Microsoft Learn](https://learn.microsoft.com/en-us/fabric/onelake/sql-analytics-endpoint-onelake-security).)\n\n## Understanding OneLake Security for SQL Endpoint\n\nThe SQL Analytics Endpoint is a **read-only surface** over Lakehouse data. When OneLake Security is enabled on a Lakehouse, the endpoint enforces those same Lakehouse policies in one of two **access modes**.\n\nWrite operations continue to be governed by workspace roles within the Lakehouse experience.” [(See Microsoft Learn.)](https://learn.microsoft.com/en-us/fabric/fundamentals/roles-workspaces)\n\nSince there are two access modes, let’s look at how each determines security enforcement:\n\n- **User identity mode** (central governance in OneLake)\nThe signed-in user’s identity is passed through to OneLake; table reads are governed entirely by OneLake roles and policies (SQL GRANT/REVOKE on tables is ignored). You still can use SQL permissions for non-table objects (views, procs, functions). This gives ‘define once, enforce everywhere’ behavior across Power BI, notebooks, Lakehouse, and SQL.\n- **Delegated identity mode** (SQL-centric control at the endpoint)\nThe endpoint reads OneLake using the item/workspace owner identity; SQL enforces access (roles, GRANT/REVOKE, SQL-defined RLS/CLS, DDM) for the querying user. Use this when you need classic DBA patterns or utilize SQL specific security functions. Ensure the owner has read access in OneLake; otherwise, queries will fail.\n\n#### Differences Between the Modes\n\n- **Tables:**\n- **User identity:** controlled by OneLake roles; SQL GRANT/REVOKE is not allowed on tables.\n- **Delegated identity:** controlled by SQL; full GRANT/REVOKE.\n- **Views / Stored Procedures / Functions:** Both modes allow SQL permissions (e.g., GRANT SELECT on views, GRANT EXECUTE on procs/functions).\n- **RLS/CLS/DDM:**\n- **User identity:** RLS/CLS are defined in OneLake role UI; DDM isn’t part of OneLake Security.\n- **Delegated identity:** RLS/CLS/DDM are defined in SQL (security policies, column grants, masked columns).\n- **Workspace roles:** In User identity, Admin/Member/Contributor bypass OneLake policies; Viewer or read-only sharing is required for enforcement.\n\n#### Shortcuts: Remote Data Ownership and Practical Considerations\n\nShortcuts surface data from another Lakehouse (or external source) into your item. The security policy is enforced at the source; when SQL queries shortcut tables, the system honors the originating OneLake roles/RLS/CLS. Security sync also validates shortcuts, so remote policies aren’t bypassed.\n\n##### Design tips:\n\n- Document role mappings across items (consumer ↔ source) so troubleshooting is straightforward.\n- Expect validation when shortcut targets change (rename/move); allow brief propagation time.\n\n## Configuration: Enabling and Setting OneLake Security for SQL Endpoint\n\n1. **Opt-in to OneLake Security** on the Lakehouse (Manage OneLake security). Review the DefaultReader behavior; remove it or adjust to move to least-privilege. Create roles → select tables/folders → add explicit/virtual members → optionally set RLS/CLS.\n2. In the **SQL Analytics Endpoint → Security**, choose **OneLake access mode**:\n- **User identity** (enforces OneLake roles only).\n- **Delegated identity** (enforces SQL permissions + OneLake security for the owner)\nConfirm the change in the pop-up.\n\n**Important switching behavior:** Switching to User identity ignores SQL table permissions and can delete existing SQL roles on tables; switching to Delegated stops applying OneLake roles/policies to table reads for all users except the owner. Plan cutovers and back-ups accordingly.\n\n## How It Works Under the Hood: Security Sync and (Meta)Data Validation\n\nWhen the endpoint runs in User identity mode, a background security sync service keeps SQL aligned with OneLake: it detects role changes, user assignments, and table/policy updates; it translates OneLake RLS/CLS into SQL-compatible constructs and validates that shortcut targets remain consistent, so the source’s policies are honored. Expect non-instant propagation (measure in minutes, not hours) and explicit errors if policies reference dropped/renamed columns—fix in OneLake and re-publish.\n\nIn Delegated identity mode, SQL is authoritative for the end user access. The endpoint authenticates to OneLake as owner, and the SQL permission model (roles, grants, RLS/CLS/DDM) determines access. Any mismatch between owner access to the Lakehouse and SQL grants will surface as query failures until corrected.\n\n## Bringing It All Together\n\nOneLake Security brings a single, authoritative policy surface to Fabric and lets you decide how the SQL Analytics Endpoint enforces it:\n\n- Choose User identity when you want to define once in OneLake, enforce everywhere (and ensure workspace users are Viewer/read-only so policies apply).\n- Choose Delegated identity when you need classic SQL control (roles, grants, RLS/CLS/DDM) or to align with existing DBA tooling.\n\nBy unifying governance across SQL and Lakehouse, Fabric helps teams move faster while staying secure.\n\nWe’re actively working on additional features, so stay tuned for more updates!\n\n**Resources**\n\nTo learn more, refer to the [OneLake Security for SQL analytics endpoints (Preview)](https://learn.microsoft.com/fabric/onelake/sql-analytics-endpoint-onelake-security), [OneLake security overview](https://learn.microsoft.com/fabric/onelake/security/get-started-security) documentation, and [The next evolution of OneLake security (Preview)](https://blog.fabric.microsoft.com/blog/the-next-evolution-of-onelake-security-enters-early-preview/) blog post.",
  "OutputDir": "_news"
}
