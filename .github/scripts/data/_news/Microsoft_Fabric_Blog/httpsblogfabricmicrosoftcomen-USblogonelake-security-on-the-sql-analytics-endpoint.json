{
  "Description": "OneLake Security centralizes fine-grained data access for Fabric data items and enforces it consistently across engines. Currently in Preview and opt-in per item. You define roles over tables/folders and can add RLS/CLS policies; those definitions govern what users see across Fabric experiences. A default DefaultReader role preserves prior read access at opt-in and can be …\n\n[Continue reading “OneLake Security on the SQL Analytics Endpoint”](https://blog.fabric.microsoft.com/en-us/blog/onelake-security-on-the-sql-analytics-endpoint/)",
  "Title": "OneLake Security on the SQL Analytics Endpoint",
  "FeedName": "Microsoft Fabric Blog",
  "FeedLevelAuthor": "Microsoft Fabric Blog",
  "FeedUrl": "https://blog.fabric.microsoft.com/en-us/blog/feed/",
  "PubDate": "2025-10-06T12:00:00+00:00",
  "ProcessedDate": "2025-10-06 19:02:41",
  "OutputDir": "_news",
  "Tags": [],
  "EnhancedContent": "OneLake Security centralizes fine-grained data access for Fabric data items and enforces it consistently across engines. Currently in Preview and opt-in per item. You define roles over tables/folders and can add RLS/CLS policies; those definitions govern what users see across Fabric experiences. A default DefaultReader role preserves prior read access at opt-in and can be trimmed to move to least-privilege.\n\n## Understanding OneLake Security in the Context of SQL Analytics\n\nAt its core, OneLake Security is an item-scoped RBAC and policy layer: you create data access roles, attach tables or folders, and optionally add data access policies—Row-Level Security (RLS), Column-Level Security (CLS), or object-level permissions.\n\nMembership can be explicit (users or groups) that are part of the workspace—e.g., assigned the Viewer role—or granted via shared items, on this case the Lakehouse.\n\nOnce published, these rules apply to data access from all engines, including the SQL Analytics Endpoint. (See Microsoft Learn.)\n\nThe SQL Analytics Endpoint is a read-only surface over Lakehouse data. When OneLake Security is enabled on Lakehouse, the endpoint enforces those Lakehouse policies in one of two access modes (details below). In both cases, write operations continue in the Lakehouse experience and are governed by workspace roles. (See Microsoft Learn.)\n\n## Understanding OneLake Security for SQL Endpoint\n\nBecause SQL Analytics is read-only, table access control originates in OneLake/Lakehouse. You select how enforcement happens via OneLake access mode:\n\n- **User identity mode** (central governance in OneLake)\nThe signed-in user’s identity is passed through to OneLake; table reads are governed entirely by OneLake roles and policies (SQL GRANT/REVOKE on tables is ignored). You still can use SQL permissions for non-table objects (views, procs, functions). This gives ‘define once, enforce everywhere’ behavior across Power BI, notebooks, Lakehouse, and SQL.\n- **Delegated identity mode** (SQL-centric control at the endpoint)\nThe endpoint reads OneLake using the item/workspace owner identity; SQL enforces access (roles, GRANT/REVOKE, SQL-defined RLS/CLS, DDM). Use this when you need classic DBA patterns or to scale beyond OneLake role management limits. Ensure the owner has OneLake read: otherwise, queries fail.\n\n**Workspace role nuance (UI mode):** Admin/Member/Contributor bypass OneLake enforcement; use Viewer or share read-only for policies to apply.\n\n## Shortcuts: Remote Data Ownership and Practical Considerations\n\nShortcuts surface data from another Lakehouse (or external source) into your item. Policy is enforced at the source; when SQL queries shortcut tables, the system validates and honors the originating OneLake roles/RLS/CLS. In practice, align access on both the consumer and source items; security sync also validates shortcuts, so remote policies aren’t bypassed.\n\n### Design tips:\n\n- Document role mappings across items (consumer ↔ source) so troubleshooting is straightforward.\n- Expect validation when shortcut targets change (rename/move); allow brief propagation time.\n\n## Configuration: Enabling and Setting OneLake Security for SQL Endpoint\n\n1. **Opt-in to OneLake Security** on the Lakehouse (Manage OneLake security). Review the DefaultReader behavior; remove it or adjust to move to least-privilege. Create roles → select tables/folders → add explicit/virtual members → optionally set RLS/CLS.\n2. In the **SQL Analytics Endpoint → Security**, choose **OneLake access mode**:\n- **User identity** (enforces OneLake roles).\n- **Delegated identity** (enforces only SQL permissions)\nConfirm the change in the pop-up.\n\n**Important switching behavior:** Switching to User identity ignores SQL table permissions and can delete existing SQL roles on tables; switching to Delegated stops applying OneLake roles/policies to table reads. Plan cutovers and back-ups accordingly.\n\n## Differences Between the Modes\n\n- **Tables:**\n- **User identity:** controlled by OneLake roles; SQL GRANT/REVOKE is not allowed on tables.\n- **Delegated identity:** controlled by SQL; full GRANT/REVOKE.\n- **Views / Stored Procedures / Functions:** Both modes allow SQL permissions (e.g., GRANT SELECT on views, GRANT EXECUTE on procs/functions).\n- **RLS/CLS/DDM:**\n- **User identity:** RLS/CLS are defined in OneLake role UI; DDM isn’t part of OneLake Security.\n- **Delegated identity:** RLS/CLS/DDM are defined in SQL (security policies, column grants, masked columns).\n- **Workspace roles:** In User identity, Admin/Member/Contributor bypass OneLake policies; Viewer or read-only sharing is required for enforcement. Not applicable in the same way to Delegated because SQL is authoritative.\n\n## How It Works Under the Hood: Security Sync and (Meta)Data Validation\n\nWhen the endpoint runs in User identity mode, a background security sync service keeps SQL aligned with OneLake: it detects role changes, user assignments, and table/policy updates; it translates OneLake RLS/CLS into SQL-compatible constructs and validates that shortcut targets remain consistent, so the source’s policies are honored. Expect non-instant propagation (measure in minutes, not hours) and explicit errors if policies reference dropped/renamed columns—fix in OneLake and re-publish.\n\nIn Delegated identity mode, SQL is authoritative. The endpoint authenticates to OneLake as owner, and the SQL permission model (roles, grants, RLS/CLS/DDM) determines access. Any mismatch between owner access to the Lakehouse and SQL grants will surface as query failures until corrected.\n\n## Bringing It All Together\n\nOneLake Security brings a single, authoritative policy surface to Fabric and lets you decide how the SQL Analytics Endpoint enforces it:\n\n- Choose User identity when you want to define once in OneLake, enforce everywhere (and ensure workspace users are Viewer/read-only so policies apply).\n- Choose Delegated identity when you need classic SQL control (roles, grants, RLS/CLS/DDM) or to align with existing DBA tooling.\n\nWe’re actively working on OneLake Security integration for Fabric Warehouse, so the same governance model applies natively to dedicated Warehouse workload stay tuned.\n\n## Resources\n\nTo learn more, refer to the [OneLake Security for SQL analytics endpoints (Preview)](https://learn.microsoft.com/fabric/onelake/sql-analytics-endpoint-onelake-security), [OneLake security overview](https://learn.microsoft.com/fabric/onelake/security/get-started-security) documentation, and [The next evolution of OneLake security (Preview)](https://blog.fabric.microsoft.com/blog/the-next-evolution-of-onelake-security-enters-early-preview/) blog post.",
  "Author": "Microsoft Fabric Blog",
  "Link": "https://blog.fabric.microsoft.com/en-US/blog/onelake-security-on-the-sql-analytics-endpoint/"
}
