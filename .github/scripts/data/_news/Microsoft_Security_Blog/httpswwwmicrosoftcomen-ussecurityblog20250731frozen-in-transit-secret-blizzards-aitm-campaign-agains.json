{
  "PubDate": "2025-07-31T16:00:00+00:00",
  "EnhancedContent": "Microsoft Threat Intelligence has uncovered a cyberespionage campaign by the Russian state actor we track as Secret Blizzard that has been targeting embassies located in Moscow using an adversary-in-the-middle (AiTM) position to deploy their custom ApolloShadow malware. ApolloShadow has the capability to install a trusted root certificate to trick devices into trusting malicious actor-controlled sites, enabling Secret Blizzard to maintain persistence on diplomatic devices, likely for intelligence collection. This campaign, which has been ongoing since at least 2024, poses a high risk to foreign embassies, diplomatic entities, and other sensitive organizations operating in Moscow, particularly to those entities who rely on local internet providers.\n\nWhile we previously assessed with low confidence that the actor conducts cyberespionage activities within Russian borders against foreign and domestic entities, this is the first time we can confirm that they have the capability to do so at the Internet Service Provider (ISP) level. This means that diplomatic personnel using local ISP or telecommunications services in Russia are highly likely targets of Secret Blizzard’s AiTM position within those services. In our previous [blog](https://www.microsoft.com/security/blog/2024/12/04/frequent-freeloader-part-i-secret-blizzard-compromising-storm-0156-infrastructure-for-espionage/), we reported the actor likely leverages Russia’s domestic intercept systems such as the [System for Operative Investigative Activities](https://www.welivesecurity.com/2018/01/09/turlas-backdoor-laced-flash-player-installer/) (SORM), which we assess may be integral in facilitating the actor’s current AiTM activity, judging from the large-scale nature of these operations.\n\nThis blog provides guidance on how organizations can protect against Secret Blizzard’s AiTM ApolloShadow campaign, including forcing or routing all traffic through an encrypted tunnel to a trusted network or using an alternative provider—such as a satellite-based connection—hosted within a country that does not control or influence the provider’s infrastructure. The blog also provides additional information on network defense, such as recommendations, indicators of compromise (IOCs), and detection details.\n\nSecret Blizzard is [attributed](https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-129a) by the United States Cybersecurity and Infrastructure Agency (CISA) as Russian Federal Security Service (Center 16). Secret Blizzard further overlaps with threat actors [tracked by other security vendors](https://learn.microsoft.com/en-us/unified-secops-platform/microsoft-threat-actor-naming) by names such as VENOMOUS BEAR, Uroburos, Snake, Blue Python, Turla, Wraith, ATG26, and Waterbug.\n\nAs part of our continuous monitoring, analysis, and reporting of the threat landscape, we are sharing our observations on Secret Blizzard’s latest activity to raise awareness of this actor’s tradecraft and educate organizations on how to harden their attack surface against this and similar activity. Although this activity poses a high risk to entities within Russia, the defense measures included in this blog are broadly applicable and can help organizations in any region reduce their risk from similar threats. Microsoft is also tracking other groups using similar techniques, including those documented by ESET in a previous [publication](https://www.eset.com/us/about/newsroom/press-releases/eset-research-discovers-moustachedbouncer/).\n\n## AiTM and ApolloShadow deployment\n\nIn February 2025, Microsoft Threat Intelligence observed Secret Blizzard conducting a cyberespionage campaign against foreign embassies located in Moscow, Russia, using an AiTM position to deploy the ApolloShadow malware to maintain persistence and collect intelligence from diplomatic entities. An [adversary-in-the-middle](https://attack.mitre.org/techniques/T1557/) technique is when an adversary positions themself between two or more networks to support follow-on activity. The Secret Blizzard AiTM position is likely facilitated by lawful intercept and notably includes the installation of root certificates under the guise of Kaspersky Anti-Virus (AV). We assess this allows for TLS/SSL stripping from the Secret Blizzard AiTM position, rendering the majority of the target’s browsing in clear text including the delivery of certain tokens and credentials. Secret Blizzard has exhibited similar techniques in past cyberespionage [campaigns](https://web-assets.esetstatic.com/wls/2018/01/ESET_Turla_Mosquito.pdf) to infect foreign ministries in Eastern Europe by tricking users to download a trojanized Flash installer from an AiTM position.\n\n### Initial access\n\nIn this most recent campaign, the initial access mechanism used by Secret Blizzard is facilitated by an AiTM position at the ISP/Telco level inside Russia, in which the actor redirects target devices by putting them behind a captive portal. Captive portals are legitimate web pages designed to manage network access, such as those encountered when connecting to the internet at a hotel or airport. Once behind a captive portal, the [Windows Test Connectivity Status Indicator](https://learn.microsoft.com/troubleshoot/windows-client/networking/internet-explorer-edge-open-connect-corporate-public-network) is initiated—a legitimate service that determines whether a device has internet access by sending an HTTP GET request to *hxxp://www.msftconnecttest[.]* *com/redirect* which should direct to *msn[.]com*.\n\n### Delivery and installation\n\nOnce the system opens the browser window to this address, the system is redirected to a separate actor-controlled domain that likely displays a certificate validation error which prompts the target to download and execute ApolloShadow. Following execution, ApolloShadow checks for the privilege level of the *ProcessToken* and if the device is not running on default administrative settings, then the malware displays the user access control (UAC) pop-up window to prompt the user to install certificates with the file name *CertificateDB.exe*, which masquerades as a Kaspersky installer to install root certificates and allow the actor to gain elevated privileges in the system.\n\n![The infect chain displays the back and forth between the unknowing target and Secret Blizzard, with the target first getting an unexpected response to a connection, leading the attacker to redirecting the target to their domain. The target downloads and executes the malware, which ultimately beacons the attacker's server at their attacker-controlled IP address to deliver a secondary payload. ](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/Figure-1.-Secret-Blizzard-AiTM-infection-chain-1.webp)*Figure 1. Secret Blizzard AiTM infection chain*\n\n### ApolloShadow malware\n\nApolloShadow uses two execution paths depending on the privilege level of the running process. The token of the running process is retrieved using the API *GetTokenInformationType* and the value of *TokenInformation* is checked to see if the token contains the *TokenElevationTypeFull*type**.** If it does not have that privilege level, ApolloShadow executes a low privilege execution path**.**\n\n![Diagram of the ApolloShadow execution flow starting with CertificateDB.exe checking token access, using a GET request to receive and execute the VB Script. At the same time, it installs the certificate to elevate privileges, ultimately installing root certificates. changing the connected networks to private, and adding an admin user.](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/Figure-2.-ApolloShadow-execution-flow.webp)*Figure 2. ApolloShadow execution flow*\n\n## Low privilege execution\n\nWhen executing the low privilege path, the first action is to collect information about the host to send back to the AiTM controlled command and control (C2). First, the host’s IP information is collected using the API *GetIpAddrTable*, which collects information from the *IpAddrTable*. Each entry is individually Base64-encoded and delineated by a pipe character with *\\r\\n* appended, then combined into one string. For example:\n\n- 172.29.162[.]128 00-15-5D-04-04-1C\n- 127.0.0[.]1\n\n` \"|MTcyLjI5LjE2Mi4xMjggMDAtMTUtNUQtMDQtMDQtMUM=|\\r\\n|MTI3LjAuMC4xIA==|\\r\\n\"`\n\nThen the entire string is Base64-encoded once again in preparation for exfiltration to the C2 host:\n\n`\"fE1UY3lMakk1TGpFMk1pNHhNamdnTURBdE1UVXROVVF0TURRdE1EUXRNVU09fA0KfE1USTNMakF1TUM0eElBPT18DQo=\"`\n\nThe encoded network information is added as a query string to a GET request with the destination URL *hxxp* *://timestamp.digicert[.]com/registered*. Two query parameters are included with the request, *code* and *t*.  The *Code* parameters contains a hardcoded set of characters and the *t* variable has the encoded IP address information, as shown below:\n\n`code=DQBBBBBBBBBOBBBBBBBBBBgBBBBBBBBBny_t???????t=fE1UY3lMakk1TGpFMk1pNHhNamdnTURBdE1UVXROVVF0TURRdE1EUXRNVU09fA0KfE1USTNMakF1TUM0eElBPT18DQo=`\n\nWhile the timestamp subdomain does exist for Digicert, the /*registered* resource does not. Due to the AiTM position of the actor, Secret Blizzard can use DNS manipulation to redirect legitimate-looking communication to the actor-controlled C2 and return an encoded VBScript as the second-stage payload.\n\nWhen the response comes back from the redirected Digicert request, the file name that is used to write the script to disk is decoded for use. ApolloShadow uses string obfuscation in several places throughout the binary to hide critical strings. These strings are blocks of encoded characters that are encoded using XOR with a separate set of hardcoded constants. While this is not a particularly sophisticated technique, it is enough to obscure the strings from view at first glance. The strings are decoded as they are used and then re-encoded after use to remove traces of the strings from memory.\n\n![Screenshot of code depicting the string decoding operation for the VB script name](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/image-16.webp)*Figure 2. String decoding operation for VB script name*\n\nThe decoded file name is *edgB4ACD.vbs* and the file name string is concatenated by the malware with the results of querying the environment variable for the *TEMP* directory to create the path for the target script. We were unable to recover the script, but the header of the response is checked for the first 12 characters to see if it matches the string *MDERPWSAB64B*. Once ApolloShadow has properly decoded the script, it executes the script using the Windows API call *CreateProcessW* with the command line to launch *wscript* and the path to *edgB4ACD.vbs*.\n\nFinally, the ApolloShadow process launches itself again using *ShellExecuteA,* which presents the user with an UAC window to bypass UAC mechanisms and prompt the user to grant the malware the highest privileges available to the user.\n\n![Screenshot of the UAC popup which asks the user if they want to allow this app from an unknown publisher to make changes to their device. The file is called CertificateDB.exe and the user can click Yes or No.](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/image-20.webp) *Figure 3. UAC popup to request elevated privileges from the user*\n\n## Elevated privilege execution\n\nWhen the process is executed with sufficient elevated privileges, ApolloShadow alters the host by setting all networks to *Private*. This induces several changes including allowing the host device to become discoverable, and relaxing firewall rules to enable file sharing. While we did not see any direct attempts for lateral movement, the main reason for these modifications is likely to reduce the difficulty of lateral movement on the network. ApolloShadow uses two different methods to perform this change.\n\nThe first method is through the registry settings for *NetworkProfiles: SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\NetworkList\\\\Profiles*. The network’s globally unique identifiers (GUIDs) are parsed for each connected network, and the malware modifies the value *Category* by setting it to 0. This change sets the profile of the network to *Private* after the host has been rebooted.\n\n![Screenshot of the registry settings for network profiles](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/image-19.webp)*Figure 4. Registry settings for network profiles*\n\nThe second method directly sets firewall rules using Component Object Model (COM) objects that enable file sharing and turn on network discovery. Several strings are decoded using the same method as above and concatenated to create the firewall rules they want to modify.\n\n- `FirewallAPI.dll,-32752`\n- This command enables the **Network Discovery** rule group\n- `FirewallAPI.dll,-28502`\n- This command enables all rules in the **File and Printer Sharing** group\n\nThe strings are passed to the COM objects to enable the rules if they are not already enabled.\n\n![Screenshot of code depicting COM objects that were used to modify firewall rules](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/image-15.webp)*Figure 5. COM objects used to modify firewall rules*\n\nBoth techniques have some crossover, but the following table provides a comparison overview of each method.\n\n| **Technique** | **Purpose** | **Timing** | **Stealth** | **Effect** | | --- | --- | --- | --- | --- | | Registry profile change | Sets network to *Private* | Requires reboot | High | Broadly relaxes firewall posture | | COM-based rule enablement | Activates specific rules | Immediate | Moderate | Opens precise ports for discovery and sharing |\n\nFrom here, ApolloShadow presents the user with a window showing that the certificates are being installed.\n\n![A screenshot of the window displayed to the user which shows a loading bar called K Certificate Installation](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/image-18.webp)*Figure 6. Window displayed to the user during execution*\n\nA new thread performs the remainder of the functionality. The two root certificates being installed are written to the *%TEMP%* directory with a temporary name and the extension *crt*. The certificate installation is performed by using the Windows certutil utility and the temporary files are deleted following the execution of the commands.\n\n- `certutil.exe -f -Enterprise -addstore root \"C:\\Users\\<username>\\AppData\\Local\\Temp\\crt3C5C.tmp\"`\n- ` certutil.exe -f -Enterprise -addstore ca \"C:\\Users\\<username>\\AppData\\Local\\Temp\\crt53FF.tmp\"`\n\nThe malware must add a preference file to the Firefox preference directory because Firefox uses different certificate stores than browsers such as Chromium, which results in Firefox not trusting the root and enterprise store by default. ApolloShadow reads the registry key that points to the installation of the application and builds a path to the preference directory from there. A file is written to disk called *wincert.js* containing a preference modification for Firefox browsers, allowing Firefox to trust the root certificates added to the operating system’s certificate store.\n\n- `pref(\"security.enterprise_roots.enabled\", true);\" privilege`\n\nThe final step is to create an administrative user with the username *UpdatusUser* and a hardcoded password on the infected system using the Windows API *NetUserAdd*. The password is also set to never expire.\n\n![Screenshot of an admin user being added to an infected system with the username UpdatusUser](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/07/image-17.webp)*Figure 7. Administrator user added to infected system*\n\nApolloShadow has successfully installed itself on the infected host and has persistent access using the new local administrator user.\n\n## Defending against Secret Blizzard activity\n\nMicrosoft recommends that all customers, but especially sensitive organizations operating in Moscow, should implement the following recommendations to mitigate against Secret Blizzard activity.\n\n- Route all traffic through an encrypted tunnel to a trusted network or use a virtual private network (VPN) service provider, such as a satellite-based provider, whose infrastructure is not controlled or influenced by outside parties.\n\nMicrosoft also recommends the following guidance to enhance protection and mitigate potential threats:\n\n- Practice the [principle of least privilege](https://learn.microsoft.com/windows-server/identity/ad-ds/plan/security-best-practices/implementing-least-privilege-administrative-models), use multifactor authentication (MFA), and audit privileged account activity in your environments to slow and stop attackers. Avoid the use of domain-wide, admin-level service accounts and restrict local administrative privileges. These mitigation steps reduce the paths that attackers have available to them to accomplish their goals and lower the risk of the compromise spreading in your environment.\n- Regularly review highly privileged groups like Administrators, Remote Desktop Users, and Enterprise Admins. Threat actors may add accounts to these groups to maintain persistence and disguise their activity.\n- Turn on [cloud-delivered protection](https://learn.microsoft.com/defender-endpoint/configure-block-at-first-sight-microsoft-defender-antivirus) in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques.\n- Run [endpoint detection and response (EDR) in block mode](https://learn.microsoft.com/microsoft-365/security/defender-endpoint/edr-in-block-mode?ocid=magicti%3Cem%3Eta%3C/em%3Elearndoc), so that Defender for Endpoint can block malicious artifacts, even when your non-Microsoft antivirus doesn’t detect the threat or when Microsoft Defender Antivirus is running in passive mode. EDR in block mode works behind the scenes to remediate malicious artifacts detected post-breach.\n- Turn on [attack surface reduction rules](https://learn.microsoft.com/defender-endpoint/attack-surface-reduction-rules-reference?ocid=magicti_ta_learndoc) to prevent common attack techniques. These rules, which can be configured by all Microsoft Defender Antivirus customers and not just those using the EDR solution, offer significant hardening against common attack vectors.\n- [Block executable files from running unless they meet a prevalence, age, or trusted list criterion](https://learn.microsoft.com/defender-endpoint/attack-surface-reduction-rules-reference#block-executable-files-from-running-unless-they-meet-a-prevalence-age-or-trusted-list-criterion)\n- [Block execution of potentially obfuscated scripts](https://learn.microsoft.com/defender-endpoint/attack-surface-reduction-rules-reference#block-execution-of-potentially-obfuscated-scripts)\n\n## Microsoft Defender XDR detections\n\nMicrosoft Defender XDR customers can refer to the list of applicable detections below. Microsoft Defender XDR coordinates detection, prevention, investigation, and response across endpoints, identities, email, apps to provide integrated protection against attacks like the threat discussed in this blog.\n\nCustomers with provisioned access can also use [Microsoft Security Copilot in Microsoft Defender](https://learn.microsoft.com/defender-xdr/security-copilot-in-microsoft-365-defender) to investigate and respond to incidents, hunt for threats, and protect their organization with relevant threat intelligence.\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects this threat as the following malware:\n\n- [Trojan:Win64/ApolloShadow](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Trojan:Win64/ApolloShadow!dha)\n\n### Microsoft Defender for Endpoint\n\nThe following alerts might indicate threat activity related to this threat. Note, however, that these alerts can be also triggered by unrelated threat activity.\n\n- Secret Blizzard Actor activity detected\n- Suspicious root certificate installation\n- Suspicious certutil activity\n- User account created under suspicious circumstances\n- A script with suspicious content was observed\n\n## Microsoft Security Copilot\n\nSecurity Copilot customers can use the standalone experience to [create their own prompts](https://learn.microsoft.com/copilot/security/prompting-security-copilot#create-your-own-prompts) or run the following [pre-built promptbooks](https://learn.microsoft.com/copilot/security/using-promptbooks) to automate incident response or investigation tasks related to this threat:\n\n- Incident investigation\n- Microsoft User analysis\n- Threat actor profile\n- Threat Intelligence 360 report based on MDTI article\n- Vulnerability impact assessment\n\nNote that some promptbooks require access to plugins for Microsoft products such as Microsoft Defender XDR or Microsoft Sentinel.\n\n## Threat intelligence reports\n\nMicrosoft customers can use the following reports in Microsoft products to get the most up-to-date information about the threat actor, malicious activity, and techniques discussed in this blog. These reports provide the intelligence, protection information, and recommended actions to prevent, mitigate, or respond to associated threats found in customer environments.\n\n### Microsoft Defender Threat Intelligence\n\n- [Actor profile: Secret Blizzard](https://security.microsoft.com/intel-profiles/01d15f655c45c517f52235d63932fb377c319176239426681412afb01bf39dcc)\n\nMicrosoft Security Copilot customers can also use the [Microsoft Security Copilot integration](https://learn.microsoft.com/defender/threat-intelligence/security-copilot-and-defender-threat-intelligence?bc=%2Fsecurity-copilot%2Fbreadcrumb%2Ftoc.json&amp;toc=%2Fsecurity-copilot%2Ftoc.json#turn-on-the-security-copilot-integration-in-defender-ti) in Microsoft Defender Threat Intelligence, either in the Security Copilot standalone portal or in the [embedded experience](https://learn.microsoft.com/defender/threat-intelligence/using-copilot-threat-intelligence-defender-xdr) in the Microsoft Defender portal to get more information about this threat actor.\n\n## Hunting queries\n\n### Microsoft Defender XDR\n\nMicrosoft Defender XDR customers can run the following query to find related activity in their networks:\n\nSurface devices that attempt to download a file within two minutes after captive portal redirection. This activity may indicate a first stage AiTM attack—such as the one utilized by Secret Blizzard—against a device.\n\n```\n\nlet CaptiveRedirectEvents = DeviceNetworkEvents | where RemoteUrl contains \"msftconnecttest.com/redirect\" | project DeviceId, RedirectTimestamp = Timestamp, RemoteUrl; let FileDownloadEvents = DeviceFileEvents | where ActionType == \"FileDownloaded\" | project DeviceId, DownloadTimestamp = Timestamp, FileName, FolderPath; CaptiveRedirectEvents | join kind=inner (FileDownloadEvents) on DeviceId | where DownloadTimestamp between (RedirectTimestamp .. (RedirectTimestamp + 2m)) | project DeviceId, RedirectTimestamp, RemoteUrl, DownloadTimestamp, FileName, FolderPath ```",
  "FeedUrl": "https://www.microsoft.com/en-us/security/blog/feed/",
  "Title": "Frozen in transit: Secret Blizzard’s AiTM campaign against diplomats",
  "FeedLevelAuthor": "Microsoft Security Blog",
  "Link": "https://www.microsoft.com/en-us/security/blog/2025/07/31/frozen-in-transit-secret-blizzards-aitm-campaign-against-diplomats/",
  "Tags": [],
  "OutputDir": "_news",
  "Author": "Microsoft Threat Intelligence",
  "ProcessedDate": "2025-08-05 11:13:57",
  "Description": "Microsoft Threat Intelligence has uncovered a cyberespionage campaign by the Russian state actor we track as Secret Blizzard that has been ongoing since at least 2024, targeting embassies in Moscow using an adversary-in-the-middle (AiTM) position to deploy their custom ApolloShadow malware.\n\nThe post [Frozen in transit: Secret Blizzard’s AiTM campaign against diplomats](https://www.microsoft.com/en-us/security/blog/2025/07/31/frozen-in-transit-secret-blizzards-aitm-campaign-against-diplomats/) appeared first on [Microsoft Security Blog](https://www.microsoft.com/en-us/security/blog).",
  "FeedName": "Microsoft Security Blog"
}
