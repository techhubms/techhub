{
  "Description": "Microsoft Threat Intelligence has uncovered a new variant of the XCSSET malware, which is designed to infect Xcode projects, typically used by software developers building Apple or macOS-related applications.\n\nThe post [XCSSET evolves again: Analyzing the latest updates to XCSSET’s inventory](https://www.microsoft.com/en-us/security/blog/2025/09/25/xcsset-evolves-again-analyzing-the-latest-updates-to-xcssets-inventory/) appeared first on [Microsoft Security Blog](https://www.microsoft.com/en-us/security/blog).",
  "ProcessedDate": "2025-09-25 16:14:25",
  "FeedUrl": "https://www.microsoft.com/en-us/security/blog/feed/",
  "Author": "Microsoft Threat Intelligence",
  "EnhancedContent": "Microsoft Threat Intelligence has identified yet another XCSSET variant in the wild that introduces further updates and new modules beyond those detailed in our [March 2025 blog post](https://www.microsoft.com/en-us/security/blog/2025/03/11/new-xcsset-malware-adds-new-obfuscation-persistence-techniques-to-infect-xcode-projects/). The XCSSET malware is designed to infect Xcode projects, typically used by software developers, and run while an Xcode project is being built. We assess that this mode of infection and propagation banks on project files being shared among developers building Apple or macOS-related applications.\n\nThis new variant of XCSSET brings key changes related to browser targeting, clipboard hijacking, and persistence mechanisms. It employs sophisticated encryption and obfuscation techniques, uses run-only compiled AppleScripts for stealthy execution, and expands its data exfiltration capabilities to include Firefox browser data. It also adds another persistence mechanism through *LaunchDaemon* entries.\n\nThis variant features a submodule designed to monitor the clipboard and references a downloaded configuration file containing address regex patterns associated with various digital wallets. If a pattern match is detected, XCSSET is capable of substituting the clipboard content with its own predefined set of wallet addresses.\n\nIn this blog, we will discuss the new modules added to the XCSSET’s inventory and key changes to existing ones. While we’re only seeing this new XCSSET variant in limited attacks as of this writing, we’re publishing our comprehensive analysis to increase awareness of this evolving threat. We shared these findings with Apple and collaborated with GitHub to take down repositories affected by XCSSET. This work reflects our broader commitment to disrupting attacks and dismantling attacker operations. Alongside our findings, we are sharing actionable detections, recommendations, and best practices to help organizations defend against this threat with confidence.\n\n## Analysis\n\nThe latest XCSSET variant follows a four-stage infection chain. The initial three stages are consistent with those observed in previous variants, as described in our [previous blog](https://www.microsoft.com/en-us/security/blog/2025/03/11/new-xcsset-malware-adds-new-obfuscation-persistence-techniques-to-infect-xcode-projects/). This analysis begins with the fourth stage, which includes the *boot()* function and its associated calls to download and run submodules.\n\n### boot() function of the fourth-stage script\n\nThe new variant introduces modifications to the boot function. These include additional checks for Firefox browser and modified logic for Telegram existence check. This stage also has multiple new modules that it downloads and executes.\n\nOlder variant:\n\n![Screenshot of the boot function of the earlier XCSSET variant](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig1-XCSSET-boot-function-old-variant-1024x541.webp)Figure 1. *boot()* function of the earlier variant\n\nNew variant:\n\n![Screenshot of the boot function of the latest XCSSET version](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig2-XCSSET-boot-function-new-variant-n.webp)Figure 2. *boot()* function of the latest version\n\nIn the following sections, we examine changes to existing submodules as well as additional modules in this variant.\n\n### vexyeqj [Older variant: seizecj] (Info-stealer)\n\nIn comparison to the previous variant, several commands in this script are commented out. Additionally, it downloads a module called *bnk*, which is executed using osascript, with the domain supplied as a parameter. It then waits for three seconds and deletes the downloaded file.\n\n![Screenshot of the main logic code of the Info-stealer module](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig3-XCSSET-main-logic-infostealer-n-1024x467.webp)Figure 3. Main logic of the Info-stealer submodule\n\nThe *bnk* file is a run-only compiled AppleScript. Direct decompilation of run-only compiled AppleScript is generally considered challenging or not feasible; however, the[AppleScript disassembler project on Github](https://github.com/Jinmo/applescript-disassembler) can be used to disassemble the code for analysis.\n\nThe script defines several functions for purposes such as data validation, encryption, decryption, obtaining additional data from command and control (C2), and logging. The script is executed with the domain as its parameter.\n\n![Screenshot of the disassembled code of the dec() function](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig4-XCSSET-Disassembled-code-n-1024x616.webp)Figure 4. Disassembled code of the *dec()* function\n\nAbove is a code snippet of the *dec()* function, which is used to decrypt the data received from C2 server. Parsing the above leads to the command:\n\n![Screenshot of the parsed data from C2 server](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig4a-XCSSET.webp)\n\nIn the referenced code, the encrypted data is stored in the variable *in*. The first 32 characters of this variable are extracted to serve as the initialization vector (IV). The remaining data is then Base64-decoded and provided to the AES decryption function. In this case, the decryption key is a predefined constant, *27860c1670a8d2f3de7bbc74cd754121*, which was established and computed within the main function.\n\nThe decoded blob appears to be a configuration file. Presented below is a formatted and redacted sample of the decrypted response obtained from the C2 server:\n\n![Screenshot of the configuration data from C2](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig5-XCSSET-Config-data-from-C2-n.webp)Figure 5. Configuration data received from the C2 server\n\nThe following section examines the core logic of the downloaded *bnk* payload, explaining how the previous information is interpreted and applied.\n\nFirstly, it calls a defined function to obtain the configuration data from the C2 server; this data is decrypted and stored in a variable. Shell commands are executed to retrieve the *SerialNumber* and the current user.\n\nThe clipboard content is retrieved which was determined by checking the AEVT [(Apple Event Code)](https://developer.apple.com/library/archive/releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html) codes. The process then identifies the frontmost application, which is checked against a blocklist defined by the “bad” property in the response from C2. Processing proceeds only if the current clipboard data differs from both the last clipboard entry and the last replaced clipboard data, the length of the clipboard data exceeds 25 characters, and the *oD()* function does not return true. The *oD()* function returns true when the first four characters are digits. After the above checks, it then has multiple gates and conditions. The first condition checks if the clipboard length is between 50 &lt; *len(clipboard)* &lt; 300. It then checks if the clipboard matches the pattern defined in the *s* record in the response. If it matches, the clipboard data is formatted in a record type string and is exfiltrated to the C2 server. The transmitted data is also AES-encrypted.\n\nIn the second condition, the script verifies whether the clipboard length is between 25 and 65, whether it was executed with a single argument, and whether *cD(clipboard\\_data)* function returns a value greater than 1, which refers to the count of digits in the data passed in argument. If these conditions are met, the script iterates through the *sub* collection in the C2 response, which includes individual entries for various wallets. Each *sub* collection entry contains:\n\n- *a*: Contains a list of addresses from which one is selected; the corresponding clipboard data is subsequently replaced.\n- *t*: Refers to the wallet identifier.\n- *r*: Specifies the regex pattern used for matching addresses associated with this wallet.\n- *ir* (optional): Represents a negative regex pattern; addresses matching this pattern should be excluded.\n- *p*: Appears to function as a counter or record index.\n\nFor each record, it matches pattern for *r* and *ir*. If the variable *r* is true and *ir* is false, then the program checks whether the clipboard content matches any of the attacker’s addresses. If it does not, it selects an address from the list and replaces the clipboard’s content accordingly. The system subsequently sends information—including the original clipboard data, the replaced data, the wallet name, frontmost application, and other relevant details—to the C2 server. Next, it assigns the value of the clipboard data to the *xcP* variable, which tracks the most recently replaced clipboard entry. Finally, it updates the *xP* variable to reflect the current clipboard text, waits for two seconds, and repeats the loop.\n\n### neq\\_cdyd\\_ilvcmwx (File-stealer)\n\nThis module retrieves an additional script from the C2 server, which is saved in the */tmp/* directory. The script is subsequently executed with the domain and *moduleName* provided as parameters. After execution, the downloaded file is deleted. The module operates as a compiled, run-only AppleScript. The script bears similarity to the *txzx\\_vostfdi* module, previously identified as a digital wallet data stealer targeting browsers. During analysis, the C2 server did not supply a folder list; however, it is capable of exfiltrating files back to the C2 server.\n\n![Screenshot of additional downloaded script](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig6-Additional-script-downloaded-n-1024x73.webp)Figure 6. Additional script being downloaded and executed\n\n### xmyyeqjx (LaunchDaemon-based persistence)\n\nThis submodule sets up *LaunchDaemon* persistence for the *~/.root* file, which is created in this module. Here’s a summary of the script:\n\nThe process begins by creating several paths and a *~/.root* file in the user’s *HOME* directory, which will contain the payload. The payload performs the following actions:\n\n- Changes the directory to */Users/Shared*\n- Checks the network connection\n- Retrieves the local signed-in user\n- Sleeps for 30 seconds\n- Executes the *~/.zshrc* file in the context of the signed-in user (*.zshrc* file was appended with malicious payload in previous submodules)\n- Sleeps for 30 seconds\n- Modifies two configurations to execute system commands that disable macOS automatic configuration updates and Rapid Security Response mechanisms.\n\n![Screenshot of commands that modify Software Update preferences on macOS](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig6a-XCSSET.webp)\n\nThese commands modify macOS Software Update preferences to disable various critical Apple Updates, including Rapid Security Responses (RSR), Security Configuration updates, and others.\n\nIt then calls the *doMainFunc()* function.\n\n![Screenshot of function that creates fake application and download of additional script](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig7-Creation-of-fake-application-n-1024x643.webp)Figure 7. Creation of fake application and downloading of additional script from C2 server.\n\nThis function first checks the existence of a *LaunchDaemon* entry with the presence of *.root* file in its contents. If it’s not found, it downloads another script from the C2 server, which is again a run-only compiled AppleScript. It then creates a fake application named S*ystem Settings.app* in the */tmp* directory, which basically executes this downloaded AppleScript with two parameters. These parameters appear to be the *Label/Plist Name* and the file to be persisted (*~/.root* file).  After creating the fake app, it calls another function where it waits for the legitimate *System Settings* application to get started, upon which it executes the fake application. This behavior is done to masquerade itself as legitimate.\n\nThe downloaded script first gets the device’s serial number and the current username by executing shell commands. It then forms path to the *LaunchDaemon* plist file and constructs its content. It uses the echo command to paste this constructed content to the *LaunchDaemon* file. The file name is the name that was passed in the argument. Below is an example of the created plist file:\n\n![Screenshot of plist content](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig8-XCSSET-plist-content-n-1024x47.webp)Figure 8. Plist content of the created LaunchDaemon entry\n\nIt masquerades with prefix *com.google* *.* in plist name and executes the *~/.root* file using bash. The echo command is run using “do shell script …. with administrator privileges” which can be implied by the *badm* AEVT code. It then executes *chown* command to change owner to *root:wheel* and sets 644 permissions to the plist file. Lastly, it executes the *launchctl load -w* command with *sudo* to start the daemon.\n\n### jey (Git-based persistence)\n\nThe command in the older variant executes a direct concatenation of encrypted payload along with the repeated decryption command directly through the shell. In the new variant, the decryption logic is encapsulated within a shell function, which is defined inline and then used to decrypt the encrypted string before passing it to the shell for execution. This change primarily enhances the obfuscation method used by malware.\n\nOld logic:\n\n![Screenshot of payload generation logic in older variant](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig9-payload-generation-logic-old-variant-n.webp)Figure 9. Payload generation logic in older variant\n\nNew logic:\n\n![Screenshot of payload generation logic in the latest XCSSET variant](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig10-payload-generation-logic-latest-variant-n.webp)Figure 10. Payload generation logic in the latest variant\n\n### iewmilh\\_cdyd (Info-stealer targeting Firefox)\n\nThis new variant has added an info-stealer module to exfiltrate data stored by Firefox. The *runMe()* function is invoked at first to download a Mach-O FAT binary, which is responsible for all info stealing operations, from the C2 server.\n\n![](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Fig11-Dowloading-compiled-binary-n.webp)Figure 11. Downloading compiled binary of the HackBrowserData project\n\nThis downloaded binary appears to be a modified version of a GitHub project [HackBrowserData](https://github.com/moonD4rk/HackBrowserData/tree/main), which is capable of decrypting and exporting browser data stored by browsers. Passwords, history, credit card information, and cookies are some of the key information it can extract from almost all popular browsers.\n\nUpon downloading, the binary is given executable file permissions, is ad-hoc signed on the victim’s machine, and executed with *–* *b firefox -f json –dir ” & resDir & ” –zip* as arguments:\n\n- *-b*: Browser name\n- *-f*: format of the output data\n- *–dir*: Export directory where the output is stored\n- *–zip*: This flag stores the output in compressed ZIP\n\nOnce all the data is retrieved, it uploads the compressed ZIP and log file to C2 server with its old method of exfiltrating data in chunks.\n\n## Mitigation and protection guidance\n\nDefenders can take the following mitigation steps to defend against this threat:\n\n- Run the latest version of your operating systems and applications. Deploy the latest security updates as soon as they become available.\n- Always inspect and verify Xcode projects downloaded or cloned from repositories, as the malware usually spreads through infected projects.\n- Exercise caution when copying and pasting sensitive data from the clipboard. Always verify that the pasted content matches the intended source to avoid falling victim to clipboard hijacking or data tampering attacks.\n- Encourage users to use web browsers that support [Microsoft Defender SmartScreen](https://learn.microsoft.com/deployedge/microsoft-edge-security-smartscreen) like [Microsoft Edge](https://www.microsoft.com/edge)—available on macOS and various platforms—which identifies and blocks malicious websites, including phishing sites, scam sites, and sites that contain exploits and host malware.\n- Use [Microsoft Defender for Endpoint on Mac](https://learn.microsoft.com/defender-endpoint/microsoft-defender-endpoint-mac), which detects, stops, and quarantines the malware discussed in this blog\n\nMicrosoft Defender for Endpoint customers can also apply the following mitigations to reduce the environmental attack surface and mitigate the impact of this threat and its payloads:\n\n- Turn on [cloud-delivered protection](https://learn.microsoft.com/defender-endpoint/mac-preferences#cloud-delivered-protection-preferences) and [automatic sample submission](https://learn.microsoft.com/defender-endpoint/mac-preferences#enable--disable-automatic-sample-submissions) on Microsoft Defender Antivirus. These capabilities use artificial intelligence and machine learning to quickly identify and stop new and unknown threats.\n- Enable [potentially unwanted application (PUA) protectio](https://learn.microsoft.com/defender-endpoint/mac-pua)n in block mode to automatically quarantine PUAs like adware. PUA blocking takes effect on endpoint clients after the next signature update or computer restart. PUA blocking takes effect on endpoint clients after the next signature update or computer restart.\n- Turn on [network protection](https://learn.microsoft.com/defender-endpoint/network-protection) to block connections to malicious domains and IP addresses.\n\n## Microsoft Defender XDR detections\n\nMicrosoft Defender XDR customers can refer to the list of applicable detections below. Microsoft Defender XDR coordinates detection, prevention, investigation, and response across endpoints, identities, email, apps to provide integrated protection against attacks like the threat discussed in this blog.\n\n| **Tactic** | **Observed activity** | **Microsoft Defender coverage** | | --- | --- | --- | | Initial access | – Malicious Xcode projects | **Microsoft Defender Antivirus** <br>– Trojan:MacOS/XCSSET.PB <br><br>**Microsoft Defender for Endpoint** <br>– Possible XCSSET activity | | Execution | – Malicious command execution <br>– Malicious file execution <br>– Malicious osascript execution | **Microsoft Defender Antivirus** <br>– Behaviour:MacOS/SuspOsascriptExec.B <br>– Behaviour:MacOS/SuspOsascriptExec.C <br>– Trojan:MacOS/XCSSET.AB <br>– Trojan:MacOS/XCSSET.BA <br>– Trojan:MacOS/XCSSET.SE <br>– Behavior:MacOS/SuspXcssetBehavior.AT <br>– Trojan:MacOS/XCSSET.ST <br>– Trojan:MacOS/XCSSET.SB <br>– Trojan:MacOS/XCSSET.SC   <br><br>**Microsoft Defender for Endpoint** <br>– Suspicious file dropped and launched <br>– Suspicious script launched <br>– Network connection by osascript <br>– Suspicious process launched from a world-writable directory | | Persistence | – Hidden *LaunchDaemon* persistence | **Microsoft Defender Antivirus** <br>– Behavior:MacOS/SuspHiddenPersistence.A1   <br><br>**Microsoft Defender for Endpoint** <br>– Suspicious Plist modifications – Suspicious launchctl tool activity | | Defense evasion | – Suspicious obfuscated command | **Microsoft Defender for Endpoint** <br>**–** Suspicious file or information obfuscation detected | | Credential access | – Use of modified HackBrowserData project | **Microsoft Defender Antivirus** <br>– Trojan:MacOS/HackBrowserData.A | | Impact | – Xcode project infection | **Microsoft Defender Antivirus** <br>– Behavior:MacOS/XCSSET.A |\n\nNote: For detections associated with older variants of XCSSET, refer to our [March 2025 blog post](https://www.microsoft.com/en-us/security/blog/2025/03/11/new-xcsset-malware-adds-new-obfuscation-persistence-techniques-to-infect-xcode-projects/).\n\n## Threat intelligence reports\n\nMicrosoft customers can use the following reports in Microsoft products to get the most up-to-date information about the threat actor, malicious activity, and techniques discussed in this blog. These reports provide the intelligence, protection information, and recommended actions to prevent, mitigate, or respond to associated threats found in customer environments.\n\n### Microsoft Defender XDR threat analytics\n\n- [Tool profile: XCSSET](https://security.microsoft.com/threatanalytics3/e70b90bb-dad2-4924-b056-5b504a77d1fb/overview?)\n\n## Hunting queries\n\n### Microsoft Defender XDR\n\nMicrosoft Defender XDR customers can run the following query to find related activity in their networks:\n\n**Suspicious commands while building an Xcode project**\n\nSearch for suspicious commands related to this XCSSET when an Xcode project is being built.\n\n```\n\nDeviceProcessEvents | where ProcessCommandLine has_all(\"echo\", \"xxd -p -r\", \"| sh\") or ProcessCommandLine has_all(\"echo\", \"base64 -d\", \"| sh\") | where InitiatingProcessFileName has_any (\"sh\", \"bash\", \"zsh\") | where InitiatingProcessCommandLine contains \"/Developer/Xcode/DerivedData\" ```\n\n**Suspicious commands executed by XCSSET info-stealer module**\n\nSearch for suspicious commands related to decryption logic of data received from C2.\n\n```\n\nDeviceProcessEvents | where ProcessCommandLine has_any (\"base64 --decode\", \"base64 -d\") and ProcessCommandLine has_all (\"openssl enc -d\", \"cut -c1-32\") ```\n\n**Suspicious application creation**\n\nSearch for suspicious applications created in Temp folder by this XCSSET.\n\n```\n\nDeviceFileEvents | where FolderPath matches regex @\"/tmp/[a-zA-Z]\\.app\" ```\n\n### Microsoft Sentinel\n\nMicrosoft Sentinel customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious domain indicators mentioned in this blog post with data in their workspace. If the TI Map analytics are not currently deployed, customers can install the Threat Intelligence solution from the [Microsoft Sentinel Content Hub](https://learn.microsoft.com/azure/sentinel/sentinel-solutions-deploy) to have the analytics rule deployed in their Sentinel workspace.\n\nBelow are the queries using [Sentinel Advanced Security Information Model (ASIM) functions](https://learn.microsoft.com/azure/sentinel/normalization) to hunt threats across both Microsoft first-party and third-party data sources. ASIM also supports deploying parsers to specific workspaces [from GitHub](https://aka.ms/DeployASIM), using an ARM template or manually.\n\n**Detect network IP and domain indicators of compromise using ASIM**\n\nThe following query checks IP addresses and domain IOCs across data sources supported by ASIM network session parser:\n\n```\n\n//IP list and domain list- _Im_NetworkSession let lookback = 30d; let ioc_ip_addr = dynamic([]); let ioc_domains = dynamic([\"cdntor.ru\", \"checkcdn.ru\", \"cdcache.ru\", \"applecdn.ru\", \"flowcdn.ru\", \"elasticdns.ru\", \"rublenet.ru\", \"figmastars.ru\", \"bulksec.ru\", \"dobetrix.ru\", \"figmacat.ru\", \"digichat.ru\", \"diggimax.ru\", \"cdnroute.ru\", \"sigmanow.ru\", \"fixmates.ru\", \"mdscache.ru\", \"trinitysol.ru\", \"verifysign.ru\", \"digitalcdn.ru\", \"windsecure.ru\", \"dobecdn.ru\"]); _Im_NetworkSession(starttime=todatetime(ago(lookback)), endtime=now()) | where DstIpAddr in (ioc_ip_addr) or DstDomain has_any (ioc_domains) | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated), EventCount=count() by SrcIpAddr, DstIpAddr, DstDomain, Dvc, EventProduct, EventVendor ```\n\n**Detect domain and URL indicators of compromise using ASIM**\n\nThe following query checks domain and URL IOCs across data sources supported by ASIM web session parser.\n\n```\n\n// file hash list - imFileEvent // Domain list - _Im_WebSession let ioc_domains = dynamic([\"cdntor.ru\", \"checkcdn.ru\", \"cdcache.ru\", \"applecdn.ru\", \"flowcdn.ru\", \"elasticdns.ru\", \"rublenet.ru\", \"figmastars.ru\", \"bulksec.ru\", \"dobetrix.ru\", \"figmacat.ru\", \"digichat.ru\", \"diggimax.ru\", \"cdnroute.ru\", \"sigmanow.ru\", \"fixmates.ru\", \"mdscache.ru\", \"trinitysol.ru\", \"verifysign.ru\", \"digitalcdn.ru\", \"windsecure.ru\", \"dobecdn.ru\"]); _Im_WebSession (url_has_any = ioc_domains) ```\n\n# Indicators of compromise\n\n| **Indicator** | **Type** | **Description** | | --- | --- | --- | | cdntor[.]ru | Domain | C2 server | | checkcdn[.]ru | Domain | C2 server | | cdcache[.]ru | Domain | C2 server | | applecdn[.]ru | Domain | C2 server | | flowcdn[.]ru | Domain | C2 server | | elasticdns[.]ru | Domain | C2 server | | rublenet[.]ru | Domain | C2 server | | figmastars[.]ru | Domain | C2 server | | bulksec[.]ru | Domain | C2 server | | dobetrix[.]ru | Domain | C2 server | | figmacat[.]ru | Domain | C2 server | | digichat[.]ru | Domain | C2 server | | diggimax[.]ru | Domain | C2 server | | cdnroute[.]ru | Domain | C2 server | | sigmanow[.]ru | Domain | C2 server | | fixmates[.]ru | Domain | C2 server | | mdscache[.]ru | Domain | C2 server | | trinitysol[.]ru | Domain | C2 server | | verifysign[.]ru | Domain | C2 server | | digitalcdn[.]ru | Domain | C2 server | | windsecure[.]ru | Domain | C2 server | | dobecdn[.]ru | Domain | C2 server | | 12ea52c4089d100e679a2350f03e598b2f3feebfbbd2ed5631a2a7a20b07e826 | SHA-256 | */tmp/ancr* (Modified version of HackBrowserData Github project) | | 5a212c5ce1e0f41e721ce0940afb381b694a2e32a6d19c1d2210f703636362df | SHA-256 | */tmp/b* (fourth-stage payload) | | 0fbd0e1995472f308cf1ac8229a02c277035404426769fa50947a72c95ad7d31 | SHA-256 | *jey* (establishes persistence through Git commits) | | f3bc158619b2aad17def966f0ac8dddc2107e4911a7c488d358d906f27ac2a2b | SHA-256 | */tmp/xmyyeqjx* (*LaunchDaemon* based persistence) |\n\n# References:\n\n- [https://www.microsoft.com/en-us/security/blog/2025/03/11/new-xcsset-malware-adds-new-obfuscation-persistence-techniques-to-infect-xcode-projects/](https://www.microsoft.com/en-us/security/blog/2025/03/11/new-xcsset-malware-adds-new-obfuscation-persistence-techniques-to-infect-xcode-projects/)\n- [https://github.com/Jinmo/applescript-disassembler](https://github.com/Jinmo/applescript-disassembler)\n- [https://www.trendmicro.com/en_us/research/20/h/xcsset-mac-malware–infects-xcode-projects–uses-0-days.html](https://www.trendmicro.com/en_us/research/20/h/xcsset-mac-malware--infects-xcode-projects--uses-0-days.html)\n- [https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf](https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf)\n- [https://www.intego.com/mac-security-blog/mac-malware-exposed-xcsset-an-advanced-new-threat/](https://www.intego.com/mac-security-blog/mac-malware-exposed-xcsset-an-advanced-new-threat/)\n- [https://www.jamf.com/blog/osx-xcsset-subverts-developer-environments/](https://www.jamf.com/blog/osx-xcsset-subverts-developer-environments/)\n- [https://www.sentinelone.com/blog/xcsset-malware-update-macos-threat-actors-prepare-for-life-without-python/](https://www.sentinelone.com/blog/xcsset-malware-update-macos-threat-actors-prepare-for-life-without-python/)\n\n## Learn more\n\nFor the latest security research from the Microsoft Threat Intelligence community, check out the [Microsoft Threat Intelligence Blog](https://aka.ms/threatintelblog).\n\nTo get notified about new publications and to join discussions on social media, follow us on [LinkedIn](https://www.linkedin.com/showcase/microsoft-threat-intelligence), [X (formerly Twitter)](https://x.com/MsftSecIntel), and [Bluesky](https://bsky.app/profile/threatintel.microsoft.com).\n\nTo hear stories and insights from the Microsoft Threat Intelligence community about the ever-evolving threat landscape, listen to the [Microsoft Threat Intelligence podcast](https://thecyberwire.com/podcasts/microsoft-threat-intelligence).",
  "Link": "https://www.microsoft.com/en-us/security/blog/2025/09/25/xcsset-evolves-again-analyzing-the-latest-updates-to-xcssets-inventory/",
  "Title": "XCSSET evolves again: Analyzing the latest updates to XCSSET’s inventory",
  "FeedLevelAuthor": "Microsoft Security Blog",
  "Tags": [],
  "OutputDir": "_news",
  "FeedName": "Microsoft Security Blog",
  "PubDate": "2025-09-25T15:00:00+00:00"
}
