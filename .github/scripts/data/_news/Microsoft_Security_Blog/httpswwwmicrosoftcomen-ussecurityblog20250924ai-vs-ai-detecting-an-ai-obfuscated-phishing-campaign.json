{
  "FeedName": "Microsoft Security Blog",
  "Link": "https://www.microsoft.com/en-us/security/blog/2025/09/24/ai-vs-ai-detecting-an-ai-obfuscated-phishing-campaign/",
  "EnhancedContent": "Microsoft Threat Intelligence recently detected and blocked a credential phishing campaign that likely used AI-generated code to obfuscate its payload and evade traditional defenses. Appearing to be aided by a large language model (LLM), the activity obfuscated its behavior within an SVG file, leveraging business terminology and a synthetic structure to disguise its malicious intent. In analyzing the malicious file, Microsoft Security Copilot assessed that the code was “not something a human would typically write from scratch due to its complexity, verbosity, and lack of practical utility.”\n\nLike many transformative technologies, AI is being adopted by both defenders and cybercriminals. While defenders use AI to detect, analyze, and respond to threats at scale, attackers are experimenting with AI to enhance their own operations, such as by crafting more convincing lures, automating obfuscation, and generating code that mimics legitimate content. Even though the campaign in this case was limited in nature and primarily aimed at US-based organizations, it exemplifies a broader trend of attackers leveraging AI to increase the effectiveness and stealth of their operations. This case also underscores the growing need for defenders to understand and anticipate AI-driven threats.\n\nDespite the sophistication of the obfuscation, the campaign was successfully detected and blocked by Microsoft Defender for Office 365’s AI-powered protection systems, which analyze signals across infrastructure, behavior, and message context that remain largely unaffected by an attacker’s use of AI. By sharing our analysis, we aim to help the security community recognize similar tactics being used by threat actors and reinforce that AI-enhanced threats, while evolving, are not undetectable. As we discuss in this post, an attacker’s use of AI often introduces new artifacts that can be leveraged for detection. By applying these insights and our recommended best practices, organizations can strengthen their own defenses against similar emerging, AI-aided phishing campaigns.\n\n## Phishing campaign tactics and payload\n\nOn August 18, Microsoft Threat Intelligence detected a phishing campaign leveraging a compromised small business email account to distribute malicious phishing emails intended to steal credentials. The attackers employed a self-addressed email tactic, where the sender and recipient addresses matched, and actual targets were hidden in the BCC field, which is done to attempt to bypass basic detection heuristics. The content of the email was crafted to resemble a file-sharing notification, containing the message:\n\n![Screenshot of a phishing email appearing to share a PDF file with a recipient. ](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/image-5.webp)*Figure 1. Phishing email example*\n\nAttached to the email was a file named *23mb – PDF- 6 pages.svg*, designed to look like a legitimate PDF document even though the file extension indicates it is an SVG file. SVG files (Scalable Vector Graphics) are attractive to attackers because they are text-based and scriptable, allowing them to embed JavaScript and other dynamic content directly within the file. This makes it possible to deliver interactive phishing payloads that appear benign to both users and many security tools. Additionally, SVGs support obfuscation-friendly features such as invisible elements, encoded attributes, and delayed script execution, all of which can be used to evade static analysis and sandboxing.\n\nWhen opened, the SVG file redirected the user to a webpage that prompted them to complete a CAPTCHA for security verification, a common social engineering tactic used to build trust and delay suspicion. Although our visibility for this incident was limited to the initial landing page due to the activity being detected and blocked, the campaign would have very likely presented a fake sign in page after the CAPTCHA to harvest credentials.\n\n![Screenshot of the Cloudflare security verification prompt](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Figure-2.-Security-verification-prompt.webp)*Figure 2. Security verification prompt*\n\nAn analysis of the SVG code found that it used a unique method of obfuscating its content and behavior. Instead of using cryptographic obfuscation, which is commonly used to obfuscate phishing content, the SVG code in this campaign used business-related language to disguise its malicious activity. It did this in two ways:\n\nFirst, the beginning of the SVG code was structured to look like a legitimate business analytics dashboard. It contained elements for a supposed Business Performance Dashboard, including chart bars and month labels. These elements, however, were rendered completely invisible to the user by setting their opacity to zero and their fill to transparent. This tactic is designed to mislead anyone casually inspecting the file, making it appear as if the SVG’s sole purpose is to visualize business data. In reality, though, it’s a decoy.\n\n![Screenshot of code depicting the SVG file containing the decoy business chart](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Figure-3.-SVG-code-containing-decoy-business-performance-chart.webp)*Figure 3. SVG code containing decoy business performance chart*\n\nSecond, the payload’s functionality was also hidden using a creative use of business terms. Within the file, the attackers encoded the malicious payload using a long sequence of business-related terms. Words like revenue, operations, risk, or shares were concatenated into a hidden *data-analytics* attribute of an invisible *&lt;text&gt;* element within the SVG.\n\n![Screenshot of code depicting the business-related terms like data, quarterly, annual, overview, dashboard, kpi, and many more.](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Figure-4.-Sequence-of-business-related-terms.webp)*Figure 4. Sequence of business-related terms*\n\nThe terms in this attribute were later used by embedded JavaScript, which systematically processed the business-related words through several transformation steps. Instead of directly including malicious code, the attackers encoded the payload by mapping pairs or sequences of these business terms to specific characters or instructions. As the script runs, it decodes the sequence, reconstructing the hidden functionality from what appears to be harmless business metadata. This obfuscated functionality included redirecting a user’s browser to the initial phishing landing page, triggering browser fingerprinting, and initiating session tracking.\n\n![Screenshot of code depicting the conversion of business terminology to processable malicious code](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/image-7.webp)*Figure 5. Conversion of business terminology to processable malicious code*\n\n## Using AI to analyze the campaign\n\nGiven the unique methods used to obfuscate the SVG payload’s functionality, we hypothesized that the attacker may have used AI to assist them. We asked Security Copilot to analyze the contents of the SVG file to assess whether it was generated by AI or an LLM. Security Copilot’s analysis indicated that it was highly likely that the code was synthetic and likely generated by an LLM or a tool using one. Security Copilot determined that the code exhibited a level of complexity and verbosity rarely seen in manually written scripts, suggesting it was produced by an AI model rather than crafted by a human.\n\nSecurity Copilot provided five key indicators to support its conclusion:\n\n1. **Overly descriptive and redundant naming**\n- The function and variable names (e.g., *processBusinessMetricsf43e08*, *parseDataFormatf19e04*, *convertMetricsDataf98e36*, *initializeAnalytics4e2250*, *userIdentifierb8db*, *securityHash9608*) follow a consistent pattern of descriptive English terms concatenated with random hexadecimal strings. This naming convention is typical of AI/LLM-generated code, which often appends random suffixes to avoid collisions and increase obfuscation.\n\n![Screenshot of code depicting the overly descriptive variable and function names like processBusinessMetricsf43e08 and parseDataFormatf19e04](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Figure-6.-Example-of-overly-descriptive-variable-and-function-names.webp)*Figure 6. Example of overly descriptive variable and function names*\n1. **Modular and over-engineered code structure**\n- The code structure is highly modular, with clear separation of concerns and repeated use of similar logic blocks (e.g., mapping business terms to character codes, block reversal, offset correction, token-based validation). This systematic approach is characteristic of AI/LLM output, which tends to over-engineer and generalize solutions.\n\n![Screenshot of code depicting the over-engineered logic parsing the business terminology](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/image-8.webp)*Figure 7. Example of over-engineered logic parsing the business terminology*\n1. **Generic comments**\n- Comments are verbose, generic, and use formal business language (“Advanced business intelligence data processor”, “Business terminology parser for standardized format conversion”, “Generate secure processing token for data validation”), which is a hallmark of AI-generated documentation.\n\n![Screenshot of code depicting the verbose, generic comments](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/image-6.webp)*Figure 8. Examples of verbose, generic comments.*\n1. **Formulaic obfuscation techniques**\n- The obfuscation techniques (e.g., encoding business terms, multi-stage data transformation, dynamic function creation) are implemented in a way that is both thorough and formulaic, matching the style of AI/LLM code generation.\n2. **Unusual use of CDATA and XML declaration**\n- The SVG code includes both an XML declaration and a CDATA-wrapped script, which is more typical of LLM-generated code that aims to be “technically correct” or to mimic documentation examples, even when such elements are unnecessary for the attack to function.\n\n![Screenshot of code depicting the SVG's XML declaration and DATA-wrapped script](https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2025/09/Figure-9.-Example-of-the-SVGs-XML-declaration-and-CDATA-wrapped-script.webp)*Figure 9. Example of the SVG’s XML declaration and CDATA-wrapped script*\n\n## Using AI to detect the campaign\n\nWhile the use of AI to obfuscate phishing payloads may seem like a significant leap in attacker sophistication, it’s important to understand that AI does not fundamentally change the core artifacts that security systems rely on to detect phishing threats. AI-generated code may be more complex or syntactically polished, but it still operates within the same behavioral and infrastructural boundaries as human-crafted attacks.\n\nMicrosoft Defender for Office 365 uses AI and machine learning models trained to detect phishing and are designed to identify patterns across multiple dimensions—not just the payload itself. These include:\n\n- Attack infrastructure (such as suspicious domain characteristics, hosting behavior)\n- Tactics, techniques, and procedures (TTPs) (such as the use of redirects, CAPTCHA gates, session tracking)\n- Impersonation strategies (such as pretending to share documents, mimicking file-sharing notifications)\n- Message context and delivery patterns (such as self-addressed emails, BCC usage, mismatched sender/recipient behavior)\n\nThese signals are largely unaffected by whether the payload was written by a human or an LLM. In fact, AI-generated obfuscation often introduces synthetic artifacts, like verbose naming, redundant logic, or unnatural encoding schemes, that can become new detection signals themselves.\n\nDespite the use of AI to obfuscate the SVG payload, this campaign was blocked by Microsoft Defender for Office 365’s detection system through a combination of infrastructure analysis, behavioral indicators, and message context, none of which were impacted by the use of AI. Signals used to detect this campaign included the following:\n\n- **Use of self-addressed email with BCCed recipients** – This tactic is commonly used to attempt to bypass basic email heuristics and hide the true recipient list.\n- **Suspicious file type/name** – SVG files, generally, have been an emerging payload used in phishing attacks and the attachments in this campaign were named to resemble a PDF, which is atypical for legitimate document sharing.\n- **Redirect to malicious infrastructure** – The SVG payload redirected to a domain that had previously been identified as being linked to phishing content.\n- **General use of code obfuscation** – While the SVG file contained novel obfuscation tactics that hadn’t been seen before, the presence of obfuscation alone was an indicator of potentially malicious intent.\n- **Suspicious network behavior** – Automated analysis of the phishing site indicated that it employed session tracking and browser fingerprinting, which can be used to selectively serve content based on geography or environment, a behavior used by some phishing actors.\n\n## Recommendations\n\nWhile this campaign was limited in scope and effectively blocked, similar techniques are increasingly being leveraged by a range of threat actors. Sharing our findings equips organizations to identify and mitigate these emerging threats, regardless of the specific threat actor behind them. Microsoft Threat Intelligence recommends the following mitigations, which are effective against a range of phishing threats, including those that may use AI-generated code.\n\n- [Review our recommended settings](https://learn.microsoft.com/defender-office-365/recommended-settings-for-eop-and-office365) for Exchange Online Protection and Microsoft Defender for Office 365.\n- Configure Microsoft Defender for Office 365 to [recheck links on click.](https://learn.microsoft.com/defender-office-365/safe-links-about) Safe Links provides URL scanning and rewriting of inbound email messages in mail flow, and time-of-click verification of URLs and links in email messages, other Microsoft 365 applications such as Teams, and other locations such as SharePoint Online. Safe Links scanning occurs in addition to the regular [anti-spam](https://learn.microsoft.com/defender-office-365/anti-spam-protection-about) and [anti-malware](https://learn.microsoft.com/defender-office-365/anti-malware-protection-about) protection in inbound email messages in Microsoft Exchange Online Protection (EOP). Safe Links scanning can help protect your organization from malicious links used in phishing and other attacks.\n- Turn on [Zero-hour auto purge (ZAP](https://learn.microsoft.com/defender-office-365/zero-hour-auto-purge)) in Defender for Office 365 to quarantine sent mail in response to newly-acquired threat intelligence and retroactively neutralize malicious phishing, spam, or malware messages that have already been delivered to mailboxes.\n- Encourage users to use Microsoft Edge and other web browsers that support [Microsoft Defender SmartScreen](https://learn.microsoft.com/deployedge/microsoft-edge-security-smartscreen), which identifies and blocks malicious websites, including phishing sites, scam sites, and sites that host malware.\n- Turn on [cloud-delivered protection](https://learn.microsoft.com/defender-endpoint/enable-cloud-protection-microsoft-defender-antivirus) in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attack tools and techniques. Cloud-based machine learning protections block a majority of new and unknown variants\n- [Configure Microsoft Entra with increased security](https://learn.microsoft.com/entra/fundamentals/configure-security).\n- Pilot and deploy [phishing-resistant authentication methods](https://learn.microsoft.com/entra/identity/authentication/concept-authentication-methods) for users.\n- Implement Entra ID [Conditional Access authentication strength](https://learn.microsoft.com/entra/identity/authentication/concept-authentication-strengths) to require phishing-resistant authentication for employees and external users for critical apps.\n\n## Microsoft Defender XDR detections\n\nMicrosoft Defender XDR customers can refer to the list of applicable detections below. Microsoft Defender XDR coordinates detection, prevention, investigation, and response across endpoints, identities, email, apps to provide integrated protection against attacks like the threat discussed in this blog.\n\nCustomers with provisioned access can also use [Microsoft Security Copilot in Microsoft Defender](https://learn.microsoft.com/defender-xdr/security-copilot-in-microsoft-365-defender) to investigate and respond to incidents, hunt for threats, and protect their organization with relevant threat intelligence.\n\n| **Tactic** | **Observed activity** | **Microsoft Defender coverage** | | --- | --- | --- | | Initial access | -Phishing emails sent from a compromised small business email account. <br>-Phishing emails contained an attached SVG file. | –**Microsoft Defender for Office 365** tenant admins can use Threat Explorer to query associated SVG file attachments using file type, file extension, or attachment file name fields. The rule description from Threat Explorer is: *This SVG has traits consistent with credential phishing campaigns*. <br>–**Microsoft Defender XDR** Malicious email-sending activity from a risky user | | Execution | -Embedded JavaScript within the attached SVG file executed upon opening in a browser. | | | Defense evasion | -Obfuscation using invisible SVG elements and encoded business terminology. <br>-Fake CAPTCHA, browser fingerprinting, and session tracking used to evade detection. | | | Impact | -Potential credential theft if targeted user completes the phishing flow. | –**Microsoft Defender XDR** Risky sign in attempt following a possible phishing campaign |\n\n## Microsoft Security Copilot\n\nSecurity Copilot customers can use the standalone experience to [create their own prompts](https://learn.microsoft.com/copilot/security/prompting-security-copilot#create-your-own-prompts) or run the following [prebuilt promptbooks](https://learn.microsoft.com/copilot/security/using-promptbooks) to automate incident response or investigation tasks related to this threat:\n\n- Incident investigation\n- Microsoft User analysis\n- Threat actor profile\n- Threat Intelligence 360 report based on MDTI article\n- Vulnerability impact assessment\n\nNote that some promptbooks require access to plugins for Microsoft products such as Microsoft Defender XDR or Microsoft Sentinel.\n\n## Hunting queries\n\n### Microsoft Sentinel\n\nMicrosoft Sentinel customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious domain indicators mentioned in this blog post with data in their workspace. If the TI Map analytics are not currently deployed, customers can install the Threat Intelligence solution from the Microsoft Sentinel Content Hub to have the analytics rule deployed in their Sentinel workspace.\n\nBelow are the queries using Sentinel Advanced Security Information Model (ASIM) functions to hunt threats across both Microsoft first party and third-party data sources. ASIM also supports deploying parsers to specific workspaces from GitHub using an ARM template or manually.\n\n**Detect network domain indicators of compromise using ASIM**\n\nThe following query checks IP addresses and domain IOCs across data sources supported by ASIM network session parser:\n\n```\n\n//Domain list- _Im_NetworkSession let lookback = 30d; let ioc_ip_addr = dynamic([]); let ioc_domains = dynamic([\"kmnl.cpfcenters.de\"]); _Im_NetworkSession(starttime=todatetime(ago(lookback)), endtime=now()) | where DstDomain has_any (ioc_domains) | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated), EventCount=count() by SrcIpAddr, DstIpAddr, DstDomain, Dvc, EventProduct, EventVendor ```\n\n**Detect domain and URL indicators of compromise using ASIM**\n\nThe following query checks domain and URL IOCs across data sources supported by ASIM web session parser:\n\n```\n\n// Domain list - _Im_WebSession let ioc_domains = dynamic([\"kmnl.cpfcenters.de”]); _Im_WebSession (url_has_any = ioc_domains) ```\n\n## Indicators of compromise\n\n| **Indicator** | **Type** | **Description** | **First seen** | **Last seen** | | --- | --- | --- | --- | --- | | *kmnl[.]cpfcenters[.]de* | Domain | Domain hosting phishing content | 08/18/2025 | 08/18/2025 | | *23mb – PDF- 6 Pages[.]svg* | File name | File name of SVG attachment | 08/18/2025 | 08/18/2025 |\n\n## Learn more\n\nFor the latest security research from the Microsoft Threat Intelligence community, check out the [Microsoft Threat Intelligence Blog](https://aka.ms/threatintelblog).\n\nTo get notified about new publications and to join discussions on social media, follow us on [LinkedIn](https://www.linkedin.com/showcase/microsoft-threat-intelligence), [X (formerly Twitter)](https://x.com/MsftSecIntel), and [Bluesky](https://bsky.app/profile/threatintel.microsoft.com).\n\nTo hear stories and insights from the Microsoft Threat Intelligence community about the ever-evolving threat landscape, listen to the [Microsoft Threat Intelligence podcast](https://thecyberwire.com/podcasts/microsoft-threat-intelligence).",
  "Title": "AI vs. AI: Detecting an AI-obfuscated phishing campaign",
  "ProcessedDate": "2025-09-24 13:22:32",
  "Tags": [],
  "FeedUrl": "https://www.microsoft.com/en-us/security/blog/feed/",
  "OutputDir": "_news",
  "Description": "Microsoft Threat Intelligence recently detected and blocked a credential phishing campaign that likely used AI-generated code to obfuscate its payload and evade traditional defenses, demonstrating a broader trend of attackers leveraging AI to increase the effectiveness of their operations and underscoring the need for defenders to understand and anticipate AI-driven threats.\n\nThe post [AI vs. AI: Detecting an AI-obfuscated phishing campaign](https://www.microsoft.com/en-us/security/blog/2025/09/24/ai-vs-ai-detecting-an-ai-obfuscated-phishing-campaign/) appeared first on [Microsoft Security Blog](https://www.microsoft.com/en-us/security/blog).",
  "Author": "Microsoft Threat Intelligence",
  "PubDate": "2025-09-24T12:00:00+00:00",
  "FeedLevelAuthor": "Microsoft Security Blog"
}
