{
  "Tags": [
    "Agile",
    "Azure & Cloud",
    "Community",
    "DevOps"
  ],
  "OutputDir": "_news",
  "FeedLevelAuthor": "Azure DevOps Blog",
  "ProcessedDate": "2025-08-05 14:15:44",
  "FeedUrl": "https://devblogs.microsoft.com/devops/feed/",
  "Title": "Azure DevOps MCP Server, Public Preview",
  "Description": "A few weeks ago at BUILD, we announced the upcoming Azure DevOps MCP Server: üëâ Azure DevOps with GitHub Repositories ‚Äì Your path to Agentic AI Today, we‚Äôre excited to share that the local Azure DevOps MCP Server is now available in public preview. This lets GitHub Copilot in Visual Studio and Visual Studio Code [‚Ä¶]\n\nThe post [Azure DevOps MCP Server, Public Preview](https://devblogs.microsoft.com/devops/azure-devops-mcp-server-public-preview/) appeared first on [Azure DevOps Blog](https://devblogs.microsoft.com/devops).",
  "Link": "https://devblogs.microsoft.com/devops/azure-devops-mcp-server-public-preview/",
  "FeedName": "Microsoft DevBlog",
  "Author": "Dan Hellem",
  "EnhancedContent": "A few weeks ago at BUILD, we announced the upcoming Azure DevOps MCP Server:\n\nüëâ [Azure DevOps with GitHub Repositories ‚Äì Your path to Agentic AI](https://devblogs.microsoft.com/devops/azure-devops-with-github-repositories-your-path-to-agentic-ai/)\n\nToday, we‚Äôre excited to share that the local Azure DevOps MCP Server is now available in public preview. This lets GitHub Copilot in Visual Studio and Visual Studio Code access and interact with your Azure DevOps environment, including work items, pull requests, test plans, builds, releases, and wiki pages.\n\n### ü§∑‚Äç‚ôÇÔ∏è What is an MCP Server?\n\nA local MCP Server (Model Context Provider) is a tool that sits between your AI assistant (like GitHub Copilot) and your Azure DevOps organization. Its job is to inject rich, real-time context such as work items, pull requests, test plans, etc., into the prompts sent to the LLM. This lets the assistant give better, more accurate, and more relevant answers tailored to your specific Azure DevOps project.\n\nUnlike cloud-based solutions, a local MCP Server runs inside your network or development environment. That means it can safely access private data and tools without that data ever leaving your system.\n\n### üìΩÔ∏è Example\n\nYou can find several example videos and prompts in the [how-to guide](https://github.com/microsoft/azure-devops-mcp/blob/main/docs/HOWTO.md#%EF%B8%8F-examples). One fun example shows how you can take a user story, generate a set of test cases with detailed steps based on the work item description, and then link those test cases back to the original user story.\n\nIf you have ideas or need examples for specific scenarios, feel free to [create an issue](https://github.com/microsoft/azure-devops-mcp/issues) in the repository.\n\n### ‚≠ê Getting Started\n\nGetting started is relatively easy, but it does require a few setup steps. Here is a quick overview of the steps, but we do recommend you follow the full installation and setup instructions provided [in the repository](https://github.com/microsoft/azure-devops-mcp/blob/main/README.md) to ensure everything is configured correctly.\n\n1. Navigate to the [Azure DevOps MCP Server repository](https://github.com/microsoft/azure-devops-mcp).\n2. Sign in using the Azure CLI: `az login`\n3. [Copy and paste the configuration](https://github.com/microsoft/azure-devops-mcp/blob/main/README.md#steps) into your local `.vscode\\mcp.json`\nfile.\n4. Start the MCP Server and begin using the tools.\n\n### üí¨ Feedback\n\nWe‚Äôre actively collecting feedback throughout the public preview stage. If you run into any issues or have suggestions, we‚Äôd love to hear from you. Please create or comment on Issues directly in the [Azure DevOps MCP Server repository](https://github.com/microsoft/azure-devops-mcp/issues).",
  "PubDate": "2025-06-17T18:40:23+00:00"
}
