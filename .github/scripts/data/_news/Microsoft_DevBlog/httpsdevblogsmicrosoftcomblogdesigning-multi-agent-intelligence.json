{
  "Tags": [
    "AI",
    "Multi-Agent",
    "Reference Architecture"
  ],
  "Link": "https://devblogs.microsoft.com/blog/designing-multi-agent-intelligence",
  "ProcessedDate": "2025-08-20 19:09:38",
  "Description": "Written by: Maggie Liu, Thiago Rotta, Vinicius Souza, James Tooles, & Microsoft AI Co-Innovation Labs 1. Introduction Generative‚ÄØAI is moving from proof‚Äëof‚Äëconcept pilots to mission‚Äëcritical workloads at a velocity rarely seen in enterprise technology.‚ÄØThe first wave of projects‚ÄØtypically stood up a single ‚Äúdo‚Äëeverything‚Äù agent, a large language model wrapped with prompt‚Äëengineering, a vector store, and [‚Ä¶]\n\nThe post [Designing Multi-Agent Intelligence](https://devblogs.microsoft.com/blog/designing-multi-agent-intelligence) appeared first on [Microsoft for Developers](https://devblogs.microsoft.com).",
  "FeedName": "Microsoft DevBlog",
  "OutputDir": "_news",
  "EnhancedContent": "Written by: [Maggie Liu](https://www.linkedin.com/in/maggieliumicrosoft/), [Thiago Rotta](https://www.linkedin.com/in/thiagocesarrotta/), [Vinicius Souza](https://www.linkedin.com/in/viniciusbatista/), [James Tooles](https://www.linkedin.com/in/james-tooles/), & [Microsoft AI Co-Innovation Labs](https://aiotlabs.microsoft.com/en)\n\n## 1. Introduction\n\nGenerative‚ÄØAI is moving from proof‚Äëof‚Äëconcept pilots to mission‚Äëcritical workloads at a velocity rarely seen in enterprise technology.‚ÄØThe first wave of projects‚ÄØtypically stood up a single ‚Äúdo‚Äëeverything‚Äù agent, a large language model wrapped with prompt‚Äëengineering, a vector store, and a handful of API connectors. That pattern is excellent for narrow FAQ bots, yet it collapses under the weight of real‚Äëworld enterprise constraints:\n\n- Domain expertise that spans dozens of business lines\n- Strict data‚Äësovereignty and model‚Äëaccess policies\n- The need to plug in new capabilities or swap models without redeploying the entire stack overnight\n\nEnterprises adopting the latest advancements in AI are therefore pivoting toward multi‚Äëagent system, collections of autonomous, task‚Äëspecialized agents that coordinate through an orchestrator,‚ÄØmirroring how cross‚Äëfunctional human teams tackle complex work. Each agent couples:\n\n- LLM or SLM core (large or small language model)\n- Domain‚Äëspecific toolset (APIs, knowledge graphs, proprietary data)\n- Short‚Äëand long‚Äëterm memory to refine plans over time\n\nThe breakthrough is not an individual agent‚Äôs intelligence, but the emergent behavior that surfaces when many agents share context, divide labor, and merge results into a cohesive answer.\n\n## 2. Problem Statement\n\nDespite the rapid adoption of LLM-powered assistants across sectors, most enterprise implementations remain anchored in single-agent architectures, systems where a single, generalized agent is tasked with understanding every request, invoking every tool, and adhering to every policy. While this ‚Äúcentralized intelligence‚Äù model is adequate for constrained use cases (e.g., internal FAQs or chatbot front doors), it fundamentally breaks down under the demands of modern enterprise workflows.\n\nOrganizations attempting to scale this model encountered several structural challenges:\n\n- Over generalization: A single agent attempting to serve multiple lines of business‚Äîeach with its own regulatory, linguistic, and decision-making nuances‚Äîleads to brittle prompts, generic responses, and degraded model performance across the board.\n- Performance bottlenecks: When everything runs through a single agent, the system slows down‚Äîespecially as more users send requests or the tasks get more complex and require multiple steps or tools.\n- Security and Compliance exposure: Centralized access to diverse datasets such as financial, healthcare, PII, etc, violates core principles like data minimization and least-privilege access, making it difficult to satisfy regulatory frameworks.\n- Change management complexity: Because all logic, tools, and memory are coupled in one agent, adding a new feature or domain use case requires regression testing the full stack. This dramatically slows time-to-value and creates risk-aversion among platform teams.\n- Inflexibility to specialize: As use cases evolve, new tools, APIs, and models (e.g., lightweight SLMs for local inference or fine-tuned vertical models) could be integrated to incorporate the latest innovations by monolithic agents resist this modularity, stalling innovation.\n\nEnterprises that continued down this path found themselves constrained, not by the capabilities of AI itself, but by the rigidity of the systems they‚Äôve wrapped around it with a single agent handling multiple domains. This has resulted in slower innovation, higher operating risk, and growing divergence from best-in-class architectures now being adopted in competitive sectors.\n\nThe shift toward modular, multi-agent systems is no longer a research aspiration, it‚Äôs a strategic imperative for organizations seeking to operationalize AI at scale, which has been growing in adoption as enterprises refactor their existing single-agent to multi-agent architectures.\n\n## 3. Solution\n\nInstead of stretching a single agent past its breaking point, the solution is to **distribute the workload across specialized agents, each focused on a specific domain or function, while a central keeps the system coordinated and contextually** **aware**. This shift leads directly to a multi‚Äëagent architecture, where domain‚Äëexpert agents handle tasks independently within their domain boundaries, and the orchestrator ensures seamless integration across the different components.\n\nAt a foundational level, this architecture is composed of:\n\n- Multiple domain agents that focus on specialized functions (e.g., payments‚ÄØagent for wire transfers, investment‚ÄØadvisor‚ÄØagent for portfolio guidance)\n- An orchestrator responsible for intent routing, context preservation, and task routing, ensuring that each query lands with the right expert agent\n- A context-sharing mechanism that allows agents to collaborate effectively while presenting a unified experience to the user\n\nTo support the modular, scalable, and specialized behavior required by enterprise-grade AI systems, enterprises are adopting a hierarchical multi-agent architecture that combines centralized orchestration with distributed intelligence. As demonstrated below, this architecture is designed to mirror the structure of real-world organizations: A central coordinator (the orchestrator) delegates tasks to specialized agents, each equipped with domain-specific capabilities, tools, and memory. The system is divided into clear functional layers, including orchestration, classification, agent execution, knowledge retrieval, storage, and integration, allowing for flexibility, governance, and performance at scale.\n\n![Multi-agent system architecture diagram showing orchestrator, agents, storage layers, and integration components](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-diagram-of-a-company-ai-generated-content-may-b.png)\n\n## 3.1 Components breakdown\n\n### Orchestrator (Semantic Kernel)\n\n- The central coordination component that manages the flow of requests and responses throughout the system. It provides unified management, ensuring appropriate routing, maintaining context, and handling the lifecycle of requests.\n- How it works: The orchestrator receives requests from the User Application, determines how to process them, coordinates with the appropriate components, maintains state, and eventually returns responses.\n\n### Classifier (NLU, SLM, LLM)\n\n- The component is responsible for understanding user inputs and determining the appropriate routing within the system. It ensures that user requests are properly understood and directed to the most suitable agent, improving response quality and system efficiency.\n- How it works: Analyzes the content, context, and intent of user inputs to categorize them and determine appropriate handling. The approach involves using options ranging from less to more expensive ones, NLU ü°™ SLM ü°™ LLM | SML based on certainty to determine the use of intent or continuation. If no intent is detected by the end of the process, return ‚ÄúIDK‚Äù (I Don‚Äôt Know).\n\n### Agent Registry\n\n- A directory service that maintains information about all available agents, their capabilities, and operational status. It enables dynamic discovery and utilization of agents, supporting scalability and system evolution without hard-coded dependencies.\n- How it works: Maintains a database of agent metadata, including capabilities, endpoints, and operational parameters. Provides look-up and selection functions to identify appropriate agents for specific tasks.\n- Subcomponents\n- Discovery Module\n- Actively identifies and registers new agents\n- Implements discovery protocols\n- Handles administrator-initiated agent registration\n- Performs network scanning to locate potential agents\n- Manages the agent onboarding workflow\n- Maintains discovery history and retry logic\n- Validation Module\n- Verifies agent capabilities and interfaces\n- Performs security validation and authentication\n- Tests agent functionality through probe requests\n- Ensures compatibility with system requirements\n- Generates agent metadata for classification\n- Registry Storage\n- Persistent storage for agent information\n- Maintains version history and capability evolution\n- Stores security credentials and access policies\n- Logs agent interaction metrics and performance data\n\n### Supervisor Agent (Optional considering scalability requirements)\n\n- A specialized agent responsible for coordinating the activities of other agents to solve complex tasks. It enables decomposition of complex tasks into subtasks that can be handled by specialized agents, then synthesizes their outputs into coherent responses.\n- How it works: Receives high-level tasks, breaks them down, delegates to appropriate specialized agents, monitors progress, aggregates results, and ensures overall task completion.\n- Best Practices:\n- Monitor agent overlap in terms of knowledge domain and action scope to prevent redundancy and confusion\n- Avoid keeping highly similar agents separate, as this can degrade the performance of the orchestrator or intent classifier\n- Refactor or group similar agents under a shared interface or capability to streamline classification and routing\n- Introduce agent supervisors as the architecture scales across domains‚Äîthese components help manage and abstract groups of related agents.\n- Use hierarchical organization (e.g., supervisor ü°™ agent group) to maintain clarity, scalability, and ease of intent resolution.\n\n### Agent #1, #2, #3, #4 (with MCP Client)\n\n- Specialized AI agents designed to handle specific domains, tasks, or capabilities. Domain specialization allows for deeper expertise and better performance in specific areas compared to general-purpose agents.\n- How it works: Each agent focuses on a particular domain (e.g., finance, healthcare, coding) or function (e.g., summarization, research, creative writing), applying specialized knowledge, models, or techniques to user requests.\n- Differences between Local and\nRemote Agents:\n- Local agents run within the same environment as the orchestrator\n- Remote agents operate across network boundaries\n- Agent to Agent communication should be implemented by using specific standardized protocols such as A2A\n- Remote agents require additional security and reliability considerations\n- Communication patterns differ (in-memory vs. network protocols)\n- Deployment and scaling strategies vary significantly\n- Resource management approaches differ substantially\n\n### Conversation History\n\n- A persistent store of user-agent interactions and conversation flows. It enables context-aware responses, supports learning from past interactions, and provides an audit trail of system behavior.\n- How it works: Records each turn in a conversation, maintaining user inputs, agent responses, and associated metadata in a structured, queryable format.\n\n### Agent State\n\n- Persistent storage of agent operational status, configuration, and runtime state. It enables continuity across sessions, recovery from failures, and adaptation based on past experiences.\n- How it works: Maintains both static configuration and dynamic runtime state for each agent, allowing them to resume operations and maintain learned behaviors.\n\n### Registry Storage\n\n- Specialized storage for the Agent Registry, maintaining agent metadata, capabilities, and operational history. It provides the persistent data layer for the Agent Registry, ensuring consistent agent information across system restarts and updates.\n- How it works: Stores comprehensive information about each agent, including capabilities, endpoints, security credentials, performance metrics, and version history.\n\n### Integration Layer & MCP Server\n\n- A standardized interface layer that connects agents to external tools, services, and data sources. It provides a consistent way for\nagents to access external capabilities without needing to implement custom integrations for each tool.\n- How it works: Implements the Model Context Protocol (MCP) to expose tools as a standardized service that agents can discover and invoke.\n\n## 3.2 Key Benefits\n\n- Modularity and Extensibility: The modular nature of the architecture enables organizations to evolve their AI systems incrementally without disrupting the entire stack. New agents, whether focused on new domains or tasks, can be introduced seamlessly through agent registration and orchestration without requiring retraining or redeploying existing components.\n- Domain Specialization: Instead of relying on a generalist model or single-agent to tackle all the users‚Äô requests, each agent is purpose-built and fine-tuned to its domain-specific subject, rules and data. This ensures deeper accuracy, better alignment with requirements and mitigate more nuanced outputs.\n- Scalability: The separation of roles and responsibility across orchestration, agents, knowledge and storage layer, to mention a few of the foundational layers, allows the system to scale horizontally across domains and use-cases. Agents can run locally, or the system can integrate with remote agents, and a supervisor can manage agent clusters as the number of specialized knowledges grows within the system. This enables enterprises to support hundreds of task-specific agents over time.\n- Resilience: Failures in one agent do not cascade across the entire system and the orchestrator or agents‚Äô supervisor can re-route, retry or fallback to other agents, making the system resilient.\n\n## 4. Implementation of Multi-Agent Systems\n\nWhen designing a multi-agent system, it is essential to begin with an internal assessment. This includes evaluating existing assets, the capabilities of the team(s), and, most importantly, the business scenarios that would benefit from such a system. While the allure of new technology is strong, especially in this rapidly evolving space, success hinges on aligning the system with a meaningful business use case. Without a clear return on investment (ROI), the project risks failure.\n\nMany organizations have opted to build agent platforms on top of existing conversational systems, as chat-based interfaces are often the first application of Generative AI. Others have chosen to align with broader company strategies, such as Microsoft Copilot or Azure Foundry, either by building around these platforms or fully adopting their capabilities. This strategic decision is significant but beyond the scope of this paper.\n\nRegardless of the path chosen, this document shares our experience implementing a multi-agent system and the challenges we encountered along the way. Our insights are applicable no matter what your architectural direction.\n\n## 4.1 Architectural Models\n\nA multi-agent system can be designed as either a monolith or a distributed system. Each approach involves trade-offs in performance, scalability, maintainability, team coordination, and operational complexity.\n\n### Modular Monolith\n\nA self-contained application where the orchestrator and specialized agents are structured as well-defined modules. This approach favors simplicity, shared memory, and low-latency communication.\n\n![Modular monolith architecture diagram showing orchestrator and specialized agents as internal modules](https://devblogs.microsoft.com/wp-content/uploads/2025/08/word-image-19748-6.png)\n\n### Microservices\n\nA distributed architecture where each agent (or group of agents) is encapsulated as an independent service. This model supports independent deployment, granular scalability, and the flexibility to use diverse tools, frameworks, or programming languages.\n\n![Microservices architecture diagram showing distributed agents as independent services with network communication](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-diagram-of-a-service-ai-generated-content-may-b.png)\n\n### System Evaluation and Governance\n\nIt is also critical to define how the system will be evaluated and to identify the components that directly influence its behavior. The same structured practices applied to individual agents‚Äîsuch as LLMOps, data pipelines, continuous evaluation, and CI/CD‚Äîshould be extended to the system level to ensure robustness and alignment with business objectives.\n\nAs an example of how the different aspects of the system are connected and the impact it can generate, to illustrate let‚Äôs think about a Knowledge Base Agent that uses RAG (Retrieval-Augmented Generation). Usually, those agents use vector databases. The databases or indexes are populated by a different team in general, and changes on it can impact the behavior of our Knowledge Base Agent. When different changes happen, we lose track of the changes and their impact. Amplifying that for all the possible changes, the end user may have a broken experience. To avoid it, we suggest from the very beginning having a versioning strategy and ensuring that the production environment is sealed.\n\n![State machine diagram for agent versioning showing transitions between development, testing, and production states](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-screenshot-of-a-diagram-ai-generated-content-ma.png)\n\nThis is a suggestion for a state machine for agent‚Äôs versioning. OBS: Do not use the state field to track versions, versions are a different type of data.\n\n### Agent Registry and Orchestration\n\nThe central part of a multi-agent system is the Agent Registry. This service will be responsible for generating the metadata that describes the agent, validating if the agent is implementing the supported protocol(s). The registration process can happen in two ways:\n\n- Registry-Initiated Agent Register: In a scenario where the Agent is available, and has a way to get the Agent Information, the register mechanism can make a request to the target agent URL to get the Agent Information. To implement this mechanism, the register mechanism needs to know where and how to request the different Agent Info endpoints\n- Agent-Initiated Self Register: Alternatively, the register mechanism can be an API endpoint, where the Agents can register ‚Äúthemselves‚Äù into the registry. To implement this mechanism, the register mechanism needs to provide an endpoint where the Agents can reach to provide their Agent Information.\n\nIn a highly regulated market is hard to think about having a self-registration path, especially when there is also a route to onboarding external agents, there are ways to handle it, as using an approval workflow each use case will determine the most suitable option or both if this is the case.\n\nOnce the agents are registered, it is time to define the agent orchestration configuration, The Orchestrator Agent Service will use another metadata that describes the agents and their versions that compose the orchestrator. It basically defines the agents and their version, like a Docker compose configuration.\n\n![Agent registry configuration interface showing metadata and orchestration settings](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-screenshot-of-a-phone-ai-generated-content-may.png)\n\nJust reinforcing that it is highly recommended to version the Orchestrator‚Äôs and the agent‚Äôs metadata, avoiding that any change impacts the user experience.\n\n### Operational Resilience\n\nOperational resilience in a multi-agent system begins with observability. While this paper does not explore observability in depth, given the extensive coverage available elsewhere, it is important to acknowledge that without it, resilience cannot be achieved.\n\nAssuming observability is in place, the next step is to define what should be measured and how the system should respond to ensure resilience. This includes monitoring agent health, detecting failures, and implementing recovery mechanisms.\n\nHealth checks are foundational. Agents must be monitored continuously, regardless of whether they are deployed locally or remotely. In the event of an outage or failure, retry strategies should be triggered automatically. These are common in resilient architecture and help maintain service continuity.\n\nFor Generative AI applications, additional considerations are required:\n\n- Token consumption monitoring is essential to avoid unexpected cost spikes or degraded performance. Systems should track usage patterns and enforce thresholds or alerts.\n- Fallback mechanisms must be in place to handle scenarios where token limits are exceeded, or model responses fail. This could include switching to a smaller model, using cached responses, or gracefully degrading functionality.\n\nResilience should also be considered across the entire agent‚Äôs lifecycle. This includes:\n\n- Version control of agents and their dependencies\n- Isolation of production environments to prevent unintended side effects\n- Impact tracking for upstream and downstream changes (e.g., updates to vector databases used by RAG-based agents)\n\nBy proactively designing failure and recovery and ensuring that system behavior is observable, measurable, and actionable teams can build multi-agent systems that are robust, reliable, and aligned with business continuity goals.\n\nReferences:\n\n- Monitoring and Alerts: Azure AI Foundry includes built-in dashboards and integrates with Azure Monitor for tracking metrics (e.g., token usage, agent performance) and setting proactive alerts. [Monitor Azure AI Foundry Agent Service ‚Äì Azure AI services | Microsoft Learn](https://learn.microsoft.com/en-us/azure/ai-services/agents/how-to/metrics)\n- [Multi-Agent Reference Architecture](https://aka.ms/multi-agent-system)\n\n### Security\n\nGenerative AI applications introduce a new set of security risks that go beyond traditional software systems. These include threats such as model hallucinations, prompt injection attacks, data leakage, and adversarial inputs designed to manipulate model behavior.\n\nOne particularly concerning vector is prompt injection, where malicious users craft inputs that alter the intended behavior of an agent or bypass safeguards. These attacks can be subtle and difficult to detect, especially in systems that rely heavily on natural language inputs.\n\nAt Microsoft, our team has been actively addressing these challenges through the work of the AETHER (AI and Ethics in Engineering and Research) committee. As part of this initiative, we developed a threat modeling framework tailored specifically for AI systems, which we apply across our development lifecycle. This framework helps identify and mitigate risks early, ensuring that security is embedded into the design of multi-agent systems.\n\nWe have also published guidance on secure deployment practices and responsible AI usage, which includes:\n\n- Input validation and sanitization\n- Role-based access control for agents and orchestration layers\n- Logging and audit trails for agent interactions\n- Isolation of sensitive data and model outputs\n- Rate limiting and abuse detection mechanisms\n\nWhile this paper does not cover the full scope of AI security, we strongly recommend integrating threat modeling and secure development practices from the outset. Security should not be an afterthought; it must be a foundational pillar of any GenAI system architecture.\n\n- Token Quota Increases: Customers should request increased token quotas for Azure OpenAI models (e.g., GPT-4o, GPT-4o-mini,\nO-series) to avoid rate limits as usage scales.\n- Regional Resource Deployment: Deploy multiple Azure OpenAI resources across different regions to handle API requests, reduce latency, and mitigate rate limits.\n- Private Networking and Security: The Azure AI Foundry Agent Service supports private network isolation, enabling customers to securely host agents, integrate with\nuser-managed identities, and enforce strict ‚Äúdeny-by-default‚Äù network rules. [How to use a virtual network with the Azure AI Foundry Agent Service ‚Äì Azure AI Foundry | Microsoft Learn](https://learn.microsoft.com/en-us/azure/ai-services/agents/how-to/virtual-networks).\n\n## Customer Use Cases\n\n### ContraForce\n\nThe following three case studies come from customer partnerships with the [Microsoft AI Co-Innovation Labs](https://aiotlabs.microsoft.com/en), a global team of AI experts who co-build gen AI solutions that accelerate customers toward deployment. ContraForce, Stemtology, and SolidCommerce, built their multi-agent prototypes in the AI Co-Innovation Lab in San Francisco, where the lab team engineers bespoke gen AI solutions using multimodal, multi-agentic workflows optimized for Azure Cloud.\n\n![ContraForce company logo and branding](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-black-text-on-a-white-background-ai-generated-c.png)\n\nContraForce provides MSSPs with a multi-tenant, multi-agent system running on Azure.\n\nContraForce is a cybersecurity software company delivering an Agentic Security Delivery Platform (ASDP) that enables Managed Security Service Providers (MSSPs) to operate at scale by automating the delivery of managed services for Microsoft Security applications across tens or even hundreds of customer environments. By centralizing tools such as Microsoft Sentinel and Microsoft Defender XDR into a unified, multi-tenant platform, ContraForce equips MSSPs with the infrastructure, workflows, and orchestration layers necessary to drive efficient, high-margin managed security services.\n\nInstead of following the conventional model, where a single agent is hosted and operated by the software vendor, ContraForce adopted a multi-tenant, multi-agent system. This design allows MSSPs to instantiate dedicated, context-aware agents for each managed tenant and customer, with each agent grounded in tenant-specific context and workflows. These agents act as virtual security service delivery analysts, autonomous extensions of the MSSP‚Äôs team, tailored specifically to the context, workflows, and service-level requirements of each customer. ContraForce abstracts away the complexity of agent orchestration, coordination, and hosting. MSSPs do not need to manage AI infrastructure themselves; they simply define the service intent and requirements per customer. ContraForce handles the rest.\n\n![ContraForce Agentic Security Delivery Platform architecture showing multi-tenant, multi-agent system for MSSPs](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-screenshot-of-a-computer-ai-generated-content-m.png)\n\nContraForce ASDP: A multi-tenant, multi-agent system\n\nWhen ContraForce evaluated Microsoft‚Äôs AI Agent Service in its preview phase, the highly scalable and multi-tenant-friendly architecture aligned perfectly with this model. It enabled ContraForce to deploy independent, intelligent agents that operate in isolation in each customer‚Äôs environment while remaining part of a coordinated, shared framework. This capability made it possible to deliver consistent, high-quality security automation across diverse customer environments without introducing operational bottlenecks or risking service degradation. Coordinated by a central orchestration layer, the multi-tenant, multi-agent system provides the foundation for an ecosystem of specialized agents, with some focused-on detection, others on response, and others on preserving institutional knowledge.\n\nIn less than a month, ContraForce launched a prototype of the first multi-tenant Service Delivery Agent purpose-built for MSSPs. This Service Delivery Agent for Microsoft Security automates alert triage, incident investigation, malicious intent determination, and guided response execution using proprietary ContraForce Gamebooks.\n\nThe Service Delivery Agent has allowed MSSPs to manage 3 times more customers per analyst, double incident investigation capacity, and unlock new business models without the need for dedicated security and AI engineering teams. For ContraForce, it has also validated that applying multi-agent AI systems through domain-specific workflows, user interfaces, and service logic is key to transitioning AI from the lab into real-world professional services; and given us a clear sightline to achieve our projected 300% year-on-year top-line growth.\n\n### Stemtology uses AI to Treat Osteoarthritis\n\n![Stemtology company logo and branding](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-green-text-with-a-circle-in-the-middle-ai-gener.png)\n\n*This case study is a reprint of [an original story](https://aiotlabs.microsoft.com/en/case-study/stemtology) from the Microsoft AI Co-Innovation Labs.*\n\nThe biggest benefit of working with the Microsoft AI Co-Innovation Labs was being able to rapidly reach POC and begin testing. We were able to quickly design with engineers from the Lab team, create infrastructure for efficient data cleaning, and coordinate seamlessly to build something out that would have taken our team ~3 months in a matter of weeks.‚Äù\n\n‚Äì Annalina Che, CEO, Stemtology\n\nRegenerative medicine is a quickly evolving field that promises therapies for previously incurable diseases and helps advance medical research. Stemtology is an innovator in this critical space, accelerating effective disease treatments with AI-driven technologies. Their AI platform integrates large language models (LLMs) and graph neural networks (GNNs) to hypothesize, simulate, and optimize treatment plans for inflammatory, immune, and degenerative diseases.\n\nStemtology‚Äôs work addresses known limitations in their industry, like slow experiment times, siloed research publishing, and overwhelming data complexity. Even as they address these challenges, the Stemtology team needed to partner with the ‚Äúbest of the best‚Äù1 to build a scalable prototype and get backend support on a solution in Azure.\n\nThey partnered with Microsoft AI Co-Innovation Labs to build a generative AI solution that could find and analyze medical research data and generate treatments for osteoarthritis, with a plan to apply this solution across other diseases later.\n\n### In the Lab\n\nOur AI Co-Innovation Lab team in San Francisco brought our extensive experience in building gen AI prototypes using Microsoft Azure and AI technologies to collaborate on a multi-agent research and development solution.\n\nThe Lab team leveraged [Azure OpenAI](https://azure.microsoft.com/en-us/products/ai-services/openai-service) GPT and [Azure Cognitive Search](https://azure.microsoft.com/en-us/products/ai-services/ai-search/) for data processing, hypothesis generation, and validation. They also used their extensive knowledge of cutting-edge Microsoft technologies to use the brand-new [Azure AI Agent Service](https://techcommunity.microsoft.com/blog/azure-ai-services-blog/introducing-azure-ai-agent-service/4298357), empowering Stemtology with a more powerful and scalable agentic AI.\n\n![Stemtology agents workflow diagram showing research data processing and treatment plan generation for osteoarthritis](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-diagram-of-a-diagram-of-a-persons-work-flow-ai.png)\n\nStemtology Agents Workflow\n\nThe first set of agents act as research assistants, searching for medical studies from the PubMed database and pulling that data for insights and reports. The next agent takes that research and generates osteoarthritis treatment plans based on disease-specific research studies that the science team can then analyze and test.\n\nThis solution integrates directly into Stemtology‚Äôs business model, acting as a research and development engine and working in tandem with scientists in the lab team to accelerate design, testing, and optimization of synthetic cell therapies.\n\n### Solution Impact\n\nStemtology is already seeing the benefits of their solution with their science team, including significant operational cost savings and reduced time spent on labor-intensive tasks like reading and analyzing research papers. As a result, scientists can shift their focus to higher-level design tasks and explore other disease treatments.\n\nIn deploying the solution, Stemtology expects to achieve even greater outcomes:\n\n- Cut experimental timelines by up to 50%\n- Achieve ‚â•90% predictive accuracy for treatment outcomes, ensuring feasible and effective therapeutic solutions\n- Scale the solution to manage over 100 diseases\n- Improve regenerative outcomes for each disease treated\n\nThis advanced application of gen AI positions Stemtology as a leader in regenerative medicine, offering transformative benefits for healthcare providers, researchers, and patients by accelerating drug discovery and improving access to personalized treatments.\n\nBy collaborating with our team of experts in the AI Co-Innovation Labs, Stemtology can realize and scale this solution with the power of agentic AI in Azure.\n\nQuoted from Annalina Che, CEO, Stemtology.\n\n### Use case 3: SolidCommerce\n\n### SolidCommerce: AI Solutions for the Retail Industry\n\n[SolidCommerce](http://www.SolidCommerce.com) specializes in providing artificial intelligence solutions tailored specifically for the retail industry. The company focuses on leveraging AI and machine learning technologies to help retailers optimize operations, enhance customer experiences, and drive sales growth. By utilizing data-driven insights, SolidCommerce empowers retailers to make informed decisions and maintain a competitive edge in the market.\n\n### Mission:\n\nSolidCommerce‚Äôs mission is to enable retailers to unlock the power of AI and machine learning to streamline operations, improve customer engagement, and achieve sustainable growth. Through innovative solutions, they aim to transform the retail landscape and help businesses thrive in a rapidly changing environment.\n\n### Key Features of SolidCommerce‚Äôs Offerings:\n\n- Predictive Analytics for Inventory Management: SolidCommerce provides tools that enable retailers to forecast demand, optimize stock levels, and reduce costs. By analyzing large datasets, their predictive analytics platform helps retailers make informed decisions about inventory, supply chain, and pricing strategies.\n- Customer Behavior Analysis: SolidCommerce‚Äôs solutions analyze customer interactions and behaviors to uncover actionable insights. This enables retailers to better understand their audience and adapt strategies to improve satisfaction and loyalty.\n- Personalized Marketing Strategies: By segmenting customers based on preferences, behaviors, and purchase history, SolidCommerce helps retailers deliver tailored promotions and product recommendations. These personalized interactions enhance the shopping experience and contribute to increased sales.\n\nSolidCommerce‚Äôs focus on integrating AI-driven technologies with retail processes ensures businesses can efficiently adapt to evolving market trends, optimize their operations, and create meaningful customer experiences. By helping retailers harness the power of data, SolidCommerce is shaping the future of the industry and driving growth for businesses of all sizes.\n\n### AI use case\n\n#### SolidCommerce: AI-Powered Merchant Assistance Platform\n\nSolidCommerce is developing an AI Agent-powered platform designed to assist merchants in efficiently responding to customer inquiries. The platform leverages Azure Blob Storage, Azure AI Search, and Function Apps to retrieve and process data from multiple sources, ensuring accurate and context-specific responses. By automating data retrieval, response generation, and merchant approval workflows, this system improves productivity while maintaining high response relevance and accuracy.\n\n#### Our first AI innovation\n\nThe first AI innovation is a multi-modal merchant assistance platform for Managed Data Retrieval and Response Generation. The platform integrates multiple Azure AI services to:\n\n- Retrieve data from various sources, including product listings, shipment tracking, and merchant policies\n- Generate responses to customer inquiries using AI Search and vector embeddings for contextual grounding\n- Enable merchant approval workflows to ensure responses align with business policies before\nbeing sent\n\n#### Development Approach\n\nThe merchant assistance platform is being developed using Azure cloud technologies, leveraging cutting-edge AI capabilities and services to enable seamless data integration, intelligent processing, and scalable workflows. The platform incorporates:\n\n- Azure Blob Storage: Files containing product and order data are uploaded and indexed.\n- Azure AI Search: Indexer processes the data to create embeddings, enabling efficient vector and keyword search capabilities.\n- Function Apps: APIs provide real-time data retrieval, such as shipment tracking, order details, and merchant policies.\n- Azure AI Agent Service: The AI agent orchestrates these services to, Query indexed data for precise information retrieval. Process customer inquiries and generate draft responses grounded in reliable data sources. Filter search results and tailor responses by sales channel (e.g., eBay, Amazon).\n\n#### Value and Impact\n\nThe SolidCommerce AI platform is designed to empower merchants by:\n\n- Improving efficiency: Automates data retrieval and response generation, reducing the time required for customer service tasks\n- Enhancing accuracy: Combines vector search and keyword search for precise, contextually relevant responses\n- Scalability: Supports multiple companies with separate indexes and sales channel-specific filtering\n- Streamlining workflows: Enables merchant review and approval of AI-generated responses to ensure compliance and quality\n\nArchitecture diagram\n\n![SolidCommerce AI-powered merchant assistance platform architecture diagram showing Azure services integration](https://devblogs.microsoft.com/wp-content/uploads/2025/08/a-diagram-of-a-computer-ai-generated-content-may.png)\n\n### Conclusion\n\nFor technical architects and developers scaling generative AI across the enterprise, the limitations of single-agent systems have become increasingly evident. While useful for rapid prototyping, these early architectures quickly become rigid, difficult to govern, and incapable of meeting enterprise demands such as cross-domain intelligence, evolving toolchains, and strict compliance and security standards.\n\nMulti-agent architecture presents a scalable, resilient, and future-ready foundation for building enterprise-grade AI systems. By distributing responsibilities across specialized agents, each with its own model, tools, and memory and coordinating their actions through a central orchestrator, organizations gain modularity, improved fault tolerance, and clearer separation of concerns. This approach not only aligns with established software engineering practices but also enables better interoperability with existing enterprise systems and APIs.\n\nCritically, multi-agent systems enhance observability, auditability, and compliance, enabling enterprises to enforce policies, monitor performance, and maintain governance at scale. They also support human-in-the-loop collaboration, where agents can augment, rather than replace, human expertise, especially in high-stakes domains.\n\nFrom a strategic perspective, this architectural shift empowers enterprises to retain domain-specific knowledge within agents, optimize computational costs by dynamically allocating workloads, and accelerate time-to-value through reusable, composable agent patterns. Over time, agents evolve into intelligent components that encode institutional memory, providing sustained business differentiation.\n\nUltimately, adopting a multi-agent platform is more than a technical evolution it‚Äôs a long-term investment in building adaptive, compliant, and intelligent systems that can scale with business needs, deliver tangible value, and evolve alongside enterprise priorities.",
  "FeedUrl": "https://devblogs.microsoft.com/feed",
  "Author": "Vinicius Souza, Maggie Liu, Thiago Rotta",
  "FeedLevelAuthor": "Microsoft for Developers",
  "PubDate": "2025-08-20T19:00:13+00:00",
  "Title": "Designing Multi-Agent Intelligence"
}
