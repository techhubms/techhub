{
  "OutputDir": "_news",
  "Title": "Semantic Kernel and Microsoft.Extensions.AI: Better Together, Part 2",
  "FeedUrl": "https://devblogs.microsoft.com/semantic-kernel/feed/",
  "Link": "https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-and-microsoft-extensions-ai-better-together-part-2/",
  "Author": "Roger Barreto",
  "ProcessedDate": "2025-08-05 07:58:26",
  "EnhancedContent": "*This is Part 2 of our series on integrating Microsoft.Extensions.AI with Semantic Kernel. In [Part 1](https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-and-microsoft-extensions-ai-better-together-part-1/), we explored the relationship between these technologies and how they complement each other. Now, let’s dive into practical examples showing how to use Microsoft.Extensions.AI abstractions with Semantic Kernel in non-agent scenarios.*\n\n## Getting Started with Microsoft.Extensions.AI and Semantic Kernel\n\nBefore we dive into examples, let’s understand what we’ll be working with. Microsoft.Extensions.AI provides foundational abstractions like `IChatClient` and `IEmbeddingGenerator<string, Embedding<float>>` , while Semantic Kernel builds upon these to provide higher-level functionality like plugins, prompt templates, and workflow automation.\n\nIn this post, we’ll focus on practical scenarios where you can leverage both technologies together for common AI tasks.\n\n## 1. Basic Chat Completion with IChatClient\n\nLet’s start with the most fundamental scenario: chat completion. Semantic Kernel now natively supports Microsoft.Extensions.AI’s `IChatClient` interface.\n\n### Using Kernel Builder\n\n```csharp using Microsoft.Extensions.AI; using Microsoft.SemanticKernel;\n\n// Create a kernel with OpenAI chat client var kernel = Kernel.CreateBuilder() .AddOpenAIChatClient(\"gpt-4o\", \"your-api-key\") .Build();\n\n// Simple chat completion var response = await kernel.InvokePromptAsync(\"What is the capital of France?\"); Console.WriteLine(response);\n\n```\n\n### Using a Chat Client directly with Azure OpenAI\n\n```csharp var kernel = Kernel.CreateBuilder() .AddAzureOpenAIChatClient( deploymentName: \"gpt-4o\", endpoint: \"https://your-resource.openai.azure.com/\", apiKey: \"your-api-key\") .Build();\n\nvar client = kernel.GetRequiredService<IChatClient>(); var response = await client.GetResponseAsync([new(ChatRole.User, \"Hello, AI!\")]); Console.WriteLine(response.Text);\n\n```\n\n### Using Dependency Injection\n\n```csharp using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.AI; using Microsoft.SemanticKernel;\n\nvar services = new ServiceCollection();\n\n// Register the chat client services.AddOpenAIChatClient(\"gpt-4o\", \"your-api-key\");\n\n// Register Semantic Kernel services.AddKernel();\n\nvar serviceProvider = services.BuildServiceProvider(); var kernel = serviceProvider.GetRequiredService<Kernel>();\n\nvar response = await kernel.InvokePromptAsync(\"Tell me about artificial intelligence.\"); Console.WriteLine(response);\n\n```\n\n### Converting Between IChatCompletionService and IChatClient\n\nSometimes you might need to work with both interfaces. Semantic Kernel provides seamless conversion:\n\n```csharp using Microsoft.Extensions.AI; using Microsoft.SemanticKernel; using Microsoft.SemanticKernel.ChatCompletion;\n\n// Get the chat completion service var chatService = kernel.GetRequiredService<IChatCompletionService>();\n\n// Convert to IChatClient when needed IChatClient chatClient = chatService.AsChatClient();\n\n// Or convert back IChatCompletionService backToService = chatClient.AsChatCompletionService();\n\n```\n\n## 2. Embedding Generation with IEmbeddingGenerator\n\nSemantic Kernel has moved from its own `ITextEmbeddingGenerationService` to Microsoft.Extensions.AI’s `IEmbeddingGenerator<string, Embedding<float>>` . Here’s how to use it:\n\n### Basic Embedding Generation\n\n```csharp using Microsoft.Extensions.AI; using Microsoft.SemanticKernel;\n\n#pragma warning disable SKEXP0010 // Type is for evaluation\n\nvar kernel = Kernel.CreateBuilder() .AddOpenAIEmbeddingGenerator(\"text-embedding-ada-002\", \"your-api-key\") .Build();\n\nvar embeddingGenerator = kernel.GetRequiredService<IEmbeddingGenerator<string, Embedding<float>>>();\n\n// Generate embeddings var embeddings = await embeddingGenerator.GenerateAsync([ \"Semantic Kernel is a lightweight, open-source development kit.\", \"Microsoft.Extensions.AI provides foundational AI abstractions.\" ]);\n\nforeach (var embedding in embeddings) { Console.WriteLine($\"Generated embedding with {embedding.Vector.Length} dimensions\"); }\n\n```\n\n### Working with Azure OpenAI Embeddings\n\n```csharp using Microsoft.Extensions.AI; using Microsoft.SemanticKernel;\n\n#pragma warning disable SKEXP0010\n\nvar kernel = Kernel.CreateBuilder() .AddAzureOpenAIEmbeddingGenerator( deploymentName: \"text-embedding-ada-002\", endpoint: \"https://your-resource.openai.azure.com/\", apiKey: \"your-api-key\") .Build();\n\nvar embeddingGenerator = kernel.GetRequiredService<IEmbeddingGenerator<string, Embedding<float>>>();\n\n// Generate embeddings with custom dimensions (if supported by model) var embeddings = await embeddingGenerator.GenerateAsync( [\"Custom text for embedding\"], new EmbeddingGenerationOptions { Dimensions = 1536 });\n\nConsole.WriteLine($\"Generated {embeddings.Count} embeddings\");\n\n```\n\n## 3. Function Calling Integration\n\nOne of the most powerful features is how Semantic Kernel’s function calling integrates with Microsoft.Extensions.AI. Since `KernelFunction` is now an `AIFunction` , the integration is seamless.\n\n### Creating and Using Kernel Functions\n\n```csharp using Microsoft.Extensions.AI; using Microsoft.SemanticKernel; using System.ComponentModel;\n\nvar kernel = Kernel.CreateBuilder() .AddOpenAIChatClient(\"gpt-4o\", \"your-api-key\") .Build();\n\n// Import the function as a plugin kernel.ImportPluginFromType<WeatherPlugin>();\n\n// Use function calling var settings = new PromptExecutionSettings { FunctionChoiceBehavior = FunctionChoiceBehavior.Auto() };\n\nvar response = await kernel.InvokePromptAsync( \"What's the weather like in Seattle and what time is it?\", new(settings));\n\nConsole.WriteLine(response);\n\npublic class WeatherPlugin { [KernelFunction, Description(\"Get the current weather for a city\")] public static string GetWeather([Description(\"The city name\")] string city) { return $\"The weather in {city} is sunny and 72°F\"; }\n\n[KernelFunction, Description(\"Get the current time\")] public static string GetCurrentTime() { return DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"); } }\n\n```\n\n### Working with KernelFunction Directly\n\n```csharp var kernel = Kernel.CreateBuilder() .AddOpenAIChatClient(\"gpt-4o\", \"your-api-key\") .Build();\n\n// Create a function from a method var weatherFunction = KernelFunctionFactory.CreateFromMethod( () => \"Sunny and 75°F\", \"GetWeather\", \"Gets the current weather\");\n\n// KernelFunction is already an AIFunction, so you can use it directly var chatOptions = new ChatOptions { Tools = [weatherFunction], // KernelFunction works directly as AITool ToolMode = ChatToolMode.Auto };\n\nvar chatClient = kernel.GetRequiredService<IChatClient>(); var messages = new List<ChatMessage> { new(ChatRole.User, \"What's the weather like?\") };\n\nvar response = await chatClient.GetResponseAsync(messages, chatOptions); Console.WriteLine(response.Text);\n\n```\n\n## 4. Content Type Conversions\n\n### Using `InvokeAsync<T>`\nwith Microsoft.Extensions.AI Types\n\n```csharp var kernel = Kernel.CreateBuilder() .AddOpenAIChatClient(\"gpt-4o\", \"your-api-key\") .Build(); // Get Microsoft.Extensions.AI ChatResponse directly var chatResponse = await kernel.InvokeAsync<ChatResponse>( kernel.CreateFunctionFromPrompt(\"Tell me a joke\"));\n\nConsole.WriteLine($\"Model: {chatResponse.ModelId}\"); Console.WriteLine($\"Content: {chatResponse.Text}\");\n\n// Get List<ChatMessage> for conversation history var message = await kernel.InvokeAsync<ChatMessage>( kernel.CreateFunctionFromPrompt(\"Start a conversation about AI\"));\n\nConsole.WriteLine($\"Message Role: {message.Role}\"); Console.WriteLine($\"Message Content: {message.Text}\");\n\n// Get Microsoft.Extensions.AI TextContent directly var textContent = await kernel.InvokeAsync<Microsoft.Extensions.AI.TextContent>( kernel.CreateFunctionFromPrompt(\"Start a conversation about AI\"));\n\nConsole.WriteLine($\"Text Content: {textContent.Text}\");\n\n```\n\n## 5. Service Selection and Dependency Injection\n\nSemantic Kernel’s service selection works seamlessly with Microsoft.Extensions.AI services.\n\n### Multiple Chat Providers\n\n```csharp var services = new ServiceCollection();\n\n// Register multiple chat clients services.AddOpenAIChatClient(\"gpt-4\", \"openai-key\", serviceId: \"OpenAI\"); services.AddAzureOpenAIChatClient( \"gpt-4\", \"https://your-resource.openai.azure.com/\", \"azure-key\", serviceId: \"AzureOpenAI\");\n\nservices.AddKernel();\n\nvar serviceProvider = services.BuildServiceProvider(); var kernel = serviceProvider.GetRequiredService<Kernel>();\n\n// Use specific service var settings = new PromptExecutionSettings { ServiceId = \"AzureOpenAI\" }; var response = await kernel.InvokePromptAsync<ChatResponse>( \"Explain machine learning\", new(settings));\n\nConsole.WriteLine(\"Model: \" + response.ModelId); Console.WriteLine(\"Content: \" + response.Text);\n\n```\n\n## Conclusion\n\nThe integration between Microsoft.Extensions.AI and Semantic Kernel provides a powerful foundation for building AI applications. By leveraging both technologies, you get:\n\n- **Flexibility**: Use Microsoft.Extensions.AI abstractions for simple scenarios\n- **Productivity**: Add Semantic Kernel features like plugins and templates when needed\n- **Interoperability**: Seamless conversion between content types and service interfaces\n- **Scalability**: Easy service registration and selection for complex applications\n\nThe examples in this post demonstrate practical patterns you can use in your own applications. Whether you’re building a simple chatbot, a document Q&A system, or a complex workflow, the combination of Microsoft.Extensions.AI and Semantic Kernel gives you the tools you need.\n\nTry out these examples in your own projects and let us know how they work for you! In the next part, we’ll dive into agent scenarios and show how these patterns scale to even more sophisticated AI applications.\n\n**Package**:\n\n- [NuGet Gallery | Microsoft.Extensions.AI.Abstractions](https://www.nuget.org/packages/Microsoft.Extensions.AI.Abstractions/latest)\n- [NuGet Gallery | Microsoft.Extensions.AI](https://www.nuget.org/packages/Microsoft.Extensions.AI/latest)\n\n**References**:\n\n- Semantic Kernel [Agent Framework | Microsoft Learn](https://learn.microsoft.com/en-us/semantic-kernel/frameworks/agent/?pivots=programming-language-csharp)\n- Semantic Kernel [Process Framework | Microsoft Learn](https://learn.microsoft.com/en-us/semantic-kernel/frameworks/process/process-framework)\n- Semantic Kernel [Samples](https://github.com/microsoft/semantic-kernel/tree/main/dotnet/samples)\n- Vector Data Extensions – [Blog Post](https://devblogs.microsoft.com/semantic-kernel/vector-data-extensions-are-now-generally-available-ga)\n- Microsoft.Extensions.AI [Microsoft.Extensions.AI libraries – .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/ai/microsoft-extensions-ai)\n- EShop Support with Microsoft.Extensions.AI – [eShop Support](https://github.com/dotnet/eShopSupport/tree/main)\n- .NET AI Samples – [https://github.com/dotnet/ai-samples](https://github.com/dotnet/ai-samples)",
  "Tags": [
    ".NET",
    ".NET AI Extensions",
    "Agents",
    "AI",
    "Announcement",
    "C#",
    "Embeddings",
    "Extensions AI",
    "MCP",
    "Samples",
    "Semantic Kernel",
    "Tools"
  ],
  "PubDate": "2025-05-28T13:18:24+00:00",
  "Description": "This is Part 2 of our series on integrating Microsoft.Extensions.AI with Semantic Kernel. In Part 1, we explored the relationship between these technologies and how they complement each other. Now, let’s dive into practical examples showing how to use Microsoft.Extensions.AI abstractions with Semantic Kernel in non-agent scenarios. Getting Started with Microsoft.Extensions.AI and Semantic Kernel Before we […]\n\nThe post [Semantic Kernel and Microsoft.Extensions.AI: Better Together, Part 2](https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-and-microsoft-extensions-ai-better-together-part-2/) appeared first on [Semantic Kernel](https://devblogs.microsoft.com/semantic-kernel).",
  "FeedLevelAuthor": "Semantic Kernel",
  "FeedName": "Microsoft DevBlog"
}
