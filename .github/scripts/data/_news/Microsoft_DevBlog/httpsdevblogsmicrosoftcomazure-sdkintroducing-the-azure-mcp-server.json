{
  "Tags": [
    "Agents",
    "AI",
    "Azure SDK",
    "MCP"
  ],
  "OutputDir": "_news",
  "FeedLevelAuthor": "Azure SDK Blog",
  "ProcessedDate": "2025-08-05 14:10:14",
  "FeedUrl": "https://devblogs.microsoft.com/azure-sdk/feed/",
  "Title": "Introducing the Azure MCP Server",
  "Description": "This post introduces the Azure MCP Server, bringing the power of the cloud to your AI agents.\n\nThe post [Introducing the Azure MCP Server](https://devblogs.microsoft.com/azure-sdk/introducing-the-azure-mcp-server/) appeared first on [Azure SDK Blog](https://devblogs.microsoft.com/azure-sdk).",
  "Link": "https://devblogs.microsoft.com/azure-sdk/introducing-the-azure-mcp-server/",
  "FeedName": "Microsoft DevBlog",
  "Author": "Rohit Ganguly",
  "EnhancedContent": "We’re thrilled to announce the Public Preview of the Azure MCP Server, bringing the power of Azure to your AI agents. The Azure MCP Server allows AI agents to take advantage of Azure resources for key workflows such as file storage, database and logs querying, and CLI commands.\n\nIn this post, we’ll dive deeper into the details of our Public Preview release, go over starter scenarios with the Azure MCP Server, and share our future plans. The Azure MCP Server is open-source on [GitHub](https://github.com/Azure/azure-mcp).\n\n## What is MCP, and why an Azure MCP Server?\n\nMCP (Model Context Protocol) is an open protocol between agents and external resources, defined as MCP clients and servers, respectively. The advent of MCP allows for seamless integration between AI systems and data sources, tools, and more with a “write once” approach. For more information on MCP, visit the protocol’s [website](https://modelcontextprotocol.io/introduction) and [GitHub organization](https://modelcontextprotocol.io/introduction).\n\nAzure offers many cloud services that allow developers to build robust applications. The Azure MCP Server exposes these powerful services for agentic usage, allowing for AI systems to perform operations that are context-aware of your Azure resources. For example, a developer building an agent that uses the Azure MCP Server can enable the agent to query Azure Cosmos DB based on natural language instructions, read files from Azure Storage, or dig through logs in an Azure Log Analytics workspace.\n\n## Public Preview release highlights\n\nAs a part of our Public Preview release, the Azure MCP Server supports the following services and tools:\n\n### Azure services\n\n#### Azure Cosmos DB (NoSQL databases)\n\n- List Cosmos DB accounts\n- List and query databases\n- Manage containers and items\n- Execute SQL queries against containers\n\n#### Azure Storage\n\n- List Storage accounts\n- Manage blob containers and blobs\n- List and query Storage tables\n- Get container properties and metadata\n\n#### Azure Monitor (Log Analytics)\n\n- List Log Analytics workspaces\n- Query logs using Kusto Query Language (KQL)\n- List available tables\n- Configure monitoring options\n\n#### Azure App Configuration\n\n- List App Configuration stores\n- Manage key-value pairs\n- Handle labeled configurations\n- Lock/unlock configuration settings\n\n#### Azure Resource Groups\n\n- List resource groups\n- Resource group management operations\n\n### Azure tools\n\n#### Azure CLI\n\n- Execute Azure CLI commands directly\n- Support for all Azure CLI functionality\n- JSON output formatting\n\n#### Azure Developer CLI (azd)\n\n- Execute azd commands directly\n- Support for template discovery, template initialization, provisioning, and deployment\n\nThis set of functionality allows agents to perform operations on Azure services, manage cloud resources, deploy applications with azd, and so much more. The team is hard at work on more functionality that is coming soon!\n\n## Use the Azure MCP Server\n\nThe Azure MCP Server can be used by any agent that supports MCP. This includes GitHub Copilot Agent Mode and custom MCP clients.\n\n### GitHub Copilot Agent Mode\n\nGitHub Copilot recently announced the [public release of Agent Mode with MCP support](https://github.blog/news-insights/product-news/github-copilot-agent-mode-activated/) in VS Code. The [Azure MCP Server Repository on GitHub](https://github.com/Azure/azure-mcp) has a button that installs the Azure MCP Server on your machine automatically.\n\nOnce the Azure MCP Server is installed, try asking GitHub Copilot (in Agent Mode) to list your Cosmos DB or Storage Accounts! To learn more about Agent mode and how to toggle it, visit the [official documentation](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode).\n\nFor a more streamlined Azure development experience, we recommend combining the data plane support of the Azure MCP Server with the [GitHub Copilot for Azure extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azure-github-copilot) in VS Code. This extension provides GitHub Copilot the ability to look up documentation on Microsoft Learn, query Azure Resource Graph, apply development best practices, and more. Together in VS Code, they deliver a powerful, AI-assisted Azure development workflow that lets you stay in the flow in your development environment.\n\n### Custom MCP clients/Agents\n\nIn order for an agent to take advantage of the Azure MCP Server, the agent must adopt the [MCP client pattern](https://modelcontextprotocol.io/specification/latest). Besides the MCP SDKs, there are opinionated agent frameworks such as [Semantic Kernel](https://devblogs.microsoft.com/semantic-kernel/building-a-model-context-protocol-server-with-semantic-kernel/) that provide some higher-level abstractions that conform to the MCP client pattern.\n\nTo connect your MCP client to the Azure MCP Server, configure it to run the following command to install and execute the server.\n\n```bash npx -y @azure/mcp@latest server start ```\n\nHere’s a list of some MCP client tutorials that you can adapt to use the Azure MCP Server. Each of them has a specific section where you can add `commands` and `arguments` to ensure the MCP client runs the install and execute command for the Azure MCP Server correctly. Because of the universal nature of the MCP specification, the Azure MCP Server should work with any MCP client, not just the options listed.\n\n- [MCP SDK in Python](https://modelcontextprotocol.io/quickstart/client#python)\n- [MCP SDK in .NET](https://modelcontextprotocol.io/quickstart/client#c)\n- [Semantic Kernel .NET SDK](https://devblogs.microsoft.com/semantic-kernel/integrating-model-context-protocol-tools-with-semantic-kernel-a-step-by-step-guide/)\n- [OpenAI Agents SDK for Python](https://openai.github.io/openai-agents-python/mcp/)\n\n## What’s next?\n\nThe team is hard at work to improve the Azure MCP Server. In the future, you can expect:\n\n1. More in-depth agent samples using the Azure MCP Server\n2. More documentation\n3. More Microsoft product integrations\n4. More Azure service integrations\n\nWe’re excited to see what kind of agents you build with Azure. If you have any feedback, bugs, feature requests, or questions, open an issue in the [GitHub Repository](https://github.com/Azure/azure-mcp/issues).\n\n## Summary\n\nThe Azure MCP Server enables agents to take advantage of the capabilities of powerful Azure services. Thanks to the MCP specification, the Azure MCP Server is usable by any agent that also follows MCP. These agents include GitHub Copilot Agent Mode, custom agents built with the MCP SDKs, or opinionated agentic frameworks like Semantic Kernel. The source code is open-source on GitHub with more samples and guidance coming soon.\n\nBecause the Azure MCP Server is in Public Preview, any feedback is appreciated. More samples, guidance, integrations, and features are on the way.\n\nFor more information, see [Azure MCP Server on GitHub](https://github.com/Azure/azure-mcp/).",
  "PubDate": "2025-04-17T19:59:42+00:00"
}
