{
  "OutputDir": "_news",
  "Title": "Vector Data Extensions are now Generally Available (GA)",
  "FeedUrl": "https://devblogs.microsoft.com/semantic-kernel/feed/",
  "Link": "https://devblogs.microsoft.com/semantic-kernel/vector-data-extensions-are-now-generally-available-ga/",
  "Author": "Wes Steyn, Shay Rojansky",
  "ProcessedDate": "2025-08-05 07:58:57",
  "EnhancedContent": "We’re excited to announce the release of **Microsoft.Extensions.VectorData.Abstractions**, a foundational library providing exchange types and abstractions for vector stores when working with vector data in AI-powered applications. This release is the result of a close collaboration between the **Semantic Kernel** and **.NET** teams, combining expertise in AI and developer tooling to deliver a robust, extensible solution for developers.\n\n## What is Microsoft.Extensions.VectorData.Abstractions?\n\n**Microsoft.Extensions.VectorData.Abstractions** provides shared abstractions and utilities for working with vector data, enabling developers to build scalable, maintainable, and interoperable AI solutions. These abstractions are now **generally available (GA)** and serve as the foundation for integrating vector databases into AI workflows.\n\nKey features include:\n\n- **Interoperability** – Libraries can work together more easily by targeting the same abstractions.\n- **Extensibility** – Developers can build on top of shared types to add new capabilities.\n- **Consistency** – A unified programming model across different implementations reduces integration complexity.\n\n## Usage with Microsoft.Extensions.AI.Abstractions\n\n**Microsoft.Extensions.VectorData.Abstractions** is designed to seamlessly integrate with the embedding generation abstractions exposed by **Microsoft.Extensions.AI.Abstractions**. Both [IEmbeddingGenerator](https://learn.microsoft.com/dotnet/api/microsoft.extensions.ai.iembeddinggenerator) and the [Embedding](https://learn.microsoft.com/dotnet/api/microsoft.extensions.ai.embedding-1) type from **Microsoft.Extensions.AI.Abstractions** is fully supported by **Microsoft.Extensions.VectorData.Abstractions** and the **Microsoft.Extension.AI** packages are now also [Generally Available](https://aka.ms/dotnet/ai/extensions/ga).\n\n[**Microsoft.Extensions.AI** and **Semantic Kernel**](https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-and-microsoft-extensions-ai-better-together-part-1/) provide various implementations for **Microsoft.Extensions.AI.Abstractions** that can be used to connect to services for embedding generation.\n\n## Why target these abstractions?\n\nIf you’re building a **library**, it’s critical to remain agnostic to specific AI or vector systems. By depending only on these shared abstractions, you avoid locking your consumers into particular providers and ensure your library can interoperate with others. This promotes flexibility and broad compatibility across the ecosystem.\n\nIf you’re building an **application**, you have more freedom to choose concrete implementations.\n\nWhat does this mean in practice?\n\n- **Providers** can implement these abstractions to integrate smoothly with the ecosystem.\n- **Library authors** should build on the abstractions to enable composability and avoid forcing provider choices on consumers.\n- **Application developers** benefit from a consistent API, making it easier to switch or combine providers without major code changes.\n\n## Available Implementations\n\nThe **Semantic Kernel** and **.NET** teams have worked closely together to build a wide range of **vector store connectors** that implement the abstractions provided by **Microsoft.Extensions.VectorData.Abstractions**. These connectors make it easy to integrate popular vector databases like Azure AI Search, Qdrant, PostgreSQL, and more into your AI applications.\n\nYou can find a full list of available connectors in the [Semantic Kernel out of the box connectors documentation](https://learn.microsoft.com/semantic-kernel/concepts/vector-store-connectors/out-of-the-box-connectors).\n\n## Usage\n\nFirst add the required packages to your application\n\n```dotnetcli\n\ndotnet add package Azure.Identity dotnet add package Azure.AI.OpenAI --prerelease dotnet add package Microsoft.Extensions.AI.OpenAI --prerelease dotnet add package Microsoft.SemanticKernel.Connectors.SqliteVec --prerelease\n\n```\n\nThen create an embedding generator and a vector store collection. Make sure to pass your embedding generator to the vector store collection, so that embedding generation is seamlessly handled for you by the collection class. You can then start upserting records and doing vector searches.\n\n```csharp\n\nusing Azure.AI.OpenAI; using Azure.Identity; using Microsoft.Extensions.AI; using Microsoft.Extensions.VectorData; using Microsoft.SemanticKernel.Connectors.SqliteVec;\n\n// Create embedding generator IEmbeddingGenerator<string, Embedding<float>> embeddingGenerator = new AzureOpenAIClient(new Uri(Settings.EmbeddingEndpoint), new DefaultAzureCredential()) .GetEmbeddingClient(\"text-embedding-3-large\") .AsIEmbeddingGenerator(1536);\n\n// Create vector store collection object VectorStoreCollection<int, Product> collection = new SqliteCollection<int, Product>( connectionString: \"Data Source=products.db\", name: \"products\", new SqliteCollectionOptions { // Pass embedding generator to collection. EmbeddingGenerator = embeddingGenerator, });\n\n// Create the collection if it does not exist await collection.EnsureCollectionExistsAsync();\n\n// Start upserting records. // The Description text will automatically be converted to a vector on upsert and // stored in the Embedding field. await collection.UpsertAsync(new Product { Id = 1, Name = \"Kettle\", TenantId = 5, Description = \"This kettle is great for making tea, it heats up quickly and has a large capacity.\" });\n\n// Do a vector search. The collection will automatically generate a search vector, from // the search string, to use for the similarity search. var query = \"Find me kettles that can hold a lot of water\"; await foreach (var result in collection.SearchAsync(query, top: 5, new() { Filter = r => r.TenantId == 5 })) { Console.WriteLine(result.Record.Description); }\n\nclass Product { [VectorStoreKey] public int Id { get; set; }\n\n[VectorStoreData] public string Name { get; set; }\n\n[VectorStoreData] public int TenantId { get; set; }\n\n[VectorStoreData] public string Description { get; set; }\n\n// The value of this property will automatically be converted to a vector on upsert. [VectorStoreVector(Dimensions: 1536)] public string? Embedding => this.Description; }\n\n```\n\n## GA for Abstractions, Preview for Implementations\n\nWhile the **Microsoft.Extensions.VectorData.Abstractions** abstractions are now generally available, the **Semantic Kernel implementations** are still in preview. Over the coming weeks, we will work to make these implementations generally available.\n\nThere may still be small breaking changes to the implementations before they become generally available as we ensure that these are all release ready, use the latest drivers and are of the highest quality and stability for the future.\n\n## Why the Delay for Some Connectors?\n\nSome vector store connectors depend on drivers or SDKs that are not yet generally available. For example, certain connectors rely on database drivers that are still in preview or undergoing final testing. To ensure that we provide developers with a consistent experience, we’ve chosen to delay the GA release of these connectors until their dependencies are fully ready.\n\n## Get Started Today\n\nTo get started with **Microsoft.Extensions.VectorData.Abstractions**:\n\n1. Check out the [documentation](https://learn.microsoft.com/semantic-kernel/concepts/vector-store-connectors) for detailed guides and tutorials.\n2. Explore the [Semantic Kernel GitHub repository](https://github.com/microsoft/semantic-kernel) to find vector store connectors and examples.\n3. Also check out this [post on the .NET blog](https://aka.ms/dotnet/ai/extensions/ga) for even more information on the **Microsoft.Extensions.VectorData.Abstractions** and **Microsoft.Extensions.AI** releases**.**\n\nWe’re excited to see what you build with **Microsoft.Extensions.VectorData.Abstractions** and the Semantic Kernel connectors. Stay tuned for updates as we roll out GA implementations in the coming weeks!",
  "Tags": [
    ".NET",
    "Semantic Kernel",
    "Vector Database"
  ],
  "PubDate": "2025-05-21T14:41:49+00:00",
  "Description": "We’re excited to announce the release of Microsoft.Extensions.VectorData.Abstractions, a foundational library providing exchange types and abstractions for vector stores when working with vector data in AI-powered applications. This release is the result of a close collaboration between the Semantic Kernel and .NET teams, combining expertise in AI and developer tooling to deliver a robust, extensible […]\n\nThe post [Vector Data Extensions are now Generally Available (GA)](https://devblogs.microsoft.com/semantic-kernel/vector-data-extensions-are-now-generally-available-ga/) appeared first on [Semantic Kernel](https://devblogs.microsoft.com/semantic-kernel).",
  "FeedLevelAuthor": "Semantic Kernel",
  "FeedName": "Microsoft DevBlog"
}
