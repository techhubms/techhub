{
  "Description": "Microsoft Agent Framework (Preview) unifies agent creation, orchestration, tooling, hosting, and observability so any .NET developer can ship production AI agents faster.\n\nThe post [Introducing Microsoft Agent Framework (Preview): Making AI Agents Simple for Every Developer](https://devblogs.microsoft.com/dotnet/introducing-microsoft-agent-framework-preview/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "OutputDir": "_news",
  "ProcessedDate": "2025-10-01 15:02:44",
  "PubDate": "2025-10-01T14:05:00+00:00",
  "FeedName": "Microsoft .NET Blog",
  "Link": "https://devblogs.microsoft.com/dotnet/introducing-microsoft-agent-framework-preview/",
  "Tags": [
    ".NET",
    "agents",
    "AI",
    "microsoftagentframework"
  ],
  "Title": "Introducing Microsoft Agent Framework (Preview): Making AI Agents Simple for Every Developer",
  "EnhancedContent": "Building AI agents shouldn’t be rocket science. Yet many developers find themselves wrestling with complex orchestration logic, struggling to connect multiple AI models, or spending weeks building hosting infrastructure just to get a simple agent into production.\n\nWhat if building an AI agent could be as straightforward as creating a web API or console application?\n\n## Agents and Workflows\n\nBefore we dive deeper, let’s define the two core building blocks of agent systems: agents and workflows.\n\n### Agents\n\nAcross the web, you’ll find many definitions of agents. Some conflicting, some overlapping.\n\nFor this post, we’ll keep it simple:\n\n**Agents are systems that accomplish objectives.**\n\n![Diagram showing an AI agent with reasoning, tool usage, and context inputs feeding its objective completion](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/agent.png)\n\nAgents become more capable when equipped with the following:\n\n- **Reasoning and decision-making**: Powered by AI Models (LLMs), search algorithms, or planning and decision-making systems.\n- **Tool usage**: Access to Model Context Protocol (MCP) servers, code execution, and external APIs.\n- **Context awareness**: Informed by chat history, threads, vector stores, enterprise data, or knowledge graphs.\n\nThese capabilities allow agents to operate more autonomously, adaptively, and intelligently.\n\n### Workflows\n\nAs objectives grow in complexity, they need to be broken down into manageable steps. That’s where workflows come in.\n\n**Workflows define the sequence of steps required to achieve an objective.**\n\nImagine you’re launching a new feature on your business website. If it’s a simple update, you might go from idea to production in a few hours. But for more complex initiatives, the process might include:\n\n- Requirement gathering\n- Design and architecture\n- Implementation\n- Testing\n- Deployment\n\n![Diagram illustrating a multi-step software delivery workflow with iterative feedback loops between phases](./workflow.png)\n\nA few important observations:\n\n- Each step may contain subtasks.\n- Different specialists may own different phases.\n- Progress isn’t always linear. Bugs found during testing may send you back to implementation.\n- Success depends on planning, orchestration, and communication across stakeholders.\n\n### Agents + Workflows\n\nWorkflows don’t require agents, but agents can supercharge them.\n\nWhen agents are equipped with reasoning, tools, and context, they can optimize workflows.\n\nThis is the foundation of multi-agent systems, where agents collaborate within workflows to achieve complex goals.\n\n## Meet Microsoft Agent Framework\n\nMicrosoft Agent Framework is a comprehensive set of .NET libraries that reduces the complexity of agent development. Whether you’re building a simple chatbot or orchestrating multiple AI agents in complex workflows, Microsoft Agent Framework provides the tools you need to:\n\n- **Build** agents with minimal boilerplate code\n- **Orchestrate** multi-agent workflows with ease\n- **Host** and deploy agents using familiar .NET patterns\n- **Monitor** and observe agent behavior in production\n\nFor more details, see the [Introducing Microsoft Agent Framework post in the Foundry blog](https://aka.ms/AgentFramework/PuPr).\n\n### Built on Proven Foundations\n\nMicrosoft Agent Framework leverages established technologies to simplify agent development for .NET developers:\n\n- **Semantic Kernel** – Provides robust orchestration\n- **AutoGen** – Enables advanced multi-agent collaboration and cutting-edge research-driven techniques\n- **Microsoft.Extensions.AI** – Delivers standardized AI building blocks for .NET.\n\n![Diagram showing Agent Framework built atop Semantic Kernel, AutoGen, and Microsoft.Extensions.AI foundational libraries](./agent-framework-foundations.png)\n\nBy combining these technologies, Agent Framework offers reliability, flexibility, and a developer-friendly API. This allows you to build and deploy powerful AI agents quickly and efficiently.\n\n## Start Simple: Build Your First Agent in Minutes\n\nGetting started with Microsoft Agent Framework is simple. In the following example, you’ll build a creative writing agent that generates engaging short stories.\n\nThe fastest way to try it out is to open the [Hello World Agents sample](https://aka.ms/dotnet/agent-framework/helloworld) in GitHub Codespaces:\n\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/luisquintanilla/hello-world-agents?devcontainer_path=.devcontainer.json)\n\nIf you prefer, you can follow the step-by-step instructions below to set up the project on your own machine.\n\n### Step 0: Configure prerequisites\n\nTo get started, you’ll need the following:\n\n- [.NET 9 SDK or greater](https://dotnet.microsoft.com/download)\n- A GitHub Personal Access Token (PAT) with `models`\nscope. You can create one in you can create in your [GitHub settings](https://github.com/settings/tokens). For more details, see the [GitHub documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens?source=post_page-----3474aac2c6f2---------------------------------------#creating-a-personal-access-token-classic)\n\nThis project can use GitHub-hosted models so you’ll need to provide the GitHub Personal Access Token (PAT) to your application using the `GITHUB_TOKEN` environment variable.\n\n#### Windows\n\n```powershell setx GITHUB_TOKEN \"YOUR-GITHUB-TOKEN\"\n# Restart your shell to pick up the value\n```\n\n#### Linux / Mac\n\n```bash export GITHUB_TOKEN=\"YOUR-GITHUB-TOKEN\" ```\n\n### Step 1: Set Up Your Project\n\n1. Create a new C# console application and install the Agent Framework packages:\n\n```bash dotnet new console -o HelloWorldAgents cd HelloWorldAgents dotnet add package Microsoft.Agents.AI --prerelease ```\n2. You’ll also need to install the following packages to use the models from GitHub models.\n\n```bash dotnet add package OpenAI dotnet add package Microsoft.Extensions.AI.OpenAI --prerelease dotnet add package Microsoft.Extensions.AI ```\n\n### Step 2: Write Your Agent\n\n1. Add this code to your *Program.cs* file to create a story-writing agent:\n\n```csharp using Microsoft.Extensions.AI; using Microsoft.Agents.AI; using OpenAI; using OpenAI.Chat; using System.ClientModel;\n\nIChatClient chatClient = new ChatClient( \"gpt-4o-mini\", new ApiKeyCredential(Environment.GetEnvironmentVariable(\"GITHUB_TOKEN\")!), new OpenAIClientOptions { Endpoint = new Uri(\"https://models.github.ai/inference\") }) .AsIChatClient();\n\nAIAgent writer = new ChatClientAgent( chatClient, new ChatClientAgentOptions { Name = \"Writer\", Instructions = \"Write stories that are engaging and creative.\" });\n\nAgentRunResponse response = await writer.RunAsync(\"Write a short story about a haunted house.\");\n\nConsole.WriteLine(response.Text); ```\n2. Run your application\n\nThat’s it! In just a few lines of code, you have a fully functional AI agent.\n\n### The Power of Abstraction\n\nMicrosoft Agent Framework is designed around powerful abstractions that simplify agent development.\n\nAt its core is the `AIAgent` abstraction, which provides a unified interface for building agents. The flexibility to use any compatible AI model provider comes from Microsoft.Extensions.AI, which standardizes model access through the `IChatClient` interface.\n\nThe `ChatClientAgent` implementation of `AIAgent` accepts any `IChatClient` , allowing you to easily choose between providers such as:\n\n- OpenAI\n- Azure OpenAI\n- Foundry Local\n- Ollama\n- GitHub Models\n- Many others\n\nThis means you can swap providers or integrate new ones without changing your agent code. The same `AIAgent` interface works seamlessly with:\n\n- **Azure Foundry Agents**\n- **OpenAI Assistants**\n- **Copilot Studio**\n- Many others\n\nIf you’ve built agents using different SDKs or platforms, using Microsoft Agent Framework is straightforward. You get a consistent developer experience and can leverage orchestration, hosting, and monitoring features.\n\n## Scale Up: Orchestrate Multiple Agents\n\nSingle agents are powerful, but real-world scenarios often require multiple specialized agents working together. Maybe your writing agent creates great content, but you also need an editor to polish it, or a fact-checker to verify details.\n\nAgent Framework makes multi-agent orchestration as simple as connecting building blocks.\n\n### Adding Specialized Agents\n\nLet’s enhance our story example by adding an editor agent to review and improve the writer’s output:\n\n```csharp // Create a specialized editor agent AIAgent editor = new ChatClientAgent( chatClient, new ChatClientAgentOptions { Name = \"Editor\", Instructions = \"Make the story more engaging, fix grammar, and enhance the plot.\" }); ```\n\n### Building Workflows\n\nNow comes the magic – connecting these agents in a workflow.\n\n1. Install the Microsoft.Agents.Workflows NuGet package:\n\n```bash dotnet add package Microsoft.Agents.AI.Workflows --prerelease ```\n2. Create a workflow to orchestrates your agents:\n\n```csharp // Create a workflow that connects writer to editor Workflow workflow = AgentWorkflowBuilder .BuildSequential(writer, editor);\n\nAIAgent workflowAgent = await workflow.AsAgentAsync();\n\nAgentRunResponse workflowResponse = await workflowAgent.RunAsync(\"Write a short story about a haunted house.\");\n\nConsole.WriteLine(workflowResponse.Text); ```\n\n### The Result\n\nNow when you run your application, the writer creates the initial story, and the editor automatically reviews and improves it. The entire workflow appears to the outside world as a single, more capable agent.\n\n![Workflow diagram: writer agent creates a story, editor agent reviews and improves it in sequence](./writer-editor-workflow.png)\n\nThis pattern scales to any complexity:\n\n- **Research workflows**: Researcher → Fact-checker → Summarizer\n- **Content pipelines**: Writer → Editor → SEO Optimizer → Publisher\n- **Customer service**: Intent Triage → Customer Specialist Agent → Quality Reviewer\n\nThe key takeaway here is, complex agent systems are compositions of simple, focused agents.\n\n### All Types of Workflows\n\nThe example above uses a **sequential workflow**, where agents process tasks one after another, each building on the previous agent’s output. However, Microsoft Agent Framework supports a variety of workflow patterns to fit different requirements:\n\n- **Sequential**: Agents execute in order, passing results along the chain.\n- **Concurrent**: Multiple agents work in parallel, addressing different aspects of a task simultaneously.\n- **Handoff**: Responsibility shifts between agents based on context or outcomes.\n- **GroupChat**: Agents collaborate in a shared, real-time conversational space.\n\nThese flexible workflow types enable orchestration for everything from simple pipelines to dynamic, multi-agent collaboration.\n\n## Empower Agents with Tools\n\nMicrosoft Agent Framework makes it incredibly easy to give your agents access to external functions, APIs, and services so your agents can take action.\n\n### Creating Agent Tools\n\nLet’s enhance our writing agent with some useful tools. In our story example, we might want agents that can do the following:\n\n```csharp [Description(\"Gets the author of the story.\")] string GetAuthor() => \"Jack Torrance\";\n\n[Description(\"Formats the story for display.\")] string FormatStory(string title, string author, string story) => $\"Title: {title}\\nAuthor: {author}\\n\\n{story}\"; ```\n\n### Connecting Tools to Agents\n\nAdding these tools to your agent is straightforward. Here’s a modified version of our writer agent configured to use the tools defined earlier.\n\n```csharp AIAgent writer = new ChatClientAgent( chatClient, new ChatClientAgentOptions { Name = \"Writer\", Instructions = \"Write stories that are engaging and creative.\", ChatOptions = new ChatOptions { Tools = [ AIFunctionFactory.Create(GetAuthor), AIFunctionFactory.Create(FormatStory) ], } }); ```\n\nRunning the application again would result in a formatted story per the template you provided in `FormatStory` .\n\n```text **Title: The Haunting of Blackwood Manor** **Author: Jack Torrance**\n\nOn the outskirts of a quaint village, a grand but crumbling mansion, known as Blackwood Manor, loomed against the twilight sky. Locals spoke in hushed tones about the house, claiming it was haunted by the spirits of its former inhabitants, who had mysteriously vanished decades ago. Tales of flickering lanterns, echoing whispers, and the ghostly figure of a woman in white gliding through the halls filled the village’s atmosphere with a sense of dread //... ```\n\n### Beyond Simple Functions\n\nBecause Microsoft Agent Framework builds on Microsoft.Extensions.AI, your agents can use more robust tools including:\n\n- **Model Context Protocol (MCP) servers** – Connect to external services like databases, APIs, and third-party tools\n- **Hosted tools** – Access server-side tools like Code Interpreter, Bing Grounding, and many more\n\nFor example, you could connect to an MCP server that provides database access, web search, or even hardware control. Learn more about building MCP integrations in our [MCP client quickstart](https://learn.microsoft.com/dotnet/ai/quickstarts/build-mcp-client).\n\n## Deploy with Confidence: Hosting Made Simple\n\nGetting agents into production shouldn’t mean learning a new deployment model. Microsoft Agent Framework integrates seamlessly with the .NET hosting patterns you already use.\n\n### Minimal Web API Integration\n\nUsing your agent in a REST API is a few lines of code.\n\nIn an ASP.NET Minimal Web API, start by registering your `IChatClient` :\n\n```csharp builder.AddOpenAIClient(\"chat\") .AddChatClient(Environment.GetEnvironmentVariable(\"MODEL_NAME\")!); ```\n\nUse the **Microsoft.Agents.AI.Hosting** NuGet package to register your agents:\n\n```csharp builder.AddAIAgent(\"Writer\", (sp, key) => { var chatClient = sp.GetRequiredService<IChatClient>();\n\nreturn new ChatClientAgent( chatClient, name: key, instructions: \"\"\" You are a creative writing assistant who crafts vivid, well-structured stories with compelling characters based on user prompts, and formats them after writing. \"\"\", tools: [ AIFunctionFactory.Create(GetAuthor), AIFunctionFactory.Create(FormatStory) ] ); });\n\nbuilder.AddAIAgent( name: \"Editor\", instructions: \"\"\" You are an editor who improves a writer’s draft by providing 4–8 concise recommendations and a fully revised Markdown document, focusing on clarity, coherence, accuracy, and alignment. \"\"\"); ```\n\nOnce registered, your agents are available anywhere in your app:\n\n```csharp app.MapGet(\"/agent/chat\", async ( [FromKeyedServices(\"Writer\")] AIAgent writer, [FromKeyedServices(\"Editor\")] AIAgent editor, HttpContext context, string prompt) => { Workflow workflow = AgentWorkflowBuilder .CreateGroupChatBuilderWith(agents => new AgentWorkflowBuilder.RoundRobinGroupChatManager(agents) { MaximumIterationCount = 2 }) .AddParticipants(writer, editor) .Build();\n\nAIAgent workflowAgent = await workflow.AsAgentAsync();\n\nAgentRunResponse response = await workflowAgent.RunAsync(prompt); return Results.Ok(response); }); ```\n\n### Production-Ready Features\n\nMicrosoft Agent Framework hosting includes everything you need for production:\n\n- **Configuration** – Manage agent settings through standard .NET configuration\n- **Dependency injection** – Integrate with your existing DI containers and practices\n- **Middleware support** – Add authentication, rate limiting, or custom logic\n\n### Deploy\n\nMicrosoft Agent Framework doesn’t reinvent deployment. If you know how to ship a .NET app, you already know how to ship agents.\n\nNo new tooling. No special hosting model. Just add agents and deploy wherever .NET runs.\n\n## Observe and Improve: Built-in Monitoring\n\nProduction agents need observability. Microsoft Agent Framework provides comprehensive monitoring that integrates with your existing observability stack.\n\n### OpenTelemetry Integration\n\nEnable detailed telemetry with a single line:\n\n```csharp // Enhanced telemetry for all your agents writer.WithOpenTelemetry(); editor.WithOpenTelemetry(); ```\n\nThis captures:\n\n- **Conversation flows** – Visualize how messages move between agents\n- **Model usage** – Track token consumption, model selection, and costs\n- **Performance metrics** – Monitor response times and throughput\n- **Error tracking** – Identify and debug issues quickly\n\n### Rich Dashboards\n\nWhen connected to your existing observability platforms like:\n\n- **Aspire**\n- **Azure Monitor**\n- **Grafana**\n- Many others\n\nYou get detailed insights into agent behavior, helping you optimize performance and identify issues before they affect users.\n\n### OpenTelemetry with Aspire\n\nTo send agent telemetry to the Aspire dashboard, enable OpenTelemetry and allow sensitive data for richer insights.\n\nSet EnableSensitiveTelemetryData to true when configuring your client:\n\n```csharp builder .AddAzureChatCompletionsClient(\"chat\", settings => { settings.EnableSensitiveTelemetryData = true; }) .AddChatClient(Environment.GetEnvironmentVariable(\"MODEL_NAME\")!); ```\n\nThen, configure Aspire to recognize telemetry sources:\n\n```csharp public static TBuilder ConfigureOpenTelemetry<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder { builder.Logging.AddOpenTelemetry(logging => { //... }) .AddTraceSource(\"Experimental.Microsoft.Extensions.AI.*\");\n\nbuilder.Services.AddOpenTelemetry() .WithMetrics(metrics => { metrics.AddAspNetCoreInstrumentation() .AddHttpClientInstrumentation() .AddRuntimeInstrumentation() .AddMeter(\"Experimental.Microsoft.Extensions.AI.*\"); }) .WithTracing(tracing => { tracing.AddSource(builder.Environment.ApplicationName) .AddSource(\"Experimental.Microsoft.Extensions.AI.*\") .AddAspNetCoreInstrumentation() .AddHttpClientInstrumentation(); }); //... } ```\n\nWith this setup, Aspire dashboards show detailed telemetry including conversation flows, model usage, performance metrics, and error tracking.\n\n![Screenshot of .NET Aspire dashboard displaying Agent Framework telemetry traces, metrics, and agent interactions](./aspire-telemetry-dashboard.png)\n\n![Screenshot showing detailed telemetry panel for a single LLM request including latency, tokens, and model info](./aspire-telemetry-dashboard-detail.png)\n\n## Ensure Quality: Evaluation and Testing\n\nTrust in AI systems comes from rigorous evaluation. Microsoft Agent Framework can easily integrate with Microsoft.Extensions.AI.Evaluations to help you build reliable, trustworthy agent systems.\n\nThis enables:\n\n- **Automated testing** – Run evaluation suites as part of your CI/CD pipeline\n- **Quality metrics** – Measure relevance, coherence, and safety\n- **Regression detection** – Catch quality degradation before deployment\n- **A/B testing** – Compare different configurations\n\nSee how to [get started with evaluations using Microsoft.Extensions.AI.Evaluations](https://learn.microsoft.com/dotnet/ai/evaluation/libraries).\n\n## Start Building Agents Today\n\nMicrosoft Agent Framework transforms agent development from a complex, specialized skill into something every .NET developer can master. Whether you’re building a chatbot or orchestrating multiple AI agents in complex workflows, Microsoft Agent Framework provides a clear path forward.\n\n### Key Takeaways\n\n- **Simple by Design**: Get started with just a few lines of code. Create your first agent in minutes, not days.\n- **Scales with You**: Start with a single agent, then easily add workflows, tools, hosting, and monitoring as your needs grow.\n- **Built on Proven Technology**: Microsoft Agent Framework brings together the best from AutoGen and Semantic Kernel. It builds on Microsoft.Extensions.AI, a unified foundation for modern AI development, to deliver a robust and cohesive experience for .NET developers.\n- **Production Ready**: Deploy using familiar .NET patterns with built-in observability, evaluation, and hosting capabilities.\n\n### What’s Next?\n\nReady to start building?\n\nRun the [Hello World agent sample](https://aka.ms/dotnet/agent-framework/helloworld).\n\nThen, head over to the [Microsoft Agent Framework documentation](https://aka.ms/dotnet/agent-framework/docs) to continue learning.\n\nThe future of software development includes AI agents as first-class components in modern software development. Microsoft Agent Framework ensures that future is accessible to every .NET developer.",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Author": "Luis Quintanilla",
  "FeedLevelAuthor": ".NET Blog"
}
