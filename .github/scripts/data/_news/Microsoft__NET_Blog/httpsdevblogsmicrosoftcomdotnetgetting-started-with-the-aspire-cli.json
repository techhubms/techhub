{
  "Title": "Getting Started with the Aspire CLI",
  "PubDate": "2025-08-28T17:05:00+00:00",
  "Link": "https://devblogs.microsoft.com/dotnet/getting-started-with-the-aspire-cli/",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Author": "Jeffrey Fritz",
  "Description": "The Aspire CLI is here and you can use it to configure and run your applications\n\nThe post [Getting Started with the Aspire CLI](https://devblogs.microsoft.com/dotnet/getting-started-with-the-aspire-cli/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "EnhancedContent": "The Aspire CLI is a powerful, cross-platform tool designed to streamline the development, management, and deployment of application systems. Whether you’re building a simple website or an enterprise-scale distributed application with microservices and queues and databases, the Aspire CLI offers an interactive-first experience to help you create, run, and publish your projects with ease.\n\n## 1. Installing the Aspire CLI\n\nBefore you begin, make sure you have the [.NET 9.0 SDK](https://dotnet.microsoft.com/download/dotnet/9.0) installed.\n\n**There are two main ways to install the Aspire CLI, with instructions for both Windows and Unix-based systems:**\n\n### a. As a Native Executable\n\n#### Windows\n\nOpen PowerShell and run:\n\n```powershell Invoke-Expression \"& { $(Invoke-RestMethod https://aspire.dev/install.ps1) }\" ```\n\nThis installs Aspire CLI to `%USERPROFILE%\\.aspire\\bin` by default. You can customize the install path or version using script options (see the [official docs](https://learn.microsoft.com/dotnet/aspire/cli/install?tabs=windows) for details).\n\n#### Unix (Linux/macOS)\n\nOpen a terminal and run:\n\n```bash curl -sSL https://aspire.dev/install.sh | bash ```\n\nThis installs Aspire CLI to `$HOME/.aspire/bin` by default. You can customize the install path or version using script options (see the [official docs](https://learn.microsoft.com/dotnet/aspire/cli/install?tabs=unix) for details).\n\n### b. As a .NET Global Tool (Cross-platform)\n\nAlternatively, you can install Aspire CLI as a global .NET tool (works on both Windows and Unix):\n\n```bash dotnet tool install -g Aspire.Cli --prerelease ```\n\n**Validate your installation:**\n\n```bash aspire --version ```\n\nIf you see a version number, you’re ready to go!\n\n## 2. Creating a New Project with Templates\n\nAspire CLI makes it easy to start new projects using templates. Run:\n\n```powershell aspire new ```\n\nThis command launches an interactive experience where you can select a template, name your project, and choose an output folder.\n\nThe templates that are currently available with the CLI are:\n\n- **Starter template**: A collection of projects using .NET that demonstrate a simple system running with Aspire\n- **AppHost and service defaults**: Creates a solution with an AppHost project and a service defaults project, providing a ready-to-run distributed application setup.\n- **AppHost**: Generates just the AppHost project, which acts as the entry point and orchestrator for your distributed application.\n- **Service defaults**: Sets up a project with recommended defaults for building microservices and websites with .NET. This includes best practices for configuration and dependencies, and is intended to be included in other projects to enable those defaults.\n- **Integration tests**: Provides a template for writing integration tests with .NET, making it easier to test your distributed application’s components together.\n\nThe CLI will download the latest templates and generate your project structure.\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/aspirecli-new.webm](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/aspirecli-new.webm)\n\n## 3. Adding Integrations and Packages\n\nTo add official integration packages (like databases, messaging, etc.) to your AppHost project, use:\n\n```powershell aspire add ```\n\nYou can specify a package name or NuGet ID as a command-line argument, or let the CLI present a list you can choose from with type-ahead searching. This simplifies adding dependencies without leaving your terminal.\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/aspirecli-add.webm](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/aspirecli-add.webm)\n\nHere is a snapshot of what the integration package selection list looks like:\n\n```bash 🔍 Finding app hosts... testAspire\\testAspire.AppHost\\testAspire.AppHost.csproj\n\n🗄 Created settings file at '.aspire/settings.json'. Select an integration to add:\n\nazure-cosmosdb (Aspire.Hosting.Azure.CosmosDB) azure-eventhubs (Aspire.Hosting.Azure.EventHubs) azure-functions (Aspire.Hosting.Azure.Functions) azure-keyvault (Aspire.Hosting.Azure.KeyVault) azure-operationalinsights (Aspire.Hosting.Azure.OperationalInsights)\n> azure-postgresql (Aspire.Hosting.Azure.PostgreSQL)\nazure-redis (Aspire.Hosting.Azure.Redis) azure-search (Aspire.Hosting.Azure.Search) azure-servicebus (Aspire.Hosting.Azure.ServiceBus) azure-signalr (Aspire.Hosting.Azure.SignalR)\n\n(Type to search) (Move up and down to reveal more choices) ```\n\n## 4. Running and Debugging Your Application\n\nTo start your application in development mode, use:\n\n```powershell aspire run ```\n\nThis command:\n\n- Configures the Aspire environment\n- Builds and starts all resources defined by your AppHost\n- Launches the Aspire dashboard for monitoring\n- Prints a list of endpoints\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/aspirecli-run.webm](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/aspirecli-run.webm)\n\nYou’ll see output like:\n\n```bash Dashboard: https://localhost:17178/login?t=... Logs: .../.aspire/cli/logs/apphost-...log ```\n\nThe dashboard is your jumping off point, to see application logs, metrics, and even a network diagram of your system’s resources.\n\nAspire logs are written to disk in case you need to examine how the Aspire processes are running.\n\n## 5. Publishing Your Application\n\nWe’re working on the publishing feature, and some of what you will see is in preview mode. When you’re ready to publish, use:\n\n```powershell aspire publish ```\n\nThis command serializes your resources for deployment tools. Depending on your integrations, it can generate assets for Azure, Docker Compose, or Kubernetes.\n\nThere is also a **deploy** command available, but currently it does not have any functionality associated with it.\n\n## Conclusion & Call to Action\n\nThe Aspire CLI is your gateway to building modern, distributed .NET applications with speed and confidence. From project creation to publishing, it’s designed to make your workflow seamless and productive.\n\nAs with all of .NET and Aspire, the source code is available on our [GitHub repository](https://github.com/dotnet/aspire/tree/main/src/Aspire.Cli)\n\n**Ready to get started?** Install the Aspire CLI today and start building your next great application!",
  "FeedName": "Microsoft .NET Blog",
  "Tags": [
    ".NET",
    ".NET Aspire",
    "aspire",
    "CLI",
    "Cloud Native"
  ],
  "FeedLevelAuthor": ".NET Blog",
  "ProcessedDate": "2025-08-28 17:10:01",
  "OutputDir": "_news"
}
