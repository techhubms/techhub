{
  "Tags": [
    ".NET",
    ".NET Aspire",
    "AI",
    "aspire",
    "CLI",
    "Cloud Native",
    "Containers",
    "YARP"
  ],
  "FeedName": "Microsoft .NET Blog",
  "FeedLevelAuthor": ".NET Blog",
  "Title": "Announcing Aspire 9.5",
  "PubDate": "2025-09-25T17:25:00+00:00",
  "Author": "Jeffrey Fritz",
  "ProcessedDate": "2025-09-25 18:17:11",
  "Description": "Aspire 9.5 adds the preview 'aspire update' command, single-file AppHost, richer CLI and dashboard UX, and new integrations for AI, DevTunnels, and more.\n\nThe post [Announcing Aspire 9.5](https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-95/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "OutputDir": "_news",
  "Link": "https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-95/",
  "EnhancedContent": "Aspire 9.5 is here with exciting new features and improvements that enhance the developer experience for building distributed applications.\n\n*For the complete list of changes and technical details, visit the [official Aspire 9.5 release notes](https://learn.microsoft.com/dotnet/aspire/whats-new/dotnet-aspire-9-5).*\n\nLet’s dive into some key highlights of this release.\n\n## Upgrading to Aspire 9.5\n\nYou can install the Aspire CLI at the command-line with these commands:\n\n```bash\n# Bash\ncurl -sSL https://aspire.dev/install.sh | bash\n\n# PowerShell\niex \"& { $(irm https://aspire.dev/install.ps1) }\"\n\n```\n\nOne of the most exciting additions in Aspire 9.5 is the new **`aspire update` command** (in preview), which simplifies the upgrade process significantly. This automatically detects and updates your AppHost SDK and Aspire integrations.\n\nThis preview command:\n\n- **Updates your SDK and AppHost packages** automatically\n- **Validates package compatibility** before applying changes\n- **Supports channel awareness** – choose stable, daily, or custom builds\n- **Asks for confirmation** before making changes\n\n![Update an app with the aspire update command](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/aspire-update.gif)\n\n**Preview Feature**\n\nThe `aspire update` command is in preview and may change before general availability. We recommend using version control and inspecting changes after running it. Share your feedback about this feature on [GitHub](https://github.com/dotnet/aspire/issues)!\n\n**Updating from Aspire 8**\n\nIf you’re still using the .NET Aspire workload (versions 8.x), follow the [upgrade guide to Aspire 9](https://learn.microsoft.com/dotnet/aspire/get-started/upgrade-to-aspire-9) to upgrade to 9.5.\n\n## Enhanced CLI Experience\n\nAspire 9.5 brings significant improvements to the command-line experience, making it more powerful and user-friendly for developers.\n\n## Single-File AppHost (Preview)\n\nOne of the most revolutionary features in Aspire 9.5 is the **file-based AppHost support** – a preview feature that introduces support for .NET 10’s new file-based apps. This means you can now create an Aspire AppHost with **just one file and no project file needed**! New and existing applications built with an AppHost project will continue to be supported.\n\n### What is File-Based AppHost?\n\nThe traditional Aspire AppHost requires a `.csproj` file and multiple files to get started. With file-based AppHost, you can define your entire distributed application in a single `apphost.cs` file. This builds on the work we’re delivering with [.NET 10 that enables single-file applications](https://devblogs.microsoft.com/dotnet/announcing-dotnet-run-app/).\n\nThis feature is currently behind a feature flag and requires .NET SDK 10.0.100 RC1 or later:\n\n```bash\n# Enable file-based AppHost support\naspire config set features.singlefileAppHostEnabled true ```\n\nYou can then use the `aspire new` command to create a new, blank file-based apphost with this content:\n\n```csharp #:sdk Aspire.AppHost.Sdk@9.5.0\n\nvar builder = DistributedApplication.CreateBuilder(args);\n\nbuilder.Build().Run(); ```\n\nAdditionally, an `apphost.run.json` file will be written with launch profiles for your favorite code-editor to use.\n\n### Adding Resources and Projects to Your File-Based AppHost\n\nStart adding integrations with `aspire add` and add your other projects with single line directives in your `apphost.cs` file.\n\n```csharp #:sdk Aspire.AppHost.Sdk@9.5.0 #:project MyBlazorApp\n\nvar builder = DistributedApplication.CreateBuilder(args);\n\n// Add an ASP.NET Core project builder.AddProject<Projects.MyBlazorApp>(\"web\");\n\nbuilder.Build().Run(); ```\n\nWe can then add Redis to our growing web application by executing the command:\n\n```bash aspire add Aspire.Hosting.Redis ```\n\nThen adding the appropriate `AddRedis` statement and `WithReference` methods in the `AppHost.cs` file:\n\n```csharp #:sdk Aspire.AppHost.Sdk@9.5.0 #:package Aspire.Hosting.Redis@9.4.2 #:project MyBlazorApp\n\nvar builder = DistributedApplication.CreateBuilder(args);\n\nvar cache = builder.AddRedis(\"cache\");\n\nbuilder.AddProject<Projects.MyBlazorApp>(\"web\") .WithReference(cache) .WaitForStart(cache);\n\nbuilder.Build().Run(); ```\n\nThis approach reduces the complexity of the Aspire configuration, especially for folks outside of the .NET ecosystem, without comprimising the full power of .NET. New users to Aspire can get started in seconds and can augment their existing applications with 1 command and 1 file. Learn more about file-based applications in our [announcement blog post](https://devblogs.microsoft.com/dotnet/announcing-dotnet-run-app/).\n\n## Dashboard Enhancements\n\nThe Aspire Dashboard has a handful of usability and functionality improvements in version 9.5, making it even more powerful for monitoring and debugging distributed applications.\n\n### Multi-Resource Console Logs\n\nA long-awaited addition is the new **“All” option in console logs** that streams logs from every running resource simultaneously with color-coded prefixes so that you can see the various services that generated the log entries.\n\n![All console logs in one screen](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/dashboard-console-logs-all.png)\n\nThis unified view makes it much easier to understand the interactions between different services in your application.\n\n### New LLM Insights\n\nAspire 9.5 introduces the GenAI visualizer, which collates, summarizes, and visualizes LLM-centric calls within your app. When the dashboard detects AI telemetry, a sparkle icon (✨) is presented that will allow you to explore the interaction with the LLM. You’ll be able to see the prompts, responses, and even images returned from the LLM in the visualizer.\n\nThe GenAI telemetry conventions are evolving rapidly and we will update this feature to stay compatible.\n\n![New Visualizer for AI telemetry](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/dashboard-genai-visualizer.gif)\n\n## New and Updated Integrations\n\nAspire 9.5 introduces several new integrations and significantly enhances existing ones, making it easier to work with AI services, cloud resources, and development tools.\n\n### AI Hosting Integrations\n\nThe new **`AddOpenAI` integration** provides first-class support for modeling OpenAI endpoints and their associated models within your Aspire application.\n\n```csharp var apiKey = builder.AddParameter(\"openai-api-key\", secret: true);\n\nvar openai = builder.AddOpenAI(\"openai\") .WithApiKey(apiKey) .WithEndpoint(\"https://api.openai.com\");\n\nvar chatModel = openai.AddModel(\"chat\", \"gpt-4o-mini\");\n\n```\n\nAdditionally, we are introducing support for a **strongly-typed catalog for GitHub and Azure AI Foundry models**. This gives you intellisense support for all the up-to-date models that you can use.\n\n```csharp var gpt4 = builder.AddAzureAIFoundry(\"foundryresource).AddDeployment(\"gpt4\", AIFoundryModel.OpenAI.Gpt4);\n\nvar mistral = builder.AddGitHubModel(\"mistral\", GitHubModel.MistralAI.MistralLarge2411);\n\n```\n\n### Dev Tunnels Hosting Integration\n\nAspire 9.5 introduces **first-class support for [Azure Dev Tunnels](https://learn.microsoft.com/azure/developer/dev-tunnels/overview)**.\n\nAs a developer, this allows you to securely share your application running on your workstation with the outside network. You can test webhooks from public services, quickly get feedback from customers, and even test interactions from a mobile device using DevTunnels\n\n```csharp var builder = DistributedApplication.CreateBuilder(args);\n\n// Add a basic Dev Tunnel resource (default: private access) var tunnel = builder.AddDevTunnel(\"dev-tunnel\") .WithAnonymousAccess();\n\n// Add your web application var webApp = builder.AddProject<Projects.WebApp>(\"webapp\");\n\n// Connect the tunnel to the web application endpoint tunnel.WithReference(webApp.GetEndpoint(\"http\"));\n\nbuilder.Build().Run(); ```\n\nThe Dev Tunnels integration automatically handles Azure authentication, tunnel lifecycle management, and provides public or private URLs (depending on configuration) to connected resources, making it easy to expose local development services securely to external consumers. Dev Tunnels also improves support for mobile dev, such as .NET MAUI, making it easy to launch both your backend and mobile app at once without complex dev-time config.\n\n### YARP Static Files Support\n\nAspire 9.5 adds **static file serving capabilities** to the [YARP](https://learn.microsoft.com/aspnet/core/fundamentals/servers/yarp/yarp-overview) integration, enabling direct static file serving from YARP so your app can deliver HTML, CSS, JavaScript, and other assets efficiently. You can choose flexible source options, such as bind mounting local directories or utilizing Docker multi-stage builds, to suit your workflow. The static file support works reliably in both development and production environments, streamlining deployment and day-to-day operations.\n\nThe following example demonstrates how YARP can be configured to serve static files from a frontend ‘dist’ directory while also proxying API requests to a backend service. This approach streamlines resource management and routing within distributed applications.\n\n```csharp var backendApi = builder.AddProject<Projects.Api>(\"api\");\n\n// YARP serves static files AND proxies API requests var gateway = builder.AddYarp(\"app-gateway\") .WithStaticFiles(\"./frontend/dist\") .WithConfiguration(yarp => { // API routes yarp.AddRoute(\"/api/{**catch-all}\", backendApi) .WithTransformPathRemovePrefix(\"/api\");\n\n// Static files are served for all other routes }); ```\n\n## Cross-Process Call Stacks in Visual Studio 2026\n\nYou might have heard that the Visual Studio team [officially released the first previews of Visual Studio 2026](https://devblogs.microsoft.com/visualstudio/visual-studio-2026-insiders-is-here/). Visual Studio’s Call Stack Window can now extend Aspire apps to show call stack frames from other debugged processes running on Windows. This feature is a game-changer for deep-dive diagnostics on distributed systems. Issues are found faster by reconstructing the full logical call path, even when the request hops between services. With deeper visibility into async operations, developers can debug smarter, not harder. Currently available only on Windows and Visual Studio 2026 Insiders.\n\n## Get Started Now\n\nReady to try Aspire 9.5? Install the new CLI and try the `aspire update` command on your projects, then let us know what you think!\n\n- **GitHub**: Collaborate with the team on [GitHub](https://github.com/dotnet/aspire)\n- **Discord**: Join the community on [Discord](https://aka.ms/aspire-discord) to chat with the team and other developers\n- **Documentation**: Explore the comprehensive [documentation](https://learn.microsoft.com/dotnet/aspire/) for detailed guides and tutorials.\n\nFor the complete list of changes and technical details, visit the [official Aspire 9.5 release notes](https://learn.microsoft.com/dotnet/aspire/whats-new/dotnet-aspire-9-5).",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/"
}
