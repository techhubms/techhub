{
  "ProcessedDate": "2025-08-14 17:13:02",
  "FeedName": "Microsoft .NET Blog",
  "Title": "Announcing the NuGet MCP Server Preview",
  "PubDate": "2025-08-14T17:00:00+00:00",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Link": "https://devblogs.microsoft.com/dotnet/nuget-mcp-server-preview/",
  "FeedLevelAuthor": ".NET Blog",
  "OutputDir": "_news",
  "EnhancedContent": "Last month, we announced support for [building custom MCP servers with .NET and publishing them to NuGet](https://devblogs.microsoft.com/dotnet/mcp-server-dotnet-nuget-quickstart/). Building on that foundation, today we’re announcing the official NuGet MCP Server, which enables you to integrate real-time NuGet package information and management tools directly into your AI-powered development workflow.\n\n## What is an MCP Server?\n\nThe [Model Context Protocol](https://modelcontextprotocol.io/docs/getting-started/intro) (MCP) is an open standard that enables AI assistants to securely connect to external data sources and tools. MCP servers act as bridges between AI assistants and various services, allowing for seamless integration and enhanced functionality.\n\nSince the NuGet package ecosystem is always evolving, large language models (LLMs) get out-of-date over time and there is a need for something that assists them in getting information in realtime. The NuGet MCP server provides LLMs with information about new and updated packages that have been published after the models as well as tools to complete package management tasks. It also can connect to the feeds you have configured including private feeds, allowing for a more complete view of your packages. The NuGet MCP server utilizes an [algorithm called NuGetSolver](https://devblogs.microsoft.com/dotnet/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/) which was developed in collaboration with Microsoft Research which simplifies the process by automatically resolving NuGet dependency conflicts in your projects.\n\n## Getting Started\n\nThe NuGet MCP server is available as a [NuGet package](https://www.nuget.org/packages/NuGet.Mcp.Server) with the [new functionality](https://devblogs.microsoft.com/dotnet/mcp-server-dotnet-nuget-quickstart/) in the .NET ecosystem for implementing and releasing MCP servers.\n\n### Prerequisites\n\nBefore you can use the NuGet MCP server, you will need to have **.NET 10 Preview 6** installed on your system. You can download it from the [official .NET download page](https://dotnet.microsoft.com/download/dotnet/10.0).\n\n### Configuration\n\nTo configure the NuGet MCP server, add the following configuration to your MCP client:\n\n```json { \"servers\": { \"nuget\": { \"type\": \"stdio\", \"command\": \"dnx\", \"args\": [ \"NuGet.Mcp.Server\", \"--prerelease\", \"--yes\" ] } } } ```\n\n**Note**: The MCP server on NuGet.org is in preview, so you’ll need to use the –prerelease flag to install it. This ensures you automatically get the latest preview versions as they’re released.\n\n#### Using a Specific Version\n\nIf you prefer to use a specific version of the MCP server instead of automatically updating to the latest preview, you can specify the version exact version:\n\n```json { \"servers\": { \"nuget\": { \"type\": \"stdio\", \"command\": \"dnx\", \"args\": [ \"NuGet.Mcp.Server@0.2.0-preview\", \"--yes\" ] } } } ```\n\n## Current Capabilities\n\nThe NuGet MCP server currently supports the following functionality:\n\n- **Package Version Discovery**: Determine the latest version of a package available on your configured feeds\n- **Security Updates**: Update package vulnerabilities to the lowest compatible version that resolves security issues. This functionality will only update you to the lowest version that resolves the security issues, increasing the likelihood that the update will not break your project.\n- **Version Updates**: Update package versions to the highest compatible version with your project’s target framework. Most tooling today that updates NuGet packages does not take into account a project’s target framework, which can causes updates to fail.\n\n## Integration with Development Tools\n\n### Visual Studio\n\nTo add the NuGet MCP server to Visual Studio, add the following to your `.mcp.json` file next to a solution or at `%UserProfile%\\.mcp.json` :\n\n```json { \"servers\": { \"nuget\": { \"type\": \"stdio\", \"command\": \"dnx\", \"args\": [ \"NuGet.Mcp.Server\", \"--prerelease\", \"--yes\" ] } } } ```\n\nThere are several places that Visual Studio looks for MCP server configurations, see [File locations for automatic discovery of MCP configuration](https://learn.microsoft.com/visualstudio/ide/mcp-servers?view=vs-2022#file-locations-for-automatic-discovery-of-mcp-configuration) for more information.\n\nWhen configured properly, the NuGet MCP server will automatically start and should look like this:\n\n![Visual Studio MCP server configuration](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/vs-mcp-configuration.png)\n\n### VS Code\n\nThe easiest way to add MCP servers to VS Code is to click one of the links below for your particular installation:\n\n[![Install in VS Code](https://img.shields.io/badge/VS_Code-Install_NuGet_MCP_Server-0098FF?style=flat-square&amp;logo=visualstudiocode&amp;logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=nuget&amp;config=%7B%22type%22%3A%20%22stdio%22%2C%22command%22%3A%20%22dnx%22%2C%22args%22%3A%20%5B%22NuGet.Mcp.Server%22%2C%22--prerelease%22%2C%22--yes%22%5D%7D) [![Install in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_NuGet_MCP_Server-24bfa5?style=flat-square&amp;logo=visualstudiocode&amp;logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=nuget&amp;config=%7B%22type%22%3A%20%22stdio%22%2C%22command%22%3A%20%22dnx%22%2C%22args%22%3A%20%5B%22NuGet.Mcp.Server%22%2C%22--prerelease%22%2C%22--yes%22%5D%7D&amp;quality=insiders)\n\nAltneratively, you can manually add the NuGet MCP server to your VS Code by adding the the following snippet to your `.vscode/mcp.json` file:\n\n```json { \"servers\": { \"nuget\": { \"type\": \"stdio\", \"command\": \"dnx\", \"args\": [ \"NuGet.Mcp.Server\", \"--prerelease\", \"--yes\" ] } } } ```\n\nWhen configured properly, the NuGet MCP server will automatically start and should look like this:\n\n![VS Code MCP server configuration](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/vscode-mcp-configuration.png)\n\n### GitHub Coding Agent\n\nThe [GitHub Coding Agent](https://docs.github.com/copilot/concepts/coding-agent/coding-agent) can utilize the NuGet MCP server to assist with dependency management in your repositories, making it easier to maintain and update your projects’ package references. Since the NuGet MCP server requires .NET 10 SDK Preview 6 or greater, you’ll need to add the following file to your repository:\n\n`.github/workflows/copilot-setup-steps.yml`\n\n```yaml name: \"Copilot Setup Steps\"\n\non: workflow_dispatch: push: paths:\n- .github/workflows/copilot-setup-steps.yml\npull_request: paths:\n- .github/workflows/copilot-setup-steps.yml\n\njobs:\n# The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.\ncopilot-setup-steps: runs-on: ubuntu-latest\n\npermissions: contents: read\n\nsteps:\n- name: Install .NET 10.x\nuses: actions/setup-dotnet@v4 with: dotnet-version: | 10.x dotnet-quality: preview\n\n```\n\nSee [Customizing the development environment for Copilot coding agent](https://docs.github.com/copilot/how-tos/use-copilot-agents/coding-agent/customize-the-agent-environment) for more information.\n\nTo configure the NuGet MCP server, visit `Settings -> Copilot -> Coding agent` in your repository and add this to your “MCP Configuration”\n\n```json { \"mcpServers\": { \"nuget\": { \"command\": \"dnx\", \"args\": [ \"NuGet.Mcp.Server\", \"--prerelease\", \"--yes\" ], \"tools\": [\"*\"], \"type\": \"local\" } } } ```\n\nThe configuration page should look like this:\n\n![GitHub Copilot coding agent configuration](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/github-mcp-configuration.png)\n\n## Preview Status and Feedback\n\nNote: This is a preview release of the NuGet MCP server. We’re actively building new features and improvements, and we’d love your feedback on how to make it more valuable to you. Your input will ensure the tool evolves to better meet the needs of the .NET development community.\n\nPlease file an issue on [NuGet/Home](https://github.com/NuGet/Home/issues/new?template=MCPSERVER.yml) with your thoughts, suggestions, or any issues you encounter.",
  "Author": "Jeff Kluge",
  "Tags": [
    ".NET",
    "copilot",
    "MCP",
    "NuGet"
  ],
  "Description": "We've released a preview of the NuGet MCP Server, which extends Copilot by providing realtime information about packages and adds advanced functionality around updating packages.\n\nThe post [Announcing the NuGet MCP Server Preview](https://devblogs.microsoft.com/dotnet/nuget-mcp-server-preview/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet)."
}
