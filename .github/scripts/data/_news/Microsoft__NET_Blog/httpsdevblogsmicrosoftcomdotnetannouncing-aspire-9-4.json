{
  "PubDate": "2025-07-29T18:05:00+00:00",
  "EnhancedContent": "Today, we released .NET Aspire 9.4, our biggest release *ever*, bringing new integrations, interactive dashboard-based inputs, and a standalone, native AOT command line tool for creating and running Aspirified apps. We also published our [first roadmap](https://github.com/dotnet/aspire/discussions/10644) last week, which outlines a bunch of exciting features we want to tackle in the next 6 months. There are too many things in this release for me to cover in one blog, so I picked some of my favorites to share ‚Äì you can see the rest in our [What‚Äôs New docs](https://learn.microsoft.com/dotnet/aspire/whats-new/dotnet-aspire-9.4).\n\n## ‚ö°Just clone and ‚Äúaspire run‚Äù with the new Aspire CLI\n\nWith Aspire 9.4, the Aspire CLI is **officially GA** and here to make your dev loop even more seamless. The CLI gives you a fast, scriptable, and consistent way to scaffold, run, and configure your apps.\n\nThis release brings the first four core commands:\n\n- `aspire new`\n‚Äì Choose from our set of templates to kickstart your app\n- `aspire add`\n‚Äì Add Aspire hosting integrations from anywhere in your repo\n- `aspire run`\n‚Äì Run your full app stack from any terminal or editor (or subdirectory!)\n- `aspire config`\n‚Äì View, set, and change CLI settings and feature flags ‚Äì local to your repo or global to your machine\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/07/AspireCLI-BlogDemo.webm](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/07/AspireCLI-BlogDemo.webm)\n\nWe‚Äôre also including an updated version of `aspire publish` , which is still in preview, and two commands in beta ‚Äì `exec` (for executing CLI tools like database migrations) and `deploy` (for deploying your full stack to dev, test, or even prod environments). The two beta commands can be turned on via `aspire config set` ‚Äì see the CLI Reference docs for more details.\n\nThe CLI is native AOT (ahead-of-time) compiled, making it super fast across different architectures. You can download the GA CLI from our install script:\n\nBash:\n\n``` curl -sSL https://aspire.dev/install.sh | bash ```\n\nPowershell:\n\n``` iex \"& { $(irm https://aspire.dev/install.ps1) }\" ```\n\n**Note**\n\nYou can continue using the Aspire CLI as a dotnet tool, but it will not be the AOT version. If you‚Äôre currently using the dotnet tool and would like to update to the AOT version, first uninstall it with `dotnet tool uninstall -g aspire.cli` .\n\nLearn more about the Aspire CLI in our [docs](https://learn.microsoft.com/dotnet/aspire/cli/overview).\n\n## üñ±Ô∏è Custom dashboard interactivity\n\nWith Aspire, you can tailor the dashboard to your specific application with [custom resource commands](https://learn.microsoft.com/dotnet/aspire/fundamentals/custom-resource-commands) and [named URLs](https://learn.microsoft.com/dotnet/aspire/fundamentals/custom-resource-urls), and the ability to hook into resource [lifecycle events](https://learn.microsoft.com/dotnet/aspire/app-host/eventing). Aspire 9.4 brings a user-friendly overhaul to our eventing APIs and a major new extensibility point for you to leverage ‚Äì the interaction service.\n\nWith the interaction service, you can create custom UX to get user input during development while the app is running, present notifications, or ask for confirmation before running a command. The interaction service supports 5 different input types:\n\n- Text (Standard text input ‚Äì great for passing args, creating mock data, etc)\n- SecretText (Masked text input ‚Äì great for API keys, tokens, etc)\n- Number (Numeric input ‚Äì great for seeding DB items, running load tests)\n- Choice (Dropdown from a set list ‚Äì useful for structured inputs)\n- Boolean (Checkbox ‚Äì great for toggling on things like mock data at runtime)\n\n![a screenshot of the aspire dashboard with a new modal &quot;input request&quot; asking for a name, password, dinner type, and number](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/07/dashboard-interaction.png)\n\nThe interaction service also works in the CLI for inputs required during publish and deploy.\n\n**Preview Feature**\n\nThe interaction service is **still in preview** and the API may change as we refine it further. We‚Äôre looking forward to hearing your feedback about it on the [Aspire GitHub](https://github.com/dotnet/aspire)!\n\n### üî† Built-in prompting for parameters\n\nAspire 9.4 already leverages the new interaction service to collect any missing parameter values defined in your apphost. Instead of expecting every dev on your team to maintain their own local `appsettings.development.json` or `.env` file, Aspire will prompt for missing values in the dashboard before starting any resource that needs them. You can even customize parameter descriptions with rich markdown, so anyone who clones and runs your app has clear guidance on what values they need to provide ‚Äì and then optionally save those values to their user secrets for non-source-controlled per-project config.\n\n## ‚ú® Easy AI development with GitHub Models and Azure AI Foundry\n\nAspire streamlines distributed, complex app dev, and an increasingly popular example of this is AI development. If you‚Äôve been adding agentic workflows, chatbots, or other AI-enabled experiences to your stacks, you know how difficult it is to try different models, wire them up, deploy them (and authenticate to them!) at dev time, and figure out what‚Äôs actually happening while you debug. But, AI-enabled apps are really just distributed apps with a new type of container ‚Äì an AI model! ‚Äì which means Aspire is perfect for streamlining this dev loop.\n\nAspire 9.4 includes two new AI-focused hosting integrations ‚Äì [GitHub Models (Preview)](https://learn.microsoft.com/dotnet/aspire/github/github-models-integration) and [Azure AI Foundry (Preview)](https://learn.microsoft.com/dotnet/aspire/azureai/azureai-foundry-integration) ‚Äì which let you define AI models in your apphost then run them locally or deploy models to develop against. Both integrations work seamlessly with the [Azure AI Inference (Preview) client integration](https://learn.microsoft.com/dotnet/aspire/azureai/azureai-inference-integration), so you get detailed OpenTelemetry traces and simple bootstrapping code for your client app or service implementing it.\n\nThis is all the code it takes to define, deploy, and run a new GitHub or Azure AI Foundry model in your apphost:\n\n```csharp // AppHost.cs var ai = builder.AddAzureAIFoundry(\"ai\");\n\nvar embedding = ai.AddDeployment( name: \"text-embedding\", modelName: \"text-embedding-3-small\", modelVersion: \"1\", format: \"OpenAI\") .WithProperties(d => { d.SkuCapacity = 20; }); ```\n\n## üåê Yet another resource with ExternalService and the updated YARP integration\n\nOne of my favorite features in 9.4 seems minor, but is a huge quality of life improvement for anyone working with external or third-party APIs. You can now use `AddExternalService()` to [model any URL or endpoint as a resource](https://learn.microsoft.com/dotnet/aspire/fundamentals/orchestrate-resources#express-external-service-resources), get health status, and reference or configure it the same as any other resource in the apphost.\n\n```csharp var externalApi = builder.AddExternalService(\"resource-name\", \"https://api.example.com\");\n\nvar frontend = builder.AddNpmApp(\"frontend\", \"../MyJSCodeDirectory\") .WithReference(externalApi); ```\n\nMany external APIs require some sort of auth or specific headers, versioning, or routes. The preview [YARP integration](https://learn.microsoft.com/dotnet/aspire/proxies/yarp-integration) has been updated with fluent transform APIs so you can programmatically define your config in C# with strong types, IntelliSense, and any other Aspire resource config.\n\n## üéâ Start using 9.4 today\n\nThere are *so many* more features, integration updates, and quality-of-life improvements that shipped in Aspire 9.4 ‚Äì if I tried to cover them all, I‚Äôd be reaching [Stephen Toub-level](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/) post length! You can see a comprehensive list of changes in our [What‚Äôs New](https://learn.microsoft.com/dotnet/aspire/whats-new/dotnet-aspire-9.4) doc, and use them now by updating your AppHost.csproj SDK version and packages:\n\n```xml <!-- SDK version --> <Sdk Name=\"Aspire.AppHost.Sdk\" Version=\"9.4.0\" />\n\n<!-- NuGet package references --> <PackageReference Include=\"Aspire.Hosting.AppHost\" Version=\"9.4.0\" /> ```\n\nI‚Äôm so proud of this release and the incredible amount of work that went into it ‚Äì both from the Aspire team and our [community contributors](https://github.com/dotnet/aspire/pulls?q=is%3Apr+is%3Aclosed+label%3Acommunity-contribution+closed%3A%3E2025-05-30). We‚Äôre looking forward to hearing your feedback on 9.4 and what you want to see next ‚Äì let us know on [GitHub](https://github.com/dotnet/aspire) and our [new Discord server](https://aka.ms/aspire-discord). See you there!\n\n**AI-assisted content.** This article was partially created with the help of AI. An author reviewed and revised the content as needed. [Learn more](/principles-for-ai-generated-content/)",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Title": "Aspire 9.4 is here with a CLI and interactive dashboard features",
  "FeedLevelAuthor": ".NET Blog",
  "Link": "https://devblogs.microsoft.com/dotnet/announcing-aspire-9-4/",
  "Tags": [
    ".NET",
    ".NET Aspire",
    "aspire",
    "CLI",
    "dotnet",
    "Featured"
  ],
  "OutputDir": "_news",
  "Author": "Maddy Montaquila",
  "ProcessedDate": "2025-08-05 11:17:01",
  "Description": "Aspire 9.4 is packed with new features, integrations, and improvements\n\nThe post [Aspire 9.4 is here with a CLI and interactive dashboard features](https://devblogs.microsoft.com/dotnet/announcing-aspire-9-4/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "FeedName": "Microsoft .NET Blog"
}
