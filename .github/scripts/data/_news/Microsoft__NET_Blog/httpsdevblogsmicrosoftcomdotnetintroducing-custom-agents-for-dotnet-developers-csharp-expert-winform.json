{
  "PubDate": "2025-10-28T22:05:00+00:00",
  "Link": "https://devblogs.microsoft.com/dotnet/introducing-custom-agents-for-dotnet-developers-csharp-expert-winforms-expert/",
  "FeedLevelAuthor": ".NET Blog",
  "Description": "Introducing C# Expert and WinForms Expert: experimental custom agents that help .NET developers write better code with GitHub Copilot.\n\nThe post [Introducing Custom Agents for .NET Developers: C# Expert & WinForms Expert](https://devblogs.microsoft.com/dotnet/introducing-custom-agents-for-dotnet-developers-csharp-expert-winforms-expert/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "Tags": [
    ".NET",
    "agents",
    "AI",
    "C#",
    "copilot",
    "Developer Tools",
    "WinForms"
  ],
  "ProcessedDate": "2025-10-28 23:02:44",
  "FeedName": "Microsoft .NET Blog",
  "Author": "Wendy Breiding (SHE/HER)",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Title": "Introducing Custom Agents for .NET Developers: C# Expert & WinForms Expert",
  "OutputDir": "_news",
  "EnhancedContent": "With GitHub’s announcement of [Copilot Custom Agents](https://aka.ms/CustomAgentAnnouncement), developers now have powerful new tools to automate and accelerate their workflows. These custom agents enhance Copilot by serving as intelligent accelerators with specialized expertise, able to analyze codebases, plan tasks, and execute commands independently. To enhance the .NET developer experience with Copilot, we’re excited to introduce our first two experimental custom agents tailored specifically for .NET developers: C# Expert and WinForms Expert.\n\n## C# Expert Agent\n\nDesigned to provide guidance and best practices for C# development, this agent brings deep expertise in:\n\n- Core C# Development: Adheres to modern best practices for syntax, structure, and performance, while still honoring the preferences of the existing repository.\n- Code Integrity: Implements minimal code changes and writes efficient code utilizing async/await patterns with proper cancellation and exception handling.\n- Testing Best Practices: Supports behavior-driven unit testing practices, integration testing, and TDD workflows.\n\n## WinForms Expert Agent\n\nBuilt for developers working with Windows Forms applications, this agent specializes in:\n\n- UI Design Patterns: Implements MVVM and MVP patterns for maintainable and scalable UI code.\n- Event-Driven Programming: Handles complex event wiring and state management.\n- Tool Integrity: Protects the designer.cs file, keeping it safe from corruption, allowing you to continue using the designer after Copilot has finished.\n\n## Getting Started\n\nTo use these agents:\n\n1. Download the CSharpExpert.agent.md and WinFormsExpert.agent.md files at [@github/awesome-copilot](https://github.com/github/awesome-copilot).\n2. Add these markdown files to your repo’s .github/agents folder.\n\n## How Can I Use Custom Agents\n\n- Copilot Coding Agent: When you want to assign an issue to Copilot, you can now assign the issue to the C# Expert or the WinForms Expert for added expertise.\n\n![Screenshot of Copilot Coding Agent with Custom Agent Drop-down](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/10/CCA.png)\n\n- Copilot CLI: Coming soon, utilize /agent to assign tasks to the C# Expert or the WinForms Expert.\n\n![Screenshot of Copilot CLI with Custom Agent selection](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/10/CLI.png)\n\n- Visual Studio Code: Now in Insiders, select your Custom Agents from the Agent drop-down menu.\n\n![Screenshot of VSCode Custom Agent selection](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/10/VSCode.png)\n\n- Visual Studio: Coming in November, Visual Studio 2022 v17.14.21 will automatically add the appropriate custom agent for your code base, behind a feature flag (“Enable project specific .NET instructions such as Windows Forms development when applicable.”).\n\n## How Have We Improved the Experience So Far\n\nThese Custom agents are experimental as we listen to feedback and learn how the models respond to different types of instructions. Here are some examples of how they improve the experience in their current state.\n\nWithout the C# Expert, many developers complained that Copilot created interfaces, helpers and parameters that were never used, increasing technical debt and making it harder to read the code. With the C# Expert, you should see no unused interfaces/methods/parameters generated by Copilot.\n\nWithout the WinForms Expert, one of the biggest complaints from developers was that Copilot made changes to .Designer.cs files making the Visual Studio Designer unusable. With the WinForms Expert, we’ve put in guardrails that protect your .Designer.cs files so that when Copilot finishes with the task, you can still use the Visual Studio Designer.\n\n## Learn More and Try It Out Today\n\nThese are just the beginning. You can find these and more sample agents at [@github/awesome-copilot](https://github.com/github/awesome-copilot). Try them out and provide [feedback](https://github.com/github/awesome-copilot/issues/new/choose) as we continue to build on these agents to provide .NET developers with the best Copilot experience.\n\nLearn more by reading [our docs on custom agents](https://gh.io/customagents) and join the discussion within [GitHub Community](https://github.com/orgs/community/discussions/177930)."
}
