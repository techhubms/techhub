{
  "Description": "See how GitHub Copilot Coding Agent automates unit tests and ships features from a PRD in a real .NET sample, so you can focus on design and review.\n\nThe post [Let Copilot Coding Agent handle the busy work](https://devblogs.microsoft.com/dotnet/copilot-coding-agent-dotnet/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "Tags": [
    ".NET",
    "AI",
    "C#",
    "GitHub Copilot"
  ],
  "Title": "Let Copilot Coding Agent handle the busy work",
  "Link": "https://devblogs.microsoft.com/dotnet/copilot-coding-agent-dotnet/",
  "ProcessedDate": "2025-09-03 17:09:41",
  "PubDate": "2025-09-03T17:05:00+00:00",
  "FeedLevelAuthor": ".NET Blog",
  "OutputDir": "_news",
  "Author": "Bruno Capuano",
  "FeedName": "Microsoft .NET Blog",
  "EnhancedContent": "The GitHub Copilot Coding Agent changes how .NET developers get work done. Beyond inline suggestions, it can analyze your repo, plan multi‚Äëstep tasks, create issues and pull requests, and carry changes across projects‚Äîall in the cloud. In this post, we‚Äôll show two concrete scenarios using the eShopLite sample: automatically creating missing unit tests and implementing a new feature starting from a PRD.\n\n## Accelerating .NET Development with GitHub Copilot Coding Agent\n\nThe .NET ecosystem continues to evolve, and AI-powered tools are starting to play a key role in how developers build, test, and maintain their applications. One of the most exciting opportunities for .NET developers is the GitHub Copilot Coding Agent.\n\nUnlike the classic Copilot inline completions, the Coding Agent will work on the cloud, and it can take on **multi-step tasks**, coordinate with GitHub repositories, and even create issues and pull requests on your behalf. This transforms Copilot from being a ‚Äúpair programmer‚Äù into an **automation agent** that can accelerate repetitive tasks and free you to focus on architecture and innovation.\n\nIn this post, we‚Äôll walk through two real-world scenarios using the [eShopLite](https://aka.ms/eShopLite/repo) sample solution:\n\n1. Automating unit test creation.\n2. Implementing a new feature with a Product Requirements Document (PRD).\n\n### Scenario 1: Automating Unit Tests with Copilot\n\nAs developers, we know unit tests are critical to maintainable software. But let‚Äôs be honest: writing unit tests is not always the most exciting part of the job (I know, that‚Äôs maybe just me). That‚Äôs where GitHub Copilot Coding Agent can help.\n\n#### Step 1 ‚Äì Identify Missing Unit Tests\n\nWe start by asking Copilot to analyze the solution and identify gaps in the test coverage.\n\n**Prompt used:**\n\n```plaintext Analyze the current solution and propose unit tests to add in the scenario [scenarios\\01-SemanticSearch]. Make a list of tests where each element has title, description, rationale, affectedFiles (paths), testMethodName, testCases (objects with name, arrange, act, assert, optional expected), dependencies (to mock), priority (High|Medium|Low), and complexity (Small|Medium|Large). Keep suggestions actionable and use repo-relative file paths. ```\n\n![Identify Missing Unit Tests](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/10-identifymissingunittests.png)\n\n#### Step 2 ‚Äì Review Suggested Tests\n\nCopilot provides a structured proposal with clear rationales and expected outcomes. This helps developers quickly validate whether the suggested tests align with project requirements.\n\n![Suggested Unit Tests](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/12-unittest-done.png)\n\n#### Step 3 ‚Äì Create GitHub Issue\n\nOnce we are satisfied with the list, we instruct Copilot to create a GitHub Issue that contains all the details of the missing unit tests.\n\n**Prompt used:**\n\n```plaintext Given the current list of missing unit tests, create a new GitHub issue titled \"Implement missing Unit Tests\". The new GitHub issue content should describe each missing test to be implemented later. Show the ID and URL of the new created Issue in the current repository. ```\n\n![Generated GitHub Issue](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/15-generate-ghissue.png)\n\nüëâ Example issue: [#47 Implement missing Unit Tests](https://github.com/Azure-Samples/eShopLite/issues/47)\n\n**Note**\n\nIn order to create the issue, we use the GitHub MCP Server tools with Copilot.\n\n#### Step 4 ‚Äì Assign to Copilot Coding Agent\n\nThe last step is to assign the issue to the Copilot Coding Agent. From here, Copilot automatically generates the tests, opens a pull request, and awaits human review.\n\n**Prompt used:**\n\n```plaintext assign the new issue to @copilot ```\n\nüëâ Example PR: [#48 Add Unit Tests](https://github.com/Azure-Samples/eShopLite/pull/48)\n\nThis workflow reduces the manual burden of writing boilerplate tests and helps ensure consistent test quality across the solution.\n\n### Scenario 2: Implementing a Feature with a Mock Payment Server\n\nThe second scenario demonstrates how Copilot Coding Agent can go beyond testing and actually implement new functionality. Instead of jumping directly into code, we start with a **Product Requirements Document (PRD)**.\n\n#### Step 1 ‚Äì Generate PRD\n\nWe ask Copilot to draft a PRD that captures the intent and requirements of adding a mock payment service.\n\n**Prompt used:**\n\n```plaintext Create a new Markdown file named `04-PRD_Add_Payment_Mock_Server.md` containing a Product Requirements Document (PRD) titled \"PRD: Add Mock Payment Server / Payment Service to eShopLite\". Keep the document business-focused and concise. Include sections: Purpose, Scope, Key success criteria, Quick checklist, Assumptions, High-level design overview, API contract summary, Data model summary, Implementation notes, Configuration & local defaults, Security & privacy notes, Testing & validation, Acceptance criteria, Rollout plan, and Appendix with example request/response JSON. ```\n\nThe generated PRD is not just filler text; it provides actionable details like endpoints, environment variables, and acceptance criteria. This ensures that both developers and stakeholders are aligned before any code is written.\n\n#### Step 2 ‚Äì Implement PRD\n\nOnce the PRD is approved, we pass it to Copilot Coding Agent to implement the desired features.\n\n![PRD Creation](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/20-implementPRD.png)\n\nCopilot creates the code changes, updates configurations, and even generates UI elements where needed. It will also use MCP tools, like Playwright, to capture screenshots and validate the end-to-end experience.\n\n![Payment Service PR with Screenshots](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/09/25-paymentPRIncludeScreenShots.png)\n\nüëâ Example PR: [#49 Implement Mock Payment Server](https://github.com/Azure-Samples/eShopLite/pull/49)\n\nThis shows the real potential: using AI to bridge **documentation, planning, and execution**. Copilot doesn‚Äôt just help you type faster‚Äîit helps you ship features faster.\n\n## Summary\n\nGitHub Copilot Coding Agent represents a shift in how .NET developers can approach productivity.\n\n- For **testing**, it identifies missing coverage, creates issues, and generates PRs.\n- For **features**, it translates requirements into working code via PRDs.\n- For **collaboration**, it integrates seamlessly with GitHub workflows and pull requests.\n- And more!\n\nInstead of replacing developers, it augments their workflow, automating repetitive steps and letting humans focus on creativity, design, and review.\n\nIf you‚Äôre working with .NET and haven‚Äôt tried Copilot Coding Agent yet, now is the perfect time to experiment. And remember, you can customize how the Coding Agent works in your repo with AGENTS.md custom instructions‚Äîsee the [Copilot Coding Agent changelog announcement](https://github.blog/changelog/2025-08-28-copilot-coding-agent-now-supports-agents-md-custom-instructions/).\n\n**Caution**\n\nWhile Copilot can successfully implement missing unit tests and even generate new features, it is critical to carefully review the generated code before merging. Human oversight ensures code quality, security, and alignment with project standards.\n\n## References\n\n- eShopLite sample repository: [eShopLite on GitHub](https://aka.ms/eShopLite/repo)\n- 10 Microsoft MCP Servers to Accelerate Your Development Workflow: [Read the blog post](https://devblogs.microsoft.com/blog/10-microsoft-mcp-servers-to-accelerate-your-development-workflow)\n- Copilot Coding Agent AGENTS.md custom instructions: [GitHub Changelog](https://github.blog/changelog/2025-08-28-copilot-coding-agent-now-supports-agents-md-custom-instructions)",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/"
}
