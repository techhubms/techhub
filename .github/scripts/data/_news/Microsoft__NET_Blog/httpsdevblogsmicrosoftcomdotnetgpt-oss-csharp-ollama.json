{
  "FeedName": "Microsoft .NET Blog",
  "Author": "Bruno Capuano",
  "Tags": [
    ".NET",
    "AI",
    "C#",
    "gpt",
    "gpt-oss",
    "ollama"
  ],
  "EnhancedContent": "GPT-OSS is OpenAI‚Äôs first open-weight model since GPT-2, and it‚Äôs a game-changer for developers who want powerful AI without the cloud dependency. You get two flavors ‚Äì gpt-oss-120b and gpt-oss-20b ‚Äì both delivering solid performance on coding, math, and tool use while keeping your data completely private. The 20B model is especially interesting because it runs on just 16GB of memory, making it perfect for local development and experimentation. Check out the [official OpenAI announcement](https://openai.com/index/introducing-gpt-oss/) to see how these models are putting serious AI power directly in developers‚Äô hands.\n\nRunning GPT-OSS locally opens up new possibilities for experimentation, cost efficiency, and privacy. In this guide, you‚Äôll learn how to use the open-source GPT-OSS model with Ollama to build fast, private, and offline-capable AI features using C#.\n\n## What you‚Äôll need\n\n- A machine with at least 16 GB of RAM and a capable GPU (or an Apple Silicon Mac).\n- The .NET 8 SDK or higher installed.\n- Ollama installed and running.\n- The GPT-OSS:20b model pulled with `ollama pull gpt-oss:20b`\n.\n\n## C# toolbox\n\nMicrosoft has made it easy to work with AI models using the `Microsoft.Extensions.AI` libraries. These libraries provide a unified set of abstractions, letting you write code that can work with different AI providers‚Äîlike Ollama, Azure AI, or OpenAI‚Äîwithout changing your core logic.\n\n## Step 1: Create a new console app\n\nFirst, create a new console application. Open your terminal and run:\n\n```bash dotnet new console -n OllamaGPTOSS cd OllamaGPTOSS ```\n\n## Step 2: Add the NuGet packages\n\nTo connect to Ollama using `Microsoft.Extensions.AI` , you‚Äôll need two main packages. The `Microsoft.Extensions.AI` package provides the core abstractions, while the `OllamaSharp` package acts as the provider that implements these abstractions for Ollama.\n\n```bash dotnet add package Microsoft.Extensions.AI dotnet add package OllamaSharp ```\n\n**Note:** The `Microsoft.Extensions.AI.Ollama` package is deprecated. Use `OllamaSharp` as the recommended alternative for connecting to Ollama.\n\n## Step 3: Write your chat code\n\nOpen `Program.cs` and replace its contents with the following code. This example keeps a rolling chat history and streams responses in real time.\n\n```csharp using Microsoft.Extensions.AI; using OllamaSharp;\n\n// Initialize OllamaApiClient targeting the \"gpt-oss:20b\" model IChatClient chatClient = new OllamaApiClient(new Uri(\"http://localhost:11434/\"), \"gpt-oss:20b\");\n\n// Maintain conversation history List<ChatMessage> chatHistory = new();\n\nConsole.WriteLine(\"GPT-OSS Chat - Type 'exit' to quit\"); Console.WriteLine();\n\n// Prompt user for input in a loop while (true) { Console.Write(\"You: \"); var userInput = Console.ReadLine();\n\nif (userInput?.ToLower() == \"exit\") break;\n\nif (string.IsNullOrWhiteSpace(userInput)) continue;\n\n// Add user message to chat history chatHistory.Add(new ChatMessage(ChatRole.User, userInput));\n\n// Stream the AI response and display in real time Console.Write(\"Assistant: \"); var assistantResponse = \"\";\n\nawait foreach (var update in chatClient.GetStreamingResponseAsync(chatHistory)) { Console.Write(update.Text); assistantResponse += update.Text; }\n\n// Append assistant message to chat history chatHistory.Add(new ChatMessage(ChatRole.Assistant, assistantResponse)); Console.WriteLine(); Console.WriteLine(); } ```\n\n## Step 4: Run your application\n\nMake sure your Ollama service is running. Then run your .NET console app:\n\n```bash dotnet run ```\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/gpt-oss-ollama-demo.webm](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/gpt-oss-ollama-demo.webm)\n\nYour application will connect to the local Ollama server, and you can start chatting with your own private GPT-OSS model.\n\n## Build agentic apps next\n\nThis is just the beginning. The `Microsoft.Extensions.AI` libraries also support function calling, allowing you to give your local LLM access to your C# methods, APIs, and data. This is where you can build truly powerful, ‚Äúagentic‚Äù applications.\n\n### Your mission (should you choose to accept it) üïµÔ∏è\n\n1. Get this sample running and see how easy local LLM development is.\n2. Explore the documentation for `Microsoft.Extensions.AI`\nand `OllamaSharp` .\n3. Integrate this into a project: document summarizer, code generator, or intelligent assistant that runs on your machine.\n\nThe future of AI is decentralized, and as a C# developer, you have the tools to lead the charge. The power is on your machine‚Äînow go build something incredible!\n\n## Up next ‚Äî Foundry Local\n\nIn follow-up posts we‚Äôll show how to run the same GPT-OSS model using Foundry Local instead of Ollama. Foundry Local offers Windows-native GPU acceleration and a slightly different runtime, and we‚Äôll provide Foundry-specific configuration, tips for GPU setup, and an example C# wiring that mirrors this guide‚Äôs chat + streaming pattern.\n\nRead the announcement for [Foundry Local support on the Windows Developer Blog](https://blogs.windows.com/windowsdeveloper/2025/08/05/available-today-gpt-oss-20b-model-on-windows-with-gpu-acceleration-further-pushing-the-boundaries-on-the-edge/).\n\n## Summary\n\nYou learned how to: (1) set up a .NET console app, (2) add `Microsoft.Extensions.AI` plus `OllamaSharp` , (3) stream chat completions from a local GPT-OSS model, and (4) prepare for advanced scenarios like function calling. Try extending this sample with tool invocation or local RAG over your documents to unlock richer agent patterns‚Äîall while keeping data local.",
  "OutputDir": "_news",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Title": "GPT-OSS ‚Äì A C# Guide with Ollama",
  "Link": "https://devblogs.microsoft.com/dotnet/gpt-oss-csharp-ollama/",
  "PubDate": "2025-08-19T17:05:00+00:00",
  "FeedLevelAuthor": ".NET Blog",
  "Description": "Run GPT-OSS locally with C# and Ollama to build fast, private, offline AI\n\nThe post [GPT-OSS ‚Äì A C# Guide with Ollama](https://devblogs.microsoft.com/dotnet/gpt-oss-csharp-ollama/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "ProcessedDate": "2025-08-19 17:10:46"
}
