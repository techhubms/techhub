{
  "Tags": [
    ".NET",
    "C#",
    "F#",
    "testing",
    "Visual Basic"
  ],
  "ProcessedDate": "2025-08-21 19:12:45",
  "Link": "https://devblogs.microsoft.com/dotnet/dotnet-test-with-mtp/",
  "OutputDir": "_news",
  "FeedUrl": "https://devblogs.microsoft.com/dotnet/feed/",
  "Description": "Learn how .NET 10 transforms dotnet test with native Microsoft.Testing.Platform integration, delivering better performance and enhanced diagnostics.\n\nThe post [Enhance your CLI testing workflow with the new dotnet test](https://devblogs.microsoft.com/dotnet/dotnet-test-with-mtp/) appeared first on [.NET Blog](https://devblogs.microsoft.com/dotnet).",
  "Author": "Mariam Abdullah",
  "FeedName": "Microsoft .NET Blog",
  "PubDate": "2025-08-21T17:05:00+00:00",
  "FeedLevelAuthor": ".NET Blog",
  "Title": "Enhance your CLI testing workflow with the new dotnet test",
  "EnhancedContent": "The [`dotnet test`](https://learn.microsoft.com/dotnet/core/tools/dotnet-test) command is part of the .NET CLI and is used to run tests in a given solution. It supports multiple test frameworks, including MSTest, xUnit, NUnit and TUnit. The command recognizes two main test platforms: VSTest and Microsoft.Testing.Platform (MTP). Any test framework built on top of either VSTest or MTP is automatically supported. The command builds the solution and executes the tests, providing detailed results and diagnostics.\n\nIn this blog post, we‚Äôll explore the significant improvements to `dotnet test` in .NET 10 through Microsoft.Testing.Platform integration. We will cover:\n\n- **Platform comparison**: Understanding the differences between VSTest and Microsoft.Testing.Platform (MTP)\n- **Evolution timeline**: How `dotnet test`\nintegration has progressed from .NET 9 to .NET 10\n- **Key benefits**: Performance improvements, enhanced diagnostics, and new capabilities enabled by MTP\n- **Enhanced options**: New and improved command-line options for flexible test execution\n- **Practical examples**: Real-world usage scenarios and configuration patterns\n\nWhether you‚Äôre looking to improve your testing workflow‚Äôs performance or access advanced features, this guide will help you leverage the full potential of the new `dotnet test` experience.\n\n## VSTest vs. Microsoft.Testing.Platform (MTP)\n\nMicrosoft.Testing.Platform (MTP) is a lightweight and portable alternative to VSTest for running tests in all contexts, including continuous integration (CI) pipelines, CLI, Visual Studio Test Explorer, and VS Code Text Explorer. The Microsoft.Testing.Platform is embedded directly in your test projects, and there‚Äôs no other app dependencies.\n\nFor the latest updates on Microsoft.Testing.Platform adoption, see our recent [post](https://devblogs.microsoft.com/dotnet/mtp-adoption-frameworks/).\n\nTo learn more about MTP vs VSTest, see [Microsoft.Testing.Platform and VSTest comparison](https://learn.microsoft.com/dotnet/core/testing/microsoft-testing-platform-vs-vstest).\n\n## Evolution of dotnet test with MTP\n\nThe integration of Microsoft.Testing.Platform with `dotnet test` has undergone significant improvements from .NET 9 to .NET 10. Understanding this evolution helps explain why the current approach delivers better performance and enhanced developer experience.\n\n### .NET 9 (Previous Approach)\n\nIn .NET 9, Microsoft.Testing.Platform could be used with `dotnet test` through VSTest mode. This required:\n\n1. Using the `--`\nseparator to pass arguments\n2. Enabling the `TestingPlatformDotnetTestSupport`\nMSBuild property\n\n```bash dotnet test -- --coverage --report-trx ```\n\nWhile functional, this approach had several limitations that prompted improvements in .NET 10. For detailed information, see [Use Microsoft.Testing.Platform in the VSTest mode of dotnet test](https://learn.microsoft.com/dotnet/core/testing/microsoft-testing-platform-integration-dotnet-test).\n\n### .NET 10 (Current Approach)\n\n.NET 10 introduces native integration with Microsoft.Testing.Platform. To enable it, create a `dotnet.config` file at your solution or repository root.\n\n**Configuration Scope**\n\nThe **dotnet.config** file must be placed at the solution or repository level. Global configuration at the user or machine level is currently not supported.\n\n```text [dotnet.test.runner] name = \"Microsoft.Testing.Platform\" ```\n\nThis configuration eliminates the need for complex command-line arguments and provides seamless integration with the .NET SDK.\n\n**Migration Path**\n\nThe new approach simplifies test execution while providing better performance and diagnostics compared to the VSTest integration method.\n\n## `dotnet test`\nwith MTP\n\nHere‚Äôs a breakdown of the key benefits of using the Microsoft.Testing.Platform (MTP) with `dotnet test` over the VSTest integration:\n\nüåê Unified Test Execution\n\nMTP is designed to be the future of test execution in .NET. It integrates more tightly with the .NET SDK and dotnet test, offering a more consistent experience.\n\nüìä Better Performance\n\nMTP is optimized for performance, especially in large test suites. It reduces start times and improves test discovery and execution speed.\n\n‚úÖ Improved Diagnostics and Logging\n\nMTP provides richer diagnostics, including better structured logs. This makes it easier to troubleshoot flaky tests or performance issues.\n\n‚ñ∂Ô∏è Parallel Test Execution\n\nExecution of assemblies from different TFMs is supported with MTP, which is crucial for scaling test runs in CI pipelines.\n\nüì¶ Dynamic Arguments\n\nThe test-related arguments are no longer fixed, as they are tied to the registered extensions in the test project(s).\n\n‚öñÔ∏è Globbing Filter\n\nIt allows for flexible and efficient test selection by using patterns to include or exclude specific test assemblies, simplifying configuration and improving usability.\n\n‚úÖ Improved UI/UX\n\nThe output is nicely formatted with the usage of ANSI terminal.\n\nTo learn more about MTP and its foundational principles, see [Microsoft.Testing.Platform](https://aka.ms/mtp-overview).\n\n### See It in Action\n\nWatch this demonstration of the enhanced `dotnet test` experience with Microsoft.Testing.Platform (MTP), showcasing how MTP‚Äôs native integration delivers performance gains, improved output formatting, and new command-line options in action:\n\n## Mixed Project Compatibility\n\n**All-or-Nothing Requirement**\n\nIn a solution with MTP enabled via **dotnet.config**, every test project must use Microsoft.Testing.Platform. Having any VSTest projects will prevent those projects from being able to run.\n\nThis means you need to migrate all test projects in your solution to MTP before enabling the `dotnet.config` setting. You cannot run a mixed environment where some projects use VSTest and others use MTP.\n\n## Project Properties Cleanup\n\nWith native MTP integration in .NET 10, several MSBuild properties from the previous approach are no longer needed and can be safely removed from your test projects:\n\n- **`TestingPlatformDotnetTestSupport`**: No longer required for MTP integration\n- **`TestingPlatformShowTestsFailure`**: Obsolete, as test failures are now displayed by default in the new experience\n\n**Clean Up Tip**\n\nRemove these properties during migration to simplify your project files and avoid confusion with old configuration options.\n\n## Options\n\nWith Microsoft.Testing.Platform integration, `dotnet test` provides enhanced flexibility in how you target and execute tests. The following sections cover the various options available to customize your testing workflow, from basic execution to advanced filtering and configuration.\n\n### The Default Option\n\nTo run the tests in the project or solution in the current directory\n\n```bash dotnet test ```\n\n### Project/Solution Options\n\n**Breaking Change**\n\nThe traditional syntax **dotnet test &lt;path&gt;** (e.g., **dotnet test MyProject.csproj**, **dotnet test MySolution.sln**, or **dotnet test MyFolder**) is no longer supported. You must now use explicit options to specify your target.\n\nWith MTP integration, you must use specific options to target projects, solutions, or directories. This change provides more deterministic behavior and clearer command semantics.\n\nTo specify the path of the project file to run (folder name or full path). If not specified, it defaults to the current directory.\n\n```bash dotnet test --project ./TestProject/TestProject.csproj ```\n\nTo specify the path of the solution file to run (folder name or full path). If not specified, it defaults to the current directory.\n\n```bash dotnet test --solution ./TestProjects/TestProjects.sln ```\n\n### Globbing Filter Option\n\nThe `--test-modules` option provides powerful globbing pattern support for targeting specific test assemblies. This is particularly useful when you need to run tests from pre-built assemblies or when working with complex solution structures where you want precise control over which test modules execute.\n\nTo run tests for specific assemblies\n\n```bash dotnet test --test-modules \"**/bin/**/Debug/net10.0/TestProject.dll\" ```\n\nTo run tests for assemblies with a specific root directory\n\n```bash dotnet test --test-modules \"**/bin/**/Debug/net10.0/TestProject.dll\" --root-directory \"c:\\code\" ```\n\nThis approach is ideal for scenarios where you have already compiled test assemblies and want to execute them directly without going through the build process, providing the same flexibility locally that was previously only available through Azure DevOps task.\n\n**Mutually Exclusive Options**\n\nThese target selection options are mutually exclusive ‚Äì use only one at a time:**‚Äìproject**, **‚Äìsolution**, or **‚Äìtest-modules**.\n\nWhen using **‚Äìtest-modules**, build options (like **‚Äìconfiguration** or **‚Äìframework**) are not available since they don‚Äôt apply to pre-built assemblies.\n\n### Max Parallel Test Modules Option\n\nIt specifies the maximum number of test modules that can run in parallel.\n\n```bash dotnet test --max-parallel-test-modules 4 ```\n\n### Output Options\n\nWe use the ANSI terminal, so when running `dotnet test` , the progress will be displayed as follows\n\n```bash dotnet test ```\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test.mp4](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test.mp4)\n\nTo disable outputting ANSI escape characters to screen.\n\n```bash dotnet test --no-ansi ```\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test-no-ansi.mp4](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test-no-ansi.mp4)\n\nTo disable reporting progress to screen.\n\n```bash dotnet test --no-progress ```\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test-no-progress.mp4](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test-no-progress.mp4)\n\nTo specify the output verbosity when reporting tests. Valid values are `Normal` and `Detailed` . The default is `Normal` .\n\n```bash dotnet test --output Detailed ```\n\n[https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test-output-detailed.mp4](https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2025/08/dotnet-test-output-detailed.mp4)\n\n### Test Application Arguments\n\nThose extra arguments are passed to the test application(s). Use a space to separate multiple arguments. For more information and examples on what to pass, see [Microsoft.Testing.Platform](https://learn.microsoft.com/dotnet/core/testing/microsoft-testing-platform-intro) overview and [Microsoft.Testing.Platform](https://learn.microsoft.com/dotnet/core/testing/microsoft-testing-platform-extensions) extensions.\n\n### Build and Configuration Options\n\nThe following traditional `dotnet test` options remain available with the new version:\n\n```bash dotnet test [-a|--arch <ARCHITECTURE>] [-c|--configuration <CONFIGURATION>] [-f|--framework <FRAMEWORK>] [--os <OS>] [-r|--runtime <RUNTIME_IDENTIFIER>] [-v|--verbosity <LEVEL>] [--no-build] [--no-restore] ```\n\nThese options provide the same build and runtime control as before:\n\n- **Architecture**: Specify target architecture (`-a|--arch`\n)\n- **Configuration**: Set build configuration like Debug or Release (`-c|--configuration`\n)\n- **Framework**: Target specific framework version (`-f|--framework`\n)\n- **Operating System**: Target specific OS (`--os`\n)\n- **Runtime**: Specify runtime identifier (`-r|--runtime`\n)\n- **Verbosity**: Control output detail level (`-v|--verbosity`\n)\n- **Build Control**: Skip build (`--no-build`\n) or restore (`--no-restore` ) steps\n\n### MSBuild Properties\n\nMSBuild property support continues to work as before with MTP integration. You can pass one or more MSBuild properties using both short and long forms\n\n```bash\n# Using short form\ndotnet test -p:DefineConstants=\"DEV\"\n\n# Using long form\ndotnet test --property:Configuration=Release\n\n# Multiple properties\ndotnet test -p:DefineConstants=\"DEV\" -p:Configuration=Release ```\n\nThe same applies for /property:property=value and its short form is /p.\n\n## Wrapping up\n\nThe evolution of `dotnet test` with Microsoft.Testing.Platform represents a significant step forward in .NET testing capabilities. By moving from VSTest integration approach in .NET 9 to the MTP integration in .NET 10, developers now enjoy:\n\n- **Simplified configuration** through `dotnet.config`\nfile\n- **Enhanced performance**: more efficient communication between test applications and .NET CLI\n- **Rich diagnostics** with structured logging and ANSI-formatted output\n- **Flexible test selection** using advanced globbing patterns\n- **Future-ready architecture** designed for long-term .NET evolution\n\n**Get Started Today**\n\nReady to upgrade? Start by converting a single test project to MTP, then gradually migrate your entire solution. The improved performance and diagnostics will immediately enhance your development workflow.\n\n## Community Feedback\n\nFor a detailed documentation on the new `dotnet test` , see [`dotnet test`](https://learn.microsoft.com/dotnet/core/tools/dotnet-test?tabs=dotnet-test-with-mtp).\n\nWe encourage you to try out these new capabilities and share your experience with the community. Your feedback helps us continue improving the .NET testing ecosystem. Please share your thoughts, report issues, or start discussions on the [.NET SDK repository](https://github.com/dotnet/sdk)."
}
