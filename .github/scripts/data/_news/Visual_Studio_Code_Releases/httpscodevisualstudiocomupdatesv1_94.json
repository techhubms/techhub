{
  "Link": "https://code.visualstudio.com/updates/v1_94",
  "ProcessedDate": "2025-08-24 16:20:38",
  "PubDate": "2024-10-03T17:00:00+00:00",
  "FeedLevelAuthor": "Visual Studio Code - Code Editing. Redefined.",
  "Title": "September 2024 (version 1.94)",
  "FeedUrl": "https://code.visualstudio.com/feed.xml",
  "EnhancedContent": "Try [MCP servers](/mcp) to extend agent mode in VS Code!\n\nDismiss this update\n\n[Edit](https://vscode.dev/github/microsoft/vscode-docs/blob/main/release-notes/v1_94.md)\n\n# September 2024 (version 1.94)\n\n**Update 1.94.1**: The update addresses this security [issue](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22September+2024+Recovery+1%22+).\n\n**Update 1.94.2**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2024+Recovery+2%22+is%3Aclosed).\n\nDownloads: Windows: [x64](https://update.code.visualstudio.com/1.94.2/win32-x64-user/stable) [Arm64](https://update.code.visualstudio.com/1.94.2/win32-arm64-user/stable) | Mac: [Universal](https://update.code.visualstudio.com/1.94.2/darwin-universal/stable) [Intel](https://update.code.visualstudio.com/1.94.2/darwin/stable) [silicon](https://update.code.visualstudio.com/1.94.2/darwin-arm64/stable) | Linux: [deb](https://update.code.visualstudio.com/1.94.2/linux-deb-x64/stable) [rpm](https://update.code.visualstudio.com/1.94.2/linux-rpm-x64/stable) [tarball](https://update.code.visualstudio.com/1.94.2/linux-x64/stable) [Arm](https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions) [snap](https://update.code.visualstudio.com/1.94.2/linux-snap-x64/stable)\n\nWelcome to the September 2024 release of Visual Studio Code. There are many updates in this version that we hope you'll like, some of the key highlights include:\n\n- Find in Explorer - Quickly find files in the Explorer view with the improved Find control.\n- Source Control Graph - More filtering options and interactivity in the Source Control Graph.\n- Python test coverage - Run Python tests with coverage and get rich results in the editor.\n- ESM - Faster VS Code startup thanks to the migration to ESM.\n- Account preference - Specify which account to use for an extension.\n- Copilot in Native REPL - Get code completions and Inline Chat in the Native REPL.\n- Improved chat context - Drag & drop files or use IntelliSense for more relevant chat context.\n- Test environment setup - Get help with setting up a test framework for your workspace.\n\n>\n> If you'd like to read these release notes online, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> **Insiders:** Want to try new features as soon as possible? You can download the nightly [Insiders](https://code.visualstudio.com/insiders) build and try the latest updates as soon as they are available.\n> >\n\n## GitHub Copilot\n\n### Switch language models in chat\n\nPreviously, we announced that you can [sign up for early access to OpenAI o1 models](https://github.com/o1-waitlist-signup). Once you have access, you will have a Copilot Chat model picker control in Copilot Chat in VS Code to choose which model version to use for your chat conversations.\n\n![Copilot model picker control in the Chat view enables switching to another language model.](/assets/updates/1_94/copilot-model-picker.png)\n\n### GPT-4o in Inline Chat\n\nWe've upgraded Copilot Inline Chat to GPT-4o, to give you faster, more accurate, and higher-quality code and explanations when you use Chat in the editor.\n\n### Public code matching in chat\n\nYou can allow GitHub Copilot to return code that could match publicly available code on GitHub.com. When this functionality is enabled for your [organization subscription](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching) or [personal subscription](https://docs.github.com/en/copilot/managing-copilot/managing-copilot-as-an-individual-subscriber/managing-copilot-policies-as-an-individual-subscriber#enabling-or-disabling-suggestions-matching-public-code), Copilot code completions already provided you with details about the matches that were detected. We now show you these matches for public code in Copilot Chat as well.\n\nIf this is enabled for your organization or subscription, you might see a message at the end of the response with a **View matches** link. If you select the link, an editor opens that shows you the details of the matching code references with more details.\n\n![Chat code referencing example.](/assets/updates/1_94/code-references.png)\n\nGet more information about [code referencing in GitHub Copilot](https://github.blog/news-insights/product-news/code-referencing-now-generally-available-in-github-copilot-and-with-microsoft-azure-ai/) on the GitHub Blog.\n\n### File suggestions in chat\n\nIn chat input fields, you can now type `#<filename>` to get file name suggestions and quickly attach them to your prompt as context. This works in chat locations that support file attachments, such as the Chat view, Quick Chat, Inline Chat, and Notebook Chat.\n\n### Improved file links in chat responses\n\nWe've improved the rendering of any workspace file paths that are mentioned in Copilot responses. These paths are very common when you ask [`@workspace`](https://code.visualstudio.com/docs/copilot/copilot-chat#_chat-participants) questions.\n\nThe first thing you'll notice, is that paths to workspace files now include a file icon. This enables you to easily distinguish them in the chat response. The file icon is based on your current [file icon theme](https://code.visualstudio.com/docs/getstarted/themes#_file-icon-themes).\n\n![Paths to workspace files in the response now render using file icons.](/assets/updates/1_94/copilot-path-overview.png)\n\nThese paths are interactive links, so just select them to open the corresponding file. You can even use drag and drop to open the file in a new editor group, or insert it into a text editor by holding Shift before dropping.\n\nBy default, these links only show the file name but you can hover over them to see the full file path.\n\n![Hovering over a workspace path to see the full workspace path.](/assets/updates/1_94/copilot-path-hover.png)\n\nYou can also right-click on one of these paths to open a context menu with additional commands, such as copying a relative path to the resource, or revealing the file in your operating system's file explorer.\n\n![The context menu for a workspace path in chat provides options to open the file or copy its path.](/assets/updates/1_94/copilot-path-right-click.png)\n\nWe plan to further improve workspace path rendering in the coming iterations, as well as make similar improvements to symbol names in responses.\n\n### Drag and drop files to add chat context\n\nYou can now easily attach additional files as context for a chat prompt by dragging files or editor tabs from the workbench directly into chat. For Inline Cat, hold Shift and drop a file to add it as context instead of opening it in the editor.\n\n### File attachments included in history\n\nThere are multiple ways to attach a file or editor selection as relevant context to your chat request. Previously, this context was added only for the current request and was not included in the history of follow-on requests. Now, these attachments are kept in history, so that you can keep referring to them without having to reattach them.\n\n![Chat conversation shows that Copilot keeps track of attached files across multiple prompts.](/assets/updates/1_94/file-attachment.png)\n\n### Inline Chat and completions in Python native REPL\n\nThe native REPL editor, used by the Python extension, now supports Copilot Inline Chat and code completions directly in the input box.\n\n### Accept and run generated code in notebook\n\nWhen you use Copilot Inline Chat to generate code in a notebook, you can now accept and directly run the generated code from Inline Chat.\n\n### Attach variables in notebook chat\n\nWhen you use Copilot in a notebook, you can now attach variables from the Jupyter kernel in your requests. Adding variables gives you more precise control over the context for your chat request, so that you get more relevant responses from Copilot.\n\nEither type `#` , followed by the variable name, or use the 📎 control (⌘/ (Windows, Linux Ctrl+/)) in Inline Chat to add a context variable.\n\n### Refreshed chat user experience\n\nWe've refreshed the Chat view with a clean new welcome experience, and we've updated the layout of the chat input area. You can now use the `@` button to easily find the list of available chat participants and slash commands, both the built-in ones and chat participants from extensions that you've installed. You can also still find participants and slash commands by typing `/` or `@` in the chat input box.\n\n![Updated Chat view welcome experience.](/assets/updates/1_94/chat-welcome.png)\n\n### Semantic search results (Preview)\n\n**Setting**: [github.copilot.chat.search.semanticTextResults](vscode://settings/github.copilot.chat.search.semanticTextResults)\n\nThe Search view enables you to perform an exact search across your files. We have now added functionality to the Search view that uses Copilot to give search results that are semantically relevant.\n\nThis functionality is still in preview and by default, the setting is not enabled. Try it out and let us know what you think!\n\n### Fix test failure (Preview)\n\n**Setting**: [github.copilot.chat.fixTestFailure.enabled](vscode://settings/github.copilot.chat.fixTestFailure.enabled)\n\nWe've added specialized logic to help you to diagnose failing unit tests. This logic is triggered in some scenarios by the `/fix` slash command, and you can also invoke it directly with the `/fixTestFailure` slash command. The command is enabled in chat by default but can be disabled via the setting [github.copilot.chat.fixTestFailure.enabled](vscode://settings/github.copilot.chat.fixTestFailure.enabled).\n\n##\n\n### Automated test setup (Experimental)\n\n**Setting**: [github.copilot.chat.experimental.setupTests.enabled](vscode://settings/github.copilot.chat.experimental.setupTests.enabled)\n\nWe added an experimental `/setupTests` slash command that can help you configure the testing set up for your workspace. This command can recommend a testing framework, provide steps to set up and configure it, and suggest a VS Code extension to provide [testing integration in VS Code](https://code.visualstudio.com/docs/debugtest/testing). This can save you time and effort to get started with testing for your code.\n\nWhen you use the `/tests` command to generate tests for your code, it can recommend `/setupTests` and testing extensions if looks like such an integration has not been set up yet in your workspace.\n\n### Start debugging from Chat (Experimental)\n\n**Setting**: [github.copilot.chat.experimental.startDebugging.enabled](vscode://settings/github.copilot.chat.experimental.startDebugging.enabled)\n\nIn this milestone, we made improvements to the experimental `/startDebugging` slash command. This command enables you to easily find or create a launch configuration and start [debugging](https://code.visualstudio.com/docs/debugtest/debugging) your application seamlessly. When you use `@vscode` in Copilot Chat, `/startDebugging` is now available by default.\n\n![A user types /startDebugging flask app port 3000 in the panel chat and is provided with the launch configuration.](/assets/updates/1_94/start-debugging.png)\n\n### Chat in Command Center (Experimental)\n\n**Setting**: [chat.commandCenter.enabled](vscode://settings/chat.commandCenter.enabled)\n\nWe are experimenting with a Command Center entry for accessing chat. It provides quick access to all relevant chat commands, like starting the different chat experiences or attaching context to your prompt. Note that the Command Center itself needs to be enabled for the chat Command Center entry to show.\n\n![Chat Command Center button and the drop-down menu with relevant chat actions.](/assets/updates/1_94/chat-command-center.png)\n\n### Improved temporal context (Experimental)\n\n**Setting**: [github.copilot.chat.experimental.temporalContext.enabled](vscode://settings/github.copilot.chat.experimental.temporalContext.enabled)\n\nWith temporal context, you can instruct Inline Chat to consider recently opened or edited files as part of the chat context. We have improved this feature and invite everyone to give it a go.\n\n### Custom instructions (Experimental)\n\n**Setting**: [github.copilot.chat.experimental.codeGeneration.useInstructionFiles](vscode://settings/github.copilot.chat.experimental.codeGeneration.useInstructionFiles)\n\n**Setting**: [github.copilot.chat.experimental.testGeneration.instructions](vscode://settings/github.copilot.chat.experimental.testGeneration.instructions)\n\nLast milestone, we introduced custom [code-generation instructions](https://code.visualstudio.com/updates/v1_93#_code-generation-instructions). We've further expanded this functionality to define **shared instructions** for code generation in a `.github/copilot-instructions.md` file in your workspace. These common instructions supplement your own personal code generation instructions. Enable the code-generation instruction file with the [github.copilot.chat.experimental.codeGeneration.useInstructionFiles](vscode://settings/github.copilot.chat.experimental.codeGeneration.useInstructionFiles) setting.\n\nIn addition, you can now define instructions for **test generation** in settings or import them from a file. For example, if you always want to use a particular unit testing framework for your tests. Configure the test-generation instructions in the [github.copilot.chat.experimental.testGeneration.instructions](vscode://settings/github.copilot.chat.experimental.testGeneration.instructions) setting.\n\n## Accessibility\n\n### Getting started\n\nOur **Help** menu now includes a **Get Started with Accessibility Features** walkthrough, which makes it easier for you to explore and utilize the accessibility options. The walkthrough introduces you to functionality, such as the accessibility help dialog, accessibility signals, keyboard shortcuts, and more.\n\n![Get Started with Accessibility Features product walkthrough.](/assets/updates/1_94/accessibility-walkthrough.png)\n\n### Comment accessibility improvements\n\nWe have introduced an accessible view for comment thread controls. This view includes the relevant editor context, enabling you to stay focused without needing to switch between the editor and the accessible view. Likewise, the editor context is now provided in the accessible view for the comments panel.\n\nWe've also introduced the **Comments: Focus Comment on Current Line** command that lets you quickly move to the Comments control from the Editor by using the keyboard. There are also new actions to go to the next and previous commented ranges in the Editor: **Comments: Go to Next Commented Range** and **Comments: Go to Previous Commented Range**.\n\n## Workbench\n\n### Change an extension's account preference\n\nIn this iteration, we explored how to improve the experience of changing the preferred account for an extension. For example, if you have multiple GitHub accounts and you accidentally signed in to GitHub Copilot with the wrong account and now need to use the other one.\n\nIt's now possible to change that preference after the fact in multiple ways.\n\n- **Account menu in the Activity Bar** &gt; **&lt;Your Account&gt;** &gt; **Manage Trusted Extensions** &gt; select the gear icon for an extension\n\n![Manage trusted extensions Quick Pick, with gear button highlighted.](/assets/updates/1_94/accountPreferenceManageTrustedExtensions.png)\n- **Extensions** view &gt; context menu (or gear icon) on an extension that uses auth &gt; select **Account Preferences**\n\n![Account preferences option in the context menu of an extension.](/assets/updates/1_94/accountPreferenceContextMenu.png)\n- Extension detail view &gt; gear icon &gt; select **Account Preferences**\n\n![Account preferences option in the gear menu of an extension.](/assets/updates/1_94/accountPreferenceGear.png)\n\nChoosing any of these options takes you to a Quick Pick where you can change the account that an extension uses.\n\n![The account preference Quick Pick that enables you to select extensions for a given account.](/assets/updates/1_94/accountPreferenceQuickPick.png)\n\nWhen you change an extension's account preference, this sends an event to the extension and it is up to the extension to handle it properly. If you don't see the expected behavior, report an issue going for that extension, so the account preference experience can be handled.\n\nAlso, let us know if you have any feedback on this flow.\n\n### View folders and workspaces associated with a profile\n\nIn this milestone, we introduced a **Folders & Workspaces** section in the Profiles editor. This section lists all folders and workspaces that are associated with a specific profile from a central place. From this section, you can add or modify folders, or open the folder or workspace in a new window.\n\n![Folders &amp; Workspaces section in the Profile editor.](/assets/updates/1_94/profiles-editor-folders-workspaces.png)\n\n### Update extensions across all profiles\n\nIn this milestone, we introduced the ability to update extensions across all profiles. This is useful if you have multiple profiles and you want to keep your extensions versions in sync. Previously, you had to switch to each profile and update the extensions for that profile.\n\n### Warnings in the Extensions view\n\nThe Extensions view now shows a warning badge and associated information when there are any invalid extensions or extensions that are disabled due to version incompatibility.\n\n![Extensions view shows a warning badge and description about the warning.](/assets/updates/1_94/extensions-warning-ux.png)\n\n### Find in Explorer\n\nWe’ve improved the Find feature in the Explorer view to make it easier to search for files in large projects. You can open the Find control in the File Explorer by using the ⌥⌘F (Windows, Linux Ctrl+Alt+F) keyboard shortcut. While searching, you can switch between fuzzy matching and continuous matching for more flexible results.\n\nNote that some context menu actions are temporarily disabled during searches. Stay tuned for more improvements coming soon!\n\n### Release notes\n\nWe have a simplified syntax for referring to settings in our release notes ([setting.name](vscode://settings/setting.name)), which also has the now-familiar settings-gear rendering when displayed in the release notes editor.\n\n![Setting URL in release notes enables navigating to the Settings editor directly.](/assets/updates/1_92/setting-url-in-release-notes.gif)\n\n## Editor\n\n### Inlay hint improvements\n\nWe have added the [editor.inlayHints.maximumLength](vscode://settings/editor.inlayHints.maximumLength) setting, which controls after how many characters inlay hints are truncated.\n\nWe have also revised the updating strategy for inlay hints and now, while typing, they should update sooner but not cause any horizontal movements of your cursor.\n\n### Experimental Edit Context\n\nThis milestone, we introduced a new experimental setting [editor.experimentalEditContextEnabled](vscode://settings/editor.experimentalEditContextEnabled). This setting enables the [EditContext API](https://www.w3.org/TR/edit-context/) to power the editing experience in VS Code. The adoption of the [EditContext API](https://www.w3.org/TR/edit-context/) has enabled us to fix certain IME composition bugs. Generally we believe it will improve the editing experience in the long term, and ultimately it will be enabled by default.\n\nMake sure to reload your VS Code window after enabling this setting to take advantage of it.\n\n## Source Control\n\n### Source Control Graph view improvements\n\nLast milestone, we added the new **Source Control Graph** view. This milestone, we have been working on expanding the functionality available in the newly added view as well as polishing the layout of the view.\n\n#### Repository picker\n\nWhen you open a folder/workspace that contains multiple repositories, the Source Control Graph view title shows a repository picker. By default, the Source Control Graph view shows the active repository, matching the information in the Status Bar. You can use the repository picker to *lock* the Source Control Graph view to a particular repository.\n\n![Repository picker control in the title of the Source Control Graph view.](/assets/updates/1_94/scm-repository-picker-button.png)\n\n#### History item reference picker\n\nThis milestone, we have added a new history item reference picker to the Source Control Graph view title. You can use this reference picker to filter the history items shown in the graph to a different branch, or to view multiple branches.\n\n![History item reference Quick Pick control to choose one or more items.](/assets/updates/1_94/scm-reference-quick-pick.png)\n\nBy default the history item reference picker is set to `Auto` , which renders the graph for the current history item reference, its remote, and an optional base.\n\n![History item reference picker control in the title of the Source Control Graph view.](/assets/updates/1_94/scm-reference-picker-button.png)\n\n#### History item actions\n\nThis milestone, we have expanded the list of actions that are available in the context menu for source control history items. We have added actions to create a new branch/tag from a history item, cherry-pick a history item, and checkout (detached) an item.\n\n![Context menu for items in the Source Control Graph view.](/assets/updates/1_94/scm-context-menu.png)\n\n#### Source Control Graph settings\n\nThis milestone, we have added a set of new settings, so that you can customize the graph:\n\n- [scm.graph.badges](vscode://settings/scm.graph.badges) - controls which badges are shown in the Source Control Graph view\n- [scm.graph.pageOnScroll](vscode://settings/scm.graph.pageOnScroll) - controls whether the Source Control Graph view loads the next page of items when you scroll to the end of the list\n- [scm.graph.pageSize](vscode://settings/scm.graph.pageSize) - the default number of items to show in the Source Control Graph view and when loading more items\n\n## Notebooks\n\n### Multi cursor support across cells (preview)\n\nThe Notebook editor now supports multi-cursor editing between cells with the setting [notebook.multiCursor.enabled](vscode://settings/notebook.multiCursor.enabled). Currently, this can only be triggered with the shortcut Ctrl+D and supports core editor actions alongside a limited subset of editor commands.\n\n### Diff editor shows document metadata changes\n\nThe notebook diff editor now also shows changes made to the document metadata, such as kernel information and cell language.\n\n![Notebook dif editor showing side-by-side changes to the document metadata.](/assets/updates/1_94/notebook-diff-document-metadata.png)\n\n### Collapse unchanged regions in diff view\n\nThe notebook diff view now respects the setting [diffEditor.hideUnchangedRegions.enabled](vscode://settings/diffEditor.hideUnchangedRegions.enabled). When enabled, unchanged code blocks are collapsed by default, which makes reviewing changes in large notebooks easier.\n\n![Diff editor shows unchanged code blocks as collapsed.](/assets/updates/1_94/notebook-unchanged-region.png)\n\n### Notebook serialization in web worker (Experimental)\n\nThis release introduces an experimental feature that enables notebook serialization in a web worker. This can help reduce main thread blocking time in the Extension Host process when you work with large notebooks. By default, this feature is disabled but can be enabled by setting [ipynb.experimental.serialization](vscode://settings/ipynb.experimental.serialization) to `true` .\n\n## Debug\n\n### Support for data colorization\n\nVS Code supports new text styling capabilities from the Debug Adapter Protocol. This enables data in the Variables view, Watch view, hovers, and Debug Console to be colorized via ANSI escape sequences.\n\n### JavaScript Debugger\n\n#### Improved display of HTML elements\n\nWe've improved how HTML elements are displayed in the JavaScript debugger. Previously, they were rendered as naive objects, which were hard to navigate. Now, they more closely reflect DOM structure, and we take advantage of new colorization capabilities to provide some basic syntax highlighting.\n\n![HTML elements are colorized in the JavaScript Debug Console.](/assets/updates/1_94/js-debug-html.png)\n\n#### Autocomplete of Node commands in launch configuration\n\nThere is a new autocompletion helper available in `launch.json` files for command-line applications that are installed in your `node_modules` . This makes it easier to set up debugging for tools like `vitest` or `nest` .\n\n#### Cleaner Loaded Sources view\n\nWe changed how source paths are structured for Node.js built-in modules, evaluated scripts, and WebAssembly modules to make the **Loaded Sources** view less noisy and easier to browse.\n\n## Languages\n\n### TypeScript 5.6\n\nOur JavaScript and TypeScript support now uses TypeScript 5.6. This major update includes a number of language and tooling improvements, along with important bug fixes and performance optimizations.\n\nYou can read all about the TypeScript 5.6 release [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/). We've also included a few tooling highlights in the following sections.\n\n#### Detection of some common 'always true' programming mistakes\n\nSay you're using a regular expression in JavaScript or TypeScript and write some code like this:\n\n``` const str = '...' if (/\\d+(\\.\\d+)?/) { ... } else { ... }\n\n```\n\nUh oh! Looks like we've forgotten to call `.test()` on the regular expression, meaning that the `if` conditional always evaluates to true. That's not what we want.\n\nEven though this problem is obvious when pointed out, mistakes like this are surprisingly easy to make and have even caused real bugs in VS Code! Thankfully, TypeScript now reports some of the most common 'always true' errors in your program. This includes testing an `if` conditional against a value that is never value, or a conditional expression where the one side is unreachable, such as `/abc/ ?? /xyz/` .\n\n[Check out the TypeScript release notes](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/#disallowed-nullish-and-truthy-checks) for more examples and details about how this feature works.\n\n#### Region prioritized diagnostics\n\nWorking in a very long JavaScript or TypeScript file? You should start seeing diagnostics for type error show up a little faster thanks to region prioritized diagnostics. This means that we try to get the diagnostics for the current visible code and show these first, even if the diagnostics for the rest of the file are still being computed.\n\nThis optimization is most relevant for complex files with thousands and thousands of lines. You may not notice any changes for smaller files.\n\n#### Improved commit character for JavaScript and TypeScript\n\nCommit characters can speed up coding by automatically accepting completions when typed. For example, in JavaScript and TypeScript, `.` is often considered a commit character. This means to type `myVariable.property.` , you can just type `myv` , `.` , `p` , `.` with the first `.` accepting the completion for `myVariable` and the second `.` accepting the completion for `property` .\n\nThese commit characters are now computed by TypeScript, which means that they can better take the program's structure into account. We can also continue improving our support for them over time.\n\nCommit characters are enabled by default but can be disabled by setting [editor.acceptSuggestionOnCommitCharacter](vscode://settings/editor.acceptSuggestionOnCommitCharacter) to `false` .\n\n#### Exclude Patterns for Auto-Imports\n\nThe new `autoImportSpecifierExcludeRegexes` lets you exclude [auto import](https://code.visualstudio.com/docs/typescript/typescript-editing#_auto-imports) from specific packages by using a regular expression. For example, to exclude auto imports from the subdirectory of a module like lodash, you can set:\n\n``` { \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\"^lodash/.*$\"] }\n\n```\n\nYou can configure this by using [javascript.preferences.autoImportSpecifierExcludeRegexes](vscode://settings/javascript.preferences.autoImportSpecifierExcludeRegexes) for JavaScript and [typescript.preferences.autoImportSpecifierExcludeRegexes](vscode://settings/typescript.preferences.autoImportSpecifierExcludeRegexes) for TypeScript. For more details see the [TypeScript 5.6 release notes](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/#exclude-patterns-for-auto-imports)\n\n## Remote Development\n\nThe [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), allow you to use a [Dev Container](https://code.visualstudio.com/docs/devcontainers/containers), remote machine via SSH or [Remote Tunnels](https://code.visualstudio.com/docs/remote/tunnels), or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.\n\nHighlights include:\n\n- Attach to a Kubernetes container over SSH/Tunnel\n- Manually specify GPU availability\n\nYou can learn more about these features in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_94.md).\n\n## Contributions to extensions\n\n### Python\n\n#### Run tests with coverage\n\nYou can now run Python tests with coverage in VS Code! To run tests with coverage, select the coverage run icon in the Test Explorer or “Run with coverage” from any menu you normally trigger test runs from. The Python extension will run coverage by using the [`pytest-cov`](https://pypi.org/project/pytest-cov/) plugin if you are using pytest, or with [`coverage.py`](http://coverage.py/) for unittest.\n\nOnce the coverage run is complete, lines are highlighted in the editor for line level coverage. These can be closed and re-opened via the Run Results panel in the bottom, where it says \"Close Test Coverage\" or \"View Test Coverage\" under the most recent test run. Additionally, a Test Coverage tab appears below the Testing tab in the Test Explorer, also with a beaker icon, which you can also navigate to with **Testing: Focus on Test Coverage View** in Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)). On this panel you can view line and branch coverage metrics for each file and folder in your workspace.\n\nFor more information on running Python tests with coverage, see our [Python documentation](https://code.visualstudio.com/docs/python/testing#_run-tests-with-coverage). For general information on test coverage, see VS Code's [Test Coverage documentation](https://code.visualstudio.com/docs/debugtest/testing#_test-coverage).\n\n#### Python default problem matcher\n\nThe Python extension now includes a default problem matcher, simplifying issue tracking in your Python code and offering more contextual feedback. To integrate it, add `\"problemMatcher\": \"$python\"` to your tasks in `task.json` . A problem matcher scans the task's output for errors and warnings and displays them in the Problems panel, enhancing your development workflow.\n\nBelow is an example of a `task.json` file that uses the default problem matcher for Python:\n\n``` { \"version\": \"2.0.0\", \"tasks\": [ { \"label\": \"Run Python\", \"type\": \"shell\", \"command\": \"${command:python.interpreterPath}\", \"args\": [\"${file}\"], \"problemMatcher\": \"$python\" } ] }\n\n```\n\n#### Shell integration in Python terminal REPL\n\nThe Python extension now includes a setting to opt in and out of `PYTHONSTARTUP` script, which runs before you type `python` or any other way to launch the Python REPL in the terminal. If you opt in, you can use features from terminal shell integrations, such as command decorations, re-run command, run recent commands, if they are in Mac or Linux. You can enable this via setting [python.terminal.shellIntegration.enabled](vscode://settings/python.terminal.shellIntegration.enabled).\n\n#### Pylance Language Server Mode\n\nThere's a new setting [python.analysis.languageServerMode](vscode://settings/python.analysis.languageServerMode) that enables you to choose between our current IntelliSense experience or a lightweight one that is optimized for performance.\n\nIf you don't require the full breadth of IntelliSense capabilities and prefer Pylance to be as resource-friendly as possible, you can set [python.analysis.languageServerMode](vscode://settings/python.analysis.languageServerMode) to `light` . Otherwise, to continue with the experience you have with Pylance today, you can set it to `default` .\n\nThis new functionality overrides the default values of the following settings:\n\n| Setting | `light`mode | `default`mode | | --- | --- | --- | | \"python.analysis.exclude\" | [\"\\*\\*\"] | [] | | \"python.analysis.useLibraryCodeForTypes\" | false | true | | \"python.analysis.enablePytestSupport\" | false | true | | \"python.analysis.indexing\" | false | true |\n\nThe settings above can still be changed individually to override the default values.\n\n### GitHub Pull Requests\n\nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. Review the [changelog for the 0.98.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0980) release of the extension to learn about the highlights.\n\n## Extension Authoring\n\n### Remove custom allocator in the desktop app\n\nIn this version, we have removed the custom allocator that was added in version 1.78 to the desktop application extension host. This custom allocator acts as a bridge for supporting V8 sandbox incompatible Node.js native addons that are built against the Electron runtime. You can refer to this [tracking issue](https://github.com/microsoft/vscode/issues/202385#issuecomment-2367174453) for additional context.\n\nWe have ensured that the top 5000 extensions are unaffected by this change. If your extension or a dependency of your extension is affected by this change, you can try the following remediation suggestions:\n\n- If your extension uses [n-api](https://nodejs.org/docs/latest/api/n-api.html) then the status `napi_no_external_buffers_allowed`\nwill be returned when using external array buffers. In which case, you can switch to use the copy version of the API [napi_create_buffer_copy](https://nodejs.org/docs/latest/api/n-api.html#napi_create_buffer_copy).\n- If your extension uses [node-addon-api](https://github.com/nodejs/node-addon-api) then refer to this [document](https://github.com/nodejs/node-addon-api/blob/main/doc/external_buffer.md) for alternative API and compile time settings.\n- If you want to avoid the performance cost from the copy, you can use the [V8 allocator](https://v8.github.io/api/head/classv8_1_1ArrayBuffer_1_1Allocator.html) to ensure that the buffer backing store is compatible with the V8 sandbox.\n\nWe have also added telemetry to identify extensions and native addons that might be affected, so we can proactively reach out to extension authors and offer help where possible. If your extension is effected, and none of the above suggestions work for you, comment in our [discussion thread](https://github.com/microsoft/vscode-discussions/discussions/1771) and we will gladly help.\n\n## Debug Adapter Protocol\n\nWe formalized how text can be colorized and styled in the display of variables and output in the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol). Colorization works via ANSI control sequences and require that both the client and debug adapter `supportsANSIStyling` in their initialize request and capabilities, respectively.\n\n## Preview Features\n\n### Multiple GitHub accounts\n\nIt's now possible to be logged in to multiple GitHub accounts in VS Code at the same time.\n\nThis functionality is enabled by default in VS Code Insiders. In Stable builds of VS Code, you can turn this on with the [github.experimental.multipleAccounts](vscode://settings/github.experimental.multipleAccounts) setting.\n\nHere are a couple of scenarios in which you might need multiple accounts:\n\n- Use *Account1* for Settings Sync and *Account2* for the GitHub Pull Request extension\n- Use *Account1* for the GitHub extension (to push) and *Account2* for GitHub Copilot\n\nTo use this functionality, simply trigger a log in action (either with a built-in feature like Settings Sync or with an extension), and you'll be given the option to log in to a different account. This feature also pairs nicely with the new Account Preference Quick Pick should you need to change the account at a later stage.\n\nWhile most things should just continue to work with your existing extensions, some behaviors might not play perfectly nice with this multi-account world just yet. If you think there's room for improvement, do open an issue on those extensions. With the help of the relatively new `vscode.authentication.getAccounts('github')` API, extensions have a lot of power to handle multiple accounts.\n\nNext iteration, we are planning on turning this feature on by default for all users.\n\n### MSAL-based Microsoft Authentication\n\nWe have been moving towards having our Microsoft Authentication stack use [MSAL (Microsoft Authentication Library)](http://github.com/AzureAD/microsoft-authentication-library-for-js). It's been a huge undertaking, but we have made great progress in this iteration. This work spans all VS Code clients, so that includes VS Code and [VS Code for the Web](https://vscode.dev).\n\n- For vscode.dev, we have enabled the browser-based `MSAL.js`\nfor all Microsoft authentication requests. In other words, vscode.dev is now entirely on MSAL.\n- For VS Code, the desktop client, we have this feature behind a setting, [microsoft.useMsal](vscode://settings/microsoft.useMsal). It's behind a setting for now, as we plan on moving towards [the broker flow](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/brokering.md), which would enable VS Code to use the authentication state of the operating system. So, to prevent as little interruption as possible, we will do that work first before enabling this widely. That said, if you're eager to try this new authentication, you are welcome to try and provide us feedback.\n\nYou can see the detailed status of this transition to MSAL across all of VS Code in [Issue #178740](https://github.com/microsoft/vscode/issues/178740).\n\n### TypeScript 5.7\n\nThis release includes initial support for the upcoming TypeScript 5.7 release. Check out the [TypeScript 5.7 plan](https://github.com/microsoft/TypeScript/issues/59905) for details.\n\nTo start using preview builds of TypeScript 5.7, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).\n\n## Proposed APIs\n\n### Tools for language models\n\nWe continue to iterate on our `LanguageModelTool` API. The API comes with two major parts:\n\n1. The ability for extensions to register a *tool*. A tool is a piece of functionality that is meant to be used by language models. For example, reading the Git history of a file.\n2. The mechanics for language models to support tools, such as extensions passing tools when making a request, language models requesting a tool invocation, and extensions communicating back the result of a tool invocation.\n\nIn this milestone, we added the ability for tools to request user confirmation before running. This is helpful for tools that may have some side-effect.\n\nTake a look at [issue #213274](https://github.com/microsoft/vscode/issues/213274) for more details or to give us feedback.\n\n>\n> **Note**: The API is still under active development, and things will change.\n> >\n\n## Engineering\n\n### ESM is shipping for VS Code\n\nWe are finally shipping our ESM work in VS Code Stable releases. That means that all layers of VS Code core (electron, node.js, browser, workers) use the `import` and `export` syntax in JavaScript for module loading and exporting. All usages of our legacy AMD loader are disabled and will be removed as part of our debt week in October.\n\nThe move to ESM massively improves startup performance. For one, a lot of AMD overhead is removed, but then the main workbench bundle size is also reduced by more than 10%:\n\n![Graph showing the trend of the main bundle load time, showing a large drop after introducing ESM.](/assets/updates/1_94/esm.png)\n\nNow that we are fully converted to ESM, we plan to improve our engineering system for VS Code. With ESM, a lot of modern tooling will work for us and we are very excited to share more details about this in the near future.\n\n>\n> **Note**: extensions are not impacted by this change and not loaded via ESM, please see [https://github.com/microsoft/vscode/issues/130367](https://github.com/microsoft/vscode/issues/130367) for details.\n> >\n\n### Use NPM as default package manager\n\nBeginning of September 2024, we have completed the [switch from yarn to npm](https://github.com/microsoft/vscode/issues/196795) for package management in the [microsoft/vscode](https://github.com/microsoft/vscode) repo. This decision was based on the specific requirements of VS Code and center around these criteria:\n\n- Performance: we initially moved to yarn because of performance reasons and npm can now also meet our requirements\n- Security: we make our supply chain more secure by limiting exposure and reducing the number of tools we depend upon\n\n## Notable fixes\n\n- [226401](https://github.com/microsoft/vscode/issues/226401) fileWatcher keeps consuming CPU at 200%+\n- [10054](https://github.com/microsoft/vscode-remote-release/issues/10054) [WSL]: Ports tab incorrectly reports Ports in WSL being forwarded to local when `localhostForwarding = false`\n\n## Thank you\n\nLast but certainly not least, a big ***Thank You*** to the contributors of VS Code.\n\n### Issue tracking\n\nContributions to our issue tracking:\n\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n\n### Pull requests\n\nContributions to `vscode` :\n\n- [@BABA983 (BABA)](https://github.com/BABA983)\n- fix terminal tab selection not work properly [PR #224394](https://github.com/microsoft/vscode/pull/224394)\n- Register fold import action [PR #227216](https://github.com/microsoft/vscode/pull/227216)\n- [@BlackHole1 (Kevin Cui)](https://github.com/BlackHole1): ci: ensure retry logic consistency [PR #226038](https://github.com/microsoft/vscode/pull/226038)\n- [@Cecil0o0 (hj)](https://github.com/Cecil0o0): chore: rm unreached ignore items when build extensions. [PR #227906](https://github.com/microsoft/vscode/pull/227906)\n- [@dangerman (Anees Ahee)](https://github.com/dangerman): Fix Image Preview transparency grid scaling [PR #226505](https://github.com/microsoft/vscode/pull/226505)\n- [@g-cappai (Gianluca Cappai)](https://github.com/g-cappai): Fix open html anchor link in markdown preview [PR #228633](https://github.com/microsoft/vscode/pull/228633)\n- [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): [typescript-language-features] Expandable hover [PR #228255](https://github.com/microsoft/vscode/pull/228255)\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- Add actions to preview editor tab's hover [PR #226023](https://github.com/microsoft/vscode/pull/226023)\n- Fix typo in workspace extension activation failure message [PR #227348](https://github.com/microsoft/vscode/pull/227348)\n- Correct tooltip capitalization of debug panel in status bar (fix #228088) [PR #228089](https://github.com/microsoft/vscode/pull/228089)\n- [@henricryden](https://github.com/henricryden): additional search path for libc.so.6 in check-requirements-linux.sh [PR #227713](https://github.com/microsoft/vscode/pull/227713)\n- [@janssen-tiobe (janssen)](https://github.com/janssen-tiobe): Fix: agressive URI encoding in table view of the problems panel [PR #224841](https://github.com/microsoft/vscode/pull/224841)\n- [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fix initial terminal dimensions are reload are incorrect [PR #225554](https://github.com/microsoft/vscode/pull/225554)\n- [@jjaeggli (Jacob Jaeggli)](https://github.com/jjaeggli): Document focus suggest details with ctrl+alt+space [PR #190096](https://github.com/microsoft/vscode/pull/190096)\n- [@juliapz (Julia Pozdeeva)](https://github.com/juliapz): Prevent find widget from being cropped in AUX window [PR #229001](https://github.com/microsoft/vscode/pull/229001)\n- [@marrej (Marcus Revaj)](https://github.com/marrej): # Render file creation in the refactor preview [PR #226950](https://github.com/microsoft/vscode/pull/226950)\n- [@nojaf (Florian Verdonck)](https://github.com/nojaf)\n- Use Worker to serialize Notebook [PR #226632](https://github.com/microsoft/vscode/pull/226632)\n- Include id in ErrorNoTelemetry message [PR #226715](https://github.com/microsoft/vscode/pull/226715)\n- [@PhantomPower82](https://github.com/PhantomPower82): Polish getting started page (fix #226991) [PR #226994](https://github.com/microsoft/vscode/pull/226994)\n- [@rafamerlin (Rafael Merlin)](https://github.com/rafamerlin): Make Inlay hint length configurable [PR #221276](https://github.com/microsoft/vscode/pull/221276)\n- [@rehmsen (Ole)](https://github.com/rehmsen)\n- Initialize test variables in `setup`\nto avoid order dependency. [PR #226596](https://github.com/microsoft/vscode/pull/226596)\n- Support multiple comment widgets per notebook cell. [PR #226770](https://github.com/microsoft/vscode/pull/226770)\n- [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Add test-results.xml to .gitignore [PR #214238](https://github.com/microsoft/vscode/pull/214238)\n- [@repraze (Thomas Dubosc)](https://github.com/repraze): fix: swap end for flex-end in browser/hover.css [PR #224102](https://github.com/microsoft/vscode/pull/224102)\n- [@segevfiner (Segev Finer)](https://github.com/segevfiner): Adopt ext host restart for custom text editors [PR #225985](https://github.com/microsoft/vscode/pull/225985)\n- [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): fix: memory leak in debug view [PR #225334](https://github.com/microsoft/vscode/pull/225334)\n- [@sunnylost (sunnylost)](https://github.com/sunnylost): extensions: wrap table cell content in paragraph element [PR #228365](https://github.com/microsoft/vscode/pull/228365)\n- [@tisilent (xiejialong)](https://github.com/tisilent): Add editor gpu rendering fallback [PR #228414](https://github.com/microsoft/vscode/pull/228414)\n- [@tmm1 (Aman Karmani)](https://github.com/tmm1): Ignore tsserver requests for createDirectoryWatcher(~/Library) on macOS [PR #227653](https://github.com/microsoft/vscode/pull/227653)\n\nContributions to `vscode-docs` :\n\n- [@0dinD (Odin Dahlström)](https://github.com/0dinD): Update supported Java versions [PR #7561](https://github.com/microsoft/vscode-docs/pull/7561)\n- [@alexwkleung (Alex Leung)](https://github.com/alexwkleung): Update enter jupyter server url screenshot [PR #7584](https://github.com/microsoft/vscode-docs/pull/7584)\n- [@DiskCrasher (Mike)](https://github.com/DiskCrasher): Fixed missing \"!\" in code [PR #7595](https://github.com/microsoft/vscode-docs/pull/7595)\n- [@gaganshera (Gaganjot Singh)](https://github.com/gaganshera): Update prompt-crafting.md [PR #7555](https://github.com/microsoft/vscode-docs/pull/7555)\n- [@harish-s-developer (Harish Srinivasan)](https://github.com/harish-s-developer): Added new Managing dependencies section, fixed one typo [PR #7617](https://github.com/microsoft/vscode-docs/pull/7617)\n- [@harrydowning (Harry Downing)](https://github.com/harrydowning): Remove incorrect statement about pre release tags [PR #7593](https://github.com/microsoft/vscode-docs/pull/7593)\n- [@listsarah (Sarah Listzwan)](https://github.com/listsarah): To Close Issue #7536: Update \"Embedded Programming Languages\" [PR #7539](https://github.com/microsoft/vscode-docs/pull/7539)\n- [@mistymadonna (Misty Hays)](https://github.com/mistymadonna): Updated Azure Extensions homepage, Created new Getting Started page [PR #7520](https://github.com/microsoft/vscode-docs/pull/7520)\n- [@muzimuzhi (Yukai Chou)](https://github.com/muzimuzhi): Typo, add missing inline code markup [PR #7589](https://github.com/microsoft/vscode-docs/pull/7589)\n- [@partev](https://github.com/partev): fix a URL redirect [PR #7608](https://github.com/microsoft/vscode-docs/pull/7608)\n- [@Sarke (Peter Stalman)](https://github.com/Sarke): Another Flatpak/KDE5 wallet workaround [PR #7606](https://github.com/microsoft/vscode-docs/pull/7606)\n- [@seaniyer (Sean)](https://github.com/seaniyer): Update publishing-extension.md [PR #7540](https://github.com/microsoft/vscode-docs/pull/7540)\n- [@vinistock (Vinicius Stock)](https://github.com/vinistock): Update Ruby links to point to new documentation [PR #7607](https://github.com/microsoft/vscode-docs/pull/7607)\n- [@wjandrea (William Andrea)](https://github.com/wjandrea)\n- tasks.md: add `source`\nproperty to `problemMatcher` [PR #7493](https://github.com/microsoft/vscode-docs/pull/7493)\n- tasks.md: mention `problemMatcher.severity`\n[PR #7494](https://github.com/microsoft/vscode-docs/pull/7494)\n\nContributions to `vscode-extension-samples` :\n\n- [@liu3hao (Weihao)](https://github.com/liu3hao): Add missing activation event [PR #1057](https://github.com/microsoft/vscode-extension-samples/pull/1057)\n\nContributions to `vscode-js-debug` :\n\n- [@lucacasonato (Luca Casonato)](https://github.com/lucacasonato): fix: don't inject NODE\\_OPTIONS in Deno [PR #2080](https://github.com/microsoft/vscode-js-debug/pull/2080)\n\nContributions to `vscode-jupyter` :\n\n- [@rchiodo (Rich Chiodo)](https://github.com/rchiodo): Make display\\_name changes also cause a kernel change event [PR #15967](https://github.com/microsoft/vscode-jupyter/pull/15967)\n\nContributions to `vscode-languageserver-node` :\n\n- [@StellaHuang95 (Stella)](https://github.com/StellaHuang95): Support `llmGenerated`\nproperty on `CodeAction` [PR #1557](https://github.com/microsoft/vscode-languageserver-node/pull/1557)\n\nContributions to `vscode-pull-request-github` :\n\n- [@ixzhao](https://github.com/ixzhao): fix quote reply [PR #6230](https://github.com/microsoft/vscode-pull-request-github/pull/6230)\n\nContributions to `vscode-python-debugger` :\n\n- [@rchiodo (Rich Chiodo)](https://github.com/rchiodo): Update debugpy info to latest shipped version [PR #462](https://github.com/microsoft/vscode-python-debugger/pull/462)\n\nContributions to `vscode-vsce` :\n\n- [@mlasson (Marc Lasson)](https://github.com/mlasson): Fix typo in option hint [PR #1046](https://github.com/microsoft/vscode-vsce/pull/1046)\n\nContributions to `vscode-wasm` :\n\n- [@mlugg (Matthew Lugg)](https://github.com/mlugg): Fix stream bugs [PR #196](https://github.com/microsoft/vscode-wasm/pull/196)\n\nContributions to `language-server-protocol` :\n\n- [@aschaber1 (Alexander Schaber)](https://github.com/aschaber1): chore: fix typo from `kubernets`\nto `kubernetes` [PR #2013](https://github.com/microsoft/language-server-protocol/pull/2013)\n- [@dawedawe (dawe)](https://github.com/dawedawe): fix typo in the documentation of CompletionParams [PR #2019](https://github.com/microsoft/language-server-protocol/pull/2019)\n- [@didrikmunther (Didrik Munther)](https://github.com/didrikmunther): Fix misspelling in pullDiagnostics.md [PR #2022](https://github.com/microsoft/language-server-protocol/pull/2022)\n- [@InSyncWithFoo (InSync)](https://github.com/InSyncWithFoo)\n- Fix a few typos in `percentage`\n's doc comments [PR #2010](https://github.com/microsoft/language-server-protocol/pull/2010)\n- Add Taplo to implementor list [PR #2021](https://github.com/microsoft/language-server-protocol/pull/2021)\n- [@SamB (Samuel Bronson)](https://github.com/SamB): Update servers.md: vscode-markdown-languageserver moved [PR #2012](https://github.com/microsoft/language-server-protocol/pull/2012)\n- [@sh-cho (Seonghyeon Cho)](https://github.com/sh-cho): Add fluent-bit language server implementation [PR #2016](https://github.com/microsoft/language-server-protocol/pull/2016)\n- [@StellaHuang95 (Stella)](https://github.com/StellaHuang95): Support `llmGenerated`\nproperty on `CodeAction` [PR #2020](https://github.com/microsoft/language-server-protocol/pull/2020)",
  "Tags": [
    "release"
  ],
  "Description": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)\n\n[Read the full article](https://code.visualstudio.com/updates/v1_94)",
  "OutputDir": "_news",
  "FeedName": "Visual Studio Code Releases",
  "Author": "Visual Studio Code Team"
}
