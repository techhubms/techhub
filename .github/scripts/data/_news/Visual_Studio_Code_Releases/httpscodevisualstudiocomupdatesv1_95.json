{
  "Link": "https://code.visualstudio.com/updates/v1_95",
  "ProcessedDate": "2025-08-24 16:20:38",
  "PubDate": "2024-10-29T17:00:00+00:00",
  "FeedLevelAuthor": "Visual Studio Code - Code Editing. Redefined.",
  "Title": "October 2024 (version 1.95)",
  "FeedUrl": "https://code.visualstudio.com/feed.xml",
  "EnhancedContent": "Try [MCP servers](/mcp) to extend agent mode in VS Code!\n\nDismiss this update\n\n[Edit](https://vscode.dev/github/microsoft/vscode-docs/blob/main/release-notes/v1_95.md)\n\n# October 2024 (version 1.95)\n\n**Security update**: The following extensions have security updates: [ms-python.python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) and [ms-vscode-remote.remote-ssh](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh).\n\n**Update 1.95.1**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22October+2024+Recovery+1%22+is%3Aclosed).\n\n**Update 1.95.2**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22October+2024+Recovery+2%22+is%3Aclosed).\n\n**Update 1.95.3**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22October+2024+Recovery+3%22+is%3Aclosed).\n\nDownloads: Windows: [x64](https://update.code.visualstudio.com/1.95.3/win32-x64-user/stable) [Arm64](https://update.code.visualstudio.com/1.95.3/win32-arm64-user/stable) | Mac: [Universal](https://update.code.visualstudio.com/1.95.3/darwin-universal/stable) [Intel](https://update.code.visualstudio.com/1.95.3/darwin/stable) [silicon](https://update.code.visualstudio.com/1.95.3/darwin-arm64/stable) | Linux: [deb](https://update.code.visualstudio.com/1.95.3/linux-deb-x64/stable) [rpm](https://update.code.visualstudio.com/1.95.3/linux-rpm-x64/stable) [tarball](https://update.code.visualstudio.com/1.95.3/linux-x64/stable) [Arm](https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions) [snap](https://update.code.visualstudio.com/1.95.3/linux-snap-x64/stable)\n\nWelcome to the October 2024 release of Visual Studio Code. There are many updates in this version that we hope you'll like, some of the key highlights include:\n\n- Copilot Edits - Iterate quickly on large changes across multiple files\n- Copilot Chat in Secondary Side Bar - Keep Copilot Chat open and ready to-go while you work\n- Multiple GitHub accounts - Log in to multiple GitHub accounts in VS Code simultaneously\n- Copilot code reviews - Get a quick review pass or a deeper review of uncommitted changes\n- Docstrings with Pylance - Generate docstring templates for classes or methods\n- Preview settings indicator - View experimental and preview settings in the Settings editor\n- Copilot extensibility - Showcasing Copilot extensibility in VS Code\n\n>\n> If you'd like to read these release notes online, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> **Insiders:** Want to try new features as soon as possible? You can download the nightly [Insiders](https://code.visualstudio.com/insiders) build and try the latest updates as soon as they are available.\n> >\n\n## GitHub Copilot\n\nCopilot features might go through different early access stages, which are typically enabled and configured through settings.\n\n- **Experimental** - view the [experimental features](command:workbench.action.openSettings?%5B%22%40tag%3Aexperimental%20%40ext%3Agithub.copilot-chat%22%5D) (`@tag:experimental`\n)\n\nThis setting controls a new feature that is actively being developed and may be unstable. It is subject to change or removal.\n- **Preview** - view the [preview features](command:workbench.action.openSettings?%5B%22%40tag%3Apreview%20%40ext%3Agithub.copilot-chat%22%5D) (`@tag:preview`\n)\n\nThis setting controls a new feature that is still under refinement yet ready to use. Feedback is welcome.\n\n### Start a code editing session with Copilot Edits\n\n>\n> Copilot Edits is currently in preview\n> >\n\n**Setting**: [github.copilot.chat.edits.enabled](vscode://settings/github.copilot.chat.edits.enabled)\n\nWith Copilot Edits, you can start an AI-powered code editing session where you can quickly iterate on code changes. Based on your prompts, Copilot Edits proposes code changes across multiple files in your workspace. These edits are applied directly in the editor, so you can quickly review them in-place, with the full context of the surrounding code.\n\nCopilot Edits is great for iterating on large changes across multiple files. It brings the conversational flow of Copilot Chat and fast feedback from Inline Chat together in one experience. Have an ongoing, multi-turn chat conversation on the side, while benefiting from inline code suggestions.\n\nGet started with Copilot Edits in just three steps:\n\n1. Start an edit session by selecting **Open Copilot Edits** from the Chat menu, or press .\n\n![Screenshot showing the Copilot menu in the Command Center, highlighting the Open Edit Session item](/assets/updates/1_95/copilot-command-center-open-edit-session.png)\n2. Add relevant files to the *working set* to indicate to Copilot which files you want to work on.\n3. Enter a prompt to tell Copilot about the edit you want to make! For example, `Add a simple navigation bar to all pages`\nor `Use vitest instead of jest` .\n\nGet more details about [Copilot Edits](https://code.visualstudio.com/docs/copilot/chat/copilot-edits) in our documentation. Try it out now and provide your feedback through [our issues](https://github.com/microsoft/vscode/issues)!\n\n### Chat in the Secondary Side Bar\n\nThe new default location for the Chat view is the [Secondary Side Bar](https://aka.ms/vscode-secondary-sidebar). By using the Secondary Side Bar, you can have chat open at any time, while you still have other views available to you like the File Explorer or Source Control. This provides you with a more integrated AI experience in VS Code. You can quickly get to chat by using the ⌃⌘I (Windows, Linux Ctrl+Alt+I) keyboard shortcut.\n\n![Chat view in its new location after having moved.](/assets/updates/1_95/chat-new-location.png)\n\nWith the introduction of the new Chat menu next to the Command Center, bringing up the Secondary Side Bar with chat is just a click away:\n\nThe chat menu gives you access to the most common tasks for Copilot Chat. If you wish to hide this menu, a new setting [chat.commandCenter.enabled](vscode://settings/chat.commandCenter.enabled) is provided.\n\n![Chat menu in the Command Center.](/assets/updates/1_95/chat-menu.png)\n\n**Note:** If you had previously installed GitHub Copilot, a view will show up at the location you had Chat before that enables you to restore the Chat view to the old location, if that works better for you.\n\n![Chat view in its old location showing that Chat has moved to the Secondary Side Bar.](/assets/updates/1_95/chat-old-location.png)\n\n### Copilot code reviews\n\n>\n> Copilot code reviews are currently in preview\n> >\n\nWith GitHub Copilot code review in Visual Studio Code, you can now get fast, AI-powered feedback on your code as you write it, or request a review of all your changes before you push. GitHub Copilot code review in Visual Studio Code is currently in preview. Try it out and provide feedback through [our issues](https://github.com/microsoft/vscode/issues).\n\nThere are two ways to use Copilot code review in VS Code:\n\n- **Review selection**: for a quick review pass, select code in the editor and either select **Copilot** &gt; **Review and Comment** from the editor context menu, or use the **GitHub Copilot: Review and Comment** command from the Command Palette. *(This feature is in preview.)*\n- **Review changes**: for a deeper review of all uncommitted changes, select the **Copilot Code Review** button in the **Source Control** view, which you can also do in your pull request on GitHub.com. *(Join the [waitlist](https://gh.io/copilot-code-review-waitlist), open to all Copilot subscribers)*\n\n![Request review of uncommitted changes](/assets/updates/1_95/review_diff.png)\n\nCopilot's feedback shows up as comments in the editor, attached to lines of your code. Where possible, the comments include actionable code suggestions, which you can apply in one action.\n\n![Screenshot showing a comment reviewing a code selection](/assets/updates/1_95/reviewing_selection.png)\n\nTo learn more about Copilot code review, head to the [GitHub code review documentation](https://gh.io/copilot-code-review-docs).\n\nCopilot's quick review on code selection can provide feedback that match the specific practices of your team or project, provided you give the right context. When reviewing selections with custom review instructions, you can define those specific requirements via the [github.copilot.chat.reviewSelection.instructions](vscode://settings/github.copilot.chat.reviewSelection.instructions) setting. Similar to [code-generation and test-generation instructions](https://code.visualstudio.com/docs/copilot/copilot-customization), you can either define the instructions directly in the setting, or you can store them in a separate file and reference it in the setting.\n\nThe following code snippet shows an example of review instructions:\n\n``` \"github.copilot.chat.reviewSelection.instructions\": [ { \"text\": \"Logging should be done with the Log4j .\" }, { \"text\": \"Always use the Polly library for fault-handling.\" }, { \"file\": \"code-style.md\" // import instructions from file `code-style.md` } ],\n\n```\n\nAn example of the contents of the `code-style.md` file:\n\n``` Private fields should start with an underscore.\n\nA file can only contain one class declaration.\n\n```\n\n### Automatic chat participant detection\n\n**Setting**: [chat.experimental.detectParticipant.enabled](vscode://settings/chat.experimental.detectParticipant.enabled)\n\nGitHub Copilot has several built-in chat participants, such as `@workspace` , and you may have installed other extensions that contribute chat participants too.\n\nTo make it easier to use chat participants with natural language, Copilot Chat will automatically route your question to a suitable participant or chat command, when possible.\n\nIf the automatically selected participant is not appropriate for your question, you can still select the **rerun without** link at the top of the chat response to resend your question to Copilot.\n\n![Screenshot of Chat view that shows how the '@workspace' participant is automatically detected.](/assets/updates/1_93/participant-detection.png)\n\nThis month, we also added an action to let you skip this detection behavior on a per-request basis. The default action when you enter a chat prompt is **Send and dispatch**, which includes participant detection. If you choose **Send**, the request is sent directly to Copilot Chat and it won't be automatically dispatched to a chat participant.\n\n![The list of available &quot;send&quot; commands in the chat view.](/assets/updates/1_95/chat-send-commands.png)\n\nYou can also disable automatic participant detection entirely with the [chat.experimental.detectParticipant.enabled](vscode://settings/chat.experimental.detectParticipant.enabled) setting.\n\n### Control current editor context\n\nCopilot Chat has always automatically included your current selection or the currently visible code as context with your chat request. Large Language Models (LLMs) are generally good at understanding whether a piece of context is relevant. But sometimes, when you ask a question that is not about your current editor, including this context might affect how the model interprets your question.\n\nWe now show a special attachment control in the chat input that gives a hint about the editor context and which enables you to toggle whether or not to include the editor context.\n\n![The current editor context control in the chat input, which shows that the context is not included.](/assets/updates/1_95/implicit-context.png)\n\nThere are no changes to the behavior of the editor context. When the active editor has a selection, then just the selection is included. Otherwise, just the code that is scrolled into view is included. You can still attach other files or the full file by using the paperclip button or by typing `#` in the chat prompt.\n\n### Interactive workspace symbol links\n\nA common use case of Copilot Chat is asking questions about the code in your workspace, such as using `/tests` to generate new unit tests for the selected code or asking `@workspace` to find some specific class or function in your project. This milestone, we added enhanced links for any workspace symbols that Copilot mentions in chat responses. These symbol links can help you better understand Copilot responses and learn more about the symbols used in them.\n\nSymbol links are rendered as little pills in the response, just like the [file links](https://code.visualstudio.com/updates/v1_94#_improved-file-links-in-chat-responses) we added last milestone. To start learn more about a symbol, just select the symbol link to jump to that symbol's definition:\n\nYou can also hover over the symbol link to see which file the symbol is defined in:\n\n![Hovering over a symbol link to see the file it's defined in.](/assets/updates/1_95/copilot-symbol-link-hover.png)\n\nTo start exploring a symbol in more detail, just right-click on the symbol link to bring up a context menu with options, such as **Go to Implementations** and **Go to References**:\n\n![Using the context menu on a symbol link to learn more about a symbol.](/assets/updates/1_95/copilot-symbol-link-context-menu.png)\n\nBasic symbol links should work for any language that supports Go to Definition. More advanced IntelliSense options, such Go to Implementations, also require support for that language. Make sure to install language extensions to get the best symbol support for any programming languages used in Copilot responses.\n\n### Fix using Copilot action in the Problem hover\n\nWhen you hover over a problem in the editor, it now includes an action to fix the problem using Copilot. This action is available for problems that have a fix available, and the fix is generated by Copilot.\n\n![The Problem hover showing a Fix using Copilot action.](/assets/updates/1_95/copilot-fix-problem-hover.png)\n\n### Workspace indexing\n\n[`@workspace`](https://code.visualstudio.com/docs/copilot/copilot-chat#_chat-participants) lets you ask questions about code in your current project. This is implemented using either [GitHub's code search](https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search) or a smart local index that VS Code constructs. This milestone, we added a few more UI elements that let you understand how this workspace index is being used.\n\nFirst up, the new **GitHub Copilot: Build Local Workspace index** command lets you explicitly start indexing the current workspace. This indexing is normally kicked off automatically the first time you ask a `@workspace` question. With the new command, you can instead start indexing at any time. The command also enables indexing of larger workspaces, currently up to 2000 files (not including ignored files, such as the `node_modules` or `out` directories).\n\nWhile the index is being built, we now also show a progress item in the status bar:\n\n![A status bar item showing the progress of indexing the current workspace.](/assets/updates/1_95/copilot-workspace-ui-progress.png)\n\nIndexing workspaces with many hundreds of files can take a little time. If you try to ask an `@workspace` question while indexing is being constructed, instead of waiting, Copilot will try to respond quickly by using a simpler local index that can be built up more quickly. We now show a warning in the response when this happens:\n\n![A warning showing on a response telling the user the Copilot index is being constructed.](/assets/updates/1_95/copilot-workspace-ui-warning.png)\n\nNotice that Copilot was still able to answer the question in this case, even though it used the simpler local index instead of the more advanced one. That's often the case, although more ambiguous or complex questions might only be answerable once the smarter index has been constructed. Also keep in mind that if your workspace is backed by a GitHub repository, we can instead use [GitHub's code search](https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search) to answer questions. That means that code search is used instead of the simpler local index.\n\n### Chat follow-up improvements\n\n**Setting**: [github.copilot.chat.followUps](vscode://settings/github.copilot.chat.followUps)\n\nTo make more room for chat conversations in the Chat view, we've made follow-up prompts more concise and, by default, they only appear on the first turn. Configure the [github.copilot.chat.followUps](vscode://settings/github.copilot.chat.followUps) setting to change when follow-up prompts appear:\n\n- `firstOnly`\n(default) - Follow-up prompts only appear on the first turn\n- `always`\n- Follow-up prompts always appear\n- `never`\n- Disable follow-up prompts\n\n### Sort by relevance in Semantic Search (Experimental)\n\n**Setting**: [github.copilot.chat.search.semanticTextResults](vscode://settings/github.copilot.chat.search.semanticTextResults)\n\nLast milestone, we introduced the ability to perform a semantic search using Copilot to get search results that are semantically relevant to your query. We have now improved the search results by sorting them by their relevance. Keyword matches from more relevant snippets are deemed more relevant overall.\n\n## Workbench\n\n### Multiple GitHub accounts\n\nGraduating last month's feature to the default behavior, it's now possible to be logged in to multiple GitHub accounts in VS Code at the same time.\n\n![Multiple GitHub Accounts in the Account menu.](/assets/updates/1_95/multi-github-accounts.png)\n\nHere are a couple of scenarios in which you might need multiple accounts:\n\n- Use *Account1* for Settings Sync and *Account2* for the GitHub Pull Request extension\n- Use *Account1* for the GitHub extension (to push) and *Account2* for GitHub Copilot\n\nTo use this functionality, simply trigger a log in action (either with a built-in feature like Settings Sync or with an extension), and you'll be given the option to log in to a different account. This feature also pairs nicely with the Account Preference Quick Pick, should you need to change the selected account at a later stage.\n\nWhile most things should just continue to work with your existing extensions, some behaviors might not play perfectly nice with this multi-account world just yet. If you think there's room for improvement, do open an issue on those extensions. With the help of the relatively new `vscode.authentication.getAccounts('github')` API, extensions have a lot of power to handle multiple accounts.\n\n### Add additional accounts when changing account preferences\n\nLast month, we introduced the [Account Preference Quick Pick](https://code.visualstudio.com/updates/v1_94#_change-an-extensions-account-preference), which is useful for changing the preferred account to use for an extension should you need to change that for any reason.\n\nOne of the pieces of feedback we received was around wanting an easy way to add an account that is not yet logged in. This milestone, we have introduced a new item in the Quick Pick that enables you to do just that. Use the **Use a new account...** item to start an authentication flow and set the account preference to that account in one go.\n\n![Use a new account option in the account preference Quick Pick.](/assets/updates/1_95/use-new-account.png)\n\n### Settings editor indicator for Experimental and Preview settings\n\nPreviously, it wasn't always clear which settings were experimental or preview from looking at the Settings editor. To highlight experimental and upcoming features, the Settings editor now displays indicators next to experimental and preview settings. You can type `@tag:experimental` or `@tag:preview` in the Settings editor search box to filter to settings accordingly.\n\nExtension authors can add \"experimental\" or \"preview\" tags to their settings to show the corresponding indicator in the Settings editor.\n\n*Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))*\n\n### More icons for profiles\n\nIn this milestone, we have added more icons for profiles. You can now choose from a wider range of icons to customize your profile.\n\n![Image showing all available profile icons, highlighting the newly added icons.](/assets/updates/1_95/profile-icons.png)\n\n### View icons in Panel\n\nIn the workbench Panel area, views are typically displayed as labels in the title bar (for example, *TERMINAL* or *OUTPUT*). However, on smaller screens, these labels can exceed the available space, causing some views to overflow into a dropdown menu.\n\nTo address this, we've added a new setting: [workbench.panel.showLabels](vscode://settings/workbench.panel.showLabels). When disabled, views are displayed as icons instead of labels, conserving horizontal space and reducing overflow.\n\n**`workbench.panel.showLabels: true`**\n\n![Panel area showing the labels for each panel.](/assets/updates/1_95/panel-showLabels-on.png)\n\n**`workbench.panel.showLabels: false`**\n\n![Panel area showing an icon for each panel and no label.](/assets/updates/1_95/panel-showLabels-off.png)\n\n## Editor\n\n### Occurrences Highlight Delay\n\nThis milestone, we have introduced the setting [editor.occurrencesHighlightDelay](vscode://settings/editor.occurrencesHighlightDelay) to give you control over the delay before occurrences are highlighted in the editor. Lowering this delay value can lead to an editor experience that feels more responsive when working with semantic highlighting.\n\n## VS Code for the Web\n\n### VS Code for the Web supports local file events\n\nWhen using Chrome or Edge as of version 129, opening [https://insiders.vscode.dev](https://insiders.vscode.dev) with a local folder now supports file events. If you make changes to files and folders of the opened workspace outside the browser, these changes are reflected immediately inside the browser.\n\nThis feature leverages the new [`FileSystemObserver`](https://chromestatus.com/feature/4622243656630272) interface that is proposed as new API for the web.\n\n## Contributions to extensions\n\n### Copilot extensions showcase\n\nThis milestone, the team worked on building several extensions that showcase [Copilot extensibility in VS Code](https://code.visualstudio.com/docs/copilot/copilot-extensibility-overview). These extensions demonstrate the following capabilities:\n\n- [Chat Participant & Tool APIs](https://code.visualstudio.com/api/references/vscode-api)\n- [prompt-tsx](https://github.com/microsoft/vscode-prompt-tsx)\n- How to leverage the language models provided by GitHub Copilot\n\nTry these extensions and see how you can extend Copilot in your own extensions.\n\n| Extension | Links | | --- | --- | | GitHub Pull Requests | [Marketplace](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) | | Web Search for Copilot | [Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-websearchforcopilot), [source code](https://github.com/microsoft/vscode-websearchforcopilot) | | MermAId diagram generation with Copilot | [Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.copilot-mermaid-diagram) | | Data Analysis for Copilot | [Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-copilot-data-analysis), [source code](https://github.com/microsoft/vscode-data-analysis-for-copilot) | | VS Code Commander | [Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-commander) | | Vision for Copilot Preview | [Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-copilot-vision) |\n\n#### GitHub Pull Requests\n\nVersion [0.100.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#01000) of the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension adds Copilot integration:\n\n- Use the `@githubpr`\nchat participant in the Chat view to search for issues, summarize issues/prs, and suggest fixes for issues. `@githubpr` uses a number of Language Model tools to accomplish this.\n- There's also a new **Notifications** view that shows GitHub notifications, with an action to prioritize them with Copilot.\n\nTo try everything out, you can set the following settings:\n\n- [githubPullRequests.experimental.chat](vscode://settings/githubPullRequests.experimental.chat)\n- [githubPullRequests.experimental.notificationsView](vscode://settings/githubPullRequests.experimental.notificationsView)\n\n##### Issue Search with Copilot\n\nThe new `@githubpr` Chat participant can search for issues on GitHub.\n\n![Copilot issue search for most open bugs.](/assets/updates/1_95/copilot-issue-search-most-bugs.png)\n\nWhen displaying issues, `@githubpr` shows a Markdown table and tries to pick the best columns to show, based on the search.\n\n![Copilot issue search for closed October issues.](/assets/updates/1_95/copilot-issue-search.png)\n\n##### Summarizing and Fixing with Copilot\n\nEach issue listed in the **Issues** view now has a new action, **Summarize With Copilot**, that opens the Chat panel and summarizes the selected issue. We also added another action, **Fix With Copilot**, that summarizes the selected issue and uses the workspace context to suggest a fix for it.\n\n##### Notification Prioritization with Copilot (Experimental)\n\nThis milestone, we added an experimental **Notifications** view that lists your unread notifications across repositories. By default, the notifications are sorted by most recently updated descending, but you can use the **Sort by Priority using Copilot** action from the view title's `...` menu to have Copilot prioritize the notifications. Selecting each notification triggers an action to summarize the notification using Copilot. The view also contains easily accessible actions to mark a notification as read, or to open the notification on GitHub.com.\n\n![Notifications View](/assets/updates/1_95/notifications-view.png)\n\n#### Web Search for Copilot\n\nThis extension showcases:\n\n- Chat Participant & Tool APIs\n- [prompt-tsx](https://github.com/microsoft/vscode-prompt-tsx)\n- How to leverage the language models provided by GitHub Copilot\n\nThe source code is [available on GitHub here](https://github.com/microsoft/vscode-websearchforcopilot).\n\n##### Description\n\nGet the most up-to-date and relevant information from the web right in Copilot.\n\nThis is powered by one of two different search engines, configured by [websearch.preferredEngine](vscode://settings/websearch.preferredEngine):\n\n- [Tavily](http://tavily.com) (default)\n- [Bing](https://bing.com)\n\nAs a user, you'll need to acquire an API key from one of these services to use this extension. Upon first use, it asks you for that key and stores it using VS Code's built-in secret storage, and can be managed via VS Code's authentication stack as well just as you would for your GitHub account.\n\n##### Chat participant\n\nThis extension contributes the `@websearch` chat participant, which is capable of handling questions that likely need live information from the internet. You can invoke it manually using `@websearch when did Workspace Trust ship in vscode?`\n\n![The question &quot;when did Workspace Trust ship in vscode&quot; and the answer showing the references and details.](/assets/updates/1_95/websearch-participant.png)\n\n##### Chat tool\n\nThis extension contributes the `#websearch` chat language model tool as well, which is similar to the participant but is useful for providing context from the web in other chat participants. For example:\n\n- `@workspace /new #websearch create a new web app written in Python using the most popular framework`\n\n![The question &quot;create a new web app written in Python using the most popular framework&quot; using the websearch variable with /new. The result is a project using Django.](/assets/updates/1_95/websearch-tool.png)\n\nAdditionally, if you are working on your own Chat particpant or tool, you can consume this Chat tool via the `vscode.lm.invokeTool` API.\n\n#### MermAId diagram generation with Copilot\n\nThe vscode-mermAId (`vscode:extension/ms-vscode.copilot-mermaid-diagram` ) extension contributes a new chat participant to GitHub Copilot to build and modify visualizations for your code with Mermaid, a Markdown-inspired diagraming and charting tool.\n\n##### Create and render diagrams\n\nCreate any type of Mermaid-supported diagrams through chat conversations and use the `/iterate` slash command to refine the diagram. Slash commands are available for specific diagrams to provide extra guidance to the model.\n\nLinks are added for certain diagram types, like flow, to point back to the references that were gathered to build the diagram.\n\n##### Mermaid Visual Outline view\n\nOpen the **Visual Outline** view to dynamically generate diagrams from the active editor. You can break out into chat for finer control.\n\n##### Chat tool\n\nThe extension contributes a tool to gather symbol information within files or the entire workspace and that can be consumed by other chat participants when this extension is installed.\n\n#### Data Analysis for Copilot\n\nThe Data Analysis for Copilot extension empowers people in the data science field. From cleaning up a `.csv` file, to performing higher-level data analysis by leveraging different statistics measures, graphs, and predictive models, the `@data` chat participant helps make more advanced and informed decisions by offering tailored insights and interactivity for data tasks.\n\nThe extension contributes a tool where the LLM can ask to execute Python code by using [Pyodide](https://pyodide.org/en/stable/) and get the result of the relevant Python code execution. It is also able to smartly retry for better or more appropriate execution results in case of errors. You can also export the code that is used to perform the analysis (or generate visualizations) into a Jupyter Notebook or a Python file.\n\nYou can download the extension from [the marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-copilot-data-analysis) and the source is [available on GitHub here](https://github.com/microsoft/vscode-data-analysis-for-copilot).\n\n##### Data analysis and visualizations\n\n- Given a CSV file, enter a prompt such as `Analyze the file #<file name>`\nor write a more specific prompt (see below recording)\n- Provide follow-up prompts to request the generation of visualizations, such as charts, plots, and more\n\n##### Exporting the code used to perform the data analysis\n\n- The Python code used to perform the analysis and generate visualizations can be viewed\n- The Code can be exported in a Jupyter notebook or a Python file\n\n##### Editor and explorer integrations for CSV files\n\n- Right-click on a CSV file to analyze it\n- Open a CSV file and use the Copilot icon to analyze the file\n\n#### VS Code Commander extension\n\nThe VS Code Commander extension (`vscode:extension/ms-vscode.vscode-commander` ) acts as your personal assistant within VS Code. This powerful tool enables you to configure your VS Code environment by using conversational, free-form text. With the VS Code Commander, you can:\n\n- Discover and explore various settings and commands\n- Tailor your development environment to your needs\n\nThese actions can be performed through a simple and intuitive chat interface, making it easier than ever to manage your VS Code configuration.\n\n#### Vision for Copilot Preview extension\n\nThe Vision for Copilot Preview extension (`vscode:extension/ms-vscode.vscode-copilot-vision` ) enables you to attach images directly as contextual input, enriching conversations and enabling more dynamic, visually-supported responses. This extension will be eventually deprecated in favor of built-in image flow in Github Copilot Chat.\n\n##### Vision in Chat\n\nFor now, you can experience the image attachment flow in the Chat view by using your own OpenAI, Azure OpenAI, Anthropic, or Gemini keys. Get started by easily attaching images from the clipboard or dragging them directly into the chat.\n\n![Screenshot of a chat exchange. A user asks for HTML and CSS for a landing page. The response provides a basic HTML structure with a header, navigation links (Home, About, Contact), and a link to an external CSS file.](/assets/updates/1_95/demo.gif)\n\n*Theme: [Sapphire](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire) (preview on [vscode.dev](https://vscode.dev/editor/theme/Tyriar.theme-sapphire))*\n\n##### Vision with Quick Fixes\n\nAdditionally, you can generate or refine alt text for images in markdown, HTML, JSX, or TSX documents with the provided code actions, simplifying the process of incorporating descriptive text for better context and accessibility. Alt text quick fixes work for images in the workspace and image URLs.\n\n![An example markdown document displays a quick fix feature for generating alt text, resulting in the automatic insertion of an alt tag and a value. The user is then prompted with a different quick fix to refine the alt text using an input box. After the user enters and submits their refined description, the alt text is updated accordingly.](/assets/updates/1_95/demo-alt-text.gif)\n\nThis extension uses the `ChatReferenceBinaryData` proposed API. Feel free to check out an example of how it's used in the source code, [available on GitHub here](https://github.com/microsoft/vscode-copilot-vision).\n\n### Python\n\n#### Native REPL Variables view\n\nThe Native Python REPL now provides up-to-date variables for the built-in Variables view. This lets you dig into the state of the interpreter as you execute code from files or through the REPL input box.\n\n#### Generate docstrings with Pylance\n\nYou can now more conveniently generate documentation for your Python code with [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)'s docstrings template generation feature! You can generate a docstring template for classes or methods by typing `\"\"\"` or `'''` , pressing Ctrl+Space, or selecting the lightbulb to invoke the **Generate Docstring** code action. The generated docstring includes fields for the function's description, parameters, parameter types, return and return types.\n\nThis feature is currently behind an experimental setting, but we look forward to making it the default experience soon. You can try it out today by enabling the [python.analysis.supportDocstringTemplate](vscode://settings/python.analysis.supportDocstringTemplate) setting.\n\n#### Fold all docstrings\n\nDocumentation strings are great for providing context and explanations for your code, but sometimes you might want to fold them to focus on the code itself. You can now more easily do so by folding docstrings with the new **Pylance: Fold All Docstrings** command, which can also be bound to a keybinding of your choice. To unfold them, use the **Pylance: Unfold All Docstrings** command.\n\n#### Improved import suggestions\n\nOne of Pylance's powerful features is its ability to provide auto-import suggestions. By default, Pylance offers the import suggestion from where the symbol is defined, but you might want it to import it from a file where the symbol is imported (i.e. aliased). With the new [python.analysis.includeAliasesFromUserFiles](vscode://settings/python.analysis.includeAliasesFromUserFiles) setting, you can now control whether Pylance includes alias symbols from user files in its auto-import suggestions or in the add import Quick Fix.\n\nNote that enabling this setting can negatively impact performance, especially in large codebases, as Pylance may need to index more symbols and monitor more files for changes, which can increase resource usage.\n\n#### Experimental AI Code Action: Implement Abstract Classes\n\nYou can now get the best of both worlds with AI and static analysis with the new experimental Code Action to implement abstract classes! This feature requires both [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) and the [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extensions. To try it out, you can select the **Implement all inherited abstract classes with Copilot** Code Action when defining a class that inherits from an abstract one.\n\nYou can disable this feature by setting `\"python.analysis.aiCodeActions\": {\"implementAbstractClasses\": false}` in your User settings.\n\n## Extension Authoring\n\n### Tools for language models\n\nWe have finalized our [`LanguageModelTool` API](https://code.visualstudio.com/api/references/vscode-api#lm.tools)! This API enables chat extensions to build more powerful experiences by connecting language models to external data sources, or take actions. The API comes with two major parts:\n\n1. The ability for extensions to register a *tool*. A tool is a piece of functionality that is meant to be used by language models. For example, reading the Git history of a file. When a tool is registered using the `lm.registerTool`\nmethod, it's accessible to other extensions as well, in the `lm.tools` list. This will enable chat extensions to seamlessly integrate with other extensions via an ecosystem of shared tools.\n2. The mechanics for language models to support tools, such as extensions passing tools when making a request, language models requesting a tool invocation, and extensions communicating back the result of a tool invocation.\n\nThe use of language model tools is complex, and this API does not hide that complexity. If you want to register a tool or make use of tools in your chat participant, we recommend starting with the [extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-sample).\n\n### Chat participant detection\n\nWe have finalized our API for chat participant detection, which allows GitHub Copilot to automatically select your chat participant or participant command to handle a user's question. Please check out [our documentation](/api/extension-guides/chat#_implement-participant-detection) for a detailed tutorial and recommendations.\n\n### VS Code Speech\n\nThe [VS Code Speech](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-speech) extension is updated to the August version of the [Azure Speech SDK](https://learn.microsoft.com/en-us/azure/ai-services/speech-service/releasenotes?tabs=speech-sdk#speech-sdk-140-2024-august-release) and comes with newer models for speech-to-text recognition. You should see improved results with this update for the [speech-to-text integrations in VS Code](https://code.visualstudio.com/docs/configure/accessibility/voice), such as Copilot Chat.\n\n### Comment Thread `collapsibleState`\n\nThe expand/collapse state of a `CommentThread` can be changed using the new `CommentThread.collapsibleState` property, even once the thread has already been shown. Previously, this property would only be respected the first time the comment thread was shown.\n\n### Codicons in welcome views\n\nWelcome views now support the ability to render codicons. You can do so using the usual `$(icon-name)` in your welcome view.\n\n![A sample welcome view showing the use of text, links, buttons, and codicons.](/assets/updates/1_95/welcome-view-codicons.png)\n\n### Chat participant access to model picker\n\nYou may have noticed the model picker in the Chat view, which lets you select the model that is used for a chat request.\n\n![Copilot model picker control in the Chat view enables switching to another language model.](/assets/updates/1_94/copilot-model-picker.png)\n\nYour chat participant extension needs to adopt a new API in order to use this model picker. We just finalized a new `model` property on the `ChatRequest` object, which will be set to the `LanguageModelChat` instance for the model in the picker. You can use this instead of the `lm.selectChatModels` method. If your extension wants to use a particular model besides the selected one, you can still use `lm.selectChatModels` instead.\n\n## Preview Features\n\n### TypeScript 5.7\n\nWe've continued improving our support for the upcoming TypeScript 5.7 release. Check out the [TypeScript 5.7 beta blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-7-beta/) and the [TypeScript 5.7 plan](https://github.com/microsoft/TypeScript/issues/59905) for details.\n\nTo start using preview builds of TypeScript 5.7, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).\n\n### Update imports on paste for JavaScript and TypeScript\n\nTired of having to add imports after moving code between files? Try out our experimental support for updating imports on paste! When you copy and paste code between editors, VS Code automatically adds imports when the code is pasted:\n\nNotice how it not only added imports, it even added a new export for a local variable that was used in the pasted code!\n\nTo try this out today, make sure you are using TypeScript 5.7+. Then enable `javascript.experimental.updateImportsOnPaste` /`typescript.experimental.updateImportsOnPaste` . Currently this is only supported when pasting between text editors in the same VS Code window.\n\n## Proposed APIs\n\n### Chat Reference Binary Data for image attachments\n\nWe now allow images (`png` , `jpeg` , `bmp` , `gif` , and `tiff` ) to be pasted in chat if there is an extension that uses the `ChatReferencebinaryData` proposed API.\n\n``` export class ChatReferenceBinaryData { /**\n* The MIME type of the binary data.\n*/ readonly mimeType: string;\n\n/**\n* Retrieves the binary data of the reference.\n* @returns A promise that resolves to the binary data as a Uint8Array.\n*/ data(): Thenable<Uint8Array>;\n\n/**\n* @param mimeType The MIME type of the binary data.\n* @param data The binary data of the reference.\n*/ constructor(mimeType: string, data: () => Thenable<Uint8Array>); }\n\n```\n\nExtension authors can access this after creating a chat handler via `request.references` , which can be a `URI` when images are attached via drag and drop or from the quick pick, or will be `ChatReferenceBinaryData` for pasted images.\n\n## Engineering\n\n### Prompt building library for LLMs\n\nThis month, we open sourced our [@vscode/prompt-tsx](https://www.npmjs.com/package/@vscode/prompt-tsx) library, which we've developed and used in Copilot Chat over the past year for crafting language model prompts. The library enables developers to create their prompts using TSX/JSX syntax, similar to React, and includes a variety of tools to make the best use of prompts' token budget.\n\n### AMD code removal and more ESM use in web\n\nWe removed the last traces of AMD (Asynchronous Module Definition) from our sources, mainly from the build scripts that we still kept for supporting AMD in case needed for a recovery release.\n\nIn addition, [https://vscode.dev](https://vscode.dev) is now also running 100% with ESM (ECMAScript Modules) only.\n\n### Migration to ESLint 9\n\nWe've updated both the main VS Code repo and all of our [extension samples](https://github.com/microsoft/vscode-extension-samples) to use ESLint 9. This included migrating all of our ESLint configuration to use modern [flat configs](https://eslint.org/blog/2023/10/flat-config-rollout-plans/).\n\n### Electron 32 update\n\nIn this milestone, we are promoting the Electron 32 update to users on our stable release. This update comes with Chromium 128.0.6613.186 and Node.js 20.18.0. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.\n\n## Notable fixes\n\n- [177046](https://github.com/microsoft/vscode/issues/177046) will crash after searching at extension panel\n\n## Thank you\n\nLast but certainly not least, a big ***Thank You*** to the contributors of VS Code.\n\n### Issue tracking\n\nContributions to our issue tracking:\n\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n\n### Pull requests\n\nContributions to `vscode` :\n\n- [@Abrifq (Arda Aydın)](https://github.com/Abrifq): Change `window.experimentalControlOverlay`\n's scope to application [PR #230593](https://github.com/microsoft/vscode/pull/230593)\n- [@asemdreibati (Asem Dreibati)](https://github.com/asemdreibati): handle edge case in slice function in Iterable namespace (#\\_230683) [PR #232134](https://github.com/microsoft/vscode/pull/232134)\n- [@BABA983 (BABA)](https://github.com/BABA983)\n- Add developer action to show gpu status [PR #222291](https://github.com/microsoft/vscode/pull/222291)\n- Fix debug console is cleared on style changed [PR #224694](https://github.com/microsoft/vscode/pull/224694)\n- Support open in editor in git editor [PR #226967](https://github.com/microsoft/vscode/pull/226967)\n- [@Bistard (SIHAN LI)](https://github.com/Bistard): Fix typo: context view anchor option might be dismissed when using `||`\n[PR #228896](https://github.com/microsoft/vscode/pull/228896)\n- [@cobey (Cody Beyer)](https://github.com/cobey): added mistral ai npm package [PR #229865](https://github.com/microsoft/vscode/pull/229865)\n- [@elias-pap (Elias Papavasileiou)](https://github.com/elias-pap): fix: improve settings descriptions for actions triggered on save [PR #230052](https://github.com/microsoft/vscode/pull/230052)\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Correct Menu Contexts info on extension's Commands page (fix #229258) [PR #229260](https://github.com/microsoft/vscode/pull/229260)\n- [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal): style: simplify string formatting for readability [PR #231763](https://github.com/microsoft/vscode/pull/231763)\n- [@injust (Justin Su)](https://github.com/injust): Fix \"in none full screen mode\" typo [PR #229914](https://github.com/microsoft/vscode/pull/229914)\n- [@jamesharris-garmin (James Harris)](https://github.com/jamesharris-garmin): Fix missing \\_\\_dirname in --locate-shell-integration-path [PR #231423](https://github.com/microsoft/vscode/pull/231423)\n- [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fix if logOutputChannel is created again after being disposed, it will disappear [PR #225709](https://github.com/microsoft/vscode/pull/225709)\n- [@Kaidesuyoo (Kaidesuyo)](https://github.com/Kaidesuyoo): Performance optimization [PR #230804](https://github.com/microsoft/vscode/pull/230804)\n- [@kkshinkai (Kk Shinkai)](https://github.com/kkshinkai): Correctly trigger the `onDidAddListener`\nevent in emitter options [PR #230259](https://github.com/microsoft/vscode/pull/230259)\n- [@Parasaran-Python (Parasaran)](https://github.com/Parasaran-Python): 228640: Hiding prelaunch task popup if the setting to hide it is enabled [PR #231225](https://github.com/microsoft/vscode/pull/231225)\n- [@quiple (Minseo Lee)](https://github.com/quiple): Change Korean font priority [PR #230195](https://github.com/microsoft/vscode/pull/230195)\n- [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Fix scrolling of Test Results when a new test starts (fixes #229531) [PR #229532](https://github.com/microsoft/vscode/pull/229532)\n- [@sandersn (Nathan Shively-Sanders)](https://github.com/sandersn): TS extension: register call to CopilotRelated with copilot extension [PR #228610](https://github.com/microsoft/vscode/pull/228610)\n- [@ShadowRZ (夜坂雅)](https://github.com/ShadowRZ): fix: Use a proper desktop name in package.json [PR #231472](https://github.com/microsoft/vscode/pull/231472)\n- [@trevor-scheer (Trevor Scheer)](https://github.com/trevor-scheer): Marker message white-space `nowrap`\n-&gt; `pre` [PR #229454](https://github.com/microsoft/vscode/pull/229454)\n- [@vietanhtwdk](https://github.com/vietanhtwdk): rerender on resize stickyscroll [PR #227400](https://github.com/microsoft/vscode/pull/227400)\n- [@yanglb (Yanblb)](https://github.com/yanglb): add type checking to decorators [PR #230626](https://github.com/microsoft/vscode/pull/230626)\n\nContributions to `vscode-docs` :\n\n- [@Cecil0o0 (hj)](https://github.com/Cecil0o0)\n- doesn't provide built-in language support in the core editor [PR #7679](https://github.com/microsoft/vscode-docs/pull/7679)\n- location is restricted in a limited area for debug toolbar as `floating`\n[PR #7704](https://github.com/microsoft/vscode-docs/pull/7704)\n- Outdated command title [PR #7705](https://github.com/microsoft/vscode-docs/pull/7705)\n- [@echofly](https://github.com/echofly): Update v1\\_94.md [PR #7677](https://github.com/microsoft/vscode-docs/pull/7677)\n- [@ghosted-sound](https://github.com/ghosted-sound)\n- Update aksextensions.md [PR #7693](https://github.com/microsoft/vscode-docs/pull/7693)\n- Update package-management.md [PR #7694](https://github.com/microsoft/vscode-docs/pull/7694)\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- Document the `hide`\nproperty [PR #7643](https://github.com/microsoft/vscode-docs/pull/7643)\n- Fix typo [PR #7687](https://github.com/microsoft/vscode-docs/pull/7687)\n- [@oleschri](https://github.com/oleschri): add argument --update-extensions [PR #7681](https://github.com/microsoft/vscode-docs/pull/7681)\n- [@partev](https://github.com/partev): fix URL redirect [PR #7640](https://github.com/microsoft/vscode-docs/pull/7640)\n- [@ptrptrd](https://github.com/ptrptrd): docs: remove double entries in theme color references [PR #7639](https://github.com/microsoft/vscode-docs/pull/7639)\n- [@RonakRahane](https://github.com/RonakRahane): Added documentation for new Code Coverage in C# Fixes #7635 [PR #7664](https://github.com/microsoft/vscode-docs/pull/7664)\n\nContributions to `vscode-js-debug` :\n\n- [@marcusball (Marcus Ball)](https://github.com/marcusball): feat: use `remoteHostHeader`\noption when looking up websocket address [PR #2111](https://github.com/microsoft/vscode-js-debug/pull/2111)\n\nContributions to `vscode-languageserver-node` :\n\n- [@DanTup (Danny Tuppeny)](https://github.com/DanTup): Add support for CompletionList \"applyKind\" to control how defaults and per-item commitCharacters/data are combined [PR #1558](https://github.com/microsoft/vscode-languageserver-node/pull/1558)\n\nContributions to `vscode-mypy` :\n\n- [@jwhitaker-gridcog (Jarrad)](https://github.com/jwhitaker-gridcog): run mypy in the directory of the nearest pyproject.toml or mypy.ini [PR #316](https://github.com/microsoft/vscode-mypy/pull/316)\n\nContributions to `vscode-vsce` :\n\n- [@andrewlayer](https://github.com/andrewlayer): Added unpublish to api.ts [PR #1061](https://github.com/microsoft/vscode-vsce/pull/1061)\n- [@deribaucourt (Enguerrand de Ribaucourt)](https://github.com/deribaucourt): Fix regression with workdir symlinks [PR #1053](https://github.com/microsoft/vscode-vsce/pull/1053)\n- [@dtivel (Damon Tivel)](https://github.com/dtivel): Quote `filename`\nvalue in `Content-Disposition` header [PR #1060](https://github.com/microsoft/vscode-vsce/pull/1060)\n\nContributions to `language-server-protocol` :\n\n- [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721)\n- add systemd [PR #2034](https://github.com/microsoft/language-server-protocol/pull/2034)\n- add 3 lsp [PR #2046](https://github.com/microsoft/language-server-protocol/pull/2046)\n- [@DanTup (Danny Tuppeny)](https://github.com/DanTup): Add support for `completionList.applyKind`\nto determine how values from `completionList.itemDefaults` and `completion` are combined. [PR #2018](https://github.com/microsoft/language-server-protocol/pull/2018)\n- [@DavyLandman (Davy Landman)](https://github.com/DavyLandman): Added Rascal to relevant LSP implementor sections [PR #2029](https://github.com/microsoft/language-server-protocol/pull/2029)\n- [@g-plane (Pig Fang)](https://github.com/g-plane): fix punctuation typo [PR #2048](https://github.com/microsoft/language-server-protocol/pull/2048)\n- [@nthykier (Niels Thykier)](https://github.com/nthykier): Add the `debputy`\nlanguage server [PR #2044](https://github.com/microsoft/language-server-protocol/pull/2044)\n- [@RainCmd (渴望蓝天)](https://github.com/RainCmd): Add Rain language server to LSP [PR #2039](https://github.com/microsoft/language-server-protocol/pull/2039)\n- [@WilsonZiweiWang (ziweiwang)](https://github.com/WilsonZiweiWang): Add BitBake language server [PR #2049](https://github.com/microsoft/language-server-protocol/pull/2049)\n- [@yasmewad (Yash Mewada)](https://github.com/yasmewad): Add Smithy language server links to LSP [PR #2036](https://github.com/microsoft/language-server-protocol/pull/2036)\n\nContributions to `lsprotocol` :\n\n- [@nobodywasishere (Margret Riegert)](https://github.com/nobodywasishere): Add Crystal plugin to README [PR #403](https://github.com/microsoft/lsprotocol/pull/403)\n\nContributions to `tolerant-php-parser` :\n\n- [@TysonAndre (Tyson Andre)](https://github.com/TysonAndre): Fix php 8.4 notices about implicitly nullable parameters [PR #410](https://github.com/microsoft/tolerant-php-parser/pull/410)",
  "Tags": [
    "release"
  ],
  "Description": "Learn what is new in the Visual Studio Code October 2024 Release (1.95)\n\n[Read the full article](https://code.visualstudio.com/updates/v1_95)",
  "OutputDir": "_news",
  "FeedName": "Visual Studio Code Releases",
  "Author": "Visual Studio Code Team"
}
