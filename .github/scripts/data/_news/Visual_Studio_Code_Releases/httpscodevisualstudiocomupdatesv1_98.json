{
  "Link": "https://code.visualstudio.com/updates/v1_98",
  "ProcessedDate": "2025-08-24 16:20:38",
  "PubDate": "2025-03-05T17:00:00+00:00",
  "FeedLevelAuthor": "Visual Studio Code - Code Editing. Redefined.",
  "Title": "February 2025 (version 1.98)",
  "FeedUrl": "https://code.visualstudio.com/feed.xml",
  "EnhancedContent": "Try [MCP servers](/mcp) to extend agent mode in VS Code!\n\nDismiss this update\n\n[Edit](https://vscode.dev/github/microsoft/vscode-docs/blob/main/release-notes/v1_98.md)\n\n# February 2025 (version 1.98)\n\n**Update 1.98.1**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22February+2025+Recovery+1%22+).\n\n**Update 1.98.2**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22February+2025+Recovery+2%22+).\n\nDownloads: Windows: [x64](https://update.code.visualstudio.com/1.98.2/win32-x64-user/stable) [Arm64](https://update.code.visualstudio.com/1.98.2/win32-arm64-user/stable) | Mac: [Universal](https://update.code.visualstudio.com/1.98.2/darwin-universal/stable) [Intel](https://update.code.visualstudio.com/1.98.2/darwin/stable) [silicon](https://update.code.visualstudio.com/1.98.2/darwin-arm64/stable) | Linux: [deb](https://update.code.visualstudio.com/1.98.2/linux-deb-x64/stable) [rpm](https://update.code.visualstudio.com/1.98.2/linux-rpm-x64/stable) [tarball](https://update.code.visualstudio.com/1.98.2/linux-x64/stable) [Arm](https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions) [snap](https://update.code.visualstudio.com/1.98.2/linux-snap-x64/stable)\n\nWelcome to the February 2025 release of Visual Studio Code. There are many updates in this version that we hope you'll like, some of the key highlights include:\n\n- Next Edit Suggestions (preview) - Copilot predicts the next edit you are likely to make.\n- Agent mode (preview) - Copilot autonomously completes tasks.\n- Copilot Edits for notebooks - Iterate quickly on edits for your notebooks.\n- Copilot Vision - Attach and interact with images in chat prompts.\n- Code search - Let Copilot find relevant files for your chat prompt.\n- Terminal IntelliSense (preview) - Rich completion support for your terminal.\n- Drag & drop references - Quickly open peek references in a new editor.\n- Linux custom title bar - Custom title bar support for Linux enabled by default.\n- Unresolved diagnostics (preview) - Prompt when committing with unresolved diagnostics.\n- Soft-delete in source control - Move untracked files to trash instead of deleting them.\n- Custom instructions GA - Use custom instructions to tailor Copilot to your needs.\n\n>\n> If you'd like to read these release notes online, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> **Insiders:** Want to try new features as soon as possible? You can download the nightly [Insiders](https://code.visualstudio.com/insiders) build and try the latest updates as soon as they are available.\n> >\n\n## GitHub Copilot\n\nCopilot features might go through different early access stages, which are typically enabled and configured through settings.\n\n| Stage | Description | | --- | --- | | **Experimental** | The feature is still in development and not yet ready for general use.<br>View the [experimental features](command:workbench.action.openSettings?%5B%22%40tag%3Aexperimental%20%40ext%3Agithub.copilot-chat%22%5D) (`@tag:experimental`<br>). | | **Preview** | The feature is still under refinement, yet ready to use. Feedback is welcome.<br>View the [preview features](command:workbench.action.openSettings?%5B%22%40tag%3Apreview%20%40ext%3Agithub.copilot-chat%22%5D) (`@tag:preview`<br>). | | **Stable** | The feature is ready for general use. |\n\n### Copilot Edits\n\n#### Agent mode improvements (Experimental)\n\nLast month, we introduced *agent mode* for Copilot Edits in [VS Code Insiders](https://code.visualstudio.com/insiders/). In agent mode, Copilot can automatically search your workspace for relevant context, edit files, check them for errors, and run terminal commands (with your permission) to complete a task end-to-end.\n\n>\n> **Note**: Agent mode is available today in [VS Code Insiders](https://code.visualstudio.com/insiders/), and we just started rolling it out gradually in **VS Code Stable**. Once agent mode is enabled for you, you will see a mode dropdown in the Copilot Edits view — simply select **Agent**.\n> >\n\nWe made several improvements to the UX of tool usages this month:\n\n- Terminal commands are now shown inline, so you can keep track of which commands were run.\n- You can edit the suggested terminal command in the chat response before running it.\n- Confirm a terminal command with the ⌘Enter (Windows, Linux Ctrl+Enter) shortcut.\n\nAgent mode autonomously searches your codebase for relevant context. Expand the message to see the results of which searches were done.\n\n![Screenshot that shows the expandable list of search results in Copilot Edits.](/assets/updates/1_98/agent-mode-search-results.png)\n\nWe've also made various improvements to the prompt and behavior of agent mode:\n\n- The undo and redo actions in chat now undo or redo the last file edit made in a chat response. This is useful for agent mode, as you can now undo certain steps the model took without rolling back the entire chat response.\n- Agent mode can now run your build [tasks](https://code.visualstudio.com/docs/debugtest/tasks) automatically or when instructed to do so. Disable this functionality via the [github.copilot.chat.agent.runTasks](vscode://settings/github.copilot.chat.agent.runTasks) setting, in the event that you see the model running tasks when it should not.\n\nLearn more about [Copilot Edits agent mode](https://code.visualstudio.com/docs/copilot/chat/copilot-edits#_use-agent-mode-preview) or read the [agent mode announcement blog post](https://code.visualstudio.com/blogs/2025/02/24/introducing-copilot-agent-mode).\n\n>\n> **Note**: If you are a Copilot Business or Enterprise user, an administrator of your organization [must opt in](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#enabling-copilot-features-in-your-organization) to the use of Copilot \"Editor Preview Features\" for agent mode to be available.\n> >\n\n#### Notebook support in Copilot Edits (Preview)\n\nWe are introducing notebook support in Copilot Edits as a preview feature in [VS Code Insiders](https://code.visualstudio.com/insiders). You can now use Copilot to edit notebook files with the same intuitive experience as editing code files. Create new notebooks from scratch, modify content across multiple cells, insert and delete cells, and change cell types. This preview feature provides a seamless workflow when working with data science or documentation notebooks.\n\n>\n> **Note**: This feature is currently only available in [VS Code Insiders](https://code.visualstudio.com/insiders/) with the pre-release version of GitHub Copilot Chat. We'll continue to improve the experience before bringing it to VS Code Stable in a future release.\n> >\n\n#### Refined editor integration\n\nWe have polished the integration of Copilot Edits with code and notebook editors:\n\n- No more scrolling while changes are being applied. The viewport remains in place, making it easier to focus on what changes.\n- Renamed the edit review actions from \"Accept\" to \"Keep\" and \"Discard\" to \"Undo\" to better reflect what’s happening. Changes for Copilot Edits are live, they are applied and saved as they are made and users keep or undo them.\n- After keeping or undoing a file, the next file is automatically revealed.\n\nThe video demonstrates how edits are applied and saved as they occur. The live preview updates, and the user decided to \"Keep\" the changes. Undoing and further tweaking is also still possible.\n\n#### Refreshed UI\n\nIn preparation for unifying Copilot Edits with Copilot Chat, we've given Copilot Edits a facelift. Files that are attached and not yet sent, are now rendered as regular chat attachments. Only files that have been modified with AI are added to the changed files list, which is located above the chat input part.\n\nWith the [chat.renderRelatedFiles](vscode://settings/chat.renderRelatedFiles) setting, you can enable getting suggestions for related files. Related file suggestions are rendered below the chat attachments.\n\n![Screenshot that shows the updated Copilot Edits attachments and changed files user experience.](/assets/updates/1_98/copilot_edits_ui.png)\n\n#### Removed Copilot Edits limits\n\nPreviously, you were limited to attach 10 files to your prompt in Copilot Edits. With this release, we removed this limit. Additionally, we've removed the client-side rate limit of 14 interactions per 10 minutes.\n\n>\n> Note that service-side usage rate limits still apply.\n> >\n\n### Custom instructions generally available\n\n**Setting**: [github.copilot.chat.codeGeneration.useInstructionFiles](vscode://settings/github.copilot.chat.codeGeneration.useInstructionFiles)\n\nCustom instructions enable you to tailor GitHub Copilot to provide chat responses and code suggestions to the way you and your team work. Describe your specific requirements Markdown format in a `.github/copilot-instructions.md` file in your workspace.\n\nThis milestone, we are making custom instructions with `.github/copilot-instructions.md` generally available. Make sure that the [github.copilot.chat.codeGeneration.useInstructionFiles](vscode://settings/github.copilot.chat.codeGeneration.useInstructionFiles) VS Code setting is enabled, and Copilot will then use these instructions when generating responses.\n\nLearn more about [custom instructions in Copilot](https://code.visualstudio.com/docs/copilot/copilot-customization).\n\n### Smoother authentication flows in chat\n\nIf you host your source code in a GitHub repository, you're able to leverage several features, including advanced code searching, the `@github` chat participant, and more!\n\nHowever, for private GitHub repositories, VS Code needs to have permission to interact with your repositories on GitHub. For a while, this was presented with our usual VS Code authentication flow, where a modal dialog showed up when you invoked certain functionality (for example, asking `@workspace` or `@github` a question, or using the `#codebase` tool).\n\nTo make this experience smoother, we've introduced this confirmation in chat:\n\n![Screenshot that shows the authentication confirmation dialog in Chat, showing the three options to continue.](/assets/updates/1_98/confirmation-auth-dialog.png)\n\nNot only is it not as jarring as a modal dialog, but it also has new functionality:\n\n1. **Grant:** you're taken through the regular authentication flow like before (via the modal).\n2. **Not Now:** VS Code remembers your choice and won't bother you again until your next VS Code window session. The only exception to this is if the feature needs this additional permission to function, like `@github`\n.\n3. **Never Ask Again:** VS Code remembers your choice and persists it via the [github.copilot.advanced.authPermissions](vscode://settings/github.copilot.advanced.authPermissions) setting. Any feature that needs this additional permission will fail.\n\nIt's important to note that this confirmation does not confirm or deny Copilot (the service) access to your repositories. This is only how VS Code's Copilot experience authenticates. To configure what Copilot can access, please read the docs [on content exclusion](https://docs.github.com/en/copilot/managing-copilot/configuring-and-auditing-content-exclusion/excluding-content-from-github-copilot).\n\n### More advanced codebase search in Copilot Chat\n\n**Setting**: [github.copilot.chat.codesearch.enabled](vscode://settings/github.copilot.chat.codesearch.enabled)\n\nWhen you add `#codebase` to your Copilot Chat query, Copilot helps you find relevant code in your workspace for your chat prompt. `#codebase` can now run tools like text search and file search to pull in additional context from your workspace.\n\nSet [github.copilot.chat.codesearch.enabled](vscode://settings/github.copilot.chat.codesearch.enabled) to enable this behavior. The full list of tools is:\n\n- Embeddings-based semantic search\n- Text search\n- File search\n- Git modified files\n- Project structure\n- Read file\n- Read directory\n- Workspace symbol search\n\n### Attach problems as chat context\n\nTo help with fixing code or other issues in your workspace, you can now attach problems from the Problems panel to your chat as context for your prompt.\n\nEither drag an item from the Problems panel onto the Chat view, type `#problems` in your prompt, or select the paperclip 📎 button. You can attach specific problems, all problems in a file, or all files in your codebase.\n\n### Attach folders as context\n\nPreviously, you could attach folders as context by using drag and drop from the Explorer view. Now, you can also attach a folder by selecting the paperclip 📎 icon or by typing `#folder:` followed by the folder name in your chat prompt.\n\n### Collapsed mode for Next Edit Suggestions (Preview)\n\n**Settings**:\n\n- [github.copilot.nextEditSuggestions.enabled](vscode://settings/github.copilot.nextEditSuggestions.enabled)\n- [editor.inlineSuggest.edits.showCollapsed](vscode://settings/editor.inlineSuggest.edits.showCollapsed)\n\nWe've added a collapsed mode for NES. When you enable this mode, only the NES suggestion indicator is shown in the left editor margin. The code suggestion itself is revealed only when you navigate to it by pressing Tab. Consecutive suggestions are shown immediately until a suggestion is not accepted.\n\nThe collapsed mode is disabled by default and can be enabled by configuring [editor.inlineSuggest.edits.showCollapsed](vscode://settings/editor.inlineSuggest.edits.showCollapsed), or you can enable or disable it in the NES gutter indicator menu.\n\n![Screenshot that shows the Next Edit Suggestions context menu in the editor left margin, highlighting the Show Collapsed option.](/assets/updates/1_98/NESgutterMenu.png)\n\n### Change completions model\n\nYou could already change the language model for Copilot Chat and Copilot Edits, and now you can also change the model for inline suggestions.\n\nAlternatively, you can change the model that is used for code completions via **Change Completions Model** command in the Command Palette or the **Configure Code Completions** item in the Copilot menu in the title bar.\n\n>\n> **Note:** the list of available models might vary and change over time. If you are a Copilot Business or Enterprise user, your Administrator needs to enable certain models for your organization by opting in to `Editor Preview Features`\n> in the [Copilot policy settings](https://docs.github.com/en/enterprise-cloud@latest/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#enabling-copilot-features-in-your-organization) on GitHub.com.\n> >\n\n### Model availability\n\nThis release, we added more models to choose from when using Copilot. The following models are now available in the model picker in Visual Studio Code and github.com chat:\n\n- **GPT 4.5 (Preview)**: OpenAI’s latest model, GPT-4.5, is now available in GitHub Copilot Chat to Copilot Enterprise users. GPT-4.5 is a large language model designed with advanced capabilities in intuition, writing style, and broad knowledge. Learn more about the GPT-4.5 model availability in the [GitHub blog post](https://github.blog/changelog/2025-02-27-openai-gpt-4-5-in-github-copilot-now-available-in-public-preview).\n- **Claude 3.7 Sonnet (Preview)**: Claude 3.7 Sonnet is now available to all customers on paid Copilot plans. This new Sonnet model supports both thinking and non-thinking modes in Copilot. In initial testing, we’ve seen particularly strong improvements in agentic scenarios. Learn more about the Claude 3.7 Sonnet model availability in the [GitHub blog post](https://github.blog/changelog/2025-02-24-claude-3-7-sonnet-is-now-available-in-github-copilot-in-public-preview/).\n\n### Copilot Vision (Preview)\n\nWe're quickly rolling out end-to-end vision support in this version of Copilot Chat. This lets you attach images and interact with images in chat prompts. For example, if you encounter an error while debugging, attach a screenshot of VS Code, and ask Copilot to help you resolve the issue. You might also use it to attach some UI mockup and let Copilot provide some HTML and CSS to implement the mockup.\n\n![Animation that shows an attached image in a Copilot Chat prompt. Hovering over the image shows a preview of it.](/assets/updates/1_97/image-attachments.gif)\n\nYou can attach images in multiple ways:\n\n- Drag and drop images from your OS or from the Explorer view\n- Paste an image from your clipboard\n- Attach a screenshot of the VS Code window (select the **paperclip 📎 button** &gt; **Screenshot Window**)\n\nA warning is shown if the selected model currently does not have the capability to handle the file type. The only supported model at the moment will be `GPT 4o` , but support for image attachments with `Claude 3.5 Sonnet` and `Gemini 2.0 Flash` will be rolling out soon as well. Currently, the supported image types are `JPEG/JPG` , `PNG` , `GIF` , and `WEBP` .\n\n### Copilot status overview (Experimental)\n\n**Setting**: [chat.experimental.statusIndicator.enabled](vscode://settings/chat.experimental.statusIndicator.enabled)\n\nWe are experimenting with a new centralized Copilot status overview that provides a quick overview of your Copilot status and key editor settings:\n\n- Quota information if you are a [Copilot Free](https://code.visualstudio.com/blogs/2024/12/18/free-github-copilot) user\n- Editor related settings such as Code Completions\n- Useful keyboard shortcuts to use other Copilot features\n\nThis Copilot status overview is accessible via the Copilot icon in the Status Bar.\n\n![Screenshot that shows the Copilot status overview in the Status Bar.](/assets/updates/1_98/copilot-status.png)\n\nEnable the Copilot status overview with the [chat.experimental.statusIndicator.enabled](vscode://settings/chat.experimental.statusIndicator.enabled) setting.\n\n### TypeScript context for inline completions (Experimental)\n\n**Setting**: [chat.languageContext.typescript.enabled](vscode://settings/chat.languageContext.typescript.enabled)\n\nWe are experimenting with enhanced context for inline completions and `/fix` commands for TypeScript files. The experiment is currently scoped to Insider releases and can be enabled with the [chat.languageContext.typescript.enabled](vscode://settings/chat.languageContext.typescript.enabled) setting.\n\n### Custom instructions for pull request title and description\n\nYou can provide custom instructions for generating pull request title and description with the setting [github.copilot.chat.pullRequestDescriptionGeneration.instructions](vscode://settings/github.copilot.chat.pullRequestDescriptionGeneration.instructions). You can point the setting to a file in your workspace, or you can provide instructions inline in your settings. Get more details about using [customizing Copilot in VS Code](https://code.visualstudio.com/docs/copilot/copilot-customization).\n\nThe following sample shows how to provide a custom instruction inline in settings.\n\n``` { \"github.copilot.chat.pullRequestDescriptionGeneration.instructions\": [ { \"text\": \"Prefix every PR title with an emoji.\" } ] }\n\n```\n\nGenerating a title and description requires the GitHub Pull Requests extension to be installed.\n\n## Accessibility\n\n### Copilot Edits accessibility\n\nWe made Copilot Edits much more accessible.\n\n- There are now audio signals for files with modifications and for changed regions (insertions, modifications, and deletions).\n- The accessible diff viewer is now available for modified files. Just like in diff editors, select F7 to enable it.\n\n### `activeEditorState`\nwindow title variable\n\nWe have a new [window.title](vscode://settings/window.title) variable, `activeEditorState` , to indicate editor information such as modified state, the number of problems, and when a file has pending Copilot Edits to screen reader users. When in Screen Reader Optimized mode, this is appended by default and can be disabled with [accessibility.windowTitleOptimized](vscode://settings/accessibility.windowTitleOptimized).\n\n## Workbench\n\n### Custom title bar on Linux\n\nThe custom title bar is now enabled by default on Linux. The custom title bar gives you access to layout controls, the Copilot menu, and more.\n\n![Screenshot that shows the custom VS Code title bar on Linux.](/assets/updates/1_97/custom-title.png)\n\nYou can always revert back to the native title decorations, either from the custom title context menu or by configuring [window.titleBarStyle](vscode://settings/window.titleBarStyle) to `native` .\n\n![Screenshot that shows the content menu option to disable the custom title bar on Linux.](/assets/updates/1_97/restore-title.png)\n\nWe are happy for continued feedback on this experience and are already working on improving this for future milestones based on existing feedback.\n\n### Use labels for Secondary Side Bar views\n\nWe decided to change the appearance of views in the Secondary Side Bar to show labels instead of icons, similar to what we have in the Panel area. This makes it easier to distinguish between different views, for example the **Copilot Edits** and **Copilot Chat** views. You can switch back to showing icons at any time by configuring [workbench.secondarySideBar.showLabels](vscode://settings/workbench.secondarySideBar.showLabels).\n\n![Screenshot that shows Secondary Side Bar with labels instead of icons.](/assets/updates/1_98/aux-sidebar.png)\n\n### New Settings editor key-matching algorithm (Preview)\n\n**Setting**: [workbench.settings.useWeightedKeySearch](vscode://settings/workbench.settings.useWeightedKeySearch)\n\nWe have added a new Settings editor search algorithm that prioritizes more relevant key matches. The search algorithm attempts to match the setting ID and labels in more ways than before, but it also filters down the results more so that only the best match types are shown.\n\nYou can try out the preview feature by enabling the [workbench.settings.useWeightedKeySearch](vscode://settings/workbench.settings.useWeightedKeySearch) setting.\n\n*Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))*\n\n### Option to hide dot files in simple file picker\n\nWhen using the [simple file picker](https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_simple-file-dialog) (either when connected to a remote or when using [files.simpleDialog.enable](vscode://settings/files.simpleDialog.enable), you can now hide dot files by using the **Show/Hide dot files** button.\n\n![Screenshot that shows the simple file picker, highlighting the button to show or hide dot files.](/assets/updates/1_98/hide-dot-file.png)\n\n## Editor\n\n### Peek references drag and drop support\n\nThe [peek](https://code.visualstudio.com/docs/editing/editingevolved#_peek) view now supports drag & drop. Invoke **Peek References**, **Peek Implementation**, or any of the other peek commands, and drag entries from its tree to open them as separate editors.\n\n*Theme: [GitHub Light Colorblind (Beta)](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Light%20Colorblind%20%28Beta%29))*\n\n### Occurrences highlight delay\n\nThe delay for occurrence highlighting within the editor is now set to 0 by default. This results in an overall more responsive editor feel. You can still control the delay with the [editor.occurrencesHighlightDelay](vscode://settings/editor.occurrencesHighlightDelay) setting.\n\n## Source Control\n\n### Updated view titles\n\nWhen we added the **Source Control Graph** view to the Source Control view, it emphasized the duplication of section titles in the Source Control view: \"Source Control Repositories\", \"Source Control\", and \"Source Control Graph\". This milestone we have revisited the titles of the views, so that they are shorter and no longer duplicate the view title: \"Repositories\", \"Changes\", and \"Graph\".\n\n### Discard untracked changes improvements\n\n**Setting**: [git.discardUntrackedChangesToTrash](vscode://settings/git.discardUntrackedChangesToTrash)\n\nOver the years we have received multiple reports about data loss because discarding an untracked file would permanently delete the file, even though VS Code shows a modal dialog making it clear that the file will be deleted permanently.\n\nStarting this milestone, discarding an untracked file will move the file to the Recycle Bin/Trash when possible, so that the file can be easily recovered. You can disable this functionality using the [git.discardUntrackedChangesToTrash](vscode://settings/git.discardUntrackedChangesToTrash) setting.\n\n![Screenshot of the modal dialog shown when discarding an untracked file.](/assets/updates/1_98/scm-move-to-trash.png)\n\n### Diagnostics commit hook (Experimental)\n\n**Settings**:\n\n- [git.diagnosticsCommitHook.Enabled](vscode://settings/git.diagnosticsCommitHook.Enabled)\n- [git.diagnosticsCommitHook.Sources](vscode://settings/git.diagnosticsCommitHook.Sources)\n\nThis milestone, we introduced a new commit hook that prompts you if there are any unresolved diagnostics for the changed files. This is currently an experimental feature that can be enabled using the [git.diagnosticsCommitHook.Enabled](vscode://settings/git.diagnosticsCommitHook.Enabled) setting.\n\nBy default, the commit hook prompts for any error level diagnostics, but the diagnostics sources and levels can be customized using the [git.diagnosticsCommitHook.Sources](vscode://settings/git.diagnosticsCommitHook.Sources) setting. Give it a try and let us know your feedback.\n\n![Screenshot of the modal dialog shown when there are unresolved diagnostics for the changed files.](/assets/updates/1_98/scm-diagnostics-commit-hook.png)\n\n## Notebooks\n\n### Inline notebook diff view (Experimental)\n\n**Setting**: [notebook.diff.experimental.toggleInline](vscode://settings/notebook.diff.experimental.toggleInline)\n\nYou can now enable an inline diff view for notebooks. This feature enables you to view changes within notebook cells in a single inline view, rather than the traditional side-by-side comparison.\n\nEnable this feature by setting [notebook.diff.experimental.toggleInline](vscode://settings/notebook.diff.experimental.toggleInline) to `true` . You can then toggle the diff view to inline using the editor menu in the top right corner.\n\n### Notebook inline values hover\n\nNotebook inline values now have their decoration truncated to fit the width of the viewport and have a rich hover to show the full value, maintaining whitespace formatting. This maintains the shape of variables like dataframes, making values easier to read at a glance.\n\n![Screenshot that shows the cursor hovering above a dataframe object's inline decoration. A rich value hover is shown.](/assets/updates/1_98/nb-inline-values-rich-hover.png)\n\n## Terminal IntelliSense (Preview)\n\n**Setting**: [terminal.integrated.suggest.enabled](vscode://settings/terminal.integrated.suggest.enabled)\n\nWe've significantly improved terminal shell completions across bash, zsh, fish, and PowerShell by adding completion specs (`git` for example), refining command-line parsing for better suggestions, and enhancing file and folder completions. Enable this feature with [terminal.integrated.suggest.enabled](vscode://settings/terminal.integrated.suggest.enabled).\n\n### Enhanced Fig completion support\n\nWe leverage [Fig completion specs](https://github.com/withfig/autocomplete) to power intelligent completions for specific CLIs. We only had a small number of these before, but this iteration we added the following CLIs to the list we ship with VS Code:\n\n- Basic tools: `cat`\n, `chmod` , `chown` , `cp` , `curl` , `df` , `du` , `echo` , `find` , `grep` , `head` , `less` , `ls` , `mkdir` , `more` , `mv` , `pwd` , `rm` , `rmdir` , `tail` , `top` , `touch` , `uname`\n- Process tools: `kill`\n, `killall` , `ps`\n- Package managers: `apt`\n, `brew`\n- Node.js ecosystem: `node`\n, `npm` , `npx` , `nvm` , `pnpm` , `yarn`\n- SCM, languages, editors: `git`\n, `nano` , `python` , `python3` , `vim`\n- Network: `scp`\n, `ssh` , `wget`\n\nIn addition to the new specs, we now also support *generators*, which dynamically generate completions by running commands when they're requested. One example of this in action is presenting all branches for `git checkout` :\n\n![Screenshot that shows completions for &quot;git checkout tyriar/xterm&quot;, showing several results, including fuzzy results that don't match the query exactly.](/assets/updates/1_98/terminal-git-checkout.png) *Theme: [Sapphire](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire) (preview on [vscode.dev](https://vscode.dev/editor/theme/Tyriar.theme-sapphire/Sapphire))*\n\nBehind the scenes, this runs `git --no-optional-locks branch -a --no-color --sort=-committerdate` to get the list of branches before processing them into completions. A similar approach is used to also fetch tags.\n\n### Configurable quick suggestions\n\n**Setting**: [terminal.integrated.suggest.quickSuggestions](vscode://settings/terminal.integrated.suggest.quickSuggestions)\n\nSimilar to the editor, *quick suggestions* are what automatically shows IntelliSense when typing *anything*, as opposed to *trigger characters*, which show when certain characters like `\\` or `-` are used. The new [terminal.integrated.suggest.quickSuggestions](vscode://settings/terminal.integrated.suggest.quickSuggestions) setting allows precise control over when quick suggestions should be presented.\n\nThe default value enables quick suggestions for commands and arguments, and now disabled by default falling back to paths which we heard could get noisy and frustrating as they often weren't applicable. This is the default:\n\n``` \"terminal.integrated.suggest.quickSuggestions\": { \"commands\": \"on\", \"arguments\": \"on\", \"unknown\": \"off\" }\n\n```\n\n### Inline suggestion detection\n\n**Setting**: [terminal.integrated.suggest.inlineSuggestion](vscode://settings/terminal.integrated.suggest.inlineSuggestion)\n\nOne problem inline suggestion detection has had to date, has been confusion introduced by competing with suggestions from different sources. Specifically, the inline suggestion that often appears when typing in shells:\n\n![Screenshot that shows fish shell showing suggestions, such as previous git commit commands when typing a prefix.](/assets/updates/1_98/terminal-fish-autosuggest.png)\n\nThese suggestions are actually shell-level features (auto suggestions in fish/zsh, predictions in pwsh, etc.), which might not be obvious to the user, especially when presented alongside IntelliSense.\n\nThe IntelliSense feature requires that we detect this inline suggestion, which previously used a naive implementation that only checked whether the text was styled with *faint* or *italics* SGR attributes. It turns out that this was insufficient, not only when the user customized the styles, but also fish shell did not use either of these styles by default. We now detect the majority of cases by analyzing the command line context and cursor position.\n\nBuilding upon this new and improved detection, the inline suggestion is now presented as the top option with a star icon to both align closer with how the editor behaves and to make it more clear what `kstyle(Tab)` will do in this case.\n\n![Screenshot that shows when an inline suggestion shows up, it will be detected and put beside a star icon at the top of IntelliSense.](/assets/updates/1_98/terminal-fish-inline-suggest.png)\n\nThe default is to always show this suggestion as the top suggestions, but can be configured with [terminal.integrated.suggest.inlineSuggestion](vscode://settings/terminal.integrated.suggest.inlineSuggestion).\n\n### Detailed command completions\n\nCompletions for bash and zsh built-in commands and PowerShell commands are now more detailed, providing details on available arguments. This information is sourced from the shell's documentation or help commands.\n\nFor bash, `help <command>` is used to get a basic description:\n\n![Screenshot that shows the history completion in bash, showing usage information and description.](/assets/updates/1_98/terminal-bash-builtin-completions.png)\n\nFor zsh, `man zshbuiltins` is used to get a detailed description:\n\n![Screenshot that shows completions in zsh, displaying detailed information from the manpage.](/assets/updates/1_98/terminal-zsh-builtin-completions.png)\n\nFor PowerShell, more properties of `Get-Command` are shown in the completion:\n\n![Screenshot that shows the completion for Get-ChildItem, showing the module Microsoft.PowerShell.Management and its version.](/assets/updates/1_98/terminal-pwsh-module.png)\n\n![Screenshot that shows the completion for ConvertTo-Json, showing the signature of the command.](/assets/updates/1_98/terminal-pwsh-signature.png)\n\n### Improved sorting\n\nCommand completions now feature improved sorting, specifically:\n\n- Completions with more details generally appear above less detailed completions\n- Builtin commands take precedence over paths from `$PATH`\n\n![Screenshot that shows the more useful alias and autoload commands showing before others in zsh.](/assets/updates/1_98/terminal-zsh-order.png)\n\nFor paths, the following improvements were made:\n\n- Paths starting with `_`\nget a penalty as this is often an indicator that they are special and generally shouldn't be changed much (for example, `__init__.py` ).\n- Punctuation is ignored when sorting, so files starting with `.`\nwill be mixed in with others.\n\n![Screenshot that shows init.py will show below other files, while a .build dir will show immediately above a build file.](/assets/updates/1_98/terminal-underscore-punc.png)\n\n### CDPATH support\n\n**Setting**: [terminal.integrated.suggest.cdPath](vscode://settings/terminal.integrated.suggest.cdPath)\n\nThe `$CDPATH` environment variable is a common shell feature that contains a colon-separated list of paths, similar to `$PATH` , and allows navigating to them as if they were relative regardless of the current working directory. Fish actually shows CDPATH entries in `cd` tab completion:\n\n![Screenshot that shows tab completion in fish, displaying entries from CDPATH.](/assets/updates/1_98/terminal-fish-cdpath.png)\n\nWe now support showing `$CDPATH` entries as completions when using `cd` :\n\n![Screenshot that shows CDPATH entries now show up in IntelliSense.](/assets/updates/1_98/terminal-fish-cdpath-completions.png)\n\nThis feature also works on Windows (`;` separators) and doesn't need the shell to natively support the feature, since the default is using the absolute path.\n\n![Screenshot that shows a CDPATH containing 2 paths separated by a semi-colon, including all sub-directories even on PowerShell which does not support CDPATH natively.](/assets/updates/1_98/terminal-cdpath-pwsh.png)\n\nConfigure this with [terminal.integrated.suggest.cdPath](vscode://settings/terminal.integrated.suggest.cdPath).\n\n#### Absolute paths\n\nAbsolute paths are now supported.\n\n![Screenshot that shows &quot;cd c:\\Github\\mi&quot; will show results for all absolute folders matching that term.](/assets/updates/1_98/terminal-absolute-windows.png)\n\n![Screenshot that shows cd to absolute paths also works with Unix-style paths.](/assets/updates/1_98/terminal-absolute-mac.png)\n\n### Alias support\n\nCommand aliases are now also detected for bash, zsh and fish and feature a new distinct icon:\n\n![Screenshot that shows the alias c-&gt;code-insiders will now be detected and show with the command icon with a little arrow in the corner.](/assets/updates/1_98/terminal-alias.png)\n\n### Differentiated options and flags\n\nCLI options (that have a value) and flags (that don't) are now differentiated in the UI via a different icon:\n\n![Screenshot that shows flags like --help will show a flag icon, options like --diff will show a different icon.](/assets/updates/1_98/terminal-flags-options.png)\n\n## Tasks\n\n### Task rerun action\n\nWe have a new **rerun** task action for terminals, ⌃⇧R (Windows, Linux Ctrl+Shift+R). The action appears on the terminal tab's inline toolbar and in the terminal's context menu.\n\n## Debug\n\n### Debug inline values hover\n\nIf the setting [debug.inlineValues](vscode://settings/debug.inlineValues) is enabled, the inline value decorations now have an inline hover, making it easier to read longer values at a glance.\n\n![Screenshot that shows the cursor hovering above a dataframe object's inline decoration in an active debugging session. Rich value hover is shown.](/assets/updates/1_98/debug-inline-values-rich-hover.png)\n\n## Languages\n\n### TypeScript 5.8\n\nVS Code now includes TypeScript 5.8.2. This major update brings new language improvements, including [improved checking of types from conditional expressions](https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/) and [support for write code that confirms to Node's new --experimental-strip-types option](https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/#the---erasablesyntaxonly-option). It also included a number of tooling improvements and bug fixes.\n\nCheck out the [TypeScript 5.8 release blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/) for more details on this update.\n\n## Remote Development\n\nThe [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), allow you to use a [Dev Container](https://code.visualstudio.com/docs/devcontainers/containers), remote machine via SSH or [Remote Tunnels](https://code.visualstudio.com/docs/remote/tunnels), or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.\n\nHighlights include:\n\n- EOL for Linux legacy server\n- Expanded proxy configurability\n\nYou can learn more about these features in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_98.md).\n\n## Enterprise support\n\n### Multi-line support for allowed extensions\n\nYou can now configure allowed extensions in the group policy on Windows using a multi-line string. This allows for more flexible and extensive configuration of allowed extensions. Learn more about [configuring allowed extensions](https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions).\n\n## Contributions to extensions\n\n### Python\n\n#### Automatic quotation insertion when breaking long strings\n\n[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) now supports automatic insertion of quotation marks to enable a seamless experience when breaking long strings.\n\n#### Pylance memory consumption improvements\n\nSome optimizations were made to improve Pylance's memory consumption, particularly when working with large workspaces. [This enhancement](https://github.com/microsoft/pyright/pull/9993) was made to Pyright, the static type checker that powers Pylance's language server features.\n\n#### Improvements to Python shell integration\n\nAfter modifying [python.terminal.shellIntegration.enabled](vscode://settings/python.terminal.shellIntegration.enabled), you will no longer have to reload in order for changes to take effect. Simply create a new terminal to see desired changes on your Python REPL in terminal.\n\n#### Correct workspace prompt for Windows Git Bash\n\nPython users on Windows using Git Bash will now see correct working directory in their terminal prompt. These changes apply to those opted into the `pythonTerminalEnvVarActivation` experiment.\n\n#### New setting for auto test discovery file pattern\n\nYou can now refine which files auto test discovery occurs by specifying a glob pattern in the [python.testing.autoTestDiscoverOnSavePattern](vscode://settings/python.testing.autoTestDiscoverOnSavePattern) setting. Its default value is set to `**/*.py` .\n\n#### Read test debug config from settings.json as fallback\n\nWe now look for test debug configurations in both `settings.json` and `launch.json` files, expanding where you can define these configurations.\n\n### GitHub authentication\n\n#### Improved proxy support with Electron `fetch`\nadoption\n\nThe GitHub Authentication extension now leverages Electron's version of `fetch` in order to make web requests. This has helped users with certain proxy & firewall settings. If you know you run in an environment that has a proxy setup and you are unable to authenticate to GitHub inside of VS Code, don't hesitate to create an issue!\n\n## Extension authoring\n\n### Authentication\n\n>\n> **Important**:\n> We are renaming `AuthenticationForceNewSessionOptions`\n> to `AuthenticationGetSessionPresentationOptions`\n> and leaving a deprecated `AuthenticationForceNewSessionOptions`\n> for now. There is no functional difference, so this is not a breaking change in the runtime, but you should update your code to use `AuthenticationGetSessionPresentationOptions`\n> instead of `AuthenticationForceNewSessionOptions`\n> since it will be removed in the future.\n> >\n\nLooking at these two authentication calls:\n\n``` vscode.authentication.getSession(provider, scopes, { createIfNone: options }); vscode.authentication.getSession(provider, scopes, { forceNewSession: options });\n\n```\n\n`createIfNone` and `forceNewSession` will now take in either a `boolean` or a `AuthenticationGetSessionPresentationOptions` :\n\n``` /**\n* Optional options to be used when calling {@link authentication.getSession} with interactive options `forceNewSession` & `createIfNone`.\n*/ export interface AuthenticationGetSessionPresentationOptions { /**\n* An optional message that will be displayed to the user when we ask to re-authenticate. Providing additional context\n* as to why you are asking a user to re-authenticate can help increase the odds that they will accept.\n*/ detail?: string; }\n\n```\n\n*[full typings can be found here](https://github.com/microsoft/vscode/blob/release/1.98/src/vscode-dts/vscode.d.ts#L17520-L17551)*...\n\nThis is a new addition for `createIfNone` , but it's a modification for `forceNewSession` , which used to take in a `AuthenticationForceNewSessionOptions` that had the same signature as the new `AuthenticationGetSessionPresentationOptions` .\n\nIf you are explicitly using `AuthenticationForceNewSessionOptions` , you will see it is marked as deprecated and you should replace it with `AuthenticationGetSessionPresentationOptions` , as `AuthenticationForceNewSessionOptions` will be removed in a future version.\n\nIt's important to note that the only thing that is changing here are the types. **There is no runtime change, so this is not a breaking change from that perspective.**\n\nAdditionally, the `authLearnMore` [proposed API](https://github.com/microsoft/vscode/blob/release/1.98/src/vscode-dts/vscode.proposed.authLearnMore.d.ts) has been updated from `AuthenticationForceNewSessionOptions` to `AuthenticationGetSessionPresentationOptions` .\n\nHere's an example that leverages `detail` and the `learnMore` proposal:\n\n![Screenshot that shows the authentication modal dialog, featuring a message that says 'To get more relevant Copilot Chat results, we need permission to read the contents of your repository on GitHub.' and a button to learn more.](/assets/updates/1_98/auth-presentation.png)\n\n### Refined Snippet API\n\nYou can now control the whitespace normalization when inserting snippets. This applies to the [`insertSnippet`](https://github.com/microsoft/vscode/blob/c202fb0bcfc7ac863f90756bdf668e801b96901d/src/vscode-dts/vscode.d.ts#L1306)-API and to the [`SnippetTextEdit`](https://github.com/microsoft/vscode/blob/c202fb0bcfc7ac863f90756bdf668e801b96901d/src/vscode-dts/vscode.d.ts#L3753)-API and control if the indentation of additional lines of snippets are adjusted or not.\n\n``` const snippet = `This is an indented snippet`;\n\n// keepWhitespace: false, undefined function indentedFunctionWithSnippet() { return `This is an indented snippet`; // adjusted indentation }\n\n// keepWhitespace: true function indentedFunctionWithSnippet() { return `This is an indented snippet`; // original indentation }\n\n```\n\n## Proposed APIs\n\n### Text Encodings\n\nWe added new proposed API to work with [text encodings](https://github.com/microsoft/vscode/blob/501ee833b16b8e83ba656c46e0888aadd9d2db04/src/vscode-dts/vscode.proposed.textDocumentEncoding.d.ts#L1) in VS Code.\n\nSpecifically, this new API allows to:\n\n- Get the current `encoding`\nof a `TextDocument`\n- Open a `TextDocument`\nwith a specific `encoding`\n- Encode a `string`\nto a `Uint8Array` with a specific `encoding`\n- Decode a `Uint8Array`\nto a `string` using a specific `encoding`\n\nTry it out and let us know what you think [in this GitHub issue](https://github.com/microsoft/vscode/issues/241449).\n\n### Shell environment\n\nExtensions are able to access the user's currently active shell environment information for pwsh, zsh, bash, and fish shell that are opened from the VS Code integrated terminal. This is only available when [terminal.integrated.shellIntegration.enabled](vscode://settings/terminal.integrated.shellIntegration.enabled) is enabled.\n\nThe user can decide whether or not to report their shell environment information with [terminal.integrated.shellIntegration.environmentReporting](vscode://settings/terminal.integrated.shellIntegration.environmentReporting).\n\nGive it a try and let us know what you think [in this GitHub issue](https://github.com/microsoft/vscode/issues/227467).\n\n## Engineering\n\n### Electron 34 update\n\nIn this milestone, we are promoting the Electron 34 update to users on our stable release. This update comes with Chromium 132.0.6834.196 and Node.js 20.18.2. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.\n\n### macOS 10.15 support has ended\n\nVS Code `1.97` is the last release that supports macOS 10.15 (macOS Catalina). Refer to our [FAQ](https://code.visualstudio.com/docs/supporting/faq#_can-i-run-vs-code-on-old-macos-versions) for additional information.\n\n### Dev-time tracking of leaked disposables\n\nVS Code uses the disposable pattern for explicit resource management, for example to close files, clean up DOM elements, or remove event listeners. Not disposing of resources means memory is wasted and memory usage accumulates over time.\n\nWe are constantly on the hunt for such leaks and have added another tool for detecting this. We utilize the [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) API as it informs us when an object has been garbage collected. If such an object represented a `disposable` , which has not been disposed of, this means we have a leak. These are collected and shown to the developers of VS Code, so that we can clean things up as we go.\n\n## Notable fixes\n\n## Thank you\n\nLast but certainly not least, a big ***Thank You*** to the contributors of VS Code.\n\n### Issue tracking\n\nContributions to our issue tracking:\n\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- [@albertosantini (Alberto Santini)](https://github.com/albertosantini)\n- [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n\n### Pull requests\n\nContributions to `vscode` :\n\n- [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Diff selection indicator line should use menu.separatorBackground instead of menu.border [PR #228825](https://github.com/microsoft/vscode/pull/228825)\n- [@bchu1 (Bryan Chu)](https://github.com/bchu1): Fix to header misplacement in minimap [PR #217581](https://github.com/microsoft/vscode/pull/217581)\n- [@cassidoo (Cassidy Williams)](https://github.com/cassidoo): Fix #241903: Add override for GitHub in settingsLayout.ts [PR #241911](https://github.com/microsoft/vscode/pull/241911)\n- [@cdce8p (Marc Mueller)](https://github.com/cdce8p): Add panelTitleBadge color variables [PR #240645](https://github.com/microsoft/vscode/pull/240645)\n- [@cenviity (Vincent Ging Ho Yim)](https://github.com/cenviity): Fix typos in `editorOptions.ts`\n[PR #239929](https://github.com/microsoft/vscode/pull/239929)\n- [@cmbrose (Caleb Brose)](https://github.com/cmbrose): Update chat's `newEditSession`\ncommand to take an input prompt [PR #241796](https://github.com/microsoft/vscode/pull/241796)\n- [@devm33 (Devraj Mehta)](https://github.com/devm33): fix: add electron as an external for webpack [PR #239134](https://github.com/microsoft/vscode/pull/239134)\n- [@dmotte (Motte)](https://github.com/dmotte): Fix behavior of terminal.integrated.confirmOnExit [PR #240074](https://github.com/microsoft/vscode/pull/240074)\n- [@dvangonen (Daniil Vangonen)](https://github.com/dvangonen): Remove unnecessary classes from body [PR #240633](https://github.com/microsoft/vscode/pull/240633)\n- [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): Revert \"[typescript-language-features] Expandable hover (#\\_228255)\" [PR #240011](https://github.com/microsoft/vscode/pull/240011)\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- Supply multiselects to `scm/resourceGroup/context`\nmenu commands (fix #92337) [PR #192172](https://github.com/microsoft/vscode/pull/192172)\n- Add `scmResourceGroupState`\ncontext key (#\\_192009) [PR #194804](https://github.com/microsoft/vscode/pull/194804)\n- SCM - Briefer titles on SCM views [PR #230693](https://github.com/microsoft/vscode/pull/230693)\n- Fix `Show User Keybindings' option on Keyboard Shortcuts editor (fix #240068) [PR #240085](https://github.com/microsoft/vscode/pull/240085)\n- Bad 'OK' capitalization on 'Add Triggered Breakpoint...' (fix #240490) [PR #240492](https://github.com/microsoft/vscode/pull/240492)\n- [@hickford (M Hickford)](https://github.com/hickford): Log provider in \"tunnel user show\" [PR #240692](https://github.com/microsoft/vscode/pull/240692)\n- [@ihavecoke (ihavecoke)](https://github.com/ihavecoke): Clamp tab\\_size setting between 1 and 16 [PR #228957](https://github.com/microsoft/vscode/pull/228957)\n- [@jakebailey (Jake Bailey)](https://github.com/jakebailey): Preserve --disable-extensions in extension host development [PR #240415](https://github.com/microsoft/vscode/pull/240415)\n- [@jamestut (James Nugraha)](https://github.com/jamestut): Compute TextModel limits before initializing the tokenizer [PR #240919](https://github.com/microsoft/vscode/pull/240919)\n- [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n- Fix terminal split view disposable leaked [PR #241597](https://github.com/microsoft/vscode/pull/241597)\n- Fix broken terminal link hover, hides before being able to hover over the contents [PR #241599](https://github.com/microsoft/vscode/pull/241599)\n- Fix timeline view leaks event listeners [PR #241607](https://github.com/microsoft/vscode/pull/241607)\n- [@KexyBiscuit (Kexy Biscuit a.k.a. るる)](https://github.com/KexyBiscuit): Allow detection of powershell-preview snap [PR #240054](https://github.com/microsoft/vscode/pull/240054)\n- [@klaussner (Christian Klaussner)](https://github.com/klaussner): Fix traffic light centering on macOS [PR #212471](https://github.com/microsoft/vscode/pull/212471)\n- [@naman108 (Natha Paquette)](https://github.com/naman108): Typo in storage URI docs [PR #241600](https://github.com/microsoft/vscode/pull/241600)\n- [@nknguyenhc (Nguyen)](https://github.com/nknguyenhc): Extension detail content escapes container [PR #240134](https://github.com/microsoft/vscode/pull/240134)\n- [@notoriousmango (Seong Min Park)](https://github.com/notoriousmango)\n- Make Command Center debug launcher offer most recently used configuration first [PR #240744](https://github.com/microsoft/vscode/pull/240744)\n- Adopt Markdown to use vscode log output channel [PR #241342](https://github.com/microsoft/vscode/pull/241342)\n- [@pouyakary (Pouya Kary ✨)](https://github.com/pouyakary): Feat: Custom Minimap Section Header Marker Detection RegExp ✨ [PR #210271](https://github.com/microsoft/vscode/pull/210271)\n- [@rgrunber (Roland Grunberg)](https://github.com/rgrunber): Expose adjustWhitespace to TextEditor API. [PR #234858](https://github.com/microsoft/vscode/pull/234858)\n- [@silamon (Simon Lamon)](https://github.com/silamon): Diff editor: Correct `1 files`\nto `1 file` [PR #240092](https://github.com/microsoft/vscode/pull/240092)\n- [@simon-id (simon-id)](https://github.com/simon-id): fix: workbench search use correct findMatch colors (fix #237909) [PR #237910](https://github.com/microsoft/vscode/pull/237910)\n- [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): fix: memory leak in settings indicators [PR #236417](https://github.com/microsoft/vscode/pull/236417)\n- [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart): Fix unexpected tab completion when attempting to indent [PR #136572](https://github.com/microsoft/vscode/pull/136572)\n- [@SunsetTechuila (Grigory)](https://github.com/SunsetTechuila): feat(commands): add `insertFinalNewLine`\n[PR #241126](https://github.com/microsoft/vscode/pull/241126)\n- [@tcvdh (Thijs van den Heuvel)](https://github.com/tcvdh): Fix: Wait for clear command to execute before reusing terminal [PR #240970](https://github.com/microsoft/vscode/pull/240970)\n- [@terrymun (Terry Mun-Andersen)](https://github.com/terrymun): fix: remove extraneous backtick in CONTRIBUTING.md [PR #240305](https://github.com/microsoft/vscode/pull/240305)\n- [@tmm1 (Aman Karmani)](https://github.com/tmm1): tsb: fix for deleted and re-added source file not being re-generated [PR #238409](https://github.com/microsoft/vscode/pull/238409)\n- [@xymopen (xymopen_Official)](https://github.com/xymopen)\n- Add node as npm script runner [PR #236967](https://github.com/microsoft/vscode/pull/236967)\n- Add node as npm script runner (2nd) [PR #240527](https://github.com/microsoft/vscode/pull/240527)\n- [@zardoy (Vitaly)](https://github.com/zardoy): [Git] Migrate to git autostash when pulling for better performance [PR #187850](https://github.com/microsoft/vscode/pull/187850)\n\nContributions to `vscode-css-languageservice` :\n\n- [@GauravB159 (Gaurav Bhagchandani)](https://github.com/GauravB159): lab() and lch() color previews added [PR #306](https://github.com/microsoft/vscode-css-languageservice/pull/306)\n\nContributions to `vscode-eslint` :\n\n- [@edemaine (Erik Demaine)](https://github.com/edemaine): Probing support for Civet [PR #1965](https://github.com/microsoft/vscode-eslint/pull/1965)\n- [@mustevenplay (mustevenplay)](https://github.com/mustevenplay): Add Typescript configuration files detection [PR #1968](https://github.com/microsoft/vscode-eslint/pull/1968)\n\nContributions to `vscode-hexeditor` :\n\n- [@tomilho (Tomás Silva)](https://github.com/tomilho): Moved Hex Compare Selected below Compare Selected [PR #561](https://github.com/microsoft/vscode-hexeditor/pull/561)\n\nContributions to `vscode-jupyter` :\n\n- [@thesuperzapper (Mathew Wicks)](https://github.com/thesuperzapper): Fix reading `JUPYTER_RUNTIME_DIR`\nand `XDG_RUNTIME_DIR` [PR #16451](https://github.com/microsoft/vscode-jupyter/pull/16451)\n\nContributions to `vscode-languageserver-node` :\n\n- [@MariaSolOs (Maria José Solano)](https://github.com/MariaSolOs)\n- Add capability information to the metamodel [PR #1591](https://github.com/microsoft/vscode-languageserver-node/pull/1591)\n- Fix text document didOpen/didClose server capabilities [PR #1615](https://github.com/microsoft/vscode-languageserver-node/pull/1615)\n- Fix capabilities for range formatting requests [PR #1617](https://github.com/microsoft/vscode-languageserver-node/pull/1617)\n- [@mciccale (Marco Ciccalè Baztán)](https://github.com/mciccale): minor typo semaphore.ts [PR #1618](https://github.com/microsoft/vscode-languageserver-node/pull/1618)\n- [@yf-yang](https://github.com/yf-yang): fix: avoid dispose unmatched handlers [PR #1614](https://github.com/microsoft/vscode-languageserver-node/pull/1614)\n\nContributions to `vscode-mypy` :\n\n- [@DetachHead](https://github.com/DetachHead)\n- use correct capitalization of file paths to work around mypy issue [PR #342](https://github.com/microsoft/vscode-mypy/pull/342)\n- update capitalization of cwd to match file path [PR #344](https://github.com/microsoft/vscode-mypy/pull/344)\n- [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal): fix: usage of `node12 which is deprecated`\nin CI [PR #336](https://github.com/microsoft/vscode-mypy/pull/336)\n- [@ivirabyan (Ivan Virabyan)](https://github.com/ivirabyan): Add dmypy status file setting [PR #347](https://github.com/microsoft/vscode-mypy/pull/347)\n\nContributions to `vscode-pull-request-github` :\n\n- [@christianvuerings (Christian Vuerings)](https://github.com/christianvuerings): Fix Copy GitHub Permalink with custom SSH [PR #6669](https://github.com/microsoft/vscode-pull-request-github/pull/6669)\n\nContributions to `vscode-python-debugger` :\n\n- [@TCPsoftware (tcpsoft)](https://github.com/TCPsoftware): Make \"args\": \"${command:pickArgs}\" as default debug configuration [PR #548](https://github.com/microsoft/vscode-python-debugger/pull/548)\n\nContributions to `vscode-vsce` :\n\n- [@mohankumarelec (mohanram)](https://github.com/mohankumarelec): Updated the semver comparison [PR #1078](https://github.com/microsoft/vscode-vsce/pull/1078)\n- [@stevedlawrence (Steve Lawrence)](https://github.com/stevedlawrence): Allow for reproducible .vsix packages [PR #1100](https://github.com/microsoft/vscode-vsce/pull/1100)\n\nContributions to `debug-adapter-protocol` :\n\n- [@angelozerr (Angelo)](https://github.com/angelozerr): Add IntelliJ / LSP4IJ DAP support [PR #529](https://github.com/microsoft/debug-adapter-protocol/pull/529)\n- [@samisalreadytaken](https://github.com/samisalreadytaken): Add Squirrel Debugger to adapters.md [PR #530](https://github.com/microsoft/debug-adapter-protocol/pull/530)\n- [@SpartanJ (Martín Lucas Golini)](https://github.com/SpartanJ): Update tools.md adding a new DAP client: ecode [PR #526](https://github.com/microsoft/debug-adapter-protocol/pull/526)\n- [@sssooonnnggg (Song)](https://github.com/sssooonnnggg): chore: add luau debugger [PR #516](https://github.com/microsoft/debug-adapter-protocol/pull/516)\n- [@theIDinside (Simon Farre)](https://github.com/theIDinside): Add Midas to Debug Adapter list, w/ VSCode [PR #528](https://github.com/microsoft/debug-adapter-protocol/pull/528)\n\nContributions to `language-server-protocol` :\n\n- [@ind1go (Ben Cox)](https://github.com/ind1go): Typo in workspace diagnostics [PR #2086](https://github.com/microsoft/language-server-protocol/pull/2086)\n- [@MariaSolOs (Maria José Solano)](https://github.com/MariaSolOs)\n- Add capability information to metamodel [PR #2096](https://github.com/microsoft/language-server-protocol/pull/2096)\n- Update metamodel [PR #2104](https://github.com/microsoft/language-server-protocol/pull/2104)\n- [@MuntasirSZN (Muntasir Mahmud)](https://github.com/MuntasirSZN): feat: copilot language server in server list [PR #2107](https://github.com/microsoft/language-server-protocol/pull/2107)\n- [@Szasza (Szasza Palmer)](https://github.com/Szasza): adding Wing language server to server list [PR #2101](https://github.com/microsoft/language-server-protocol/pull/2101)\n- [@the-mikedavis (Michael Davis)](https://github.com/the-mikedavis): Clarify that `$0`\nshould not use any other snippet syntax [PR #2087](https://github.com/microsoft/language-server-protocol/pull/2087)\n- [@yassun7010 (yassun7010)](https://github.com/yassun7010): add Tombi to LSP list. [PR #2089](https://github.com/microsoft/language-server-protocol/pull/2089)\n\nContributions to `python-environment-tools` :\n\n- [@pantheraleo-7](https://github.com/pantheraleo-7): Add support for detecting `$VIRTUAL_ENV`\n[PR #181](https://github.com/microsoft/python-environment-tools/pull/181)",
  "Tags": [
    "release"
  ],
  "Description": "Learn what is new in the Visual Studio Code February 2025 Release (1.98)\n\n[Read the full article](https://code.visualstudio.com/updates/v1_98)",
  "OutputDir": "_news",
  "FeedName": "Visual Studio Code Releases",
  "Author": "Visual Studio Code Team"
}
