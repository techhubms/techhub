{
  "Title": "September 2025 (version 1.105)",
  "EnhancedContent": "Join a [VS Code Dev Days event](/dev-days) near you to learn about AI-assisted development in VS Code.\n\nDismiss this update\n\n[Edit](https://vscode.dev/github/microsoft/vscode-docs/blob/main/release-notes/v1_105.md)\n\n# September 2025 (version 1.105)\n\n*Release date: October 9, 2025*\n\nDownloads: Windows: [x64](https://update.code.visualstudio.com/1.105.0/win32-x64-user/stable) [Arm64](https://update.code.visualstudio.com/1.105.0/win32-arm64-user/stable) | Mac: [Universal](https://update.code.visualstudio.com/1.105.0/darwin-universal/stable) [Intel](https://update.code.visualstudio.com/1.105.0/darwin/stable) [silicon](https://update.code.visualstudio.com/1.105.0/darwin-arm64/stable) | Linux: [deb](https://update.code.visualstudio.com/1.105.0/linux-deb-x64/stable) [rpm](https://update.code.visualstudio.com/1.105.0/linux-rpm-x64/stable) [tarball](https://update.code.visualstudio.com/1.105.0/linux-x64/stable) [Arm](https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions) [snap](https://update.code.visualstudio.com/1.105.0/linux-snap-x64/stable)\n\nWelcome to the September 2025 release of Visual Studio Code. There are many updates in this version that we hope you'll like, some of the key highlights include:\n\n- **OS integration**\n\n- Get notified about task completion and chat responses (Show more)\n- Native authentication experience on macOS (Show more)\n- **Developer productivity**\n\n- Resolve merge conflicts with AI assistance (Show more)\n- Pick up where you left off with the recent chats (Show more)\n- **Agent tools**\n\n- Install MCP servers from the MCP marketplace (Show more)\n- Use fully-qualified tool names to avoid conflicts (Show more)\n\n>\n> If you'd like to read these release notes online, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> > >\n\n>\n> **Insiders: Want to try new features as soon as possible?**\n>\n> You can download the nightly Insiders build and try the latest updates as soon as they are available.\n>\n> [Download Insiders](https://code.visualstudio.com/insiders)\n> > >\n\n## Chat\n\n### Fully qualified tool names\n\nPrompt files and custom chat modes enable you to specify which tools can be used. To avoid naming conflicts between built-in tools and tools provided by MCP servers or extensions, we now support fully qualified tool names for prompt files and chat modes. This also helps with discovering missing extensions or MCP servers.\n\nTool names are now qualified by the MCP server, extension, or tool set they are part of. For example, instead of `codebase` , you would use `search/codebase` or `list_issues` would be `github/github-mcp-server/list_issues` .\n\nYou can still use the previous notation, however a code action helps you migrate to the new names.\n\n![Screenshot of a prompt file showing a Code Action to update an unqualified tool name.](/assets/updates/1_105/qualified_tool_names.png)\n\n### Improved edit tools for custom models\n\n**Setting**: [github.copilot.chat.customOAIModels](vscode://settings/github.copilot.chat.customOAIModels)\n\nWe improved the set of edit tools for [Bring Your Own Key (BYOK)](https://code.visualstudio.com/docs/copilot/customization/language-models#_bring-your-own-language-model-key) custom models to better integrate with VS Code built-in tools. In addition, we enhanced our default tools and added a 'learning' mechanism to select the optimal tool set for custom models.\n\nIf you're [using OpenAI-compatible models](https://code.visualstudio.com/docs/copilot/customization/language-models#_use-an-openaicompatible-model), you can also explicitly configure the list of edit tools with the [github.copilot.chat.customOAIModels](vscode://settings/github.copilot.chat.customOAIModels) setting.\n\n### Support for nested AGENTS.md files (Experimental)\n\n**Setting**: [chat.useNestedAgentsMdFiles](vscode://settings/chat.useNestedAgentsMdFiles)\n\nLast milestone, we introduced support for `AGENTS.md` at the root of your workspace. This functionality is now generally available and enabled by default.\n\nWe now also added support for nested `AGENTS.md` files in subfolders of your workspace. This enables you to provide more specific context and instructions for different parts of your codebase. For example, you might have different instructions for frontend and backend code. This functionality is currently experimental and can be enabled with the [chat.useNestedAgentsMdFiles](vscode://settings/chat.useNestedAgentsMdFiles) setting.\n\nLearn more about [customizing chat in VS Code](https://code.visualstudio.com/docs/copilot/customization/overview) to your practices and team workflows.\n\n### Chat user experience improvements\n\n#### OS notifications for chat responses\n\n**Setting**: [chat.notifyWindowOnResponseReceived](vscode://settings/chat.notifyWindowOnResponseReceived)\n\nIn VS Code 1.103, we introduced OS notifications for chat sessions that required a user confirmation when the VS Code window was not focused. In this release, we are expanding this functionality to show an OS badge and notification toast when a chat response is received. The notification includes a preview of the response, and selecting it brings focus to the chat input.\n\n![Screenshot showing an OS notification while the VS Code window is unfocused.](/assets/updates/1_105/chat-notification.png)\n\nYou can control the notification behavior with the [chat.notifyWindowOnResponseReceived](vscode://settings/chat.notifyWindowOnResponseReceived) setting.\n\n#### Chain of thought (Experimental)\n\n**Setting**: [chat.agent.thinkingStyle](vscode://settings/chat.agent.thinkingStyle)\n\nChain of thought shows the model’s reasoning as it responds, which can be great for debugging or understanding suggestions the model provides. With the introduction of GPT-5-Codex, thinking tokens are now shown in chat as expandable sections in the response.\n\n![Screenshot of a chat response showing thinking tokens as expandable sections in the response.](/assets/updates/1_105/chat-thinking-tokens.png)\n\nYou can configure how to display or hide chain of thought with the [chat.agent.thinkingStyle](vscode://settings/chat.agent.thinkingStyle) setting. Thinking tokens will soon be available in more models as well!\n\n#### Show recent chat sessions (Experimental)\n\n**Setting**: [chat.emptyState.history.enabled](vscode://settings/chat.emptyState.history.enabled)\n\nLast milestone, we introduced [prompt file suggestions](https://code.visualstudio.com/updates/v1_104#_configure-prompt-file-suggestions-experimental) to help you get started when creating a new chat session (⌘N (Windows, Linux Ctrl+N)). In this release, we are building on that by showing your recent local chat conversations. This helps you quickly pick up where you left off or revisit past conversations.\n\n![Screenshot of the Chat view showing recent local chat conversations when there are no active chat sessions.](/assets/updates/1_105/chat-history-on-empty.png)\n\nBy default, this functionality is off, but you can enable it with the [chat.emptyState.history.enabled](vscode://settings/chat.emptyState.history.enabled) setting.\n\n#### Keep or undo changes during an agent loop\n\nPreviously, when an agent was still processing your chat request, you could not keep or undo file edits until the agent finished. Now, you can keep or undo changes to files while an edit loop is happening. This enables you to have more control, especially for long-running tasks.\n\n#### Keyboard shortcuts for navigating user chat messages\n\nTo quickly navigate through your previous chat prompts in the chat session, we added keyboard shortcuts for navigating up and down through your chat messages:\n\n- Navigate previous: ⌥⌘↑ (Windows, Linux Ctrl+Alt+Up)\n- Navigate next: ⌥⌘↓ (Windows, Linux Ctrl+Alt+Down)\n\n### Agent sessions\n\nThis milestone, we made several improvements to the Chat Sessions view and the experience of delegating tasks to remote coding agents:\n\n#### Chat Sessions view enhancements\n\n**Setting**: [chat.agentSessionsViewLocation](vscode://settings/chat.agentSessionsViewLocation)\n\nThe [Chat Sessions view](https://code.visualstudio.com/docs/copilot/copilot-coding-agent#_manage-sessions-with-dedicated-chat-editor-experimental) provides a centralized location for managing both local chat conversations and remote coding agent sessions. This view enables you to work with multiple AI sessions simultaneously, track their progress, and manage long-running tasks efficiently.\n\nIn this release, we made several UI refinements and performance improvements to enhance the Chat Sessions experience.\n\n- The Chat Sessions view continues to support features like Status Bar tracking for monitoring multiple coding agents, context menus for session management, and rich descriptions to provide detailed context for each session.\n- Quickly initiate a new session by using the \"+\" button in the view header.\n\n![Screenshot of the Chat Sessions view with a new session open via the + button.](/assets/updates/1_105/chat-sessions.png)\n\n### Delegating to remote coding agents\n\nA typical scenario for working with remote coding agents is to first discuss and plan a task in a local chat session, where you have access to the full context of your codebase, and then delegate the implementation work to a remote coding agent. The remote agent can then work on the task in the background and create a pull request with the solution.\n\nIf you're working in a repository that has [Copilot coding agent enabled](https://aka.ms/coding-agent-docs), the **Delegate to coding agent** button in the Chat view now appears by default.\n\n![Screenshot of the Chat view with the Delegate to coding agent button highlighted.](/assets/updates/1_105/delegate-button.png)\n\nWhen you use the delegate action, all context from your chat conversation, including file references, is forwarded to the coding agent. If your conversation exceeds the coding agent's context window, VS Code automatically summarizes and condenses the information to fit the window.\n\n### Chat terminal profiles\n\nWe added platform-specific settings [chat.tools.terminal.terminalProfile.windows](vscode://settings/chat.tools.terminal.terminalProfile.windows), [chat.tools.terminal.terminalProfile.osx](vscode://settings/chat.tools.terminal.terminalProfile.osx) and [chat.tools.terminal.terminalProfile.linux](vscode://settings/chat.tools.terminal.terminalProfile.linux) for configuring the shell that is launched by the run-in-terminal tool.\n\nHaving a chat-specific shell is useful to simplify or remove interactive elements from your regular shell setup and make it easier for the agent to use. At the same time, it keeps your regular environment and shell launch scripts unchanged.\n\n``` \"chat.tools.terminal.terminalProfile.osx\": { \"path\": \"bash\", // bash instead of zsh \"args\": [], // non-login instead of login on macOS \"env\": { \"COPILOT\": \"1\" // environment variable that can be used in init scripts } }\n\n```\n\n### Terminal commands\n\n#### Auto-reply to terminal prompts (Experimental)\n\n**Setting**: [chat.tools.terminal.autoReplyToPrompts](vscode://settings/chat.tools.terminal.autoReplyToPrompts)\n\nWe introduced an opt-in setting, [chat.tools.terminal.autoReplyToPrompts](vscode://settings/chat.tools.terminal.autoReplyToPrompts), which enables the agent to respond to prompts for input in the terminal automatically, like `Confirm? y/n` .\n\n#### Terminal free-form input request detection\n\nWhen the terminal requires free-form input, we now display a confirmation prompt. This lets you stay focused on your current work and only shift attention when input is needed.\n\n### Sign in with Apple accounts\n\nIn addition to signing in with a GitHub or Google account, you can now also sign in or set up a GitHub Copilot account by using an Apple account. This functionality will be rolling out to VS Code users.\n\n![Screenshot showing the sign in dialog showing the option to use an Apple account.](/assets/updates/1_105/apple-sign-in.png)\n\nYou can find more information about this in the announcement [GitHub blog post](https://github.blog/changelog/2025-10-07-github-now-supports-social-login-with-apple/).\n\n### Model availability\n\nThis milestone, we added support for the following models in chat. The available models depend on your Copilot plan and configuration.\n\n- **GPT-5-Codex**, OpenAI’s GPT-5 model, optimized for agentic coding.\n- **Claude Sonnet 4.5**, Anthropic’s most advanced model for coding and real-world agents.\n\nYou can choose between different models with the model picker in chat. Learn more about [language models in VS Code](https://code.visualstudio.com/docs/copilot/customization/language-models).\n\n## MCP\n\n### MCP marketplace (Preview)\n\n**Setting**: [chat.mcp.gallery.enabled](vscode://settings/chat.mcp.gallery.enabled)\n\nVS Code now includes a built-in MCP marketplace that enables users to browse and install MCP servers directly from the Extensions view. This is powered by the [GitHub MCP registry](https://github.com/mcp) and provides a seamless experience for discovering and managing MCP servers directly within the editor.\n\n>\n> **Note**: This feature is currently in preview. Not all features are available yet and the experience might still have some rough edges.\n> >\n\nThe MCP marketplace is disabled by default. When no MCP servers are installed, you see a welcome view in the Extensions view that provides easy access to enable the marketplace. You can also enable the MCP marketplace manually by using the [chat.mcp.gallery.enabled](vscode://settings/chat.mcp.gallery.enabled) setting.\n\n![Screenshot showing the MCP Servers welcome view with text describing how to browse and install Model Context Protocol servers, and an &quot;Enable MCP Servers Marketplace&quot; button.](/assets/updates/1_105/mcp-servers-welcome.png)\n\nTo browse the MCP servers from the Extensions view:\n\n- Use the `@mcp`\nfilter in the Extensions view search box\n- Select **MCP Servers** from the filter dropdown in the Extensions view\n- Search for specific MCP servers by name\n\n![Screenshot showing the GitHub MCP server details from the MCP server marketplace inside VS Code.](/assets/updates/1_105/mcp-server-editor.png)\n\n### Autostart MCP servers\n\n**Setting**: [chat.mcp.autostart](vscode://settings/chat.mcp.autostart)\n\nIn this release, new or outdated MCP servers are now started automatically when you send a chat message. VS Code also avoids triggering interactions such as dialogs when autostarting a server, and instead adds an indicator in chat to let you know that a server needs attention.\n\n![Screenshot of the Chat view, showing a notification message that the GitHub MCP requires restarting.](/assets/updates/1_105/mcp_autostart_prompt.png)\n\nWith MCP autostart on by default, we no longer eagerly activate extensions and instead only activate MCP-providing extensions when the first chat message is sent.\n\nFor extension developers, we also added support for the `when` clause on the `mcpServerDefinitionProviders` contribution point, so you can avoid activation when it's not relevant.\n\n### Improved representation of MCP resources returned from tools\n\nPreviously, our implementation of tool results that contain resources left it up to the model to retrieve those resources, without clear instructions on how to do so. In this version of VS Code, by default, we include a preview of the resource content and add instructions to retrieve the complete contents. This should lead to better model performance when using such tools.\n\n### MCP specification updates\n\nThis milestone, we adopted the following updates to the MCP specification:\n\n- [SEP-973](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/955), which lets MCP servers specify `icons`\nto associate with their data. This can be used to give a custom icon to servers, resources, and tools.\n\n![Screenshot of the tools picker, showing one of the MCP servers in the list with a custom icon.](/assets/updates/1_105/mcp_icons.png)\n\nHTTP MCP servers must provide icons from the same authority that the MCP server itself is listening on, while stdio servers are allowed to reference `file:///` URIs on disk.\n- [SEP-1034](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/1035), which lets MCP servers provide `default`\nvalues when using elicitation.\n\n## Accessibility\n\n### Shell integration for pwsh on Windows support for screen readers\n\nPSReadLine has historically been disabled when a screen reader is detected to avoid overwhelming users with excessive auditory feedback. Since our terminal's shell integration relies on PSReadLine support, we now activate a streamlined version of PSReadLine in screen reader mode. This ensures shell integration and its features work for screen reader users.\n\n### Chat improvements\n\n**Setting**: [accessibility.verboseChatProgressUpdates](vscode://settings/accessibility.verboseChatProgressUpdates)\n\nA new setting, [accessibility.verboseChatProgressUpdates](vscode://settings/accessibility.verboseChatProgressUpdates), enables more detailed announcements for screen reader users about chat activity.\n\nFrom the chat input, users can focus the last focused chat response item ⇧⌘↓ (Windows, Linux Ctrl+Shift+Down).\n\n### Accessible view persistence\n\nWhen switching between VS Code and other windows, we now maintain the user's position in the Accessible view for a seamless workflow.\n\n## Editor Experience\n\n### Override default shortcuts for Quick Input\n\nThe Quick Input controls, like the ones used in the Command Palette (Quick Pick, Input Box), used to hard-code keyboard shortcuts for navigation, such as moving up or down the list, accepting (Enter), and a few other interactions.\n\nThese actions are now moved to commands, which enables you to override their keyboard shortcuts. For example, if you want Tab to be used to accept something in the Quick Pick, this is now possible. To see all keyboard shortcuts that you can override, open the Keyboard Shortcuts editor `(kb(workbench.action.openGlobalKeybindings))` and search for `quickInput.`\n\n### Disallow whitespace-only next edit suggestions\n\n**Setting**: [github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges](vscode://settings/github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges)\n\nIt is now possible to disallow next edit suggestions (NES) to propose whitespace-only changes such as code formatting.\n\n## Source Control\n\n### Resolve merge conflicts with AI\n\nWhen opening a file with git merge conflict markers, you are now able to resolve merge conflicts with AI. We added a new action in the lower right-hand corner of the editor. Selecting this new action opens the Chat view and starts an agentic flow with the merge base and changes from each branch as context.\n\n![Screenshot of the proposed merge conflict resolution in the editor.](/assets/updates/1_105/merge-conflict-resolution.png)\n\nYou can review the proposed merge conflict resolution in the editor and follow up with additional context if needed. You can customize the merge conflict resolution by using an `AGENTS.md` file.\n\n### Add file commit to chat context\n\nA couple of milestones ago, we added the capability to view the files in each history item shown in the Source Control Graph view. You can now add a file from a history item as context to a chat request. This can be useful when you want to provide the contents of a specific version of a file as context to your chat prompt.\n\nTo add a file from a past commit to chat, select a commit to view the list of files, right-click on a particular file, and then select **Add to Chat** from the context menu.\n\n![Screenshot of the Source Control Graph view showing the context menu for a file in a history item with the Add to Chat option highlighted.](/assets/updates/1_105/add-history-item-to-chat.png)\n\n## Testing\n\n### Run tests with code coverage\n\nIf you have a testing extension installed for your code, the `runTests` tool in chat enables the agent to run tests in your codebase by using the [VS Code testing integration](https://code.visualstudio.com/docs/debugtest/testing) rather than running them from the command line.\n\nIn this release, the `runTests` tool now also reports test code coverage to the agent. This enables the agent to generate and verify tests that cover the entirety of your code.\n\n### Swap test result column\n\nYou can change the side on which the result tree is displayed in the Test Results view by using the new swap ↔️ button in the view's title menu.\n\n![Screenshot of the Test Results view with the swap button highlighted.](/assets/updates/1_105/swap-test-result-column.png)\n\n## Tasks\n\n### OS notification for long-running task completion\n\n**Setting**: [task.notifyWindowOnTaskCompletion](vscode://settings/task.notifyWindowOnTaskCompletion)\n\nWhen a user-initiated, long-running task completes while the VS Code window is not focused, an OS badge and notification toast are shown. Selecting the notification focuses the window where the task completed. You can configure this behavior with the [task.notifyWindowOnTaskCompletion](vscode://settings/task.notifyWindowOnTaskCompletion) setting.\n\n![Screenshot of an OS notification that shows a task completion message saying Task &quot;build&quot; completed in 1 minute 21 seconds.](/assets/updates/1_105/task-notification.png)\n\n### Task terminal title persistence\n\n**Setting**: [terminal.integrated.tabs.title](vscode://settings/terminal.integrated.tabs.title)\n\nYou can configure the title of terminal tabs with the [terminal.integrated.tabs.title](vscode://settings/terminal.integrated.tabs.title) setting. By default, the value is `${process}` , which shows the name of the process running in the terminal.\n\nFor tasks, this means that the terminal title might change when the task starts a different process, which can be confusing. To address this, we now persist the task's name as the terminal title when a task is started.\n\n## Terminal\n\n### Start dictation exposed\n\nWe added the **Start dictation** action to the terminal overflow menu. This action enables you to use voice dictation to input text into the terminal. A corresponding **Stop dictation** action appears when relevant.\n\n![Screenshot of the terminal overflow menu with a Start Dictation option.](/assets/updates/1_105/start-dictation-terminal.png)\n\n## Authentication\n\n### macOS native broker support for Microsoft Authentication\n\n**Setting**: [microsoft-authentication.implementation](vscode://settings/microsoft-authentication.implementation)\n\nThis milestone, we adopted the latest MSAL libraries and with that you are now able to sign in through a native experience on macOS (in addition to Windows):\n\n![Screenshot of a native broker dialog window asking to sign into VS Code.](/assets/updates/1_105/macOS-auth-broker.png)\n\nNative broker authentication is only available for:\n\n- M-series (also known as ARM) macOS devices\n- macOS machines that are Intune-enrolled with the policy to go through the broker\n\nThis enables nice single sign-on flows and is the recommended way of acquiring a Microsoft authentication session. The MSAL team will enable this up for the remaining platforms (Linux, Windows ARM, macOS Intel/x64) over time, so stay tuned!\n\n>\n> NOTE: If you have trouble authenticating via the broker, you can change the [microsoft-authentication.implementation](vscode://settings/microsoft-authentication.implementation) to `msal-no-broker`\n> , which will use your browser to authenticate instead.\n> >\n\n### PKCE support for GitHub Authentication\n\n[GitHub recently enabled](https://github.blog/changelog/2025-07-14-pkce-support-for-oauth-and-github-app-authentication/) PKCE ([Proof Key for Code Exchange](https://www.rfc-editor.org/rfc/rfc7636)) support in their authentication flows. We have adopted this in the flow that VS Code uses to authenticate to GitHub.\n\n## Languages\n\n### Python\n\n#### Copy test ID action\n\nThe run gutter icon context menu now includes a **Copy Test Id** command to copy the fully qualified pytest or unittest test identifier.\n\n## Contributions to extensions\n\n### GitHub Pull Requests\n\nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. New features include:\n\n- The `#openPullRequest`\ntool recognizes open PR diffs and PR files as being the \"open pull request\".\n- The setting [githubIssues.issueAvatarDisplay](vscode://settings/githubIssues.issueAvatarDisplay) can be used to control whether the first assignee's avatar or the author's avatar is shown in the Issues view.\n- Instead of always running the pull request queries that back the Pull Requests view when refreshing, we now check to see if there are new PRs in the repo before running the queries. This should reduce API usage when there are no new PRs.\n\nReview the [changelog for the 0.120.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#01200) release of the extension to learn about everything in the release.\n\n## Extension Authoring\n\n### Microsoft Authentication now supports WWW-Authenticate claims challenges\n\n[Azure is now enforcing](https://learn.microsoft.com/entra/identity/authentication/concept-mandatory-multifactor-authentication) that all create/delete operations to Azure resources must be done using authenticated sessions that used MFA to sign in. While some organizations require MFA for any authentication reason, some organizations do not enforce this, and those are affected by this MFA enforcement.\n\nIf you have an extension that uses Microsoft Authentication and talks to ARM, you need to handle the case when the ARM API call returns a `401 Unauthorized` with a `WWW-Authenticate` header like so:\n\n``` Bearer realm=\"\", authorization_uri=\"https://login.microsoftonline.com/common/oauth2/authorize\", error=\"insufficient_claims\", claims=\"SOME VALUE HERE\"\n\n```\n\nThe good news is that we have introduced a finalized API that you can use to handle this status code:\n\n``` const wwwAuthenticateFromRequest = headers['WWW-Authenticate']; // the string above vscode.authentication.getSession( 'microsoft', { wwwAuthenticate: wwwAuthenticateFromRequest, fallbackScopes: scopesFromOriginalRequest }, { createIfNone: true } );\n\n```\n\nAll you have to do is pass in, verbatim, that `WWW-Authenticate` value along with the scopes that you originally asked for (most likely the ARM scope), and the Microsoft Authentication Provider handles the rest and makes sure the user goes through MFA.\n\nWe have worked with the Azure Tools team, who owns the Azure Resources extension, to adopt this new API. If you are using that extension or something that uses that extension, this enforcement should be handled. If you experience problems, open an issue on the [Azure Resources extension](https://github.com/microsoft/vscode-azureresourcegroups).\n\n>\n> NOTE: Looking to support `WWW-Authenticate`\n> challenges in *your* `AuthenticationProvider`\n> ? Provide your thoughts on the proposed API in issue [#267992](https://github.com/microsoft/vscode/issues/267992).\n> >\n\n### Prompt and instructions file contributions\n\nExtensions can now contribute prompt and instructions files.\n\n``` \"contributes\": { \"chatPromptFiles\": [ { \"name\": \"ReviewAndCreateIssue\", \"description\": \"Review the selected code and create an issue\", \"path\": \"./prompts/reviewAndCreateIssue.prompt.md\" } ], \"chatInstructions\": [ { \"name\": \"TextMateGuidelines\", \"description\": \"Use these instructions when creating or modifying TextMate grammars\", \"path\": \"./prompts/textMateGuidelines.instructions.md\" } ] }\n\n```\n\nChat mode contributions (`chatModes` ) are currently behind a proposed API flag.\n\n### List keys in SecretStorage\n\nThis iteration, we have finalized the API to list all keys that your extension has stored in Secret Storage. This can be found in the `context.secrets` object:\n\n``` export function activate(context: ExtensionContext) { const keys: string[] = await context.secrets.keys();\n\nconst value = await context.secrets.get(keys[0]); // a value that exists }\n\n```\n\nOne example where this can be used is on `deactivate` , where you might want to delete all secret storage data.\n\n## Engineering\n\n### Playwright VS Code MCP server\n\nWe further explored using an MCP server that can control a local build of VS Code to help in the development loop for VS Code. While we had mixed results on model comprehension for parsing screenshots, orchestration for subagents using the `#executePrompt` tool (which can be enabled with [github.copilot.chat.executePrompt.enabled](vscode://settings/github.copilot.chat.executePrompt.enabled)) was effective at not polluting context.\n\nWe plan to explore this further in future releases, so stay tuned!\n\nTo try this MCP Server, you can find it [in the test/mcp folder](https://github.com/microsoft/vscode/tree/main/test/mcp) of the vscode repo. It's very easy to get started:\n\n1. Follow the [Contribution Guidelines](https://github.com/microsoft/vscode/wiki/How-to-Contribute) for getting a local version of Code OSS running.\n2. Use [our trivial (for now) prompt file](https://github.com/microsoft/vscode/blob/cd7de11f65cd5ff6a491f04fc013e363780bde31/.github/prompts/playwright.prompt.md) in agent mode to ask a question: `/playwright <your question here>`\n.\n\n## Notable fixes\n\n- [vscode#265842](https://github.com/microsoft/vscode/issues/265842) - Chat: fix a file corruption issue affecting Sonnet, Gemini, and Grok models\n- [vscode#221255](https://github.com/microsoft/vscode/issues/221255) - Fix terminal links opening regardless of confirmation of \"Opening URIs can be insecure\" warning.\n- [vscode#229374](https://github.com/microsoft/vscode/issues/229374) - Fix to open terminal OSC 8 hyperlink to a folder in VS Code's explorer instead of native file explorer.\n- [vscode#268443](https://github.com/microsoft/vscode/issues/268443) - Settings links in Release Notes do nothing.\n\n## Thank you\n\n### Issue tracking\n\nContributions to our issue tracking:\n\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- [@albertosantini (Alberto Santini)](https://github.com/albertosantini)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n- [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n\n### Pull Requests\n\nContributions to `vscode` :\n\n- [@alpalla (Alessio Palladino)](https://github.com/alpalla): Maintain line breaks in transform to Camel and Pascal case actions [PR #263781](https://github.com/microsoft/vscode/pull/263781)\n- [@andr8928](https://github.com/andr8928): Suggest widget: Bug fix - when widget is too tall, ensure larger of above and below space is used. [PR #260583](https://github.com/microsoft/vscode/pull/260583)\n- [@avarayr (avarayr)](https://github.com/avarayr): Fix: Disable window shadows on macOS Tahoe to prevent GPU performance issues [PR #267724](https://github.com/microsoft/vscode/pull/267724)\n- [@bwateratmsft (Brandon Waterloo \\[MSFT\\])](https://github.com/bwateratmsft): Fix the type incompatibility issue in the MCP HTTP server handler [PR #268548](https://github.com/microsoft/vscode/pull/268548)\n- [@CGNonofr (Loïc Mangeonjean)](https://github.com/CGNonofr)\n- fix: race condition on supported task types [PR #265847](https://github.com/microsoft/vscode/pull/265847)\n- fix: properly update cloned stylesheets on mutation in firefox [PR #269126](https://github.com/microsoft/vscode/pull/269126)\n- [@dmiska25 (Dylan Miska)](https://github.com/dmiska25): dispose of ref instead of object itself to avoid null objects. [PR #266299](https://github.com/microsoft/vscode/pull/266299)\n- [@DrSergei (Sergei Druzhkov)](https://github.com/DrSergei): Improve canSetExpressionValue check [PR #268952](https://github.com/microsoft/vscode/pull/268952)\n- [@essjay05 (Joy Serquiña)](https://github.com/essjay05): fix: adds aria-description to provide screen reader context for tooltip [PR #267818](https://github.com/microsoft/vscode/pull/267818)\n- [@garciasdos (Diego García)](https://github.com/garciasdos): fix: elicitation email validator [PR #265326](https://github.com/microsoft/vscode/pull/265326)\n- [@harbin1053020115 (ermin.zem)](https://github.com/harbin1053020115): feat: split editor group direction according to workbench.editor.splitInGroupLayout configuration when clicking walkthrough ':toSide' commands [PR #267557](https://github.com/microsoft/vscode/pull/267557)\n- [@hron (Aleksei Gusev)](https://github.com/hron): Allow to bind `diffEditor.revert`\nto keyboard [PR #225881](https://github.com/microsoft/vscode/pull/225881)\n- [@leonard520 (Xiaoyun Ding)](https://github.com/leonard520): Add conversation id to mcp meta [PR #265303](https://github.com/microsoft/vscode/pull/265303)\n- [@lukocode](https://github.com/lukocode): fix: ensure SVG images are loaded before clipboard copy\n[PR #263799](https://github.com/microsoft/vscode/pull/263799)\n- [@mawosoft (Matthias Wolf)](https://github.com/mawosoft)\n- Fix PowerShell shell integration when strict mode is enabled. [PR #266260](https://github.com/microsoft/vscode/pull/266260)\n- Restore PSReadline key remapping in PowerShell shell integration [PR #267311](https://github.com/microsoft/vscode/pull/267311)\n- [@narbit (Natalya Arbit)](https://github.com/narbit): Do not allow localhost redirect in favor of loopback IP redirect [PR #267546](https://github.com/microsoft/vscode/pull/267546)\n- [@Peter-developer01 (Peter)](https://github.com/Peter-developer01): Fix a typo in nls.localize(...) in localization.contribution.ts [PR #263228](https://github.com/microsoft/vscode/pull/263228)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD): Fix RangeFormat wrong document race condition [PR #267628](https://github.com/microsoft/vscode/pull/267628)\n- [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n- fix: memory leak in ReplAccessibilityAnnouncer [PR #264937](https://github.com/microsoft/vscode/pull/264937)\n- fix: memory leak in chat widget [PR #265002](https://github.com/microsoft/vscode/pull/265002)\n- reduce memory by ~1.2 MB [PR #267785](https://github.com/microsoft/vscode/pull/267785)\n- fix: memory leak in folding [PR #269071](https://github.com/microsoft/vscode/pull/269071)\n- [@Skn0tt (Simon Knott)](https://github.com/Skn0tt): Treat ellipsis character as search wildcard [PR #262462](https://github.com/microsoft/vscode/pull/262462)\n- [@tmm1 (Aman Karmani)](https://github.com/tmm1): Fix disposable leak in BrowserSocketFactory [PR #263736](https://github.com/microsoft/vscode/pull/263736)\n- [@turansky (Victor Turansky)](https://github.com/turansky): fix: `lm.registerLanguageModelChatProvider`\njsdoc formatting [PR #266485](https://github.com/microsoft/vscode/pull/266485)\n- [@witsaint (DQ)](https://github.com/witsaint): fix: confirmation btn style [PR #267438](https://github.com/microsoft/vscode/pull/267438)\n- [@yiliang114 (易良)](https://github.com/yiliang114): Fix to #263546, for submenu of treeView view/item/context z-index iss… [PR #263555](https://github.com/microsoft/vscode/pull/263555)\n\nContributions to `vscode-copilot-chat` :\n\n- [@24anisha](https://github.com/24anisha): Adding accept/reject and survival to GH Telemetry [PR #1059](https://github.com/microsoft/vscode-copilot-chat/pull/1059)\n- [@DGideas (Wanlin Wang 王万霖)](https://github.com/DGideas): improve custom OpenAI Compatible model URL resolution [PR #1074](https://github.com/microsoft/vscode-copilot-chat/pull/1074)\n- [@johan-j (Johan Jansson)](https://github.com/johan-j): Grouping of BYOK custom models in model picker [PR #1111](https://github.com/microsoft/vscode-copilot-chat/pull/1111)\n- [@shaunm-msft (Shaun Miller)](https://github.com/shaunm-msft)\n- Modifications to allow direct-endpoint tests to use responses api [PR #1047](https://github.com/microsoft/vscode-copilot-chat/pull/1047)\n- restore correct service creation for list-models [PR #1090](https://github.com/microsoft/vscode-copilot-chat/pull/1090)\n- [@vritant24 (Vritant Bhardwaj)](https://github.com/vritant24): Ungroup tools based on embedding rankings [PR #678](https://github.com/microsoft/vscode-copilot-chat/pull/678)\n- [@yemohyleyemohyle](https://github.com/yemohyleyemohyle)\n- Yemohyle/dedup messages telemetry [PR #952](https://github.com/microsoft/vscode-copilot-chat/pull/952)\n- Yemohyle/edit feedback msft internal [PR #984](https://github.com/microsoft/vscode-copilot-chat/pull/984)\n\nContributions to `vscode-eslint` :\n\n- [@frodi-karlsson (Fróði Karlsson)](https://github.com/frodi-karlsson)\n- Support realpaths with config [PR #2068](https://github.com/microsoft/vscode-eslint/pull/2068)\n- support setting command in config for lintTask [PR #2081](https://github.com/microsoft/vscode-eslint/pull/2081)\n- [@fronterior (Low Front)](https://github.com/fronterior): Fix workspaceFolder check to use optional chaining [PR #2075](https://github.com/microsoft/vscode-eslint/pull/2075)\n\nContributions to `vscode-json-languageservice` :\n\n- [@danila-schelkov (Danila Schelkov)](https://github.com/danila-schelkov): feat: examples completion for propertyNames [PR #286](https://github.com/microsoft/vscode-json-languageservice/pull/286)\n\nContributions to `vscode-mypy` :\n\n- [@cnaples79 (Chase Naples)](https://github.com/cnaples79): Fix: parse mypy diagnostics from stderr in non\\_interactive mode [PR #375](https://github.com/microsoft/vscode-mypy/pull/375)\n\nContributions to `vscode-python-environments` :\n\n- [@almarouk (Abdelrahman AL MAROUK)](https://github.com/almarouk): fix conda env refresh not waiting for promises [PR #751](https://github.com/microsoft/vscode-python-environments/pull/751)\n- [@renan-r-santos (Renan Santos)](https://github.com/renan-r-santos): Display activate button when a terminal is moved to the editor window [PR #764](https://github.com/microsoft/vscode-python-environments/pull/764)\n\nContributions to `vscode-vsce` :\n\n- [@joyceerhl (Joyce Er)](https://github.com/joyceerhl): fix: generate language model tag for `languageModelChatProvider`\ncontributions [PR #1199](https://github.com/microsoft/vscode-vsce/pull/1199)\n\nContributions to `debug-adapter-protocol` :\n\n- [@dmjio (David M. Johnson)](https://github.com/dmjio): Update debug adapters list in adapters.md [PR #562](https://github.com/microsoft/debug-adapter-protocol/pull/562)\n\nWe really appreciate people trying our new features as soon as they are ready, so check back here often and learn what's new.\n\n>\n> If you'd like to read release notes for previous VS Code versions, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> >",
  "FeedName": "Visual Studio Code Releases",
  "Author": "Visual Studio Code Team",
  "Tags": [
    "release"
  ],
  "FeedUrl": "https://code.visualstudio.com/feed.xml",
  "Link": "https://code.visualstudio.com/updates/v1_105",
  "ProcessedDate": "2025-10-09 18:03:24",
  "Description": "Learn what is new in the Visual Studio Code September 2025 Release (1.105).\n\n[Read the full article](https://code.visualstudio.com/updates/v1_105)",
  "FeedLevelAuthor": "Visual Studio Code - Code Editing. Redefined.",
  "OutputDir": "_news",
  "PubDate": "2025-10-09T17:00:00+00:00"
}
