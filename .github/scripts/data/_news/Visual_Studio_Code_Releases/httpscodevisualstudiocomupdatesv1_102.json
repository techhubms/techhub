{
  "Link": "https://code.visualstudio.com/updates/v1_102",
  "ProcessedDate": "2025-08-24 16:20:37",
  "PubDate": "2025-07-09T17:00:00+00:00",
  "FeedLevelAuthor": "Visual Studio Code - Code Editing. Redefined.",
  "Title": "June 2025 (version 1.102)",
  "FeedUrl": "https://code.visualstudio.com/feed.xml",
  "EnhancedContent": "Try [MCP servers](/mcp) to extend agent mode in VS Code!\n\nDismiss this update\n\n[Edit](https://vscode.dev/github/microsoft/vscode-docs/blob/main/release-notes/v1_102.md)\n\n# June 2025 (version 1.102)\n\n*Release date: July 9, 2025*\n\n**Update 1.102.1**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22June+2025+Recovery+1%22+).\n\n**Update 1.102.2**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22June+2025+Recovery+2%22+).\n\n**Update 1.102.3**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22June+2025+Recovery+3%22+).\n\nDownloads: Windows: [x64](https://update.code.visualstudio.com/1.102.3/win32-x64-user/stable) [Arm64](https://update.code.visualstudio.com/1.102.3/win32-arm64-user/stable) | Mac: [Universal](https://update.code.visualstudio.com/1.102.3/darwin-universal/stable) [Intel](https://update.code.visualstudio.com/1.102.3/darwin/stable) [silicon](https://update.code.visualstudio.com/1.102.3/darwin-arm64/stable) | Linux: [deb](https://update.code.visualstudio.com/1.102.3/linux-deb-x64/stable) [rpm](https://update.code.visualstudio.com/1.102.3/linux-rpm-x64/stable) [tarball](https://update.code.visualstudio.com/1.102.3/linux-x64/stable) [Arm](https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions) [snap](https://update.code.visualstudio.com/1.102.3/linux-snap-x64/stable)\n\nWelcome to the June 2025 release of Visual Studio Code. There are many updates in this version that we hope you'll like, some of the key highlights include:\n\n- **Chat**\n\n- Explore and contribute to the open sourced GitHub Copilot Chat extension ([Read our blog post](https://code.visualstudio.com/blogs/2025/06/30/openSourceAIEditorFirstMilestone)).\n- Generate custom instructions that reflect your project's conventions (Show more).\n- Use custom modes to tailor chat for tasks like planning or research (Show more).\n- Automatically approve selected terminal commands (Show more).\n- Edit and resubmit previous chat requests (Show more).\n- **MCP**\n\n- MCP support is now generally available in VS Code (Show more).\n- Easily install and manage MCP servers with the MCP view and gallery (Show more).\n- MCP servers as first-class resources in profiles and Settings Sync (Show more).\n- **Editor experience**\n\n- Delegate tasks to Copilot coding agent and let it handle them in the background (Show more).\n- Scroll the editor on middle click (Show more).\n\n>\n> If you'd like to read these release notes online, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> **Insiders:** Want to try new features as soon as possible? You can download the nightly [Insiders](https://code.visualstudio.com/insiders) build and try the latest updates as soon as they are available.\n> >\n\n## Chat\n\n### Copilot Chat is open source\n\nWe're excited to announce that we've open sourced the GitHub Copilot Chat extension! The source code is now available at [`microsoft/vscode-copilot-chat`](https://github.com/microsoft/vscode-copilot-chat) under the MIT license.\n\nThis marks a significant milestone in our commitment to transparency and community collaboration. By open sourcing the extension, we're enabling the community to:\n\n- **Contribute directly** to the development of AI-powered chat experiences in VS Code\n- **Understand the implementation** of chat modes, custom instructions, and AI integrations\n- **Build upon our work** to create even better AI developer tools\n- **Participate in shaping the future** of AI-assisted coding\n\nYou can explore the repository to see how features like [agent mode](https://github.com/microsoft/vscode-copilot-chat/blob/e1222084830244174e6aa64683286561fa7e7607/src/extension/prompts/node/agent/agentPrompt.tsx), [inline chat](https://github.com/microsoft/vscode-copilot-chat/blob/e1222084830244174e6aa64683286561fa7e7607/src/extension/prompts/node/inline/inlineChatEditCodePrompt.tsx), and [MCP integration](https://github.com/microsoft/vscode-copilot-chat/blob/e1222084830244174e6aa64683286561fa7e7607/src/extension/mcp/vscode-node/mcpToolCallingLoop.tsx) are implemented. We welcome contributions, feedback, and collaboration from the community.\n\nTo learn more about this milestone and our broader vision for open source AI editor tooling, read our detailed blog post: [Open Source AI Editor - First Milestone](https://code.visualstudio.com/blogs/2025/06/30/openSourceAIEditorFirstMilestone).\n\n### Chat mode improvements\n\nLast milestone, we previewed [custom chat modes](https://code.visualstudio.com/docs/copilot/chat/chat-modes#_custom-chat-modes). In addition to the built-in chat modes 'Ask', 'Edit' and 'Agent', you can define your own chat modes with specific instructions and a set of allowed tools that you want the LLM to follow when replying to a request.\n\nThis milestone, we have made several improvements and bug fixes in this area.\n\n#### Configure language model\n\nUpon popular request, you can now also specify which language model should be used for a chat mode. Add the `model` metadata property to your `chatmode.md` file and provide the model identifier (we provide IntelliSense for the model info).\n\n![Screenshot that shows the IntelliSense for the model metadata property in chat mode file.](/assets/updates/1_102/prompt-file-model-code-completion.png)\n\n#### Improved editing support\n\nThe editor for [chat modes](https://code.visualstudio.com/docs/copilot/chat/chat-modes), [prompts](https://code.visualstudio.com/docs/copilot/copilot-customization#_prompt-files-experimental), and [instruction files](https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions) now supports completions, validation, and hovers for all supported metadata properties.\n\n![Screenshot that shows the hover information for tools.](/assets/updates/1_102/tools-hover.png)\n\n![Screenshot that shows the model diagnostics when a model is not available for a specific chat mode.](/assets/updates/1_102/prompt-file-diagnostics.png)\n\n#### Gear menu in the chat view\n\nThe **Configure Chat** action in the Chat view toolbar lets you manage custom modes as well as reusable instructions, prompts, and tool sets:\n\n![Screenshot that shows the Configure Chat menu in the Chat view.](/assets/updates/1_102/chat-gear.png)\n\nSelecting **Modes** shows all currently installed custom modes and enables you to open, create new, or delete modes.\n\n#### Import modes, prompts and instructions via a `vscode`\nlink\n\nYou can now import chat mode, reusable prompt and instruction files from external links, such as a gist or our [awesome-copilot](https://github.com/github/awesome-copilot) community repository. For example, the following link will import the chat mode file for Burke's GPT 4.1 Beast Mode:\n\n[Add GPT 4.1 Beast Mode to VS Code](vscode:chat-mode/install?url=https://raw.githubusercontent.com/github/awesome-copilot/refs/heads/main/chatmodes/4.1-Beast.chatmode.md)\n\nThis will prompt for a destination, either your current workspace or your user settings, and confirm the name before importing the mode file from the URL.\n\nTry it out on the 100+ community-contributed instructions, prompts, and chat modes at [awesome-copilot](https://github.com/github/awesome-copilot).\n\n### Generate custom instructions\n\nSetting up [custom instructions](https://code.visualstudio.com/docs/copilot/copilot-customization) for your project can significantly improve AI suggestions by providing context about your coding standards and project conventions. However, creating effective instructions from scratch might be challenging.\n\nThis milestone, we're introducing the **Chat: Generate Instructions** command to help you bootstrap custom instructions for your workspace. Run this command from the Command Palette or the Configure menu in the Chat view, and agent mode will analyze your codebase to generate tailored instructions that reflect your project's structure, technologies, and patterns.\n\nThe command creates a `copilot-instructions.md` file in your `.github` folder or suggests improvements to existing instruction files. You can then review and customize the generated instructions to match your team's specific needs.\n\nLearn more about [customizing AI responses with instructions](https://code.visualstudio.com/docs/copilot/copilot-customization).\n\n### Load instruction files on demand\n\nInstruction files can be used to describe coding practices and project requirements. Instructions can be manually or automatically included as context to chat requests.\n\nThere are various mechanisms supported, see the [Custom Instructions](https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions) section in our documentation.\n\nFor larger instructions that you want to include conditionally, you can use `.instructions.md` files in combination with glob patterns defined in the `applyTo` header. The file is automatically added when the glob pattern matches one or more of the files in the context of the chat.\n\nNew in this release, the large language model can load instructions on demand. Each request gets a list of all instruction files, along with glob pattern and description. In this example, the LLM has no instructions for TypeScript files explicitly added in the context. So, it looks for code style rules before creating a TypeScript file:\n\n![Screenshot showing loading instruction files on demand.](/assets/updates/1_102/instructions-loading-on-demand.png)\n\n### Edit previous requests (Experimental)\n\nYou can now click on previous requests to modify the text content, attached context, mode, and model. Upon submitting this change, this will remove all subsequent requests, undo any edits made, and send the new request in chat.\n\nThere will be a controlled rollout of different entry points to editing requests, which will help us gather feedback on preferential edit and undo flows. However, users can set their preferred mode with the experimental [chat.editRequests](vscode://settings/chat.editRequests) setting:\n\n- [chat.editRequests.inline](vscode://settings/chat.editRequests.inline): Hover a request and select the text to begin an edit inline with the request.\n- [chat.editRequests.hover](vscode://settings/chat.editRequests.hover): Hover a request to reveal a toolbar with a button to begin an edit inline with the request.\n- [chat.editRequests.input](vscode://settings/chat.editRequests.input): Hover a request to reveal a toolbar, which will start edits in the input box at the bottom of chat.\n\n### Terminal auto approval (Experimental)\n\nAgent mode now has a mechanism for auto approving commands in the terminal. Here's a demo of it using the defaults:\n\nThere are currently two settings: the allow list and the deny list. The allow list is a list of command *prefixes* or regular expressions that when matched allows the command to be run without explicit approval. For example, the following will allow any command starting with `npm run test` to be run, as well as *exactly* `git status` or `git log` :\n\n``` \"github.copilot.chat.agent.terminal.allowList\": { \"npm run test\": true, \"/^git (status|log)$/\": true }\n\n```\n\nThese settings are merged across setting scopes, such that you can have a set of user-approved commands, as well as workspace-specific approved commands.\n\nAs for chained commands, we try to detect these cases based on the shell and require all sub-commands to be approved. So `foo && bar` we check that both `foo` and `bar` are allowed, only at that point will it run without approval. We also try to detect inline commands such as `echo $(pwd)` , which would check both `echo $(pwd)` and `pwd` .\n\nThe deny list has the same format as the allow list but will override it and force approval. For now this is mostly of use if you have a broad entry in the allow list and want to block certain commands that it may include. For example the following will allow all commands starting with `npm run` except if it starts with `npm run danger` :\n\n``` \"github.copilot.chat.agent.terminal.allowList\": { \"npm run\": true }, \"github.copilot.chat.agent.terminal.denyList\": { \"npm run danger\": true }\n\n```\n\nThanks to the protections that we gain against prompt injection from [workspace trust](https://code.visualstudio.com/docs/editing/workspaces/workspace-trust), the philosophy we've approached when implementing this feature with regards to security is to include a small set of innocuous commands in the allow list, and a set of particularly dangerous ones in the deny list just in case they manage to slip through. The allow list is empty by default as we're still considering what the defaults should be, but here is what we're thinking:\n\n- Allow list: `echo`\n, `cd` , `ls` , `cat` , `pwd` , `Write-Host` , `Set-Location` , `Get-ChildItem` , `Get-Content` , `Get-Location`\n- Deny list: `rm`\n, `rmdir` , `del` , `kill` , `curl` , `wget` , `eval` , `chmod` , `chown` , `Remove-Item`\n\nThe two major parts we want to add to this feature are a UI entry point to more easily add new commands to the list ([#253268](https://github.com/microsoft/vscode/issues/253268)) and an opt-in option to allow an LLM to evaluate the command(s) safety ([#253267](https://github.com/microsoft/vscode/issues/253267)). We are also planning on both removing the `github.copilot.` prefix of these settings ([#253314](https://github.com/microsoft/vscode/issues/253314)) as well as merging them together ([#253472](https://github.com/microsoft/vscode/issues/253472)) in the next release before it becomes a preview setting.\n\n### Terminal command simplification\n\nAgent mode sometimes wants to run commands with a `cd` statement, just in case. We now detect this case when it matches the current working directory and simplify the command that is run.\n\n![Screenshot of the terminal, asking to run only runs when the current working directory already matches.](/assets/updates/1_102/terminal-working-dir.png)\n\n### Agent awareness of tasks and terminals\n\nAgent mode now understands which background terminals it has created and which tasks are actively running. The agent can read task output by using the new `GetTaskOutput` tool, which helps prevent running duplicate tasks and improves workspace context.\n\n![Screenshot of VS Code window showing two build tasks running in the terminal panel. The left terminal displays several errors. The chat agent replies to describe status of my build tasks with a summary of each task's output.](/assets/updates/1_102/task-status.png)\n\n### Maximized chat view\n\nYou can now maximize the Secondary Side Bar to span the editor area and hide the Primary Side Bar and panel area. VS Code will remember this state between restarts and will restore the Chat view when you open an editor or view.\n\nYou can toggle in and out of the maximized state by using the new icon next to the close button, or use the new command `workbench.action.toggleMaximizedAuxiliaryBar` from the Command Palette.\n\n### Agent mode badge indicator\n\nWe now show a badge over the application icon in the dock when the window is not focused and the agent needs user confirmation to continue. The badge will disappear as soon as the related window that triggered it receives focus.\n\n![Screenshot of the VS Code dock icon showing an agent confirmation as a badge.](/assets/updates/1_102/badge.png)\n\nYou can enable or disable this badge via the [chat.notifyWindowOnConfirmation](vscode://settings/chat.notifyWindowOnConfirmation) setting.\n\n### Start chat from the command line\n\nA new subcommand `chat` is added to the VS Code CLI that enables you to start a chat session in the current working directory with the prompt provided.\n\nThe basic syntax is `code chat [options] [prompt]` and options can be any of:\n\n- `-m --mode <mode>`\n: The mode to use for the chat session. Available options: 'ask', 'edit', 'agent', or the identifier of a custom mode. Defaults to 'agent'\n- `-a --add-file <path>`\n: Add files as context to the chat session\n- `--maximize`\n: Maximize the chat session view\n- `-r --reuse-window`\n: Force to use the last active window for the chat session\n- `-n --new-window`\n: Force to open an empty window for the chat session\n\nReading from stdin is supported, provided you pass in `-` at the end, for example `ps aux | grep code | code chat <prompt> -`\n\n### Fetch tool supports non-HTTP URLs\n\nWe've seen that, on occasion, models want to call the Fetch tool with non-HTTP URLs, such as `file://` URLs. Rather than disallowing this, the Fetch tool now supports these URLs and returns the content of the file or resource at the URL. Images are also supported.\n\n### Clearer language model access management\n\nWe've reworked the UX around managing extension access to language models provided by extensions. Previously, you saw an item in the Account menu that said **AccountName (GitHub Copilot Chat)**, which had nothing to do with what account GitHub Copilot Chat was using. Rather, it allowed you to manage which extensions had access to the language models provided by Copilot Chat.\n\nTo make this clearer, we've removed the **AccountName (GitHub Copilot Chat)** item and replaced it with a new item called **Manage Language Model Access...**. This item opens a Quick Pick that enables you to manage which extensions have access to the language models provided by GitHub Copilot Chat.\n\n![Screenshot that shows the language model access Quick Pick.](/assets/updates/1_102/lm-access-qp.png)\n\nWe think this is clearer... That said, in a future release we will explore more granular access control for language models (for example, only allowing specific models rather than *all* models provided by an extension), so stay tuned for that.\n\n### Reading chat requests\n\nSince the chat extension itself is open source, you now get access to one of the debugging tools that we've been using internally for awhile. To easily see the details of all requests made by Copilot Chat, run the command \"Show Chat Debug View\". This will show a treeview with an entry for each request made. You can see the full prompt that was sent to the model, the tools that were enabled, the response, and other key details. You can save the request log with right click &gt; \"Export As...\".\n\nThe view also has entries for tool calls on their own, and a prompt-tsx debug view that opens in the Simple Browser.\n\n>\n> 🚨 **Note**: This log is very helpful in troubleshooting issues, and we will appreciate if you share it when filing an issue about the agent's behavior. But, this log may contain personal information such as the contents of your files or terminal output. Please review the contents carefully before sharing it with anyone else.\n> >\n\n### Edit Tool Improvements\n\nThis release includes several changes to the predictability and reliability of the edit tools used for GPT-4 models and Sonnet models. You should see more reliable editing behavior in this release and we will continue to improve these tools in future releases.\n\n## MCP\n\n### MCP support in VS Code is generally available\n\nWe've have been working on expanding MCP support in VS Code for the past few months, and [support the full range of MCP features in the specification](https://code.visualstudio.com/blogs/2025/06/12/full-mcp-spec-support). As of this release, MCP support is now generally available in VS Code!\n\nIn addition, organizations can now control the availability of MCP servers with a GitHub Copilot policy. Learn more about [Managing policies and features for Copilot in your enterprise](https://docs.github.com/en/enterprise-cloud@latest/copilot/how-tos/administer/enterprises/managing-policies-and-features-for-copilot-in-your-enterprise) in the GitHub Copilot documentation.\n\nYou can get started by installing some of the [popular MCP servers from our curated list](https://code.visualstudio.com/mcp). Learn more about [using MCP servers in VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) and how you can use them to extend agent mode.\n\n![Screenshot that shows the MCP Servers page.](/assets/updates/1_102/mcp-servers-page.png)\n\nIf you want to build your own MCP server, check our [MCP developer guide](https://code.visualstudio.com/api/extension-guides/ai/mcp) for more details about how to take advantage of the MCP capabilities in VS Code.\n\n### Support for elicitations\n\nThe latest MCP specification added support for [Elicitations](https://modelcontextprotocol.io/specification/2025-06-18/client/elicitation) as a way for MCP servers to request input from MCP clients. The latest version of VS Code adopts this specification and includes support for elicitations.\n\n### MCP server discovery and installation\n\nThe new **MCP Servers** section in the Extensions view includes welcome content that links directly to the [popular MCP servers from our curated list](https://code.visualstudio.com/mcp). Visit the website to explore available MCP servers and select **Install** on any MCP server. This automatically launches VS Code and opens the MCP server editor that displays the server's readme and manifest information. You can review the server details and select **Install** to add the server to your VS Code instance.\n\nOnce installed, MCP servers automatically appear in your Extensions view under the **MCP SERVERS - INSTALLED** section, and their tools become available in the Chat view's tools Quick Pick. This makes it easy to verify that your MCP server is working correctly and access its capabilities immediately.\n\n### MCP server management view\n\nThe new **MCP SERVERS - INSTALLED** view in the Extensions view makes it easy to monitor, configure, and control your installed MCP servers.\n\n![Screenshot showing the MCP Servers management view with installed servers.](/assets/updates/1_102/mcp-servers-installed-view.png)\n\nThe view lists the installed MCP servers and provides several management actions through the context menu:\n\n![Screenshot showing the context menu actions for an MCP server.](/assets/updates/1_102/mcp-server-context-menu.png)\n\n- **Start Server** / **Stop Server** / **Restart Server**: Control the server's running state\n- **Disconnect Account**: Remove account access from the server\n- **Show Output**: View the server's output logs for troubleshooting\n- **Show Configuration**: Open the server's runtime configuration\n- **Configure Model Access**: Manage which language models the server can access\n- **Show Sampling Requests**: View sampling requests for debugging\n- **Browse Resources**: Explore resources provided by the server\n- **Uninstall**: Remove the server from your VS Code instance\n\nWhen you select an installed MCP server, VS Code opens the MCP server editor displaying the server's readme details, manifest, and its runtime configuration. This provides an overview of the server's capabilities and current settings, making it easy to understand what the server does and how it's configured.\n\n![Screenshot showing the MCP server editor with runtime configuration.](/assets/updates/1_102/mcp-server-editor-configuration.png)\n\nThe **MCP SERVERS - INSTALLED** view also provides a **Browse MCP Servers...** action that takes you directly to the community website, making server discovery always accessible from within VS Code.\n\n![Screenshot that shows the Browse MCP Servers action in the MCP Servers view.](/assets/updates/1_102/mcp-servers-browse-action.png)\n\n### MCP servers as first class resources\n\nMCP servers are now treated as first-class resources in VS Code, similar to user tasks and other profile-specific configurations. This represents a significant architectural improvement from the previous approach where MCP servers were stored in user settings. This change makes MCP server management more robust and provides better separation of concerns between your general VS Code settings and your MCP server configurations. When you install or configure MCP servers, they're automatically stored in the appropriate [profile](https://code.visualstudio.com/docs/configure/profiles)-specific location to ensure that your main settings file stays clean and focused.\n\n- **Dedicated storage**: MCP servers are now stored in a dedicated `mcp.json`\nfile within each profile, rather than cluttering your user settings file\n- **Profile-specific**: Each VS Code profile maintains its own set of MCP servers, enabling you to have different server configurations for different workflows or projects\n- **Settings Sync integration**: MCP servers sync seamlessly across your devices through [Settings Sync](https://code.visualstudio.com/docs/configure/settings-sync), with granular control over what gets synchronized\n\n#### MCP migration support\n\nWith MCP servers being first-class resources and the associated change to their configuration, VS Code provides comprehensive migration support for users upgrading from the previous MCP server configuration format:\n\n- **Automatic detection**: Existing MCP servers in `settings.json`\nare automatically detected and migrated to the new profile-specific `mcp.json` format\n- **Real-time migration**: When you add MCP servers to user settings, VS Code immediately migrates them with a helpful notification explaining the change\n- **Cross-platform support**: Migration works seamlessly across all development scenarios including local, remote, WSL, and Codespaces environments\n\nThis migration ensures that your existing MCP server configurations continue to work without any manual intervention while providing the enhanced management capabilities of the new architecture.\n\n#### Dev Container support for MCP configuration\n\nThe Dev Container configuration `devcontainer.json` and the Dev Container Feature configuration `devcontainer-feature.json` support MCP server configurations at the path `customizations.vscode.mcp` . When a Dev Container is created the collected MCP server configurations are written to the remote MCP configuration file `mcp.json` .\n\nSample `devcontainer.json` configuring the Playwright MCP server:\n\n``` { \"image\": \"mcr.microsoft.com/devcontainers/typescript-node:latest\",\n\n\"customizations\": { \"vscode\": { \"mcp\": { \"servers\": { \"playwright\": { \"command\": \"npx\", \"args\": [\"@playwright/mcp@latest\"] } } } } } }\n\n```\n\n#### Commands to access MCP resources\n\nTo make working with MCP servers more accessible, we've added commands to help you manage and access your MCP configuration files:\n\n- **MCP: Open User Configuration** - Direct access to your user-level `mcp.json`\nfile\n- **MCP: Open Remote User Configuration** - Direct access to your remote user-level `mcp.json`\nfile\n\nThese commands provide quick access to your MCP configuration files, making it easy to view and manage your server configurations directly.\n\n### Quick management of MCP authentication\n\nYou are now able to sign out or disconnect accounts from the MCP gear menu and quick picks.\n\n- MCP view gear menu:\n![Screenshot showing the Disconnect Account action shown in MCP view gear menu.](/assets/updates/1_102/mcp-view-signout.png)\n- MCP editor gear menu:\n![Screenshot showing the Disconnect Account action shown in MCP editor gear menu.](/assets/updates/1_102/mcp-editor-signout.png)\n- MCP quick pick:\n![Screenshot showing the Disconnect Account action shown in MCP quick pick menu.](/assets/updates/1_102/mcp-qp-signout.png)\n\nThe **Disconnect** action is shown when the account is used by either other MCP servers or extensions, while **Sign Out** is shown when the account is only used by the MCP server. The sign out action completely removes the account from VS Code, while disconnect only removes access to the account from the MCP server.\n\n## Accessibility\n\n### Keep all edits from within the editor\n\nFormerly, to accept all edits, focus would need to be in the Chat view. Now, with focus in the editor, you can run the command **Keep All Edits** (⌥⌘Y (Windows, Linux Ctrl+Alt+Y)).\n\n### User action required sound\n\nWe’ve fine-tuned the accessibility signal to indicate when chat requires user action and set the default value to `auto` , so screen reader users will hear this signal. You can configure this behavior with the [accessibility.signals.chatUserActionRequired](vscode://settings/accessibility.signals.chatUserActionRequired) setting.\n\n### Alert when rendering errors occur in chat\n\nPreviously, screen reader users were not alerted when a chat rendering error occurred. Users are now alerted with this information and can also focus it via keyboard.\n\n## Code Editing\n\n### Scroll on middle click\n\n**Setting**: [editor.scrollOnMiddleClick](vscode://settings/editor.scrollOnMiddleClick)\n\nScroll the editor by simply clicking, or holding down your middle mouse button (the scroll wheel) and moving around.\n\nOnce activated, the cursor changes to a panning icon and moving the mouse up or down then smoothly scrolls the editor in that direction. The scrolling speed is determined by how far you move the mouse from the initial click point. Release the middle mouse button or click it again to stop scrolling and return to the standard cursor.\n\n**Known Conflicts**\n\nEnabling this feature might interfere with other actions tied to the middle mouse button. For example, if you have column selection ([editor.columnSelection](vscode://settings/editor.columnSelection)) enabled, holding down the middle mouse button selects text. Similarly, on Linux, selection clipboard ([editor.selectionClipboard](vscode://settings/editor.selectionClipboard)) pastes content from your clipboard when the middle mouse button is clicked.\n\nTo avoid these conflicts, please enable only one of these settings at a time.\n\n### Snooze code completions\n\nYou can now temporarily pause inline suggestions and next edit suggestions (NES) by using the new **Snooze** feature. This is helpful when you want to focus without distraction from suggestions.\n\nTo snooze suggestions, select the Copilot dashboard in the Status Bar, or run the **Snooze Inline Suggestions** command from the Command Palette and select a duration from the dropdown menu. During the snooze period, no inline suggestions or NES will appear.\n\n![Screenshot showing the Copilot dashboard with the snooze button at the bottom.](/assets/updates/1_102/nes-snooze.png)\n\nYou can also assign a custom keybinding to quickly snooze suggestions for a specific duration by passing the desired duration as an argument to the command. For example:\n\n``` { \"key\": \"...\", \"command\": \"editor.action.inlineSuggest.snooze\", \"args\": 10 }\n\n```\n\n## Editor Experience\n\n### Windows accent color\n\n**Setting**: [window.border](vscode://settings/window.border)\n\nVS Code on Windows now supports using the accent color as the window frame border if that is enabled in Windows settings (\"Show accent color on title bars and window borders\").\n\n![Screenshot of the VS Code window with a red accent color border.](/assets/updates/1_102/window-accent.png)\n\nThe new [window.border](vscode://settings/window.border) setting enables you to control the color of the window border. Use `default` to use the Windows accent color, `off` to disable the border, or provide a specific color value to use a custom color.\n\n**Note**: the border is only visible when the related Windows setting is enabled. It can not yet be set per workspace, but we are working on that support.\n\n### Settings search suggestions (Preview)\n\n**Setting**: [workbench.settings.showAISearchToggle](vscode://settings/workbench.settings.showAISearchToggle)\n\nThis milestone, we modified the sparkle toggle in the Settings editor, so that it acts as a toggle between the AI and non-AI search results. The AI settings search results are semantically similar results instead of results that are based on string matching. For example, `editor.fontSize` appears as an AI settings search result when you search for \"increase text size\".\n\nThe toggle is enabled only when there are AI results available. We welcome feedback on when the AI settings search did not find an expected setting, and we plan to enable the setting by default over the next iteration.\n\n## Tasks\n\n### Rerun all running tasks\n\nYou can now quickly rerun all currently running tasks with the new `Tasks: Rerun All Running Tasks command` . This is useful for workflows that involve multiple concurrent tasks, allowing you to restart them all at once without stopping and rerunning each individually.\n\n### Restart task reloads updated tasks.json\n\nThe **Restart Task** command now reloads your `tasks.json` before restarting, ensuring that any recent changes are respected. Previously, task configuration changes were not picked up when restarting a task, which could lead to confusion or outdated task behavior.\n\n## Terminal\n\n### Terminal Suggest (Preview)\n\nWe've made significant improvements to the terminal suggest feature.\n\n#### Selection mode\n\nA new setting, `terminal.integrated.suggest.selectionMode` , helps you understand that by default, Tab (not Enter) accepts suggestions. You can choose between `partial` , `always` , and `never` modes to control how suggestions are selected and accepted.\n\nThe default value is `partial` , which means that Tab accepts the suggestion until navigation has occurred.\n\n![Screenshot showing the first terminal suggestion can be accepted with Tab.](/assets/updates/1_102/terminal-selection-mode.png)\n\n#### Learn more\n\nThe **Learn More** action `(kb(workbench.action.terminal.suggestLearnMore))` in the terminal suggest control's status bar is now highlighted for the first 10 times or if the control is shown for 10 seconds. This helps you discover how to configure, disable, and read about the suggest control.\n\n![Screenshot showing the Learn More action appears in the terminal suggest control status bar.](/assets/updates/1_102/terminal-suggest-discoverability.png)\n\n#### Multi-command support\n\nTerminal suggest now supports multi-command lines. You can link commands with `;` , `&&` , and other shell operators, and receive suggestions for all commands on the line.\n\n![Screenshot showing the VS Code terminal showing a multi-command line with git commit and git push, and the terminal suggest widget displaying suggestions for pull, push, and other git commands.](/assets/updates/1_102/terminal-suggest-multi.png)\n\n#### Symlink information\n\nWe now display a symlink's realpath in the suggest details control and have unique icons for symlink files and folders to help distinguish them from other suggestions.\n\n![Screenshot showing the terminal suggest shows the symlink's path -&gt; real path.](/assets/updates/1_102/terminal-symlink.png)\n\n#### Improved sorting\n\nWe've improved sorting in many ways to give you the most relevant suggestions first. For example, giving `main` and `master` priority over other branches.\n\n![Screenshot showing the terminal suggest boosts main and master compared to other branch suggestions.](/assets/updates/1_102/terminal-suggest-sorting.png)\n\n#### Git bash improvements\n\nWe now properly support Git Bash path completions for folders and files. Additionally, we source the built-in commands and present them as suggestions.\n\n![Screenshot showing a Git Bash terminal with suggestions for builtin functions like cat, cp, and curl.](/assets/updates/1_102/terminal-git-bash.png)\n\n## Contributions to extensions\n\n### GitHub Pull Requests\n\nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues.\n\nDeeper integration has been made between the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension and [Copilot coding agent](https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent), allowing you to begin, view, and manage coding agent sessions directly from VS Code.\n\nThese features require that your workspace is open to a repository that has [the Copilot coding agent enabled](https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/enabling-copilot-coding-agent).\n\nReview the [changelog for the 0.114.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#01140) release of the extension to learn about everything in the release.\n\n#### Start a coding agent session (Preview)\n\nAsk Copilot to continue a local change in the background by invoking the `#copilotCodingAgent` tool in chat.\n\nThis tool automatically pushes pending changes to a remote branch and initiates a coding agent session from that branch along with the user's instruction.\n\n![Screenshot showing handing off a session to Copilot coding agent](/assets/updates/1_102/coding-agent-start.png)\n\n**Experimental:** Deeper UI integration can be enabled with the [githubPullRequests.codingAgent.uiIntegration](vscode://settings/githubPullRequests.codingAgent.uiIntegration) setting. Once enabled, a new **Delegate to coding agent** button appears in the Chat view for repositories that have the agent enabled.\n\n#### Status tracking\n\nWe have made improvements to notify and prominently display the status of coding agent pull requests in the **Copilot on my behalf** query. A numeric badge now indicates new changes.\n\n![Screenshot showing status of multiple coding agent pull requests](/assets/updates/1_102/coding-agent-status.png)\n\n#### Session log\n\nYou can now view the session log of a coding agent session directly in VS Code. This enables you to see the history of actions taken by the coding agent, including code changes and tool usage.\n\n![Screenshot showing the session log of a coding agent session.](/assets/updates/1_102/coding-agent-session-log.png)\n\n#### Enhancements on `#activePullRequest`\ntool\n\nThe `#activePullRequest` tool returns information about the pull request, such as its title, description, and status for use in chat, and now you can also use it to get the coding agent session information.\n\nThis tool is automatically attached to chat when opening a pull request created through the coding agent experience, so you can maintain the context and keep working on the pull request if needed to.\n\n### Python\n\n#### Python Environments extension improvements\n\nThe [Python Environments extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-python-envs) received several improvements this release:\n\n- We've polished terminal activation support for Poetry versions greater than 2.0.0\n- You can now use the Quick Create environment creation option to set up multiple virtual environments which are uniquely named within the same workspace\n- The generated `.venv`\nfolders are now git-ignored by default\n- We've improved the environment deletion process\n\n#### Python Environments included as part of the Python extension\n\nWe're starting to roll-out the [Python Environments extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-python-envs) as an optional dependency with the Python extension. What this means is that you might now begin to see the Python Environments extension automatically installed alongside the Python extension, similar to the Python Debugger and Pylance extensions. This controlled roll-out allows us to gather early feedback and ensure reliability before general availability.\n\nThe Python Environments extension includes all the core capabilities we've introduced so far including: [one-click environment setup using Quick Create](https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2025-release/#python-environments-quick-create-command), automatic terminal activation (via \"python-envs.terminal.autoActivationType\" setting), and all supported [UI for environment and package management](https://devblogs.microsoft.com/python/python-in-visual-studio-code-december-2024-release/).\n\nTo use the Python Environments extension during the roll-out, make sure the extension is installed and add the following to your VS Code settings.json file:\n\n``` \"python.useEnvironmentsExtension\": true\n\n```\n\n#### Disabled PyREPL for Python 3.13\n\nWe have disabled PyREPL for Python 3.13 and above to address indentation and cursor issues in the interactive terminal. For more details, see [Disable PyREPL for &gt;= 3.13](https://github.com/microsoft/vscode-python/issues/25164).\n\n#### Pylance MCP tools (Experimental)\n\nThe [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) now includes several experimental MCP tools, which offer access to Pylance's documentation, import analysis, environment management, and more. These tools are currently available in the Pylance prerelease version and are still early in development. While they offer new capabilities, we know it can be challenging to call them directly today. We are actively working to make these tools easier to use and more valuable in future updates. Your feedback in the [pylance-release](https://github.com/microsoft/pylance-release/) repository is welcome as we continue to improve the experience.\n\n### GitHub authentication\n\n#### Revamped GitHub sign-in flow\n\nThis iteration, we have revamped the GitHub sign-in flow by defaulting to a loopback URL flow, rather than a flow that uses a `vscode://` protocol URL. This change is to improve the reliability of the sign-in flow and to ensure that it works across all platforms, including those that do not support custom URL schemes.\n\nWhen you sign in with GitHub, you are now redirected to a loopback URL that looks like `http://localhost:PORT/` . This allows the sign-in flow to complete successfully without relying on custom URL schemes. That said, once you land on the loopback URL, you are still redirected to a `vscode://` URL to return to VS Code, however this doesn't need to resolve for the sign-in flow to complete successfully.\n\nIn other words, we get the best of both worlds: a reliable sign-in flow that works across all platforms and a return to VS Code that uses the `vscode://` URL scheme.\n\nWhile we were at it, we also gave this landing page a fresh coat of paint. In future iterations, we'll apply this new design to other sign-in experiences.\n\n![Screenshot showing the redesigned authentication landing page.](/assets/updates/1_102/auth-landing.png)\n\n## Extension Authoring\n\n### Allow opening files when using `vscode.openFolder`\ncommand\n\nExtensions that call the `vscode.openFolder` command can now pass `filesToOpen?: UriComponents[]` as options to select files to open in the workspace window that opens.\n\nExample:\n\n``` vscode.commands.executeCommand('vscode.openFolder', <folder uri>, { filesToOpen: [ /* files to open */]});\n\n```\n\n## Proposed APIs\n\n## Engineering\n\n### CSS minification using `esbuild`\n\nVS Code has been using `esbuild` for bundling and minifying the JavaScript sources for a long time. We now also use `esbuild` to bundle and minify our CSS files.\n\n### Strict layer checks using `tsconfig.json`\n\nWe now use multiple `tsconfig.json` files to ensure our source code adheres to our [target environment rules](https://github.com/microsoft/vscode/wiki/Source-Code-Organization#target-environments). Our CI runs `npm run valid-layers-check` and will fail the build if for example a type was added into a `browser` layer that only exists in the `node` runtime.\n\n### `vscode-bisect`\nfor sanity testing\n\nThe [`vscode-bisect`](https://github.com/Microsoft/vscode-bisect) project has been around for a long time allowing to find regressions in VS Code builds (what `git bisect` does for `git` ). We added a new `--sanity` option that allows us to quickly go through our [sanity check](https://github.com/microsoft/vscode/wiki/Sanity-Check) that is mandatory before we release a new build.\n\n## Notable fixes\n\n- [vscode-copilot-release#6073](https://github.com/microsoft/vscode-copilot-release/issues/6073) - Agent should not suggest `&&`\nin Windows PowerShell\n\n## Thank you\n\nLast but certainly not least, a big ***Thank You*** to the contributors of VS Code.\n\n### Issue tracking\n\nContributions to our issue tracking:\n\n- [@albertosantini (Alberto Santini)](https://github.com/albertosantini)\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n- [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n- [@tamuratak (Takashi Tamura)](https://github.com/tamuratak)\n\n### Pull requests\n\nContributions to `vscode` :\n\n- [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Fix typing in asyncDataTree.test.ts [PR #209394](https://github.com/microsoft/vscode/pull/209394)\n- [@charles7668 (charles)](https://github.com/charles7668): Fix #215925 [PR #219321](https://github.com/microsoft/vscode/pull/219321)\n- [@chengluyu (Luyu Cheng)](https://github.com/chengluyu): Apply `font-variation-settings`\nto the suggestion widget (fix #199954) [PR #200000](https://github.com/microsoft/vscode/pull/200000)\n- [@DrSergei](https://github.com/DrSergei): Improve debug adapter capabilities checking [PR #250779](https://github.com/microsoft/vscode/pull/250779)\n- [@emmanuel-ferdman (Emmanuel Ferdman)](https://github.com/emmanuel-ferdman): Fix launch.json reference [PR #250187](https://github.com/microsoft/vscode/pull/250187)\n- [@Enzo-Nunes (Enzo Nunes)](https://github.com/Enzo-Nunes): Fix line comment action for makefiles (Fixes #234464) [PR #243283](https://github.com/microsoft/vscode/pull/243283)\n- [@Gallaecio (Adrián Chaves)](https://github.com/Gallaecio): Fix typo (an language model call → a language model call) [PR #252202](https://github.com/microsoft/vscode/pull/252202)\n- [@ghLcd9dG (Liu)](https://github.com/ghLcd9dG): Update copyFiles.ts [PR #250773](https://github.com/microsoft/vscode/pull/250773)\n- [@heoh (HeoHeo)](https://github.com/heoh): Fix markdown preview scroll crawls at EOF (fix #249278) [PR #251228](https://github.com/microsoft/vscode/pull/251228)\n- [@hyrious (hyrious)](https://github.com/hyrious): fix: missing translations of remote built-in extensions [PR #249430](https://github.com/microsoft/vscode/pull/249430)\n- [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n- Do not check for navigator to detect web environment in built-in extensions [PR #251688](https://github.com/microsoft/vscode/pull/251688)\n- Fix \"Assertion Failed: Argument is undefined or null\" when renaming custom editor [PR #252071](https://github.com/microsoft/vscode/pull/252071)\n- [@JJJJJJ-git](https://github.com/JJJJJJ-git): Fixing ChatService undo bug [PR #253478](https://github.com/microsoft/vscode/pull/253478)\n- [@liuxingbaoyu](https://github.com/liuxingbaoyu): fix: PowerShell not working with username having Unicode [PR #251534](https://github.com/microsoft/vscode/pull/251534)\n- [@matthew-godin](https://github.com/matthew-godin): fix patternIndices typo [PR #250085](https://github.com/microsoft/vscode/pull/250085)\n- [@mohiuddin-khan-shiam (S. M. Mohiuddin Khan Shiam)](https://github.com/mohiuddin-khan-shiam): Fix incorrect SHA-1 commit regex in [version_manager.rs](cci:7://file:///d:/Github/vscode/cli/src/desktop/version_manager.rs:0:0-0:0) [PR #251329](https://github.com/microsoft/vscode/pull/251329)\n- [@notoriousmango (Seong Min Park)](https://github.com/notoriousmango)\n- feat: add font ligatures to webview theme [PR #250998](https://github.com/microsoft/vscode/pull/250998)\n- feat: add rerun and debug actions for failed tests from last run [PR #251679](https://github.com/microsoft/vscode/pull/251679)\n- [@raffaeu (Raffaele Garofalo)](https://github.com/raffaeu): Refactoring editor sticky scroll [PR #248131](https://github.com/microsoft/vscode/pull/248131)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n- Disable `installation folder`\nbanner warning when debugging extensions [PR #244305](https://github.com/microsoft/vscode/pull/244305)\n- TypeScript restrict Comment onEnterRules inside comment body [PR #251692](https://github.com/microsoft/vscode/pull/251692)\n- [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart): Update indentation for PHP, JS, and TS [PR #251465](https://github.com/microsoft/vscode/pull/251465)\n- [@Sublimeful (Jian Qiang Wu)](https://github.com/Sublimeful): Implements Terminal: Run Recent Command when there are no terminals [PR #250799](https://github.com/microsoft/vscode/pull/250799)\n- [@tmm1 (Aman Karmani)](https://github.com/tmm1): [engineering] remove dead references to Swc transpile [PR #252375](https://github.com/microsoft/vscode/pull/252375)\n- [@UziTech (Tony Brix)](https://github.com/UziTech): feat: add middle mouse button scrolling [PR #245882](https://github.com/microsoft/vscode/pull/245882)\n- [@yiliang114 (易良)](https://github.com/yiliang114): Fix #250737, Match count result overflow in Notebook findWidget [PR #250738](https://github.com/microsoft/vscode/pull/250738)\n\nContributions to `vscode-copilot-chat` :\n\n- [@caohy1988 (Hai-Yuan Cao)](https://github.com/caohy1988): update the summary prompt for agent mode [PR #13](https://github.com/microsoft/vscode-copilot-chat/pull/13)\n- [@CharlesCNorton](https://github.com/CharlesCNorton): Update README.md [PR #54](https://github.com/microsoft/vscode-copilot-chat/pull/54)\n- [@gmacario (Gianpaolo Macario)](https://github.com/gmacario): docs(CONTRIBUTING): sync Table of Contents [PR #79](https://github.com/microsoft/vscode-copilot-chat/pull/79)\n- [@moonboxing (ASSEMAR MOHAMED)](https://github.com/moonboxing): update devcontainer-lock after pylint removal [PR #76](https://github.com/microsoft/vscode-copilot-chat/pull/76)\n\nContributions to `vscode-json-languageservice` :\n\n- [@aedenmurray (Aeden Murray)](https://github.com/aedenmurray): feat: Notify Invalid RegExp Patterns [PR #261](https://github.com/microsoft/vscode-json-languageservice/pull/261)\n\nContributions to `vscode-pull-request-github` :\n\n- [@dyhagho (Dyhagho Briceño)](https://github.com/dyhagho): fix: Allow Github.com auth when `github-enterprise.uri`\nis set [PR #7002](https://github.com/microsoft/vscode-pull-request-github/pull/7002)\n\nContributions to `vscode-ripgrep` :\n\n- [@benz0li (Olivier Benz)](https://github.com/benz0li): Add linux riscv64 target [PR #73](https://github.com/microsoft/vscode-ripgrep/pull/73)\n- [@Vector341](https://github.com/Vector341): Fix invalid download crash install [PR #66](https://github.com/microsoft/vscode-ripgrep/pull/66)\n\nContributions to `vscode-test` :\n\n- [@coliff (Christian Oliff)](https://github.com/coliff): Update .npmignore [PR #312](https://github.com/microsoft/vscode-test/pull/312)\n\nContributions to `language-server-protocol` :\n\n- [@billybonks (Sebastien Stettler)](https://github.com/billybonks): fix: improve readability of comment, [PR #2155](https://github.com/microsoft/language-server-protocol/pull/2155)\n- [@rcjsuen (Remy Suen)](https://github.com/rcjsuen): Add the Docker Language Server to the list [PR #2153](https://github.com/microsoft/language-server-protocol/pull/2153)\n- [@yangdanny97 (Danny Yang)](https://github.com/yangdanny97): Add Pyrefly to language servers list [PR #2160](https://github.com/microsoft/language-server-protocol/pull/2160)\n\nContributions to `monaco-editor` :\n\n- [@Ho1yShif (Shifra Williams)](https://github.com/Ho1yShif): Add snowflake sql keywords [PR #4915](https://github.com/microsoft/monaco-editor/pull/4915)\n\nContributions to `ripgrep-prebuilt` :\n\n- [@kxxt (Levi Zim)](https://github.com/kxxt)\n- Build binaries for riscv64 [PR #41](https://github.com/microsoft/ripgrep-prebuilt/pull/41)\n- Publish binary for riscv64 linux [PR #51](https://github.com/microsoft/ripgrep-prebuilt/pull/51)",
  "Tags": [
    "release"
  ],
  "Description": "Learn what is new in the Visual Studio Code June 2025 Release (1.102)\n\n[Read the full article](https://code.visualstudio.com/updates/v1_102)",
  "OutputDir": "_news",
  "FeedName": "Visual Studio Code Releases",
  "Author": "Visual Studio Code Team"
}
