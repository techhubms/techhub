{
  "Link": "https://code.visualstudio.com/updates/v1_103",
  "ProcessedDate": "2025-08-24 16:20:37",
  "PubDate": "2025-08-07T17:00:00+00:00",
  "FeedLevelAuthor": "Visual Studio Code - Code Editing. Redefined.",
  "Title": "July 2025 (version 1.103)",
  "FeedUrl": "https://code.visualstudio.com/feed.xml",
  "EnhancedContent": "Try [MCP servers](/mcp) to extend agent mode in VS Code!\n\nDismiss this update\n\n[Edit](https://vscode.dev/github/microsoft/vscode-docs/blob/main/release-notes/v1_103.md)\n\n# July 2025 (version 1.103)\n\n*Release date: August 7, 2025*\n\n**Update 1.103.1**: The update adds GPT-5 prompt improvements, support for GPT-5 mini, and addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22July+2025+Recovery+1%22+).\n\n**Update 1.103.2**: The update addresses these [issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22July+2025+Recovery+2%22+).\n\nDownloads: Windows: [x64](https://update.code.visualstudio.com/1.103.2/win32-x64-user/stable) [Arm64](https://update.code.visualstudio.com/1.103.2/win32-arm64-user/stable) | Mac: [Universal](https://update.code.visualstudio.com/1.103.2/darwin-universal/stable) [Intel](https://update.code.visualstudio.com/1.103.2/darwin/stable) [silicon](https://update.code.visualstudio.com/1.103.2/darwin-arm64/stable) | Linux: [deb](https://update.code.visualstudio.com/1.103.2/linux-deb-x64/stable) [rpm](https://update.code.visualstudio.com/1.103.2/linux-rpm-x64/stable) [tarball](https://update.code.visualstudio.com/1.103.2/linux-x64/stable) [Arm](https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions) [snap](https://update.code.visualstudio.com/1.103.2/linux-snap-x64/stable)\n\nWelcome to the July 2025 release of Visual Studio Code. There are many updates in this version that we hope you'll like, some of the key highlights include:\n\n- **MCP**\n\n- Revamped tool picker experience (Show more)\n- Enable more than 128 tools per agent request (Show more)\n- **Chat**\n\n- Use GPT-5 in VS Code (Show more)\n- Restore to a previous good state with chat checkpoints (Show more)\n- **Productivity**\n\n- Check out multiple branches simultaneously with Git worktrees (Show more)\n- Manage coding agent sessions in a dedicated view (Show more)\n\n>\n> If you'd like to read these release notes online, go to [Updates](https://code.visualstudio.com/updates) on [code.visualstudio.com](https://code.visualstudio.com).\n> > >\n\n>\n> **Insiders: Want to try new features as soon as possible?**\n>\n> You can download the nightly Insiders build and try the latest updates as soon as they are available.\n>\n> [Download Insiders](https://code.visualstudio.com/insiders)\n> > >\n\n## Chat\n\n### GPT 5 availability\n\nStarting today, GPT-5 is rolling out to all paid GitHub Copilot plans. GPT-5 is OpenAI's most capable model yet, bringing new advances in reasoning, coding, and chat. Learn more about the GPT-5 model availability in the [GitHub Changelog](https://github.blog/changelog/2025-08-07-openai-gpt-5-is-now-in-public-preview-for-github-copilot).\n\nOpen the Chat view and choose GPT-5 from the model picker to start using it for your chat conversations in VS Code. Learn more about [using language models in VS Code](https://code.visualstudio.com/docs/copilot/language-models).\n\n**Update 1.103.1**: This update adds significant prompt improvements to further enhance the quality and performance of the model.\n\n### GPT 5 mini availability\n\n**Update 1.103.1**\n\nStarting from this release, GPT-5 mini is rolling out to all GitHub Copilot plans. GPT-5 mini is OpenAI's faster, more cost-efficient variant of GPT-5. Learn more about the GPT-5 mini model availability in the [GitHub Changelog](https://aka.ms/vscode-github-changelog-gpt5-mini).\n\n### Chat checkpoints\n\n**Setting**: [chat.checkpoints.enabled](vscode://settings/chat.checkpoints.enabled)\n\nWe've introduced checkpoints that enable you to restore different states of your chat conversations. You can easily revert edits and go back to certain points in your chat conversation. This can be particularly useful if multiple files were changed in a chat session.\n\nWhen you select a checkpoint, VS Code reverts workspace changes and the chat history to that point. After restoring a checkpoint, you can redo that action as well!\n\nCheckpoints will be enabled by default and can be controlled with [chat.checkpoints.enabled](vscode://settings/chat.checkpoints.enabled).\n\n### Tool picker improvements\n\nWe've totally revamped the tool picker this iteration and adopted a new component called Quick Tree to display all the tools.\n\n![Screenshot showing the new tool picker using a quick tree, enabling collapsing and expanding nodes.](/assets/updates/1_103/tool-picker-quick-tree.png)\n\nNotable features:\n\n- Expand or collapse\n- Configuration options moved to the title bar\n- Sticky scrolling\n- Icon rendering\n\nLet us know what you think!\n\n### Tool grouping (Experimental)\n\n**Setting**: [github.copilot.chat.virtualTools.threshold](vscode://settings/github.copilot.chat.virtualTools.threshold)\n\nThe maximum number of tools that you can use for a single chat request is currently 128. Previously, you could quickly reach this limit by installing MCP servers with many tools, requiring you to deselect some tools in order to proceed.\n\nIn this release of VS Code, we have enabled an experimental tool-calling mode for when the number of tools exceeds the maximum limit. Tools are automatically grouped and the model is given the ability to activate and call groups of tools.\n\nThis behavior, including the threshold, is configurable via the setting [github.copilot.chat.virtualTools.threshold](vscode://settings/github.copilot.chat.virtualTools.threshold).\n\n### Terminal auto-approve improvements\n\n**Setting**: [chat.tools.terminal.autoApprove](vscode://settings/chat.tools.terminal.autoApprove)\n\nEarly terminal auto-approve settings were introduced last month. This release, the feature got many improvements. Learn more about [terminal auto-approval](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode#_autoapprove-terminal-commands-experimental) in our documentation.\n\n- We merged the `allowList`\nand `denyList` settings into the [chat.tools.terminal.autoApprove](vscode://settings/chat.tools.terminal.autoApprove) setting. If you were using the old settings, you should see a warning asking you to migrate to the new setting.\n- Regular expression matchers now support flags. This allows case insensitivity, for example in PowerShell, where case often doesn't matter:\n\n``` \"chat.tools.terminal.autoApprove\": { // Deny any `Remove-Item` command, regardless of case \"/^Remove-Item\\\\b/i\": false }\n\n```\n- There was some confusion around how the sub-command matching works, this is now explained in detail in the setting's description, but we also support matching against the complete command line.\n\n``` \"chat.tools.terminal.autoApprove\": { // Deny any _command line_ containing a reference to what is likely a PowerShell script \"/\\\\.ps1\\\\b/i\": { \"approve\": false, \"matchCommandLine\": true } }\n\n```\n- The auto approve reasoning is now logged to the Terminal Output channel. We plan to [surface this in the UI soon](https://github.com/microsoft/vscode/issues/256780).\n\n### Track progress with task lists (Experimental)\n\n**Setting**: [chat.todoListTool.enabled](vscode://settings/chat.todoListTool.enabled)\n\nThe great thing about agent mode is that you can give it a high-level task and have it implement it. As it plans the work and breaks it down into smaller tasks, it can be overwhelming to track the progress of all these individual tasks.\n\nThis milestone, we are introducing the task/todo list feature in chat to better help you see which tasks are completed and which ones are still pending. You can view the task list at the top of the Chat view, so you always have visibility into the progress being made. As the agent progresses through its work, it updates the task list.\n\nGet started by giving the agent a high-level task and ask it to track its work in a todo list!\n\nThis feature is still experimental and you can enable it with the [chat.todoListTool.enabled](vscode://settings/chat.todoListTool.enabled) setting.\n\n### Improved model management experience\n\nThis iteration, we've revamped the chat provider API, which is responsible for language model access. Users are now able to select which models appear in their model picker, creating a more personalized and focused experience.\n\n![Screenshot of the model picker showing various models from providers such as Copilot and OpenRouter](/assets/updates/1_103/modelpicker.png)\n\nWe plan to finalize this new API in the coming months and would appreciate any feedback. Finalization of this API will open up the extension ecosystem to implement their own model providers and further expand the bring your own key offering.\n\n### Azure DevOps repos remote index support\n\nThe [`#codebase` tool](https://code.visualstudio.com/docs/copilot/chat/copilot-chat-context#_perform-a-codebase-search) now supports remote indexes for workspaces that are linked to Azure DevOps repos. This enables `#codebase` to search for relevant snippets almost instantly without any initialization. This even works for larger repos with tens of thousands of indexable files. Previously, this feature only worked with GitHub linked repos.\n\nRemote indexes are used automatically when working in a workspace that is linked to Azure DevOps through git. Make sure you are also logged into VS Code with the Microsoft account you use to access the Azure DevOps repos.\n\nWe're gradually rolling out support for this feature on the services side, so not every organization might be able to use it initially. Based on the success of the rollout, we hope to turn on remote indexing for Azure DevOps for as many organizations as possible.\n\n### Improved reliability and performance of the run in terminal and task tools\n\nWe have migrated the tools for running tasks and commands within the terminal from the Copilot extension into the core [microsoft/vscode repository](https://github.com/microsoft/vscode). This gives the tools access to lower-level and richer APIs, allowing us to fix many of the terminal hanging issues. This update also comes with the benefit of more easily implementing features going forward, as we're no longer restricted to the capabilities of the extension API, especially any changes that need custom UI within the Chat view.\n\n### Output polling for tasks and terminals\n\nThe agent now waits for tasks and background terminals to complete before proceeding by using output polling. If a process takes longer than 20 seconds, you are prompted to continue waiting or move on. The agent will monitor the process for up to two minutes, summarizing the current state or reporting if the process is still running. This improves reliability when running long or error-prone commands in chat.\n\n### Task awareness improvement\n\nPreviously, the agent could only monitor active tasks. Now, it can track and analyze the output of both active and completed tasks, including those that have failed or finished running. This enhancement enables better troubleshooting and more comprehensive insights into task execution history.\n\n### Agent awareness of user created terminals\n\nThe agent now maintains awareness of all user-created terminals in the workspace. This enables it to track recent commands and access terminal output, providing better context for assisting with terminals and troubleshooting.\n\n### Terminal inline chat improvements\n\nTerminal inline chat now better detects your active shell, even when working within subshells (for example, launching Python or Node from PowerShell or zsh). This dynamic shell detection improves the accuracy of inline chat responses by providing more relevant command suggestions for your current shell type.\n\n![Screenshot of terminal inline chat showing node specific suggestions.](/assets/updates/1_103/hello_node.png)\n\n### Improved test runner tool\n\nThe test runner tool has been reworked. It now shows progress inline within chat, and numerous bugs in the tool have been fixed.\n\n### Edit previous requests\n\n**Setting**: [chat.editRequests](vscode://settings/chat.editRequests)\n\nLast iteration, we enabled users to edit previous requests and rolled out a few different access points. This iteration, we've made inline edits the default behavior. Click on the request bubble to begin editing that request. You can modify attachments, change the mode and model, and resend your request with modified text.\n\nYou can control the chat editing behavior with the [chat.editRequests](vscode://settings/chat.editRequests) setting if you prefer editing via the toolbar hovers above each request.\n\n### Open chat as maximized\n\n**Setting**: [workbench.secondarySideBar.defaultVisibility](vscode://settings/workbench.secondarySideBar.defaultVisibility)\n\nWe added two extra options for configuring the default visibility of the Secondary Side Bar to open it as maximized:\n\n- `maximizedInWorkspace`\n: open the Chat view as maximized when opening a new workspace\n- `maximized`\n: open the Chat view always as maximized, including in empty windows\n\n![Screenshot that shows the Chat view maximized.](/assets/updates/1_103/max-chat.png)\n\n### Pending chat confirmation\n\nTo help prevent accidentally closing a workspace where an agent session is actively changing files or responding to your request, we now show a dialog when you try to quit VS Code or close its window when a chat response is in progress:\n\n![Screenshot of confirmation to exit with running chat.](/assets/updates/1_103/confirm-chat-exit.png)\n\n### OS notification on user action\n\n**Setting**: [chat.notifyWindowOnConfirmation](vscode://settings/chat.notifyWindowOnConfirmation)\n\nWe now leverage the OS native notification system to show a toast when user confirmation is needed within a chat session. Enable this behavior with the [chat.notifyWindowOnConfirmation](vscode://settings/chat.notifyWindowOnConfirmation).\n\n![Screenshot of toast for confirmation of a chat agent.](/assets/updates/1_103/chat-toast.png)\n\nWe plan to improve this experience in the future to allow for displaying more information and for allowing you to approve directly from the toast. For now, selecting the toast focuses the window where the confirmation originated from.\n\n### Math support in chat (Preview)\n\n**Setting**: [chat.math.enabled](vscode://settings/chat.math.enabled)\n\nChats now have initial support for rendering mathematical equations in responses:\n\n![Screenshot of the Chat view, showing inline and block equations in a chat response.](/assets/updates/1_103/chat-math.png)\n\nThis feature is powered by [KaTeX](https://katex.org) and supports both inline and block math equations. Inline math equations can be written by wrapping the markup in single dollar signs (`$...$` ), while block math equations use two dollar signs (`$$...$$` ).\n\nMath rendering can be enabled using [chat.math.enabled](vscode://settings/chat.math.enabled). Currently, it is off by default but we plan to enable it in a future release, after further testing.\n\n### Context7 integration for project scaffolding (Experimental)\n\n**Setting**: [github.copilot.chat.newWorkspace.useContext7](vscode://settings/github.copilot.chat.newWorkspace.useContext7)\n\nWhen you scaffold a new project with `#new` in chat, you can now make sure that it uses the latest documentation and APIs from **Context7**, if you have already installed the Context7 MCP server.\n\n## MCP\n\n### Server autostart and trust\n\n**Setting**: [chat.mcp.autostart](vscode://settings/chat.mcp.autostart)\n\nPreviously, when you added or updated an MCP server configuration, VS Code would show a blue \"refresh\" icon in the Chat view, enabling you to manually refresh the list of tools. In the milestone, you can now configure the auto-start behavior for MCP servers, so you no longer have to manually restart the MCP server.\n\nUse the [chat.mcp.autostart](vscode://settings/chat.mcp.autostart) setting to control this behavior. You can also change this setting within the icon's tooltip and see which servers will be started:\n\n![Screenshot showing the hover of the refresh MCP server icon, enabling you to configure the auto-start behavior.](/assets/updates/1_103/mcp-refresh-tip.png)\n\nThe first time an MCP server is started after being updated or changed, we now show a dialog asking you to trust the server. Giving trust to these servers is particularly important with autostart turned on to prevent running undesirable commands unknowingly.\n\nLearn more about [using MCP servers in VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) in our documentation.\n\n### Client credentials flow for remote MCP servers\n\nThe ideal flow for a remote MCP server that wants to support authentication is to use an auth provider that supports Dynamic Client Registration (DCR). This enables the client (VS Code) to register itself with that auth provider, so the auth flow is seamless.\n\nHowever, not every auth provider supports DCR, so we introduced a client-credentials flow that enables you to supply your own client ID and (optionally) client secret that will be used when taking you through the auth provider's auth flow. Here's what that looks like:\n\n- Step 1: VS Code detects that DCR can't be used, and asks if you want to do the client credentials flow:\n\n![Screenshot of a modal dialog saying that DCR is not supported but you can provide client credentials manually.](/assets/updates/1_103/mcp-auth-no-dcr1.png)\n\n>\n> **IMPORTANT**: At this point, you would go to the auth provider's website and manually create an application registration. There you will put in the redirect URIs mentioned in the modal dialog.\n> >\n- Step 2: From the auth provider's portal, you will get a client ID and maybe a client secret. You'll put the client ID in the input box that appears and hit Enter:\n\n![Screenshot of an input box to provide the client ID for the MCP server.](/assets/updates/1_103/mcp-auth-no-dcr2.png)\n- Step 3: Then you'll put in the client secret if you have one, and hit Enter (leave blank if you don't have one)\n\n![Screenshot of an input box to provide the optional client secret for the MCP server.](/assets/updates/1_103/mcp-auth-no-dcr3.png)\n\nAt that point, you'll be taken through the typical auth flow to authenticate the MCP server you're working with.\n\n### Remove dynamic auth provider from Account menu\n\nSince the addition of remote MCP authentication, there has been a command available in the Command Palette called **Authentication: Remove Dynamic Authentication Providers**, which enables you to remove client credentials (client ID and, if available, a client secret) and all account information associated with that provider.\n\nWe've now exposed this command in the Account menu. You can find it inside of an MCP server account:\n\n![Screenshot of the Account menu showing the manage dynamic auth option in an account's submenu.](/assets/updates/1_103/mcp-remove-dynamic-auth1.png)\n\nor at the root of the menu if you don't have any MCP server accounts yet:\n\n![Screenshot of the Account menu showing the manage dynamic auth option in the root of account menu.](/assets/updates/1_103/mcp-remove-dynamic-auth2.png)\n\n### Support for `resource_link`\nand structured output\n\nVS Code now fully supports the latest MCP specification, version `2025-06-18` , with support for `resource_link` s and structured output in tool results.\n\n## Accessibility\n\n### Accessible chat elicitations\n\nWhen the agent prompts for user input, such as whether to keep waiting for a process, the chat elicitation is now accessible to screen readers. You are alerted when the prompt appears, can navigate to it with the keyboard, and can review the message in the accessible view.\n\n### Control file opening for chat edits\n\nA new setting, [accessibility.openChatEditedFiles](vscode://settings/accessibility.openChatEditedFiles), lets you choose whether files are automatically opened as the agent edits them in chat. Enable this setting for more control over which files appear in your editor.\n\n### View all and previous edits commands\n\nThe **View All Edits** and **View Previous Edits** commands are now available throughout the editor, making it easy to review changes made by the agent. These commands are especially helpful when [accessibility.openChatEditedFiles](vscode://settings/accessibility.openChatEditedFiles) is disabled, allowing you to track edits without opening each file.\n\n### Side Bar visibility announcements\n\nWhen the Primary or Secondary Side Bar is shown or hidden, an ARIA announcement now notifies you of this change. This improves accessibility by ensuring screen reader users are aware of Side Bar visibility updates.\n\n### Accessibility testing with Playwright\n\nWe have added automated accessibility tests for the editor using Playwright. These tests help us continuously validate that Visual Studio Code meets accessibility standards and best practices, ensuring a better experience for all users.\n\n## Editor Experience\n\n### Settings search suggestions\n\nThe AI search results toggle in the search box of the Settings editor, indicated by a sparkle, is now available for all users. The toggle is enabled when AI search results have loaded and are available. Pressing the toggle switches between the AI and non-AI search results.\n\nThe AI settings search results are based on semantic similarity instead of string matching. For example, `editor.fontSize` appears as an AI settings search result when you search for \"increase text size\".\n\n![Screenshot of AI results in the Settings editor for &quot;increase text size&quot; showing editor.fontSize setting.](/assets/updates/1_103/settings-editor-toggle.png)\n\n### Editor tab context menu\n\nWe cleaned up the editor tab context menu to group related options for splitting and moving into a submenu:\n\n![Screenshot that shows the 'Split and Move' editor tab context menu.](/assets/updates/1_103/editor-menu.png)\n\n### AI statistics (Preview)\n\n**Setting**: [editor.aiStats.enabled](vscode://settings/editor.aiStats.enabled)\n\nWe added an experimental feature for displaying basic AI statistics. Use the [editor.aiStats.enabled](vscode://settings/editor.aiStats.enabled) to enable this feature, which is disabled by default.\n\nThis feature shows you, per project, the percentage of characters that was inserted by AI versus inserted by typing. It also keeps track of how many inline and next edit suggestions you accepted during the current day.\n\n![Screenshot showing the AI statistic hover information in the Status Bar.](/assets/updates/1_103/ai-stats.png)\n\n## Notebooks\n\n### Notebook inline chat with agent tools\n\n**Setting**: [inlineChat.notebookAgent](vscode://settings/inlineChat.notebookAgent)\n\nThe notebook inline chat control can now use the full suite of notebook agent tools to enable additional capabilities like running cells and installing packages into the kernel.\n\nTo enable agent tools in notebooks, enable the new experimental setting [inlineChat.notebookAgent](vscode://settings/inlineChat.notebookAgent). This also currently requires enabling the setting for inline chat v2 [inlineChat.enableV2](vscode://settings/inlineChat.enableV2).\n\n### Install dependencies in Virtual Environments created with uv\n\nWe now support installing required dependencies when you run Jupyter Notebooks against a Virtual Environment created using [uv](https://docs.astral.sh/uv/pip/environments/).\n\n## Source Control\n\n### Git worktree support\n\n**Setting**: [git.detectWorktrees](vscode://settings/git.detectWorktrees)\n\nTo address a long-standing [feature request](https://github.com/microsoft/vscode/issues/68038), this milestone we have added Git worktree support. Worktrees let you check out multiple branches at once, making it easy to test changes or work in parallel without switching contexts.\n\nWhen opening a folder or workspace that contains a git repository, we now automatically detect worktrees and display them in the Source Control Repositories view. You can now view, create, delete, and open worktrees in a new or current window by using commands available from the Command Palette or Source Control Repositories view. You can disable this functionality by toggling the [git.detectWorktrees](vscode://settings/git.detectWorktrees) setting.\n\n![Screenshot of create worktree command in Source Control view.](/assets/updates/1_103/repository_worktree_submenu.png)\n\n![Screenshot of open and delete worktree commands in the Source Control view.](/assets/updates/1_103/worktree_specific_submenu.png)\n\n### Repositories view\n\nThe Source Control Repositories view displays all source control providers that were discovered in the current folder/workspace. This milestone, we have updated the rendering of the view in order to visually distinguish between repositories, submodules, and worktrees. We also show the parent-child relationship between repositories, submodules and worktrees.\n\n![Screenshot of the Source Control Repositories view showing two repositories and a worktree associated with one of the repos.](/assets/updates/1_103/repositories-view.png)\n\n## Terminal\n\n### Documentation support in terminal suggest\n\nTerminal suggestions powered by language servers (LSP) now include inline documentation, similar to what you see in the editor. Starting with the Python REPL, you'll get helpful descriptions and usage details for commands as you type.\n\nYou currently need these settings to enable LSP suggestions in the terminal:\n\n- [python.terminal.shellIntegration.enabled](vscode://settings/python.terminal.shellIntegration.enabled)\n- [python.analysis.supportAllPythonDocuments](vscode://settings/python.analysis.supportAllPythonDocuments)\n\n### Voice dictation\n\nNow that natural language input is supported in terminals, including those enabled by the Gemini and Claude extensions, we have reintroduced voice dictation in the terminal. You can start or stop dictation by using the **Terminal: Start Dictation in Terminal** and **Terminal: Stop Dictation in Terminal** commands.\n\n### Improved shell integration diagnostics\n\n[Shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) is the foundation that many features in the integrated terminal are built upon such as [sticky scroll](https://code.visualstudio.com/docs/terminal/shell-integration#_sticky-scroll), [quick fixes](https://code.visualstudio.com/docs/terminal/shell-integration#_quick-fixes) and [agent mode's](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode) ability to understand what's happening inside the terminal.\n\nThis release features some improved diagnostics when you hover the terminal and select **Show Details**. You should now see the detected shell type and current working directory:\n\n![Screenshot of the detailed terminal tab hover showing the shell type like pwsh and the current working directory.](/assets/updates/1_103/terminal-si-diagnostics.png)\n\nThis is one of the first places to look if one of these rich features isn't working as expected.\n\n## Languages\n\n### Python\n\n#### Shell integration support for Python 3.13 and above\n\nWe now support shell integration for Python when using version 3.13 or later. When enabled, PyREPL is automatically disabled to ensure compatibility. You can disable shell integration if you prefer to continue using PyREPL.\n\n![Screenshot showing the Python shell integration setting in the Settings editor.](/assets/updates/1_103/python_shellIntegration.png)\n\n#### Python Environments extension improvements\n\nThe [Python Environments Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-python-envs) continued to receive bug fixes and improvements as part of the controlled roll-out to stable users. To use the Python Environments extension during the roll-out, make sure the extension is installed and add the following to your VS Code `settings.json` file: `\"python.useEnvironmentsExtension\": true` .\n\n### TypeScript 5.9\n\nVS Code now includes TypeScript 5.9.2. This major update brings a few new language improvements, including [support for import defer](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/#support-for-import-defer), along with tooling improvements such as [improved docs for many DOM apis](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/#support-for-import-defer).\n\nCheck out the [TypeScript 5.9 release blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/) for more details on this update.\n\n### Expandable hovers for JavaScript and TypeScript\n\nWhen you hover over a symbol in JavaScript or TypeScript, VS Code tries to show the most useful IntelliSense type information about that symbol. Types can be very complex, so one challenge for us has been trying to find the right balance between showing enough details to be useful, while not showing so much info that it becomes overwhelming. It's hard to come up with a good one size fits all approach, and also the level of type detail you want might change depending on what you are working on.\n\nThat's why this iteration, we've added new UI that gives you more control over how types are shown in hovers. When you hover over a symbol, now you can select the little `+` icon on the left side of the hover control to expand the interfaces and complex types in the hover into their components. For example, you can use this to see the properties of an interface directly in the hover:\n\nHovers can be expanded multiple times, which recursively expands types from the previous expansion. If you ever expand too much, just select the `-` icon to go back to the previous level. Also keep in mind that not every type is expandable and that we still need some limits on just how much expansion we can support. [Let us know](https://github.com/microsoft/vscode/issues/new?template=bug_report.md) if there are any cases where expandable hovers aren't working how you'd like.\n\n## Contributions to extensions\n\n### GitHub Pull Requests\n\nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues.\n\nReview the [changelog for the 0.116.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#01160) release of the extension to learn about everything in the release.\n\n#### Pull request header cleanup\n\nWe've simplified the button bar in the pull request description header. The copy actions are now in the right-click context menu of the PR link.\n\n![Screenshot of the simplified PR header when opening the PR details.](/assets/updates/1_103/simplified-pr-header-buttons.png)\n\n#### Show coding agent PRs in chat\n\n**Setting**: [githubPullRequests.codingAgent.uiIntegration](vscode://settings/githubPullRequests.codingAgent.uiIntegration)\n\nWhen you start a coding agent session (via `#copilotCodingAgent` or with the **Delegate to coding agent** action), the pull request is rendered as a card in the Chat view.\n\n![Screenshot of a coding agent PR card in the Chat view.](/assets/updates/1_103/pr-card-in-chat.png)\n\nEnable the [githubPullRequests.codingAgent.uiIntegration](vscode://settings/githubPullRequests.codingAgent.uiIntegration) setting to enable the new **Delegate to coding agent** button in the Chat view, for repositories that have the agent enabled.\n\n#### Chat sessions (Experimental)\n\n##### Coding agent chats\n\nBuilding off [last iteration's Copilot coding agent integration](https://code.visualstudio.com/updates/v1_102#_github-pull-requests), you can now manage a coding agent session from a dedicated chat editor. This enables you to follow the progress of the coding agent, provide follow-up instructions, and see the agent's responses in a dedicated chat editor.\n\n- Start a coding agent session from VS Code with the `#copilotCodingAgent`\ntool or via the [UI controls](https://code.visualstudio.com/updates/v1_102#_start-a-coding-agent-session-preview).\n- Follow the progress of coding agent in an attached chat editor.\n\n![Screenshot showing Coding Agent progress.](/assets/updates/1_103/coding-agent-progress.png)\n- Provide follow-up instructions directly from chat.\n\n![Screenshot showing providing a followup in chat to coding agent.](/assets/updates/1_103/coding-agent-follow-up.png)\n\n##### Chat sessions view\n\n**Setting**: [chat.agentSessionsViewLocation](vscode://settings/chat.agentSessionsViewLocation)\n\nEnable the [chat.agentSessionsViewLocation](vscode://settings/chat.agentSessionsViewLocation) setting to try this experimental feature.\n\n- When set to `view`\n, you will see a new **Chat Sessions** view is shown in the VS Code Side Bar. This view enables you to manage and interact with your local chat sessions, as well as the coding agent sessions.\n\n![Screenshot showing the Coding Agent Sessions view.](/assets/updates/1_103/coding-agent-sessions-view.png)\n- When set to `showChatsMenu`\n, coding agent chat sessions are shown alongside the local chat history.\n\n![Screenshot showing the Coding Agent Sessions Quick Pick.](/assets/updates/1_103/coding-agent-sessions-quick-pick.png)\n\nThis integration requires the latest GitHub Pull Request extension and a repository open that supports Copilot coding agent. For more information, see the new documentation on how to [use coding agent in VS Code](https://aka.ms/coding-agent-docs).\n\n*Theme: [Sharp Solarized](https://marketplace.visualstudio.com/items?itemName=joshspicer.sharp-solarized) (preview on [vscode.dev](https://vscode.dev/editor/theme/joshspicer.sharp-solarized))*\n\n## Extension Authoring\n\n### Terminal activation events\n\nTwo new activation events are available for extensions:\n\n- `onTerminal`\n: Triggered when any terminal is opened.\n- `onTerminalShellIntegration`\n: Triggered when rich shell integration is activated for a terminal.\n\nYou can specify a `shellType` to target specific shells. For example, `onTerminalShellIntegration:bash` activates when shell integration is enabled for a Bash terminal.\n\n## Proposed APIs\n\n### Render custom webviews in chat responses\n\nThe Chat Output Renderer API lets extensions take chat responses beyond text and images. With it, your extension can use a [webview](https://code.visualstudio.com/api/extension-capabilities/extending-workbench) to render arbitrary HTML content in the chat output. Example use cases include custom visualizations, inline previews, and even interactive controls.\n\nThe [Chat Output Renderer extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-output-renderer-sample) shows how this API can be used to render [Mermaid diagrams](http://mermaid.js.org) in chat responses. Here's an example of this extension sample in action:\n\n![Screenshot showing a mermaid diagram in a chat response.](/assets/updates/1_103/chat-output-1.png)\n\nThe neat thing is not that VS Code can render Mermaid diagrams, but that this rendering can be contributed entirely by extensions. With it, you can iterate on the custom outputs in chat:\n\n![Screenshot asking chat to generate a modified version of the first diagram.](/assets/updates/1_103/chat-output-2.png)\n\nHere's a quick run down of how the API works:\n\n1. Register a language model tool that can return custom data as part of its response. We use a mime type to identify this data.\n2. Register a chat output renderer for this mime type.\n3. When a language model calls the tool, invoke the chat output renderer to render it into a webview in the response.\n\nCheck out the [extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-output-renderer-sample) for a full end-to-end example of this API in action.\n\nThis API has the potential to be very powerful and enable some amazing new chat experiences, so give it a try and let us know what you think!\n\n### Chat Session Provider API\n\nThe new Chat Session Provider API proposal enables extensions to integrate their own chat backend into VS Code's native chat UI. Using it, your extension can open a new chat session, populate the history for that session, and respond to new user prompts.\n\nThis API is still in early stages and is likely to change. However we're already using it to power the new GitHub coding agent session flow, which loads chats from GitHub and allows you to chat with an agent that is controlled entirely by GitHub.\n\n### Task execution terminal\n\nExtension authors can now access the terminal associated with a running task via the new `taskExecution.terminal` property. This makes it easier to identify which terminal is linked to a specific task and interact with it programmatically.\n\n### SecretStorage `keys()`\nAPI\n\nIf you have ever wanted to get the list of keys that your extension has stored in `SecretStorage` , you can now do so with the new proposed `keys()` API:\n\n``` export async function activate(context: ExtensionContext) { await context.secrets.store('mySecret', 'superSecretValue'); await context.secrets.store('mySecret2', 'superSecretValue2'); const keys = await context.secrets.keys(); console.log('All secret keys:', keys); // returns ['mySecret', 'mySecret2'] }\n\n```\n\n>\n> **NOTE**: This change is dependent on a change to anything that provides an alternative implementation of a Secret Storage, notably [https://vscode.dev](https://vscode.dev), which has adopted the new API, and [https://github.dev](https://github.dev), which will adopt the new API soon. In an environment where it is not supported, this API will throw an exception.\n> >\n\n## Engineering\n\n### packages.microsoft.com key update\n\n`packages.microsoft.com` has updated their signing key and as a result, Linux users on newer distributions should stop seeing key-related warnings or errors while installing VS Code. Debian-based distributions automatically receive the new key, whereas users on other distributions may have to manually remove the old key before [importing the new key](https://code.visualstudio.com/docs/setup/linux#_install-vs-code-on-linux).\n\n### Electron 37 update\n\nIn this milestone, we are promoting the Electron 37 update to users on our Stable release. This update comes with Chromium 138.0.7204.100 and Node.js 22.17.0. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.\n\n## Notable fixes\n\n- [vscode#252384](https://github.com/microsoft/vscode/issues/252384) - Agent Mode pauses when VS Code loses focus\n\n## Thank you\n\nLast but certainly not least, a big ***Thank You*** to the contributors of VS Code.\n\n### Issue tracking\n\nContributions to our issue tracking:\n\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD)\n- [@albertosantini (Alberto Santini)](https://github.com/albertosantini)\n- [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n\n### Pull Requests\n\nContributions to `vscode` :\n\n- [@adityavc (Aditya Chittari)](https://github.com/adityavc): #134898 - trimming whitespace when deleting new line character [PR #210870](https://github.com/microsoft/vscode/pull/210870)\n- [@adrianstephens](https://github.com/adrianstephens): Add debug/watch/context to list of valid menu extension points [PR #237751](https://github.com/microsoft/vscode/pull/237751)\n- [@andy0130tw (Andy Pan)](https://github.com/andy0130tw): Support the locale argument of TypeScript language server on the web version (#\\_256252) [PR #256256](https://github.com/microsoft/vscode/pull/256256)\n- [@Benimautner](https://github.com/Benimautner): Add inertial scrolling to scrollable elements [PR #244034](https://github.com/microsoft/vscode/pull/244034)\n- [@BlackHole1 (Kevin Cui)](https://github.com/BlackHole1): fix: cannot display MAKR Underlined in minimap [PR #226116](https://github.com/microsoft/vscode/pull/226116)\n- [@bytemain (Jiacheng)](https://github.com/bytemain): refactor(terminal): introduce ITerminalLaunchResult interface [PR #256284](https://github.com/microsoft/vscode/pull/256284)\n- [@c-claeys (Cristopher Claeys)](https://github.com/c-claeys): Make ServicesAccessor typing more consistent in editor commands [PR #218369](https://github.com/microsoft/vscode/pull/218369)\n- [@CookieeQuinn (Quinn)](https://github.com/CookieeQuinn): Fix issue #212484: caretRangeFromPoint was not working when invoked over text which used user-select: none. [PR #219819](https://github.com/microsoft/vscode/pull/219819)\n- [@CrazySteve0605 (Wang Chong)](https://github.com/CrazySteve0605): fix(gettingStarted): remove duplicated \"can be\" in hover description [PR #254412](https://github.com/microsoft/vscode/pull/254412)\n- [@dbreen (Dan Breen)](https://github.com/dbreen): Use a saner default scrollbar width for the Explorer [PR #199784](https://github.com/microsoft/vscode/pull/199784)\n- [@devlinjunker](https://github.com/devlinjunker): Expose undo/redo and canUndo/canRedo methods on model API [PR #213954](https://github.com/microsoft/vscode/pull/213954)\n- [@dibarbet (David Barbet)](https://github.com/dibarbet): Enable angle bracket colorization for C# [PR #247665](https://github.com/microsoft/vscode/pull/247665)\n- [@duncpro (Duncan)](https://github.com/duncpro): Vertical pipe characters should terminate URLs [PR #232460](https://github.com/microsoft/vscode/pull/232460)\n- [@dylanchu](https://github.com/dylanchu): TerminalTaskSystem: Fix addtion arguments for string command [PR #251201](https://github.com/microsoft/vscode/pull/251201)\n- [@estrizhok (Eugene Strizhok)](https://github.com/estrizhok): Correct capitalization of 'JetBrains' and 'ReSharper' in settings UI [PR #254472](https://github.com/microsoft/vscode/pull/254472)\n- [@firelizzard18 (Ethan Reesor)](https://github.com/firelizzard18): Context key `availableEditorIds`\nfor diff editors [PR #250198](https://github.com/microsoft/vscode/pull/250198)\n- [@futurist (James Yang)](https://github.com/futurist): fix(terminal): getBufferReverseIterator bug after scrollback limit reached [PR #257311](https://github.com/microsoft/vscode/pull/257311)\n- [@g0t4 (Wes Higbee)](https://github.com/g0t4): Add editor option to allow selection highlighting of multiline selections and another option to control max length [PR #228982](https://github.com/microsoft/vscode/pull/228982)\n- [@gabrielcsapo (Gabriel Csapo)](https://github.com/gabrielcsapo): feat: adds (requestTime) logLevel to match tsserver options [PR #250778](https://github.com/microsoft/vscode/pull/250778)\n- [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n- Add `SecretStorage.keys()`\nas proposed API [PR #252804](https://github.com/microsoft/vscode/pull/252804)\n- Fix an `@param`\ntypo [PR #257219](https://github.com/microsoft/vscode/pull/257219)\n- [@hickford (M Hickford)](https://github.com/hickford): Add editor action 'reverse lines' [PR #242926](https://github.com/microsoft/vscode/pull/242926)\n- [@HolgerJeromin (Holger Jeromin)](https://github.com/HolgerJeromin): vscode api: Raise compatibility to webview content [PR #253635](https://github.com/microsoft/vscode/pull/253635)\n- [@iann0036 (Ian Mckay)](https://github.com/iann0036): fix: Typo in lm invokeTool description [PR #257975](https://github.com/microsoft/vscode/pull/257975)\n- [@jiahaoxiang2000 (isomo)](https://github.com/jiahaoxiang2000): Fix git.diff.stageHunk command to work with keyboard shortcuts [PR #254145](https://github.com/microsoft/vscode/pull/254145)\n- [@Jiogo18 (Jérôme Lécuyer)](https://github.com/Jiogo18): Git - l10n discard changes dialogs [PR #254366](https://github.com/microsoft/vscode/pull/254366)\n- [@joelverhagen (Joel Verhagen)](https://github.com/joelverhagen)\n- [WIP] Add support for NuGet as an MCP package source (VS Code) [PR #254678](https://github.com/microsoft/vscode/pull/254678)\n- Add experiment flag around NuGet MCP assisted config [PR #257463](https://github.com/microsoft/vscode/pull/257463)\n- [@Jose-AE](https://github.com/Jose-AE): Fix Jittery editor mouse wheel zoom when setting window.zoomLevel = 1 [PR #227916](https://github.com/microsoft/vscode/pull/227916)\n- [@joyceerhl (Joyce Er)](https://github.com/joyceerhl): fix: make chat input placeholder less cryptic [PR #255601](https://github.com/microsoft/vscode/pull/255601)\n- [@justin39 (Justin Wang)](https://github.com/justin39)\n- Add commit\\_id option to ServeWebArgs for specific client version [PR #255494](https://github.com/microsoft/vscode/pull/255494)\n- Fix --commit-id flag for code serve-web [PR #258904](https://github.com/microsoft/vscode/pull/258904)\n- [@jwangxx (James Wang)](https://github.com/jwangxx): Add the ability to clear a ChatResponseStream, passing in a reason which results in a warning being displayed [PR #257271](https://github.com/microsoft/vscode/pull/257271)\n- [@Kaidesuyoo (Kaidesuyo)](https://github.com/Kaidesuyoo): fix: Incorrect webWorkerExtensionHost startup process on vscode desktop [PR #234505](https://github.com/microsoft/vscode/pull/234505)\n- [@madskristensen (Mads Kristensen)](https://github.com/madskristensen): Updated references to schemastore.org [PR #254690](https://github.com/microsoft/vscode/pull/254690)\n- [@martijnwalraven (Martijn Walraven)](https://github.com/martijnwalraven): Fix notebook inline values when using language provider [PR #254264](https://github.com/microsoft/vscode/pull/254264)\n- [@mortalYoung (野迂迂)](https://github.com/mortalYoung): feat: editor.minimap.autohide support scroll [PR #253868](https://github.com/microsoft/vscode/pull/253868)\n- [@neorth (Joakim Berglund)](https://github.com/neorth): CamelCase first word if not acronym [PR #229797](https://github.com/microsoft/vscode/pull/229797)\n- [@Ninglo (Ninglo)](https://github.com/Ninglo): Fix `editor.wordSegmenterLocales`\nconfiguration don't take effect in simpleWidget editors (like chat or SCM input Editor) [PR #223921](https://github.com/microsoft/vscode/pull/223921)\n- [@OfekShilon (Ofek)](https://github.com/OfekShilon): Fix #4775: Escape user code before incorporating in a regex [PR #236809](https://github.com/microsoft/vscode/pull/236809)\n- [@omar-cs (Omar Carrizales)](https://github.com/omar-cs): Issue #168531: Cursor Height [PR #211473](https://github.com/microsoft/vscode/pull/211473)\n- [@Q1CHENL (Qichen Liu 刘启辰)](https://github.com/Q1CHENL): Fix: prevent view shift when enable minimap with right-click on the scrollbar [PR #210510](https://github.com/microsoft/vscode/pull/210510)\n- [@qirong77](https://github.com/qirong77): Fix the unexpected console error that occurs when updating the shadow dom selection in monaco-editor [PR #215780](https://github.com/microsoft/vscode/pull/215780)\n- [@raffaeu (Raffaele Garofalo)](https://github.com/raffaeu): Feature/move editor menu [PR #247818](https://github.com/microsoft/vscode/pull/247818)\n- [@RedCMD (RedCMD)](https://github.com/RedCMD): Fix empty end bracket error [PR #240609](https://github.com/microsoft/vscode/pull/240609)\n- [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing)\n- Add \\*.tsbuildinfo to .gitignore [PR #254225](https://github.com/microsoft/vscode/pull/254225)\n- Add RTL support based on decorations [PR #255455](https://github.com/microsoft/vscode/pull/255455)\n- [@rfon6ngy (Griffon Langyer)](https://github.com/rfon6ngy): Allow \\n to trigger a softwrap [PR #231120](https://github.com/microsoft/vscode/pull/231120)\n- [@Rishi-infy47 (Saptarshi Chakraborty)](https://github.com/Rishi-infy47): fix: changed the node js version for devcontainer [PR #257400](https://github.com/microsoft/vscode/pull/257400)\n- [@sahin52 (Sahin Kasap)](https://github.com/sahin52): fix: Quick search does not retain search term [PR #234368](https://github.com/microsoft/vscode/pull/234368)\n- [@Schpoone (Jason Kuo)](https://github.com/Schpoone)\n- Use preserveFocus when focusing stack frames [PR #251964](https://github.com/microsoft/vscode/pull/251964)\n- Fix popup message when hovering over an instruction breakpoint [PR #254925](https://github.com/microsoft/vscode/pull/254925)\n- [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n- fix: memory leak in extension features tab [PR #256887](https://github.com/microsoft/vscode/pull/256887)\n- fix: memory leak in editor edit context [PR #256957](https://github.com/microsoft/vscode/pull/256957)\n- fix: set edit context to undefined in dispose [PR #256965](https://github.com/microsoft/vscode/pull/256965)\n- fix: memory leak in ChatInputPart [PR #257082](https://github.com/microsoft/vscode/pull/257082)\n- fix: memory leak in context key [PR #258206](https://github.com/microsoft/vscode/pull/258206)\n- [@Skn0tt (Simon Knott)](https://github.com/Skn0tt): Fix testFailure stringify [PR #258463](https://github.com/microsoft/vscode/pull/258463)\n- [@timheuer (Tim Heuer)](https://github.com/timheuer): Adds support for proper localhost loopback on RFC 6761 [PR #256617](https://github.com/microsoft/vscode/pull/256617)\n- [@tmm1 (Aman Karmani)](https://github.com/tmm1)\n- [engineering] add testSplit option to unit-test runner [PR #253049](https://github.com/microsoft/vscode/pull/253049)\n- [dev] shortcut to open devtools attached to exthost [PR #253139](https://github.com/microsoft/vscode/pull/253139)\n- [engineering] ensure typescript integration tests emit junit reports [PR #253528](https://github.com/microsoft/vscode/pull/253528)\n- [engineering] add label to packageTask [PR #253779](https://github.com/microsoft/vscode/pull/253779)\n- [engineering] parallelize unzip in product-build-darwin-universal.yml [PR #257775](https://github.com/microsoft/vscode/pull/257775)\n- [@ttttotem (ttttotem)](https://github.com/ttttotem): Horizontal dragging auto-scroll [PR #235174](https://github.com/microsoft/vscode/pull/235174)\n- [@turansky (Victor Turansky)](https://github.com/turansky): fix: `EvaluatableExpression`\nproperties jsdoc [PR #257930](https://github.com/microsoft/vscode/pull/257930)\n- [@yamachu (Yusuke Yamada)](https://github.com/yamachu)\n- Fix invalid settings keys [PR #254609](https://github.com/microsoft/vscode/pull/254609)\n- Revert \"refactor: remove redundant actionRunner override in ChatEditorOverlayWidget\" [PR #255456](https://github.com/microsoft/vscode/pull/255456)\n- [@yutotnh (yutotnh)](https://github.com/yutotnh): Fix the editor.wordSegmenterLocales description in the settings [PR #210305](https://github.com/microsoft/vscode/pull/210305)\n\nContributions to `vscode-codicons` :\n\n- [@desean1625 (Sean Sullivan)](https://github.com/desean1625): Add link in readme to where you can easily preview and search for icons. [PR #295](https://github.com/microsoft/vscode-codicons/pull/295)\n\nContributions to `vscode-copilot-chat` :\n\n- [@24anisha](https://github.com/24anisha)\n- Add microsoft internal telemetry [PR #341](https://github.com/microsoft/vscode-copilot-chat/pull/341)\n- Internal telemetry fixes -- conversation id and message id [PR #369](https://github.com/microsoft/vscode-copilot-chat/pull/369)\n- [@danilofalcao (Danilo Falcão)](https://github.com/danilofalcao): list all openrouter models without category but tools support [PR #208](https://github.com/microsoft/vscode-copilot-chat/pull/208)\n- [@devm33 (Devraj Mehta)](https://github.com/devm33): Remove unused fields from Completion response interface [PR #123](https://github.com/microsoft/vscode-copilot-chat/pull/123)\n- [@johnmog (John Mogensen)](https://github.com/johnmog): Git LFS instructions to CONTRIBUTING.md [PR #156](https://github.com/microsoft/vscode-copilot-chat/pull/156)\n- [@jwangxx (James Wang)](https://github.com/jwangxx): When rendering the prompts, exclude turns from the history that errored due to prompt filtration [PR #399](https://github.com/microsoft/vscode-copilot-chat/pull/399)\n- [@shsuman (Shantnu Suman)](https://github.com/shsuman): Print Error literal at the start of all error messages for better parsing from the logs [PR #260](https://github.com/microsoft/vscode-copilot-chat/pull/260)\n- [@srilovesflutter (Sri)](https://github.com/srilovesflutter): corrected typo [PR #129](https://github.com/microsoft/vscode-copilot-chat/pull/129)\n- [@trycatchkamal (Kamal Raj Sekar)](https://github.com/trycatchkamal): Removed unused code from tests [PR #207](https://github.com/microsoft/vscode-copilot-chat/pull/207)\n- [@vritant24 (Vritant Bhardwaj)](https://github.com/vritant24)\n- Add ability to specify models through config for simulation tests [PR #324](https://github.com/microsoft/vscode-copilot-chat/pull/324)\n- Add azure open ai support to simulator model config [PR #346](https://github.com/microsoft/vscode-copilot-chat/pull/346)\n\nContributions to `vscode-eslint` :\n\n- [@noritaka1166 (Noritaka Kobayashi)](https://github.com/noritaka1166): chore: fix typo in comment-out [PR #2031](https://github.com/microsoft/vscode-eslint/pull/2031)\n\nContributions to `vscode-js-debug` :\n\n- [@pilaoda (pilaoda)](https://github.com/pilaoda)\n- fix watch panel custom string representation. #2252 [PR #2253](https://github.com/microsoft/vscode-js-debug/pull/2253)\n- fix toString not work in Local Variables panel until all variables defined in scope #2254 [PR #2255](https://github.com/microsoft/vscode-js-debug/pull/2255)\n\nContributions to `vscode-json-languageservice` :\n\n- [@fengzilong (MO)](https://github.com/fengzilong): feat: allow format range to be undefined [PR #272](https://github.com/microsoft/vscode-json-languageservice/pull/272)\n\nContributions to `vscode-vsce` :\n\n- [@Adjective-Object (Max)](https://github.com/Adjective-Object): add `commonjs`\nannotation to package.json [PR #1179](https://github.com/microsoft/vscode-vsce/pull/1179)\n\nContributions to `debug-adapter-protocol` :\n\n- [@osiewicz (Piotr Osiewicz)](https://github.com/osiewicz): chore: Add Zed to the list of tools supporting DAP [PR #548](https://github.com/microsoft/debug-adapter-protocol/pull/548)\n\nContributions to `language-server-protocol` :\n\n- [@Leonidas-from-XIV (Marek Kubica)](https://github.com/Leonidas-from-XIV): ocaml-language-server does not exist anymore [PR #2165](https://github.com/microsoft/language-server-protocol/pull/2165)\n- [@osiewicz (Piotr Osiewicz)](https://github.com/osiewicz): chore: Add Zed to the list of implementors [PR #2164](https://github.com/microsoft/language-server-protocol/pull/2164)\n\nContributions to `python-environment-tools` :\n\n- [@renan-r-santos (Renan Santos)](https://github.com/renan-r-santos): Exclude Pixi environments from the Conda locator [PR #234](https://github.com/microsoft/python-environment-tools/pull/234)",
  "Tags": [
    "release"
  ],
  "Description": "Learn what is new in the Visual Studio Code July 2025 Release (1.103)\n\n[Read the full article](https://code.visualstudio.com/updates/v1_103)",
  "OutputDir": "_news",
  "FeedName": "Visual Studio Code Releases",
  "Author": "Visual Studio Code Team"
}
