name: PR Validation

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, ready_for_review]

# Allow cancellation of in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For PR validation, we check out the PR head
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            spec/javascript/package-lock.json
            spec/e2e/package-lock.json

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          cache-version: 1

      - name: Ensure Ruby gem bin in PATH
        shell: bash
        run: |
          # Add Ruby user gem bin directory to PATH for bundler availability
          if command -v ruby >/dev/null 2>&1; then
            RUBY_VERSION=$(ruby -e "puts RbConfig::CONFIG['ruby_version']" 2>/dev/null)
            if [ -n "$RUBY_VERSION" ]; then
              USER_GEM_BIN="$HOME/.local/share/gem/ruby/$RUBY_VERSION/bin"
              if [ -d "$USER_GEM_BIN" ]; then
                echo "$USER_GEM_BIN" >> $GITHUB_PATH
                echo "‚úÖ Added Ruby user gem bin directory to PATH: $USER_GEM_BIN"
              fi
            fi
          fi

      - name: Setup PowerShell
        shell: bash
        run: |
          if ! command -v pwsh &> /dev/null; then
            # Install PowerShell if not available
            wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y powershell
          fi

      - name: Install JavaScript dependencies
        run: |
          echo "Installing JavaScript test dependencies..."
          cd spec/javascript
          npm ci
          
          echo "Installing E2E test dependencies..."
          cd ../e2e
          npm ci

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module HtmlToMarkdown -AcceptLicense -Force
          Install-Module Pester -Force -SkipPublisherCheck -MinimumVersion "5.0.0" -Scope CurrentUser

      - name: Install Playwright browsers
        run: |
          cd spec/e2e
          npx playwright install-deps
          npx playwright install

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint on JavaScript files..."
          npx eslint assets/js/**/*.js --config eslint.config.js
          echo "‚úÖ ESLint passed!"

      - name: Run all tests
        run: |
          echo "üß™ Running comprehensive test suite..."
          pwsh -File run-all-tests.ps1
          echo "‚úÖ All tests passed!"

      - name: Validate Jekyll build
        run: |
          echo "üèóÔ∏è Validating Jekyll can build the site..."
          bundle exec jekyll build --destination /tmp/jekyll-build
          echo "‚úÖ Jekyll build validation passed!"

      - name: Check for broken links (basic)
        run: |
          echo "üîó Checking for obvious broken internal links..."
          # Basic check for common broken link patterns
          if grep -r "href=\"\"" _posts/ _news/ _videos/ _roundups/ _events/ _community/ 2>/dev/null; then
            echo "‚ùå Found empty href attributes"
            exit 1
          fi
          if grep -r "href=\"#\"" _posts/ _news/ _videos/ _roundups/ _events/ _community/ 2>/dev/null; then
            echo "‚ö†Ô∏è Found placeholder href=\"#\" - please verify these are intentional"
          fi
          echo "‚úÖ Basic link validation passed!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          skip-dirs: 'node_modules,spec'
          hide-progress: false
          limit-severities-for-sarif: true
          timeout: '10m'

      - name: Validate SARIF file was generated
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "‚úÖ SARIF file generated successfully"
            echo "File size: $(wc -c < trivy-results.sarif) bytes"
            echo "Number of results: $(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo 'Could not parse JSON')"
          else
            echo "‚ùå SARIF file was not generated"
            exit 1
          fi

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem-scan'
          
      - name: Handle SARIF upload failure
        if: always()
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "üîç Trivy scan completed successfully"
            echo "üìä Security scan results:"
            
            # Count vulnerabilities by severity
            CRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            TOTAL_COUNT=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "   Critical vulnerabilities: $CRITICAL_COUNT"
            echo "   High vulnerabilities: $HIGH_COUNT" 
            echo "   Total vulnerabilities: $TOTAL_COUNT"
            
            if [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è Vulnerabilities found but continuing (scan results saved as artifact)"
              echo "üí° Note: GitHub Advanced Security may not be enabled for SARIF upload to Security tab"
            else
              echo "‚úÖ No critical or high vulnerabilities detected"
            fi
          else
            echo "‚ùå SARIF file not found - scan may have failed"
            exit 1
          fi
          
      - name: Upload SARIF as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-sarif-results
          path: trivy-results.sarif
          retention-days: 30

  summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Generate PR summary
        run: |
          echo "## üéØ PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate.result }}" = "success" ]; then
            echo "‚úÖ **Tests & Validation**: All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Tests & Validation**: Failed - see logs for details" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "‚úÖ **Security Scan**: No critical issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Security Scan**: Issues detected - check Security tab" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.validate.result }}" = "success" ] && [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "- üéâ This PR is ready for review!" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üîß Please address the failing checks above" >> $GITHUB_STEP_SUMMARY
            echo "- üìñ See [testing guidelines](docs/testing-guidelines.md) for help" >> $GITHUB_STEP_SUMMARY
          fi